"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_scalar_api-client-react_dist_index_js"],{

/***/ "(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/index.css":
/*!**************************************************************!*\
  !*** ./node_modules/@scalar/api-client-react/dist/index.css ***!
  \**************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"32f2561f9c5f\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2NhbGFyL2FwaS1jbGllbnQtcmVhY3QvZGlzdC9pbmRleC5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2NhbGFyL2FwaS1jbGllbnQtcmVhY3QvZGlzdC9pbmRleC5jc3M/NzA2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjMyZjI1NjFmOWM1ZlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/index.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/index-DG086FZT.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@scalar/api-client-react/dist/index-DG086FZT.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: function() { return /* binding */ Ij; },\n/* harmony export */   a: function() { return /* binding */ D; },\n/* harmony export */   b: function() { return /* binding */ Wl; },\n/* harmony export */   c: function() { return /* binding */ ne; },\n/* harmony export */   d: function() { return /* binding */ Ej; },\n/* harmony export */   o: function() { return /* binding */ Z; }\n/* harmony export */ });\n/* harmony import */ var _index_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.css */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/index.css\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\nvar ih = { exports: {} }, la = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar im;\nfunction C_() {\n  if (im)\n    return la;\n  im = 1;\n  var t = react__WEBPACK_IMPORTED_MODULE_1__, e = Symbol.for(\"react.element\"), n = Symbol.for(\"react.fragment\"), r = Object.prototype.hasOwnProperty, i = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, s = { key: !0, ref: !0, __self: !0, __source: !0 };\n  function o(a, l, c) {\n    var u, d = {}, f = null, h = null;\n    c !== void 0 && (f = \"\" + c), l.key !== void 0 && (f = \"\" + l.key), l.ref !== void 0 && (h = l.ref);\n    for (u in l)\n      r.call(l, u) && !s.hasOwnProperty(u) && (d[u] = l[u]);\n    if (a && a.defaultProps)\n      for (u in l = a.defaultProps, l)\n        d[u] === void 0 && (d[u] = l[u]);\n    return { $$typeof: e, type: a, key: f, ref: h, props: d, _owner: i.current };\n  }\n  return la.Fragment = n, la.jsx = o, la.jsxs = o, la;\n}\nvar ca = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar sm;\nfunction A_() {\n  return sm || (sm = 1,  true && function() {\n    var t = react__WEBPACK_IMPORTED_MODULE_1__, e = Symbol.for(\"react.element\"), n = Symbol.for(\"react.portal\"), r = Symbol.for(\"react.fragment\"), i = Symbol.for(\"react.strict_mode\"), s = Symbol.for(\"react.profiler\"), o = Symbol.for(\"react.provider\"), a = Symbol.for(\"react.context\"), l = Symbol.for(\"react.forward_ref\"), c = Symbol.for(\"react.suspense\"), u = Symbol.for(\"react.suspense_list\"), d = Symbol.for(\"react.memo\"), f = Symbol.for(\"react.lazy\"), h = Symbol.for(\"react.offscreen\"), p = Symbol.iterator, O = \"@@iterator\";\n    function m(E) {\n      if (E === null || typeof E != \"object\")\n        return null;\n      var q = p && E[p] || E[O];\n      return typeof q == \"function\" ? q : null;\n    }\n    var y = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function b(E) {\n      {\n        for (var q = arguments.length, oe = new Array(q > 1 ? q - 1 : 0), xe = 1; xe < q; xe++)\n          oe[xe - 1] = arguments[xe];\n        g(\"error\", E, oe);\n      }\n    }\n    function g(E, q, oe) {\n      {\n        var xe = y.ReactDebugCurrentFrame, qe = xe.getStackAddendum();\n        qe !== \"\" && (q += \"%s\", oe = oe.concat([qe]));\n        var nt = oe.map(function(We) {\n          return String(We);\n        });\n        nt.unshift(\"Warning: \" + q), Function.prototype.apply.call(console[E], console, nt);\n      }\n    }\n    var v = !1, S = !1, w = !1, k = !1, _ = !1, T;\n    T = Symbol.for(\"react.module.reference\");\n    function C(E) {\n      return !!(typeof E == \"string\" || typeof E == \"function\" || E === r || E === s || _ || E === i || E === c || E === u || k || E === h || v || S || w || typeof E == \"object\" && E !== null && (E.$$typeof === f || E.$$typeof === d || E.$$typeof === o || E.$$typeof === a || E.$$typeof === l || // This needs to include all possible module reference object\n      // types supported by any Flight configuration anywhere since\n      // we don't know which Flight build this will end up being used\n      // with.\n      E.$$typeof === T || E.getModuleId !== void 0));\n    }\n    function A(E, q, oe) {\n      var xe = E.displayName;\n      if (xe)\n        return xe;\n      var qe = q.displayName || q.name || \"\";\n      return qe !== \"\" ? oe + \"(\" + qe + \")\" : oe;\n    }\n    function Q(E) {\n      return E.displayName || \"Context\";\n    }\n    function W(E) {\n      if (E == null)\n        return null;\n      if (typeof E.tag == \"number\" && b(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof E == \"function\")\n        return E.displayName || E.name || null;\n      if (typeof E == \"string\")\n        return E;\n      switch (E) {\n        case r:\n          return \"Fragment\";\n        case n:\n          return \"Portal\";\n        case s:\n          return \"Profiler\";\n        case i:\n          return \"StrictMode\";\n        case c:\n          return \"Suspense\";\n        case u:\n          return \"SuspenseList\";\n      }\n      if (typeof E == \"object\")\n        switch (E.$$typeof) {\n          case a:\n            var q = E;\n            return Q(q) + \".Consumer\";\n          case o:\n            var oe = E;\n            return Q(oe._context) + \".Provider\";\n          case l:\n            return A(E, E.render, \"ForwardRef\");\n          case d:\n            var xe = E.displayName || null;\n            return xe !== null ? xe : W(E.type) || \"Memo\";\n          case f: {\n            var qe = E, nt = qe._payload, We = qe._init;\n            try {\n              return W(We(nt));\n            } catch {\n              return null;\n            }\n          }\n        }\n      return null;\n    }\n    var L = Object.assign, re = 0, Y, K, B, _e, Ce, ue, ge;\n    function Be() {\n    }\n    Be.__reactDisabledLog = !0;\n    function Le() {\n      {\n        if (re === 0) {\n          Y = console.log, K = console.info, B = console.warn, _e = console.error, Ce = console.group, ue = console.groupCollapsed, ge = console.groupEnd;\n          var E = {\n            configurable: !0,\n            enumerable: !0,\n            value: Be,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            info: E,\n            log: E,\n            warn: E,\n            error: E,\n            group: E,\n            groupCollapsed: E,\n            groupEnd: E\n          });\n        }\n        re++;\n      }\n    }\n    function Zt() {\n      {\n        if (re--, re === 0) {\n          var E = {\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            log: L({}, E, {\n              value: Y\n            }),\n            info: L({}, E, {\n              value: K\n            }),\n            warn: L({}, E, {\n              value: B\n            }),\n            error: L({}, E, {\n              value: _e\n            }),\n            group: L({}, E, {\n              value: Ce\n            }),\n            groupCollapsed: L({}, E, {\n              value: ue\n            }),\n            groupEnd: L({}, E, {\n              value: ge\n            })\n          });\n        }\n        re < 0 && b(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n      }\n    }\n    var Vt = y.ReactCurrentDispatcher, It;\n    function Tn(E, q, oe) {\n      {\n        if (It === void 0)\n          try {\n            throw Error();\n          } catch (qe) {\n            var xe = qe.stack.trim().match(/\\n( *(at )?)/);\n            It = xe && xe[1] || \"\";\n          }\n        return `\n` + It + E;\n      }\n    }\n    var Sr = !1, or;\n    {\n      var En = typeof WeakMap == \"function\" ? WeakMap : Map;\n      or = new En();\n    }\n    function vi(E, q) {\n      if (!E || Sr)\n        return \"\";\n      {\n        var oe = or.get(E);\n        if (oe !== void 0)\n          return oe;\n      }\n      var xe;\n      Sr = !0;\n      var qe = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var nt;\n      nt = Vt.current, Vt.current = null, Le();\n      try {\n        if (q) {\n          var We = function() {\n            throw Error();\n          };\n          if (Object.defineProperty(We.prototype, \"props\", {\n            set: function() {\n              throw Error();\n            }\n          }), typeof Reflect == \"object\" && Reflect.construct) {\n            try {\n              Reflect.construct(We, []);\n            } catch (qr) {\n              xe = qr;\n            }\n            Reflect.construct(E, [], We);\n          } else {\n            try {\n              We.call();\n            } catch (qr) {\n              xe = qr;\n            }\n            E.call(We.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (qr) {\n            xe = qr;\n          }\n          E();\n        }\n      } catch (qr) {\n        if (qr && xe && typeof qr.stack == \"string\") {\n          for (var Ne = qr.stack.split(`\n`), dn = xe.stack.split(`\n`), St = Ne.length - 1, $t = dn.length - 1; St >= 1 && $t >= 0 && Ne[St] !== dn[$t]; )\n            $t--;\n          for (; St >= 1 && $t >= 0; St--, $t--)\n            if (Ne[St] !== dn[$t]) {\n              if (St !== 1 || $t !== 1)\n                do\n                  if (St--, $t--, $t < 0 || Ne[St] !== dn[$t]) {\n                    var qn = `\n` + Ne[St].replace(\" at new \", \" at \");\n                    return E.displayName && qn.includes(\"<anonymous>\") && (qn = qn.replace(\"<anonymous>\", E.displayName)), typeof E == \"function\" && or.set(E, qn), qn;\n                  }\n                while (St >= 1 && $t >= 0);\n              break;\n            }\n        }\n      } finally {\n        Sr = !1, Vt.current = nt, Zt(), Error.prepareStackTrace = qe;\n      }\n      var so = E ? E.displayName || E.name : \"\", rm = so ? Tn(so) : \"\";\n      return typeof E == \"function\" && or.set(E, rm), rm;\n    }\n    function Ur(E, q, oe) {\n      return vi(E, !1);\n    }\n    function x(E) {\n      var q = E.prototype;\n      return !!(q && q.isReactComponent);\n    }\n    function $(E, q, oe) {\n      if (E == null)\n        return \"\";\n      if (typeof E == \"function\")\n        return vi(E, x(E));\n      if (typeof E == \"string\")\n        return Tn(E);\n      switch (E) {\n        case c:\n          return Tn(\"Suspense\");\n        case u:\n          return Tn(\"SuspenseList\");\n      }\n      if (typeof E == \"object\")\n        switch (E.$$typeof) {\n          case l:\n            return Ur(E.render);\n          case d:\n            return $(E.type, q, oe);\n          case f: {\n            var xe = E, qe = xe._payload, nt = xe._init;\n            try {\n              return $(nt(qe), q, oe);\n            } catch {\n            }\n          }\n        }\n      return \"\";\n    }\n    var N = Object.prototype.hasOwnProperty, M = {}, X = y.ReactDebugCurrentFrame;\n    function z(E) {\n      if (E) {\n        var q = E._owner, oe = $(E.type, E._source, q ? q.type : null);\n        X.setExtraStackFrame(oe);\n      } else\n        X.setExtraStackFrame(null);\n    }\n    function ee(E, q, oe, xe, qe) {\n      {\n        var nt = Function.call.bind(N);\n        for (var We in E)\n          if (nt(E, We)) {\n            var Ne = void 0;\n            try {\n              if (typeof E[We] != \"function\") {\n                var dn = Error((xe || \"React class\") + \": \" + oe + \" type `\" + We + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof E[We] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                throw dn.name = \"Invariant Violation\", dn;\n              }\n              Ne = E[We](q, We, xe, oe, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n            } catch (St) {\n              Ne = St;\n            }\n            Ne && !(Ne instanceof Error) && (z(qe), b(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", xe || \"React class\", oe, We, typeof Ne), z(null)), Ne instanceof Error && !(Ne.message in M) && (M[Ne.message] = !0, z(qe), b(\"Failed %s type: %s\", oe, Ne.message), z(null));\n          }\n      }\n    }\n    var H = Array.isArray;\n    function F(E) {\n      return H(E);\n    }\n    function U(E) {\n      {\n        var q = typeof Symbol == \"function\" && Symbol.toStringTag, oe = q && E[Symbol.toStringTag] || E.constructor.name || \"Object\";\n        return oe;\n      }\n    }\n    function se(E) {\n      try {\n        return me(E), !1;\n      } catch {\n        return !0;\n      }\n    }\n    function me(E) {\n      return \"\" + E;\n    }\n    function he(E) {\n      if (se(E))\n        return b(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", U(E)), me(E);\n    }\n    var ye = y.ReactCurrentOwner, Qe = {\n      key: !0,\n      ref: !0,\n      __self: !0,\n      __source: !0\n    }, Ue, tt, bt;\n    bt = {};\n    function $n(E) {\n      if (N.call(E, \"ref\")) {\n        var q = Object.getOwnPropertyDescriptor(E, \"ref\").get;\n        if (q && q.isReactWarning)\n          return !1;\n      }\n      return E.ref !== void 0;\n    }\n    function yi(E) {\n      if (N.call(E, \"key\")) {\n        var q = Object.getOwnPropertyDescriptor(E, \"key\").get;\n        if (q && q.isReactWarning)\n          return !1;\n      }\n      return E.key !== void 0;\n    }\n    function ac(E, q) {\n      if (typeof E.ref == \"string\" && ye.current && q && ye.current.stateNode !== q) {\n        var oe = W(ye.current.type);\n        bt[oe] || (b('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', W(ye.current.type), E.ref), bt[oe] = !0);\n      }\n    }\n    function ps(E, q) {\n      {\n        var oe = function() {\n          Ue || (Ue = !0, b(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", q));\n        };\n        oe.isReactWarning = !0, Object.defineProperty(E, \"key\", {\n          get: oe,\n          configurable: !0\n        });\n      }\n    }\n    function lc(E, q) {\n      {\n        var oe = function() {\n          tt || (tt = !0, b(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", q));\n        };\n        oe.isReactWarning = !0, Object.defineProperty(E, \"ref\", {\n          get: oe,\n          configurable: !0\n        });\n      }\n    }\n    var Lt = function(E, q, oe, xe, qe, nt, We) {\n      var Ne = {\n        // This tag allows us to uniquely identify this as a React Element\n        $$typeof: e,\n        // Built-in properties that belong on the element\n        type: E,\n        key: q,\n        ref: oe,\n        props: We,\n        // Record the component responsible for creating this element.\n        _owner: nt\n      };\n      return Ne._store = {}, Object.defineProperty(Ne._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: !1\n      }), Object.defineProperty(Ne, \"_self\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: xe\n      }), Object.defineProperty(Ne, \"_source\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: qe\n      }), Object.freeze && (Object.freeze(Ne.props), Object.freeze(Ne)), Ne;\n    };\n    function Un(E, q, oe, xe, qe) {\n      {\n        var nt, We = {}, Ne = null, dn = null;\n        oe !== void 0 && (he(oe), Ne = \"\" + oe), yi(q) && (he(q.key), Ne = \"\" + q.key), $n(q) && (dn = q.ref, ac(q, qe));\n        for (nt in q)\n          N.call(q, nt) && !Qe.hasOwnProperty(nt) && (We[nt] = q[nt]);\n        if (E && E.defaultProps) {\n          var St = E.defaultProps;\n          for (nt in St)\n            We[nt] === void 0 && (We[nt] = St[nt]);\n        }\n        if (Ne || dn) {\n          var $t = typeof E == \"function\" ? E.displayName || E.name || \"Unknown\" : E;\n          Ne && ps(We, $t), dn && lc(We, $t);\n        }\n        return Lt(E, Ne, dn, qe, xe, ye.current, We);\n      }\n    }\n    var ro = y.ReactCurrentOwner, Gg = y.ReactDebugCurrentFrame;\n    function io(E) {\n      if (E) {\n        var q = E._owner, oe = $(E.type, E._source, q ? q.type : null);\n        Gg.setExtraStackFrame(oe);\n      } else\n        Gg.setExtraStackFrame(null);\n    }\n    var nf;\n    nf = !1;\n    function rf(E) {\n      return typeof E == \"object\" && E !== null && E.$$typeof === e;\n    }\n    function Kg() {\n      {\n        if (ro.current) {\n          var E = W(ro.current.type);\n          if (E)\n            return `\n\nCheck the render method of \\`` + E + \"`.\";\n        }\n        return \"\";\n      }\n    }\n    function S_(E) {\n      {\n        if (E !== void 0) {\n          var q = E.fileName.replace(/^.*[\\\\\\/]/, \"\"), oe = E.lineNumber;\n          return `\n\nCheck your code at ` + q + \":\" + oe + \".\";\n        }\n        return \"\";\n      }\n    }\n    var Jg = {};\n    function w_(E) {\n      {\n        var q = Kg();\n        if (!q) {\n          var oe = typeof E == \"string\" ? E : E.displayName || E.name;\n          oe && (q = `\n\nCheck the top-level render call using <` + oe + \">.\");\n        }\n        return q;\n      }\n    }\n    function em(E, q) {\n      {\n        if (!E._store || E._store.validated || E.key != null)\n          return;\n        E._store.validated = !0;\n        var oe = w_(q);\n        if (Jg[oe])\n          return;\n        Jg[oe] = !0;\n        var xe = \"\";\n        E && E._owner && E._owner !== ro.current && (xe = \" It was passed a child from \" + W(E._owner.type) + \".\"), io(E), b('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', oe, xe), io(null);\n      }\n    }\n    function tm(E, q) {\n      {\n        if (typeof E != \"object\")\n          return;\n        if (F(E))\n          for (var oe = 0; oe < E.length; oe++) {\n            var xe = E[oe];\n            rf(xe) && em(xe, q);\n          }\n        else if (rf(E))\n          E._store && (E._store.validated = !0);\n        else if (E) {\n          var qe = m(E);\n          if (typeof qe == \"function\" && qe !== E.entries)\n            for (var nt = qe.call(E), We; !(We = nt.next()).done; )\n              rf(We.value) && em(We.value, q);\n        }\n      }\n    }\n    function k_(E) {\n      {\n        var q = E.type;\n        if (q == null || typeof q == \"string\")\n          return;\n        var oe;\n        if (typeof q == \"function\")\n          oe = q.propTypes;\n        else if (typeof q == \"object\" && (q.$$typeof === l || // Note: Memo only checks outer props here.\n        // Inner props are checked in the reconciler.\n        q.$$typeof === d))\n          oe = q.propTypes;\n        else\n          return;\n        if (oe) {\n          var xe = W(q);\n          ee(oe, E.props, \"prop\", xe, E);\n        } else if (q.PropTypes !== void 0 && !nf) {\n          nf = !0;\n          var qe = W(q);\n          b(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", qe || \"Unknown\");\n        }\n        typeof q.getDefaultProps == \"function\" && !q.getDefaultProps.isReactClassApproved && b(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n      }\n    }\n    function x_(E) {\n      {\n        for (var q = Object.keys(E.props), oe = 0; oe < q.length; oe++) {\n          var xe = q[oe];\n          if (xe !== \"children\" && xe !== \"key\") {\n            io(E), b(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", xe), io(null);\n            break;\n          }\n        }\n        E.ref !== null && (io(E), b(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), io(null));\n      }\n    }\n    function nm(E, q, oe, xe, qe, nt) {\n      {\n        var We = C(E);\n        if (!We) {\n          var Ne = \"\";\n          (E === void 0 || typeof E == \"object\" && E !== null && Object.keys(E).length === 0) && (Ne += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n          var dn = S_(qe);\n          dn ? Ne += dn : Ne += Kg();\n          var St;\n          E === null ? St = \"null\" : F(E) ? St = \"array\" : E !== void 0 && E.$$typeof === e ? (St = \"<\" + (W(E.type) || \"Unknown\") + \" />\", Ne = \" Did you accidentally export a JSX literal instead of a component?\") : St = typeof E, b(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", St, Ne);\n        }\n        var $t = Un(E, q, oe, qe, nt);\n        if ($t == null)\n          return $t;\n        if (We) {\n          var qn = q.children;\n          if (qn !== void 0)\n            if (xe)\n              if (F(qn)) {\n                for (var so = 0; so < qn.length; so++)\n                  tm(qn[so], E);\n                Object.freeze && Object.freeze(qn);\n              } else\n                b(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n            else\n              tm(qn, E);\n        }\n        return E === r ? x_($t) : k_($t), $t;\n      }\n    }\n    function P_(E, q, oe) {\n      return nm(E, q, oe, !0);\n    }\n    function __(E, q, oe) {\n      return nm(E, q, oe, !1);\n    }\n    var T_ = __, E_ = P_;\n    ca.Fragment = r, ca.jsx = T_, ca.jsxs = E_;\n  }()), ca;\n}\n false ? 0 : ih.exports = A_();\nvar Hr = ih.exports;\n/**\n* @vue/shared v3.4.21\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\nfunction Bt(t, e) {\n  const n = new Set(t.split(\",\"));\n  return e ? (r) => n.has(r.toLowerCase()) : (r) => n.has(r);\n}\nconst Ve =  true ? Object.freeze({}) : 0, mo =  true ? Object.freeze([]) : 0, it = () => {\n}, zc = () => !1, oi = (t) => t.charCodeAt(0) === 111 && t.charCodeAt(1) === 110 && // uppercase letter\n(t.charCodeAt(2) > 122 || t.charCodeAt(2) < 97), mu = (t) => t.startsWith(\"onUpdate:\"), $e = Object.assign, Fp = (t, e) => {\n  const n = t.indexOf(e);\n  n > -1 && t.splice(n, 1);\n}, R_ = Object.prototype.hasOwnProperty, Ae = (t, e) => R_.call(t, e), ie = Array.isArray, Cs = (t) => ea(t) === \"[object Map]\", Gs = (t) => ea(t) === \"[object Set]\", om = (t) => ea(t) === \"[object Date]\", N_ = (t) => ea(t) === \"[object RegExp]\", be = (t) => typeof t == \"function\", we = (t) => typeof t == \"string\", Or = (t) => typeof t == \"symbol\", Ze = (t) => t !== null && typeof t == \"object\", dd = (t) => (Ze(t) || be(t)) && be(t.then) && be(t.catch), hy = Object.prototype.toString, ea = (t) => hy.call(t), Gp = (t) => ea(t).slice(8, -1), py = (t) => ea(t) === \"[object Object]\", Kp = (t) => we(t) && t !== \"NaN\" && t[0] !== \"-\" && \"\" + parseInt(t, 10) === t, Ui = /* @__PURE__ */ Bt(\n  // the leading comma is intentional so empty string \"\" is also included\n  \",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted\"\n), Oy = /* @__PURE__ */ Bt(\n  \"bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo\"\n), fd = (t) => {\n  const e = /* @__PURE__ */ Object.create(null);\n  return (n) => e[n] || (e[n] = t(n));\n}, D_ = /-(\\w)/g, mt = fd((t) => t.replace(D_, (e, n) => n ? n.toUpperCase() : \"\")), Z_ = /\\B([A-Z])/g, rn = fd(\n  (t) => t.replace(Z_, \"-$1\").toLowerCase()\n), Wr = fd((t) => t.charAt(0).toUpperCase() + t.slice(1)), Tr = fd((t) => t ? `on${Wr(t)}` : \"\"), gr = (t, e) => !Object.is(t, e), Ii = (t, e) => {\n  for (let n = 0; n < t.length; n++)\n    t[n](e);\n}, bu = (t, e, n) => {\n  Object.defineProperty(t, e, {\n    configurable: !0,\n    enumerable: !1,\n    value: n\n  });\n}, Ka = (t) => {\n  const e = parseFloat(t);\n  return isNaN(e) ? t : e;\n}, vu = (t) => {\n  const e = we(t) ? Number(t) : NaN;\n  return isNaN(e) ? t : e;\n};\nlet am;\nconst bo = () => am || (am = typeof globalThis < \"u\" ? globalThis : typeof self < \"u\" ? self : typeof window < \"u\" ? window : typeof global < \"u\" ? global : {}), Dr = {\n  1: \"TEXT\",\n  2: \"CLASS\",\n  4: \"STYLE\",\n  8: \"PROPS\",\n  16: \"FULL_PROPS\",\n  32: \"NEED_HYDRATION\",\n  64: \"STABLE_FRAGMENT\",\n  128: \"KEYED_FRAGMENT\",\n  256: \"UNKEYED_FRAGMENT\",\n  512: \"NEED_PATCH\",\n  1024: \"DYNAMIC_SLOTS\",\n  2048: \"DEV_ROOT_FRAGMENT\",\n  [-1]: \"HOISTED\",\n  [-2]: \"BAIL\"\n}, V_ = {\n  1: \"STABLE\",\n  2: \"DYNAMIC\",\n  3: \"FORWARDED\"\n}, I_ = \"Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error\", W_ = /* @__PURE__ */ Bt(I_), lm = 2;\nfunction M_(t, e = 0, n = t.length) {\n  let r = t.split(/(\\r?\\n)/);\n  const i = r.filter((a, l) => l % 2 === 1);\n  r = r.filter((a, l) => l % 2 === 0);\n  let s = 0;\n  const o = [];\n  for (let a = 0; a < r.length; a++)\n    if (s += r[a].length + (i[a] && i[a].length || 0), s >= e) {\n      for (let l = a - lm; l <= a + lm || n > s; l++) {\n        if (l < 0 || l >= r.length)\n          continue;\n        const c = l + 1;\n        o.push(\n          `${c}${\" \".repeat(Math.max(3 - String(c).length, 0))}|  ${r[l]}`\n        );\n        const u = r[l].length, d = i[l] && i[l].length || 0;\n        if (l === a) {\n          const f = e - (s - (u + d)), h = Math.max(\n            1,\n            n > s ? u - f : n - e\n          );\n          o.push(\"   |  \" + \" \".repeat(f) + \"^\".repeat(h));\n        } else if (l > a) {\n          if (n > s) {\n            const f = Math.max(Math.min(n - s, u), 1);\n            o.push(\"   |  \" + \"^\".repeat(f));\n          }\n          s += u + d;\n        }\n      }\n      break;\n    }\n  return o.join(`\n`);\n}\nfunction Br(t) {\n  if (ie(t)) {\n    const e = {};\n    for (let n = 0; n < t.length; n++) {\n      const r = t[n], i = we(r) ? gy(r) : Br(r);\n      if (i)\n        for (const s in i)\n          e[s] = i[s];\n    }\n    return e;\n  } else if (we(t) || Ze(t))\n    return t;\n}\nconst X_ = /;(?![^(]*\\))/g, j_ = /:([^]+)/, B_ = /\\/\\*[^]*?\\*\\//g;\nfunction gy(t) {\n  const e = {};\n  return t.replace(B_, \"\").split(X_).forEach((n) => {\n    if (n) {\n      const r = n.split(j_);\n      r.length > 1 && (e[r[0].trim()] = r[1].trim());\n    }\n  }), e;\n}\nfunction L_(t) {\n  let e = \"\";\n  if (!t || we(t))\n    return e;\n  for (const n in t) {\n    const r = t[n], i = n.startsWith(\"--\") ? n : rn(n);\n    (we(r) || typeof r == \"number\") && (e += `${i}:${r};`);\n  }\n  return e;\n}\nfunction Ke(t) {\n  let e = \"\";\n  if (we(t))\n    e = t;\n  else if (ie(t))\n    for (let n = 0; n < t.length; n++) {\n      const r = Ke(t[n]);\n      r && (e += r + \" \");\n    }\n  else if (Ze(t))\n    for (const n in t)\n      t[n] && (e += n + \" \");\n  return e.trim();\n}\nfunction my(t) {\n  if (!t)\n    return null;\n  let { class: e, style: n } = t;\n  return e && !we(e) && (t.class = Ke(e)), n && (t.style = Br(n)), t;\n}\nconst U_ = \"html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot\", q_ = \"svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view\", Y_ = \"annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics\", z_ = \"area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr\", by = /* @__PURE__ */ Bt(U_), vy = /* @__PURE__ */ Bt(q_), yy = /* @__PURE__ */ Bt(Y_), H_ = /* @__PURE__ */ Bt(z_), Sy = \"itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly\", F_ = /* @__PURE__ */ Bt(Sy), cm = /* @__PURE__ */ Bt(\n  Sy + \",async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected\"\n);\nfunction Jp(t) {\n  return !!t || t === \"\";\n}\nconst G_ = /* @__PURE__ */ Bt(\n  \"accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap\"\n), K_ = /* @__PURE__ */ Bt(\n  \"xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan\"\n);\nfunction J_(t) {\n  if (t == null)\n    return !1;\n  const e = typeof t;\n  return e === \"string\" || e === \"number\" || e === \"boolean\";\n}\nfunction eT(t, e) {\n  if (t.length !== e.length)\n    return !1;\n  let n = !0;\n  for (let r = 0; n && r < t.length; r++)\n    n = ts(t[r], e[r]);\n  return n;\n}\nfunction ts(t, e) {\n  if (t === e)\n    return !0;\n  let n = om(t), r = om(e);\n  if (n || r)\n    return n && r ? t.getTime() === e.getTime() : !1;\n  if (n = Or(t), r = Or(e), n || r)\n    return t === e;\n  if (n = ie(t), r = ie(e), n || r)\n    return n && r ? eT(t, e) : !1;\n  if (n = Ze(t), r = Ze(e), n || r) {\n    if (!n || !r)\n      return !1;\n    const i = Object.keys(t).length, s = Object.keys(e).length;\n    if (i !== s)\n      return !1;\n    for (const o in t) {\n      const a = t.hasOwnProperty(o), l = e.hasOwnProperty(o);\n      if (a && !l || !a && l || !ts(t[o], e[o]))\n        return !1;\n    }\n  }\n  return String(t) === String(e);\n}\nfunction hd(t, e) {\n  return t.findIndex((n) => ts(n, e));\n}\nconst De = (t) => we(t) ? t : t == null ? \"\" : ie(t) || Ze(t) && (t.toString === hy || !be(t.toString)) ? JSON.stringify(t, wy, 2) : String(t), wy = (t, e) => e && e.__v_isRef ? wy(t, e.value) : Cs(e) ? {\n  [`Map(${e.size})`]: [...e.entries()].reduce(\n    (n, [r, i], s) => (n[sf(r, s) + \" =>\"] = i, n),\n    {}\n  )\n} : Gs(e) ? {\n  [`Set(${e.size})`]: [...e.values()].map((n) => sf(n))\n} : Or(e) ? sf(e) : Ze(e) && !ie(e) && !py(e) ? String(e) : e, sf = (t, e = \"\") => {\n  var n;\n  return Or(t) ? `Symbol(${(n = t.description) != null ? n : e})` : t;\n};\n/**\n* @vue/reactivity v3.4.21\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\nfunction Mr(t, ...e) {\n  console.warn(`[Vue warn] ${t}`, ...e);\n}\nlet An;\nclass eO {\n  constructor(e = !1) {\n    this.detached = e, this._active = !0, this.effects = [], this.cleanups = [], this.parent = An, !e && An && (this.index = (An.scopes || (An.scopes = [])).push(\n      this\n    ) - 1);\n  }\n  get active() {\n    return this._active;\n  }\n  run(e) {\n    if (this._active) {\n      const n = An;\n      try {\n        return An = this, e();\n      } finally {\n        An = n;\n      }\n    } else\n       true && Mr(\"cannot run an inactive effect scope.\");\n  }\n  /**\n   * This should only be called on non-detached scopes\n   * @internal\n   */\n  on() {\n    An = this;\n  }\n  /**\n   * This should only be called on non-detached scopes\n   * @internal\n   */\n  off() {\n    An = this.parent;\n  }\n  stop(e) {\n    if (this._active) {\n      let n, r;\n      for (n = 0, r = this.effects.length; n < r; n++)\n        this.effects[n].stop();\n      for (n = 0, r = this.cleanups.length; n < r; n++)\n        this.cleanups[n]();\n      if (this.scopes)\n        for (n = 0, r = this.scopes.length; n < r; n++)\n          this.scopes[n].stop(!0);\n      if (!this.detached && this.parent && !e) {\n        const i = this.parent.scopes.pop();\n        i && i !== this && (this.parent.scopes[this.index] = i, i.index = this.index);\n      }\n      this.parent = void 0, this._active = !1;\n    }\n  }\n}\nfunction tT(t) {\n  return new eO(t);\n}\nfunction ky(t, e = An) {\n  e && e.active && e.effects.push(t);\n}\nfunction Rl() {\n  return An;\n}\nfunction tO(t) {\n  An ? An.cleanups.push(t) :  true && Mr(\n    \"onScopeDispose() is called when there is no active effect scope to be associated with.\"\n  );\n}\nlet As;\nclass Ao {\n  constructor(e, n, r, i) {\n    this.fn = e, this.trigger = n, this.scheduler = r, this.active = !0, this.deps = [], this._dirtyLevel = 4, this._trackId = 0, this._runnings = 0, this._shouldSchedule = !1, this._depsLength = 0, ky(this, i);\n  }\n  get dirty() {\n    if (this._dirtyLevel === 2 || this._dirtyLevel === 3) {\n      this._dirtyLevel = 1, ds();\n      for (let e = 0; e < this._depsLength; e++) {\n        const n = this.deps[e];\n        if (n.computed && (nT(n.computed), this._dirtyLevel >= 4))\n          break;\n      }\n      this._dirtyLevel === 1 && (this._dirtyLevel = 0), fs();\n    }\n    return this._dirtyLevel >= 4;\n  }\n  set dirty(e) {\n    this._dirtyLevel = e ? 4 : 0;\n  }\n  run() {\n    if (this._dirtyLevel = 0, !this.active)\n      return this.fn();\n    let e = qi, n = As;\n    try {\n      return qi = !0, As = this, this._runnings++, um(this), this.fn();\n    } finally {\n      dm(this), this._runnings--, As = n, qi = e;\n    }\n  }\n  stop() {\n    var e;\n    this.active && (um(this), dm(this), (e = this.onStop) == null || e.call(this), this.active = !1);\n  }\n}\nfunction nT(t) {\n  return t.value;\n}\nfunction um(t) {\n  t._trackId++, t._depsLength = 0;\n}\nfunction dm(t) {\n  if (t.deps.length > t._depsLength) {\n    for (let e = t._depsLength; e < t.deps.length; e++)\n      xy(t.deps[e], t);\n    t.deps.length = t._depsLength;\n  }\n}\nfunction xy(t, e) {\n  const n = t.get(e);\n  n !== void 0 && e._trackId !== n && (t.delete(e), t.size === 0 && t.cleanup());\n}\nfunction rT(t, e) {\n  t.effect instanceof Ao && (t = t.effect.fn);\n  const n = new Ao(t, it, () => {\n    n.dirty && n.run();\n  });\n  e && ($e(n, e), e.scope && ky(n, e.scope)), (!e || !e.lazy) && n.run();\n  const r = n.run.bind(n);\n  return r.effect = n, r;\n}\nfunction iT(t) {\n  t.effect.stop();\n}\nlet qi = !0, sh = 0;\nconst Py = [];\nfunction ds() {\n  Py.push(qi), qi = !1;\n}\nfunction fs() {\n  const t = Py.pop();\n  qi = t === void 0 ? !0 : t;\n}\nfunction nO() {\n  sh++;\n}\nfunction rO() {\n  for (sh--; !sh && oh.length; )\n    oh.shift()();\n}\nfunction _y(t, e, n) {\n  var r;\n  if (e.get(t) !== t._trackId) {\n    e.set(t, t._trackId);\n    const i = t.deps[t._depsLength];\n    i !== e ? (i && xy(i, t), t.deps[t._depsLength++] = e) : t._depsLength++,  true && ((r = t.onTrack) == null || r.call(t, $e({ effect: t }, n)));\n  }\n}\nconst oh = [];\nfunction Ty(t, e, n) {\n  var r;\n  nO();\n  for (const i of t.keys()) {\n    let s;\n    i._dirtyLevel < e && (s ?? (s = t.get(i) === i._trackId)) && (i._shouldSchedule || (i._shouldSchedule = i._dirtyLevel === 0), i._dirtyLevel = e), i._shouldSchedule && (s ?? (s = t.get(i) === i._trackId)) && ( true && ((r = i.onTrigger) == null || r.call(i, $e({ effect: i }, n))), i.trigger(), (!i._runnings || i.allowRecurse) && i._dirtyLevel !== 2 && (i._shouldSchedule = !1, i.scheduler && oh.push(i.scheduler)));\n  }\n  rO();\n}\nconst Ey = (t, e) => {\n  const n = /* @__PURE__ */ new Map();\n  return n.cleanup = t, n.computed = e, n;\n}, yu = /* @__PURE__ */ new WeakMap(), Rs = Symbol( true ? \"iterate\" : 0), ah = Symbol( true ? \"Map key iterate\" : 0);\nfunction Kt(t, e, n) {\n  if (qi && As) {\n    let r = yu.get(t);\n    r || yu.set(t, r = /* @__PURE__ */ new Map());\n    let i = r.get(n);\n    i || r.set(n, i = Ey(() => r.delete(n))), _y(\n      As,\n      i,\n       true ? {\n        target: t,\n        type: e,\n        key: n\n      } : 0\n    );\n  }\n}\nfunction Zr(t, e, n, r, i, s) {\n  const o = yu.get(t);\n  if (!o)\n    return;\n  let a = [];\n  if (e === \"clear\")\n    a = [...o.values()];\n  else if (n === \"length\" && ie(t)) {\n    const l = Number(r);\n    o.forEach((c, u) => {\n      (u === \"length\" || !Or(u) && u >= l) && a.push(c);\n    });\n  } else\n    switch (n !== void 0 && a.push(o.get(n)), e) {\n      case \"add\":\n        ie(t) ? Kp(n) && a.push(o.get(\"length\")) : (a.push(o.get(Rs)), Cs(t) && a.push(o.get(ah)));\n        break;\n      case \"delete\":\n        ie(t) || (a.push(o.get(Rs)), Cs(t) && a.push(o.get(ah)));\n        break;\n      case \"set\":\n        Cs(t) && a.push(o.get(Rs));\n        break;\n    }\n  nO();\n  for (const l of a)\n    l && Ty(\n      l,\n      4,\n       true ? {\n        target: t,\n        type: e,\n        key: n,\n        newValue: r,\n        oldValue: i,\n        oldTarget: s\n      } : 0\n    );\n  rO();\n}\nfunction sT(t, e) {\n  var n;\n  return (n = yu.get(t)) == null ? void 0 : n.get(e);\n}\nconst oT = /* @__PURE__ */ Bt(\"__proto__,__v_isRef,__isVue\"), $y = new Set(\n  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((t) => t !== \"arguments\" && t !== \"caller\").map((t) => Symbol[t]).filter(Or)\n), fm = /* @__PURE__ */ aT();\nfunction aT() {\n  const t = {};\n  return [\"includes\", \"indexOf\", \"lastIndexOf\"].forEach((e) => {\n    t[e] = function(...n) {\n      const r = Oe(this);\n      for (let s = 0, o = this.length; s < o; s++)\n        Kt(r, \"get\", s + \"\");\n      const i = r[e](...n);\n      return i === -1 || i === !1 ? r[e](...n.map(Oe)) : i;\n    };\n  }), [\"push\", \"pop\", \"shift\", \"unshift\", \"splice\"].forEach((e) => {\n    t[e] = function(...n) {\n      ds(), nO();\n      const r = Oe(this)[e].apply(this, n);\n      return rO(), fs(), r;\n    };\n  }), t;\n}\nfunction lT(t) {\n  const e = Oe(this);\n  return Kt(e, \"has\", t), e.hasOwnProperty(t);\n}\nclass Qy {\n  constructor(e = !1, n = !1) {\n    this._isReadonly = e, this._isShallow = n;\n  }\n  get(e, n, r) {\n    const i = this._isReadonly, s = this._isShallow;\n    if (n === \"__v_isReactive\")\n      return !i;\n    if (n === \"__v_isReadonly\")\n      return i;\n    if (n === \"__v_isShallow\")\n      return s;\n    if (n === \"__v_raw\")\n      return r === (i ? s ? Vy : Zy : s ? Dy : Ny).get(e) || // receiver is not the reactive proxy, but has the same prototype\n      // this means the reciever is a user proxy of the reactive proxy\n      Object.getPrototypeOf(e) === Object.getPrototypeOf(r) ? e : void 0;\n    const o = ie(e);\n    if (!i) {\n      if (o && Ae(fm, n))\n        return Reflect.get(fm, n, r);\n      if (n === \"hasOwnProperty\")\n        return lT;\n    }\n    const a = Reflect.get(e, n, r);\n    return (Or(n) ? $y.has(n) : oT(n)) || (i || Kt(e, \"get\", n), s) ? a : Ct(a) ? o && Kp(n) ? a : a.value : Ze(a) ? i ? sO(a) : Xn(a) : a;\n  }\n}\nclass Cy extends Qy {\n  constructor(e = !1) {\n    super(!1, e);\n  }\n  set(e, n, r, i) {\n    let s = e[n];\n    if (!this._isShallow) {\n      const l = ai(s);\n      if (!zi(r) && !ai(r) && (s = Oe(s), r = Oe(r)), !ie(e) && Ct(s) && !Ct(r))\n        return l ? !1 : (s.value = r, !0);\n    }\n    const o = ie(e) && Kp(n) ? Number(n) < e.length : Ae(e, n), a = Reflect.set(e, n, r, i);\n    return e === Oe(i) && (o ? gr(r, s) && Zr(e, \"set\", n, r, s) : Zr(e, \"add\", n, r)), a;\n  }\n  deleteProperty(e, n) {\n    const r = Ae(e, n), i = e[n], s = Reflect.deleteProperty(e, n);\n    return s && r && Zr(e, \"delete\", n, void 0, i), s;\n  }\n  has(e, n) {\n    const r = Reflect.has(e, n);\n    return (!Or(n) || !$y.has(n)) && Kt(e, \"has\", n), r;\n  }\n  ownKeys(e) {\n    return Kt(\n      e,\n      \"iterate\",\n      ie(e) ? \"length\" : Rs\n    ), Reflect.ownKeys(e);\n  }\n}\nclass Ay extends Qy {\n  constructor(e = !1) {\n    super(!0, e);\n  }\n  set(e, n) {\n    return  true && Mr(\n      `Set operation on key \"${String(n)}\" failed: target is readonly.`,\n      e\n    ), !0;\n  }\n  deleteProperty(e, n) {\n    return  true && Mr(\n      `Delete operation on key \"${String(n)}\" failed: target is readonly.`,\n      e\n    ), !0;\n  }\n}\nconst cT = /* @__PURE__ */ new Cy(), uT = /* @__PURE__ */ new Ay(), dT = /* @__PURE__ */ new Cy(\n  !0\n), fT = /* @__PURE__ */ new Ay(!0), iO = (t) => t, pd = (t) => Reflect.getPrototypeOf(t);\nfunction cc(t, e, n = !1, r = !1) {\n  t = t.__v_raw;\n  const i = Oe(t), s = Oe(e);\n  n || (gr(e, s) && Kt(i, \"get\", e), Kt(i, \"get\", s));\n  const { has: o } = pd(i), a = r ? iO : n ? aO : el;\n  if (o.call(i, e))\n    return a(t.get(e));\n  if (o.call(i, s))\n    return a(t.get(s));\n  t !== i && t.get(e);\n}\nfunction uc(t, e = !1) {\n  const n = this.__v_raw, r = Oe(n), i = Oe(t);\n  return e || (gr(t, i) && Kt(r, \"has\", t), Kt(r, \"has\", i)), t === i ? n.has(t) : n.has(t) || n.has(i);\n}\nfunction dc(t, e = !1) {\n  return t = t.__v_raw, !e && Kt(Oe(t), \"iterate\", Rs), Reflect.get(t, \"size\", t);\n}\nfunction hm(t) {\n  t = Oe(t);\n  const e = Oe(this);\n  return pd(e).has.call(e, t) || (e.add(t), Zr(e, \"add\", t, t)), this;\n}\nfunction pm(t, e) {\n  e = Oe(e);\n  const n = Oe(this), { has: r, get: i } = pd(n);\n  let s = r.call(n, t);\n  s ?  true && Ry(n, r, t) : (t = Oe(t), s = r.call(n, t));\n  const o = i.call(n, t);\n  return n.set(t, e), s ? gr(e, o) && Zr(n, \"set\", t, e, o) : Zr(n, \"add\", t, e), this;\n}\nfunction Om(t) {\n  const e = Oe(this), { has: n, get: r } = pd(e);\n  let i = n.call(e, t);\n  i ?  true && Ry(e, n, t) : (t = Oe(t), i = n.call(e, t));\n  const s = r ? r.call(e, t) : void 0, o = e.delete(t);\n  return i && Zr(e, \"delete\", t, void 0, s), o;\n}\nfunction gm() {\n  const t = Oe(this), e = t.size !== 0, n =  true ? Cs(t) ? new Map(t) : new Set(t) : 0, r = t.clear();\n  return e && Zr(t, \"clear\", void 0, void 0, n), r;\n}\nfunction fc(t, e) {\n  return function(r, i) {\n    const s = this, o = s.__v_raw, a = Oe(o), l = e ? iO : t ? aO : el;\n    return !t && Kt(a, \"iterate\", Rs), o.forEach((c, u) => r.call(i, l(c), l(u), s));\n  };\n}\nfunction hc(t, e, n) {\n  return function(...r) {\n    const i = this.__v_raw, s = Oe(i), o = Cs(s), a = t === \"entries\" || t === Symbol.iterator && o, l = t === \"keys\" && o, c = i[t](...r), u = n ? iO : e ? aO : el;\n    return !e && Kt(\n      s,\n      \"iterate\",\n      l ? ah : Rs\n    ), {\n      // iterator protocol\n      next() {\n        const { value: d, done: f } = c.next();\n        return f ? { value: d, done: f } : {\n          value: a ? [u(d[0]), u(d[1])] : u(d),\n          done: f\n        };\n      },\n      // iterable protocol\n      [Symbol.iterator]() {\n        return this;\n      }\n    };\n  };\n}\nfunction Si(t) {\n  return function(...e) {\n    if (true) {\n      const n = e[0] ? `on key \"${e[0]}\" ` : \"\";\n      Mr(\n        `${Wr(t)} operation ${n}failed: target is readonly.`,\n        Oe(this)\n      );\n    }\n    return t === \"delete\" ? !1 : t === \"clear\" ? void 0 : this;\n  };\n}\nfunction hT() {\n  const t = {\n    get(s) {\n      return cc(this, s);\n    },\n    get size() {\n      return dc(this);\n    },\n    has: uc,\n    add: hm,\n    set: pm,\n    delete: Om,\n    clear: gm,\n    forEach: fc(!1, !1)\n  }, e = {\n    get(s) {\n      return cc(this, s, !1, !0);\n    },\n    get size() {\n      return dc(this);\n    },\n    has: uc,\n    add: hm,\n    set: pm,\n    delete: Om,\n    clear: gm,\n    forEach: fc(!1, !0)\n  }, n = {\n    get(s) {\n      return cc(this, s, !0);\n    },\n    get size() {\n      return dc(this, !0);\n    },\n    has(s) {\n      return uc.call(this, s, !0);\n    },\n    add: Si(\"add\"),\n    set: Si(\"set\"),\n    delete: Si(\"delete\"),\n    clear: Si(\"clear\"),\n    forEach: fc(!0, !1)\n  }, r = {\n    get(s) {\n      return cc(this, s, !0, !0);\n    },\n    get size() {\n      return dc(this, !0);\n    },\n    has(s) {\n      return uc.call(this, s, !0);\n    },\n    add: Si(\"add\"),\n    set: Si(\"set\"),\n    delete: Si(\"delete\"),\n    clear: Si(\"clear\"),\n    forEach: fc(!0, !0)\n  };\n  return [\"keys\", \"values\", \"entries\", Symbol.iterator].forEach((s) => {\n    t[s] = hc(\n      s,\n      !1,\n      !1\n    ), n[s] = hc(\n      s,\n      !0,\n      !1\n    ), e[s] = hc(\n      s,\n      !1,\n      !0\n    ), r[s] = hc(\n      s,\n      !0,\n      !0\n    );\n  }), [\n    t,\n    n,\n    e,\n    r\n  ];\n}\nconst [\n  pT,\n  OT,\n  gT,\n  mT\n] = /* @__PURE__ */ hT();\nfunction Od(t, e) {\n  const n = e ? t ? mT : gT : t ? OT : pT;\n  return (r, i, s) => i === \"__v_isReactive\" ? !t : i === \"__v_isReadonly\" ? t : i === \"__v_raw\" ? r : Reflect.get(\n    Ae(n, i) && i in r ? n : r,\n    i,\n    s\n  );\n}\nconst bT = {\n  get: /* @__PURE__ */ Od(!1, !1)\n}, vT = {\n  get: /* @__PURE__ */ Od(!1, !0)\n}, yT = {\n  get: /* @__PURE__ */ Od(!0, !1)\n}, ST = {\n  get: /* @__PURE__ */ Od(!0, !0)\n};\nfunction Ry(t, e, n) {\n  const r = Oe(n);\n  if (r !== n && e.call(t, r)) {\n    const i = Gp(t);\n    Mr(\n      `Reactive ${i} contains both the raw and reactive versions of the same object${i === \"Map\" ? \" as keys\" : \"\"}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`\n    );\n  }\n}\nconst Ny = /* @__PURE__ */ new WeakMap(), Dy = /* @__PURE__ */ new WeakMap(), Zy = /* @__PURE__ */ new WeakMap(), Vy = /* @__PURE__ */ new WeakMap();\nfunction wT(t) {\n  switch (t) {\n    case \"Object\":\n    case \"Array\":\n      return 1;\n    case \"Map\":\n    case \"Set\":\n    case \"WeakMap\":\n    case \"WeakSet\":\n      return 2;\n    default:\n      return 0;\n  }\n}\nfunction kT(t) {\n  return t.__v_skip || !Object.isExtensible(t) ? 0 : wT(Gp(t));\n}\nfunction Xn(t) {\n  return ai(t) ? t : gd(\n    t,\n    !1,\n    cT,\n    bT,\n    Ny\n  );\n}\nfunction Iy(t) {\n  return gd(\n    t,\n    !1,\n    dT,\n    vT,\n    Dy\n  );\n}\nfunction sO(t) {\n  return gd(\n    t,\n    !0,\n    uT,\n    yT,\n    Zy\n  );\n}\nfunction Dn(t) {\n  return gd(\n    t,\n    !0,\n    fT,\n    ST,\n    Vy\n  );\n}\nfunction gd(t, e, n, r, i) {\n  if (!Ze(t))\n    return  true && Mr(`value cannot be made reactive: ${String(t)}`), t;\n  if (t.__v_raw && !(e && t.__v_isReactive))\n    return t;\n  const s = i.get(t);\n  if (s)\n    return s;\n  const o = kT(t);\n  if (o === 0)\n    return t;\n  const a = new Proxy(\n    t,\n    o === 2 ? r : n\n  );\n  return i.set(t, a), a;\n}\nfunction Yi(t) {\n  return ai(t) ? Yi(t.__v_raw) : !!(t && t.__v_isReactive);\n}\nfunction ai(t) {\n  return !!(t && t.__v_isReadonly);\n}\nfunction zi(t) {\n  return !!(t && t.__v_isShallow);\n}\nfunction Ja(t) {\n  return Yi(t) || ai(t);\n}\nfunction Oe(t) {\n  const e = t && t.__v_raw;\n  return e ? Oe(e) : t;\n}\nfunction oO(t) {\n  return Object.isExtensible(t) && bu(t, \"__v_skip\", !0), t;\n}\nconst el = (t) => Ze(t) ? Xn(t) : t, aO = (t) => Ze(t) ? sO(t) : t, xT = \"Computed is still dirty after getter evaluation, likely because a computed is mutating its own dependency in its getter. State mutations in computed getters should be avoided.  Check the docs for more details: https://vuejs.org/guide/essentials/computed.html#getters-should-be-side-effect-free\";\nclass Wy {\n  constructor(e, n, r, i) {\n    this.getter = e, this._setter = n, this.dep = void 0, this.__v_isRef = !0, this.__v_isReadonly = !1, this.effect = new Ao(\n      () => e(this._value),\n      () => vo(\n        this,\n        this.effect._dirtyLevel === 2 ? 2 : 3\n      )\n    ), this.effect.computed = this, this.effect.active = this._cacheable = !i, this.__v_isReadonly = r;\n  }\n  get value() {\n    const e = Oe(this);\n    return (!e._cacheable || e.effect.dirty) && gr(e._value, e._value = e.effect.run()) && vo(e, 4), lO(e), e.effect._dirtyLevel >= 2 && ( true && this._warnRecursive && Mr(xT, `\n\ngetter: `, this.getter), vo(e, 2)), e._value;\n  }\n  set value(e) {\n    this._setter(e);\n  }\n  // #region polyfill _dirty for backward compatibility third party code for Vue <= 3.3.x\n  get _dirty() {\n    return this.effect.dirty;\n  }\n  set _dirty(e) {\n    this.effect.dirty = e;\n  }\n  // #endregion\n}\nfunction PT(t, e, n = !1) {\n  let r, i;\n  const s = be(t);\n  s ? (r = t, i =  true ? () => {\n    Mr(\"Write operation failed: computed value is readonly\");\n  } : 0) : (r = t.get, i = t.set);\n  const o = new Wy(r, i, s || !i, n);\n  return  true && e && !n && (o.effect.onTrack = e.onTrack, o.effect.onTrigger = e.onTrigger), o;\n}\nfunction lO(t) {\n  var e;\n  qi && As && (t = Oe(t), _y(\n    As,\n    (e = t.dep) != null ? e : t.dep = Ey(\n      () => t.dep = void 0,\n      t instanceof Wy ? t : void 0\n    ),\n     true ? {\n      target: t,\n      type: \"get\",\n      key: \"value\"\n    } : 0\n  ));\n}\nfunction vo(t, e = 4, n) {\n  t = Oe(t);\n  const r = t.dep;\n  r && Ty(\n    r,\n    e,\n     true ? {\n      target: t,\n      type: \"set\",\n      key: \"value\",\n      newValue: n\n    } : 0\n  );\n}\nfunction Ct(t) {\n  return !!(t && t.__v_isRef === !0);\n}\nfunction G(t) {\n  return My(t, !1);\n}\nfunction cO(t) {\n  return My(t, !0);\n}\nfunction My(t, e) {\n  return Ct(t) ? t : new _T(t, e);\n}\nclass _T {\n  constructor(e, n) {\n    this.__v_isShallow = n, this.dep = void 0, this.__v_isRef = !0, this._rawValue = n ? e : Oe(e), this._value = n ? e : el(e);\n  }\n  get value() {\n    return lO(this), this._value;\n  }\n  set value(e) {\n    const n = this.__v_isShallow || zi(e) || ai(e);\n    e = n ? e : Oe(e), gr(e, this._rawValue) && (this._rawValue = e, this._value = n ? e : el(e), vo(this, 4, e));\n  }\n}\nfunction TT(t) {\n  vo(t, 4,  true ? t.value : 0);\n}\nfunction R(t) {\n  return Ct(t) ? t.value : t;\n}\nfunction Jt(t) {\n  return be(t) ? t() : R(t);\n}\nconst ET = {\n  get: (t, e, n) => R(Reflect.get(t, e, n)),\n  set: (t, e, n, r) => {\n    const i = t[e];\n    return Ct(i) && !Ct(n) ? (i.value = n, !0) : Reflect.set(t, e, n, r);\n  }\n};\nfunction uO(t) {\n  return Yi(t) ? t : new Proxy(t, ET);\n}\nclass $T {\n  constructor(e) {\n    this.dep = void 0, this.__v_isRef = !0;\n    const { get: n, set: r } = e(\n      () => lO(this),\n      () => vo(this)\n    );\n    this._get = n, this._set = r;\n  }\n  get value() {\n    return this._get();\n  }\n  set value(e) {\n    this._set(e);\n  }\n}\nfunction Xy(t) {\n  return new $T(t);\n}\nfunction QT(t) {\n   true && !Ja(t) && Mr(\"toRefs() expects a reactive object but received a plain one.\");\n  const e = ie(t) ? new Array(t.length) : {};\n  for (const n in t)\n    e[n] = jy(t, n);\n  return e;\n}\nclass CT {\n  constructor(e, n, r) {\n    this._object = e, this._key = n, this._defaultValue = r, this.__v_isRef = !0;\n  }\n  get value() {\n    const e = this._object[this._key];\n    return e === void 0 ? this._defaultValue : e;\n  }\n  set value(e) {\n    this._object[this._key] = e;\n  }\n  get dep() {\n    return sT(Oe(this._object), this._key);\n  }\n}\nclass AT {\n  constructor(e) {\n    this._getter = e, this.__v_isRef = !0, this.__v_isReadonly = !0;\n  }\n  get value() {\n    return this._getter();\n  }\n}\nfunction Ei(t, e, n) {\n  return Ct(t) ? t : be(t) ? new AT(t) : Ze(t) && arguments.length > 1 ? jy(t, e, n) : G(t);\n}\nfunction jy(t, e, n) {\n  const r = t[e];\n  return Ct(r) ? r : new CT(t, e, n);\n}\nconst RT = {\n  GET: \"get\",\n  HAS: \"has\",\n  ITERATE: \"iterate\"\n}, NT = {\n  SET: \"set\",\n  ADD: \"add\",\n  DELETE: \"delete\",\n  CLEAR: \"clear\"\n};\n/**\n* @vue/runtime-core v3.4.21\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\nconst Ns = [];\nfunction Ia(t) {\n  Ns.push(t);\n}\nfunction Wa() {\n  Ns.pop();\n}\nfunction I(t, ...e) {\n  ds();\n  const n = Ns.length ? Ns[Ns.length - 1].component : null, r = n && n.appContext.config.warnHandler, i = DT();\n  if (r)\n    Vr(\n      r,\n      n,\n      11,\n      [\n        t + e.map((s) => {\n          var o, a;\n          return (a = (o = s.toString) == null ? void 0 : o.call(s)) != null ? a : JSON.stringify(s);\n        }).join(\"\"),\n        n && n.proxy,\n        i.map(\n          ({ vnode: s }) => `at <${Td(n, s.type)}>`\n        ).join(`\n`),\n        i\n      ]\n    );\n  else {\n    const s = [`[Vue warn]: ${t}`, ...e];\n    i.length && s.push(`\n`, ...ZT(i)), console.warn(...s);\n  }\n  fs();\n}\nfunction DT() {\n  let t = Ns[Ns.length - 1];\n  if (!t)\n    return [];\n  const e = [];\n  for (; t; ) {\n    const n = e[0];\n    n && n.vnode === t ? n.recurseCount++ : e.push({\n      vnode: t,\n      recurseCount: 0\n    });\n    const r = t.component && t.component.parent;\n    t = r && r.vnode;\n  }\n  return e;\n}\nfunction ZT(t) {\n  const e = [];\n  return t.forEach((n, r) => {\n    e.push(...r === 0 ? [] : [`\n`], ...VT(n));\n  }), e;\n}\nfunction VT({ vnode: t, recurseCount: e }) {\n  const n = e > 0 ? `... (${e} recursive calls)` : \"\", r = t.component ? t.component.parent == null : !1, i = ` at <${Td(\n    t.component,\n    t.type,\n    r\n  )}`, s = \">\" + n;\n  return t.props ? [i, ...IT(t.props), s] : [i + s];\n}\nfunction IT(t) {\n  const e = [], n = Object.keys(t);\n  return n.slice(0, 3).forEach((r) => {\n    e.push(...By(r, t[r]));\n  }), n.length > 3 && e.push(\" ...\"), e;\n}\nfunction By(t, e, n) {\n  return we(e) ? (e = JSON.stringify(e), n ? e : [`${t}=${e}`]) : typeof e == \"number\" || typeof e == \"boolean\" || e == null ? n ? e : [`${t}=${e}`] : Ct(e) ? (e = By(t, Oe(e.value), !0), n ? e : [`${t}=Ref<`, e, \">\"]) : be(e) ? [`${t}=fn${e.name ? `<${e.name}>` : \"\"}`] : (e = Oe(e), n ? e : [`${t}=`, e]);\n}\nfunction dO(t, e) {\n   true && t !== void 0 && (typeof t != \"number\" ? I(`${e} is not a valid number - got ${JSON.stringify(t)}.`) : isNaN(t) && I(`${e} is NaN - the duration expression might be incorrect.`));\n}\nconst WT = {\n  SETUP_FUNCTION: 0,\n  0: \"SETUP_FUNCTION\",\n  RENDER_FUNCTION: 1,\n  1: \"RENDER_FUNCTION\",\n  WATCH_GETTER: 2,\n  2: \"WATCH_GETTER\",\n  WATCH_CALLBACK: 3,\n  3: \"WATCH_CALLBACK\",\n  WATCH_CLEANUP: 4,\n  4: \"WATCH_CLEANUP\",\n  NATIVE_EVENT_HANDLER: 5,\n  5: \"NATIVE_EVENT_HANDLER\",\n  COMPONENT_EVENT_HANDLER: 6,\n  6: \"COMPONENT_EVENT_HANDLER\",\n  VNODE_HOOK: 7,\n  7: \"VNODE_HOOK\",\n  DIRECTIVE_HOOK: 8,\n  8: \"DIRECTIVE_HOOK\",\n  TRANSITION_HOOK: 9,\n  9: \"TRANSITION_HOOK\",\n  APP_ERROR_HANDLER: 10,\n  10: \"APP_ERROR_HANDLER\",\n  APP_WARN_HANDLER: 11,\n  11: \"APP_WARN_HANDLER\",\n  FUNCTION_REF: 12,\n  12: \"FUNCTION_REF\",\n  ASYNC_COMPONENT_LOADER: 13,\n  13: \"ASYNC_COMPONENT_LOADER\",\n  SCHEDULER: 14,\n  14: \"SCHEDULER\"\n}, md = {\n  sp: \"serverPrefetch hook\",\n  bc: \"beforeCreate hook\",\n  c: \"created hook\",\n  bm: \"beforeMount hook\",\n  m: \"mounted hook\",\n  bu: \"beforeUpdate hook\",\n  u: \"updated\",\n  bum: \"beforeUnmount hook\",\n  um: \"unmounted hook\",\n  a: \"activated hook\",\n  da: \"deactivated hook\",\n  ec: \"errorCaptured hook\",\n  rtc: \"renderTracked hook\",\n  rtg: \"renderTriggered hook\",\n  0: \"setup function\",\n  1: \"render function\",\n  2: \"watcher getter\",\n  3: \"watcher callback\",\n  4: \"watcher cleanup function\",\n  5: \"native event handler\",\n  6: \"component event handler\",\n  7: \"vnode hook\",\n  8: \"directive hook\",\n  9: \"transition hook\",\n  10: \"app errorHandler\",\n  11: \"app warnHandler\",\n  12: \"ref function\",\n  13: \"async component loader\",\n  14: \"scheduler flush. This is likely a Vue internals bug. Please open an issue at https://github.com/vuejs/core .\"\n};\nfunction Vr(t, e, n, r) {\n  try {\n    return r ? t(...r) : t();\n  } catch (i) {\n    hs(i, e, n);\n  }\n}\nfunction Wn(t, e, n, r) {\n  if (be(t)) {\n    const s = Vr(t, e, n, r);\n    return s && dd(s) && s.catch((o) => {\n      hs(o, e, n);\n    }), s;\n  }\n  const i = [];\n  for (let s = 0; s < t.length; s++)\n    i.push(Wn(t[s], e, n, r));\n  return i;\n}\nfunction hs(t, e, n, r = !0) {\n  const i = e ? e.vnode : null;\n  if (e) {\n    let s = e.parent;\n    const o = e.proxy, a =  true ? md[n] : 0;\n    for (; s; ) {\n      const c = s.ec;\n      if (c) {\n        for (let u = 0; u < c.length; u++)\n          if (c[u](t, o, a) === !1)\n            return;\n      }\n      s = s.parent;\n    }\n    const l = e.appContext.config.errorHandler;\n    if (l) {\n      Vr(\n        l,\n        null,\n        10,\n        [t, o, a]\n      );\n      return;\n    }\n  }\n  MT(t, n, i, r);\n}\nfunction MT(t, e, n, r = !0) {\n  if (true) {\n    const i = md[e];\n    if (n && Ia(n), I(`Unhandled error${i ? ` during execution of ${i}` : \"\"}`), n && Wa(), r)\n      throw t;\n    console.error(t);\n  } else\n    {}\n}\nlet tl = !1, lh = !1;\nconst sn = [];\nlet $r = 0;\nconst yo = [];\nlet ei = null, Qi = 0;\nconst Ly = /* @__PURE__ */ Promise.resolve();\nlet fO = null;\nconst XT = 100;\nfunction Pn(t) {\n  const e = fO || Ly;\n  return t ? e.then(this ? t.bind(this) : t) : e;\n}\nfunction jT(t) {\n  let e = $r + 1, n = sn.length;\n  for (; e < n; ) {\n    const r = e + n >>> 1, i = sn[r], s = rl(i);\n    s < t || s === t && i.pre ? e = r + 1 : n = r;\n  }\n  return e;\n}\nfunction Nl(t) {\n  (!sn.length || !sn.includes(\n    t,\n    tl && t.allowRecurse ? $r + 1 : $r\n  )) && (t.id == null ? sn.push(t) : sn.splice(jT(t.id), 0, t), Uy());\n}\nfunction Uy() {\n  !tl && !lh && (lh = !0, fO = Ly.then(qy));\n}\nfunction BT(t) {\n  const e = sn.indexOf(t);\n  e > $r && sn.splice(e, 1);\n}\nfunction nl(t) {\n  ie(t) ? yo.push(...t) : (!ei || !ei.includes(\n    t,\n    t.allowRecurse ? Qi + 1 : Qi\n  )) && yo.push(t), Uy();\n}\nfunction mm(t, e, n = tl ? $r + 1 : 0) {\n  for ( true && (e = e || /* @__PURE__ */ new Map()); n < sn.length; n++) {\n    const r = sn[n];\n    if (r && r.pre) {\n      if (t && r.id !== t.uid ||  true && hO(e, r))\n        continue;\n      sn.splice(n, 1), n--, r();\n    }\n  }\n}\nfunction Su(t) {\n  if (yo.length) {\n    const e = [...new Set(yo)].sort(\n      (n, r) => rl(n) - rl(r)\n    );\n    if (yo.length = 0, ei) {\n      ei.push(...e);\n      return;\n    }\n    for (ei = e,  true && (t = t || /* @__PURE__ */ new Map()), Qi = 0; Qi < ei.length; Qi++)\n       true && hO(t, ei[Qi]) || ei[Qi]();\n    ei = null, Qi = 0;\n  }\n}\nconst rl = (t) => t.id == null ? 1 / 0 : t.id, LT = (t, e) => {\n  const n = rl(t) - rl(e);\n  if (n === 0) {\n    if (t.pre && !e.pre)\n      return -1;\n    if (e.pre && !t.pre)\n      return 1;\n  }\n  return n;\n};\nfunction qy(t) {\n  lh = !1, tl = !0,  true && (t = t || /* @__PURE__ */ new Map()), sn.sort(LT);\n  const e =  true ? (n) => hO(t, n) : 0;\n  try {\n    for ($r = 0; $r < sn.length; $r++) {\n      const n = sn[$r];\n      if (n && n.active !== !1) {\n        if ( true && e(n))\n          continue;\n        Vr(n, null, 14);\n      }\n    }\n  } finally {\n    $r = 0, sn.length = 0, Su(t), tl = !1, fO = null, (sn.length || yo.length) && qy(t);\n  }\n}\nfunction hO(t, e) {\n  if (!t.has(e))\n    t.set(e, 1);\n  else {\n    const n = t.get(e);\n    if (n > XT) {\n      const r = e.ownerInstance, i = r && al(r.type);\n      return hs(\n        `Maximum recursive updates exceeded${i ? ` in component <${i}>` : \"\"}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,\n        null,\n        10\n      ), !0;\n    } else\n      t.set(e, n + 1);\n  }\n}\nlet Hi = !1;\nconst uo = /* @__PURE__ */ new Set();\n true && (bo().__VUE_HMR_RUNTIME__ = {\n  createRecord: of(Yy),\n  rerender: of(YT),\n  reload: of(zT)\n});\nconst Ms = /* @__PURE__ */ new Map();\nfunction UT(t) {\n  const e = t.type.__hmrId;\n  let n = Ms.get(e);\n  n || (Yy(e, t.type), n = Ms.get(e)), n.instances.add(t);\n}\nfunction qT(t) {\n  Ms.get(t.type.__hmrId).instances.delete(t);\n}\nfunction Yy(t, e) {\n  return Ms.has(t) ? !1 : (Ms.set(t, {\n    initialDef: Ma(e),\n    instances: /* @__PURE__ */ new Set()\n  }), !0);\n}\nfunction Ma(t) {\n  return B1(t) ? t.__vccOpts : t;\n}\nfunction YT(t, e) {\n  const n = Ms.get(t);\n  n && (n.initialDef.render = e, [...n.instances].forEach((r) => {\n    e && (r.render = e, Ma(r.type).render = e), r.renderCache = [], Hi = !0, r.effect.dirty = !0, r.update(), Hi = !1;\n  }));\n}\nfunction zT(t, e) {\n  const n = Ms.get(t);\n  if (!n)\n    return;\n  e = Ma(e), bm(n.initialDef, e);\n  const r = [...n.instances];\n  for (const i of r) {\n    const s = Ma(i.type);\n    uo.has(s) || (s !== n.initialDef && bm(s, e), uo.add(s)), i.appContext.propsCache.delete(i.type), i.appContext.emitsCache.delete(i.type), i.appContext.optionsCache.delete(i.type), i.ceReload ? (uo.add(s), i.ceReload(e.styles), uo.delete(s)) : i.parent ? (i.parent.effect.dirty = !0, Nl(i.parent.update)) : i.appContext.reload ? i.appContext.reload() : typeof window < \"u\" ? window.location.reload() : console.warn(\n      \"[HMR] Root or manually mounted instance modified. Full reload required.\"\n    );\n  }\n  nl(() => {\n    for (const i of r)\n      uo.delete(\n        Ma(i.type)\n      );\n  });\n}\nfunction bm(t, e) {\n  $e(t, e);\n  for (const n in t)\n    n !== \"__file\" && !(n in e) && delete t[n];\n}\nfunction of(t) {\n  return (e, n) => {\n    try {\n      return t(e, n);\n    } catch (r) {\n      console.error(r), console.warn(\n        \"[HMR] Something went wrong during Vue component hot-reload. Full reload required.\"\n      );\n    }\n  };\n}\nlet ar, $a = [], ch = !1;\nfunction Dl(t, ...e) {\n  ar ? ar.emit(t, ...e) : ch || $a.push({ event: t, args: e });\n}\nfunction pO(t, e) {\n  var n, r;\n  ar = t, ar ? (ar.enabled = !0, $a.forEach(({ event: i, args: s }) => ar.emit(i, ...s)), $a = []) : /* handle late devtools injection - only do this if we are in an actual */ /* browser environment to avoid the timer handle stalling test runner exit */ /* (#4815) */ typeof window < \"u\" && // some envs mock window but not fully\n  window.HTMLElement && // also exclude jsdom\n  !((r = (n = window.navigator) == null ? void 0 : n.userAgent) != null && r.includes(\"jsdom\")) ? ((e.__VUE_DEVTOOLS_HOOK_REPLAY__ = e.__VUE_DEVTOOLS_HOOK_REPLAY__ || []).push((s) => {\n    pO(s, e);\n  }), setTimeout(() => {\n    ar || (e.__VUE_DEVTOOLS_HOOK_REPLAY__ = null, ch = !0, $a = []);\n  }, 3e3)) : (ch = !0, $a = []);\n}\nfunction HT(t, e) {\n  Dl(\"app:init\", t, e, {\n    Fragment: Pe,\n    Text: ns,\n    Comment: _t,\n    Static: Fi\n  });\n}\nfunction FT(t) {\n  Dl(\"app:unmount\", t);\n}\nconst uh = /* @__PURE__ */ OO(\n  \"component:added\"\n  /* COMPONENT_ADDED */\n), zy = /* @__PURE__ */ OO(\n  \"component:updated\"\n  /* COMPONENT_UPDATED */\n), GT = /* @__PURE__ */ OO(\n  \"component:removed\"\n  /* COMPONENT_REMOVED */\n), KT = (t) => {\n  ar && typeof ar.cleanupBuffer == \"function\" && // remove the component if it wasn't buffered\n  !ar.cleanupBuffer(t) && GT(t);\n};\nfunction OO(t) {\n  return (e) => {\n    Dl(\n      t,\n      e.appContext.app,\n      e.uid,\n      e.parent ? e.parent.uid : void 0,\n      e\n    );\n  };\n}\nconst JT = /* @__PURE__ */ Hy(\n  \"perf:start\"\n  /* PERFORMANCE_START */\n), eE = /* @__PURE__ */ Hy(\n  \"perf:end\"\n  /* PERFORMANCE_END */\n);\nfunction Hy(t) {\n  return (e, n, r) => {\n    Dl(t, e.appContext.app, e.uid, e, n, r);\n  };\n}\nfunction tE(t, e, n) {\n  Dl(\n    \"component:emit\",\n    t.appContext.app,\n    t,\n    e,\n    n\n  );\n}\nfunction nE(t, e, ...n) {\n  if (t.isUnmounted)\n    return;\n  const r = t.vnode.props || Ve;\n  if (true) {\n    const {\n      emitsOptions: u,\n      propsOptions: [d]\n    } = t;\n    if (u)\n      if (!(e in u))\n        (!d || !(Tr(e) in d)) && I(\n          `Component emitted event \"${e}\" but it is neither declared in the emits option nor as an \"${Tr(e)}\" prop.`\n        );\n      else {\n        const f = u[e];\n        be(f) && (f(...n) || I(\n          `Invalid event arguments: event validation failed for event \"${e}\".`\n        ));\n      }\n  }\n  let i = n;\n  const s = e.startsWith(\"update:\"), o = s && e.slice(7);\n  if (o && o in r) {\n    const u = `${o === \"modelValue\" ? \"model\" : o}Modifiers`, { number: d, trim: f } = r[u] || Ve;\n    f && (i = n.map((h) => we(h) ? h.trim() : h)), d && (i = n.map(Ka));\n  }\n  if (( true) && tE(t, e, i), \"development\" !== \"production\") {\n    const u = e.toLowerCase();\n    u !== e && r[Tr(u)] && I(\n      `Event \"${u}\" is emitted in component ${Td(\n        t,\n        t.type\n      )} but the handler is registered for \"${e}\". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use \"${rn(\n        e\n      )}\" instead of \"${e}\".`\n    );\n  }\n  let a, l = r[a = Tr(e)] || // also try camelCase event handler (#2249)\n  r[a = Tr(mt(e))];\n  !l && s && (l = r[a = Tr(rn(e))]), l && Wn(\n    l,\n    t,\n    6,\n    i\n  );\n  const c = r[a + \"Once\"];\n  if (c) {\n    if (!t.emitted)\n      t.emitted = {};\n    else if (t.emitted[a])\n      return;\n    t.emitted[a] = !0, Wn(\n      c,\n      t,\n      6,\n      i\n    );\n  }\n}\nfunction Fy(t, e, n = !1) {\n  const r = e.emitsCache, i = r.get(t);\n  if (i !== void 0)\n    return i;\n  const s = t.emits;\n  let o = {}, a = !1;\n  if (__VUE_OPTIONS_API__ && !be(t)) {\n    const l = (c) => {\n      const u = Fy(c, e, !0);\n      u && (a = !0, $e(o, u));\n    };\n    !n && e.mixins.length && e.mixins.forEach(l), t.extends && l(t.extends), t.mixins && t.mixins.forEach(l);\n  }\n  return !s && !a ? (Ze(t) && r.set(t, null), null) : (ie(s) ? s.forEach((l) => o[l] = null) : $e(o, s), Ze(t) && r.set(t, o), o);\n}\nfunction bd(t, e) {\n  return !t || !oi(e) ? !1 : (e = e.slice(2).replace(/Once$/, \"\"), Ae(t, e[0].toLowerCase() + e.slice(1)) || Ae(t, rn(e)) || Ae(t, e));\n}\nlet Ot = null, vd = null;\nfunction il(t) {\n  const e = Ot;\n  return Ot = t, vd = t && t.type.__scopeId || null, e;\n}\nfunction Ks(t) {\n  vd = t;\n}\nfunction Js() {\n  vd = null;\n}\nconst rE = (t) => ce;\nfunction ce(t, e = Ot, n) {\n  if (!e || t._n)\n    return t;\n  const r = (...i) => {\n    r._d && vh(-1);\n    const s = il(e);\n    let o;\n    try {\n      o = t(...i);\n    } finally {\n      il(s), r._d && vh(1);\n    }\n    return ( true) && zy(e), o;\n  };\n  return r._n = !0, r._c = !0, r._d = !0, r;\n}\nlet dh = !1;\nfunction wu() {\n  dh = !0;\n}\nfunction Hc(t) {\n  const {\n    type: e,\n    vnode: n,\n    proxy: r,\n    withProxy: i,\n    props: s,\n    propsOptions: [o],\n    slots: a,\n    attrs: l,\n    emit: c,\n    render: u,\n    renderCache: d,\n    data: f,\n    setupState: h,\n    ctx: p,\n    inheritAttrs: O\n  } = t;\n  let m, y;\n  const b = il(t);\n   true && (dh = !1);\n  try {\n    if (n.shapeFlag & 4) {\n      const S = i || r, w =  true && h.__isScriptSetup ? new Proxy(S, {\n        get(k, _, T) {\n          return I(\n            `Property '${String(\n              _\n            )}' was accessed via 'this'. Avoid using 'this' in templates.`\n          ), Reflect.get(k, _, T);\n        }\n      }) : S;\n      m = Sn(\n        u.call(\n          w,\n          S,\n          d,\n          s,\n          h,\n          f,\n          p\n        )\n      ), y = l;\n    } else {\n      const S = e;\n       true && l === s && wu(), m = Sn(\n        S.length > 1 ? S(\n          s,\n           true ? {\n            get attrs() {\n              return wu(), l;\n            },\n            slots: a,\n            emit: c\n          } : 0\n        ) : S(\n          s,\n          null\n          /* we know it doesn't need it */\n        )\n      ), y = e.props ? l : iE(l);\n    }\n  } catch (S) {\n    Ba.length = 0, hs(S, t, 1), m = J(_t);\n  }\n  let g = m, v;\n  if ( true && m.patchFlag > 0 && m.patchFlag & 2048 && ([g, v] = Gy(m)), y && O !== !1) {\n    const S = Object.keys(y), { shapeFlag: w } = g;\n    if (S.length) {\n      if (w & 7)\n        o && S.some(mu) && (y = sE(\n          y,\n          o\n        )), g = jn(g, y);\n      else if ( true && !dh && g.type !== _t) {\n        const k = Object.keys(l), _ = [], T = [];\n        for (let C = 0, A = k.length; C < A; C++) {\n          const Q = k[C];\n          oi(Q) ? mu(Q) || _.push(Q[2].toLowerCase() + Q.slice(3)) : T.push(Q);\n        }\n        T.length && I(\n          `Extraneous non-props attributes (${T.join(\", \")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`\n        ), _.length && I(\n          `Extraneous non-emits event listeners (${_.join(\", \")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the \"emits\" option.`\n        );\n      }\n    }\n  }\n  return n.dirs && ( true && !vm(g) && I(\n    \"Runtime directive used on component with non-element root node. The directives will not function as intended.\"\n  ), g = jn(g), g.dirs = g.dirs ? g.dirs.concat(n.dirs) : n.dirs), n.transition && ( true && !vm(g) && I(\n    \"Component inside <Transition> renders non-element root node that cannot be animated.\"\n  ), g.transition = n.transition),  true && v ? v(g) : m = g, il(b), m;\n}\nconst Gy = (t) => {\n  const e = t.children, n = t.dynamicChildren, r = yd(e, !1);\n  if (r) {\n    if ( true && r.patchFlag > 0 && r.patchFlag & 2048)\n      return Gy(r);\n  } else\n    return [t, void 0];\n  const i = e.indexOf(r), s = n ? n.indexOf(r) : -1, o = (a) => {\n    e[i] = a, n && (s > -1 ? n[s] = a : a.patchFlag > 0 && (t.dynamicChildren = [...n, a]));\n  };\n  return [Sn(r), o];\n};\nfunction yd(t, e = !0) {\n  let n;\n  for (let r = 0; r < t.length; r++) {\n    const i = t[r];\n    if (li(i)) {\n      if (i.type !== _t || i.children === \"v-if\") {\n        if (n)\n          return;\n        if (n = i,  true && e && n.patchFlag > 0 && n.patchFlag & 2048)\n          return yd(n.children);\n      }\n    } else\n      return;\n  }\n  return n;\n}\nconst iE = (t) => {\n  let e;\n  for (const n in t)\n    (n === \"class\" || n === \"style\" || oi(n)) && ((e || (e = {}))[n] = t[n]);\n  return e;\n}, sE = (t, e) => {\n  const n = {};\n  for (const r in t)\n    (!mu(r) || !(r.slice(9) in e)) && (n[r] = t[r]);\n  return n;\n}, vm = (t) => t.shapeFlag & 7 || t.type === _t;\nfunction oE(t, e, n) {\n  const { props: r, children: i, component: s } = t, { props: o, children: a, patchFlag: l } = e, c = s.emitsOptions;\n  if ( true && (i || a) && Hi || e.dirs || e.transition)\n    return !0;\n  if (n && l >= 0) {\n    if (l & 1024)\n      return !0;\n    if (l & 16)\n      return r ? ym(r, o, c) : !!o;\n    if (l & 8) {\n      const u = e.dynamicProps;\n      for (let d = 0; d < u.length; d++) {\n        const f = u[d];\n        if (o[f] !== r[f] && !bd(c, f))\n          return !0;\n      }\n    }\n  } else\n    return (i || a) && (!a || !a.$stable) ? !0 : r === o ? !1 : r ? o ? ym(r, o, c) : !0 : !!o;\n  return !1;\n}\nfunction ym(t, e, n) {\n  const r = Object.keys(e);\n  if (r.length !== Object.keys(t).length)\n    return !0;\n  for (let i = 0; i < r.length; i++) {\n    const s = r[i];\n    if (e[s] !== t[s] && !bd(n, s))\n      return !0;\n  }\n  return !1;\n}\nfunction gO({ vnode: t, parent: e }, n) {\n  for (; e; ) {\n    const r = e.subTree;\n    if (r.suspense && r.suspense.activeBranch === t && (r.el = t.el), r === t)\n      (t = e.vnode).el = n, e = e.parent;\n    else\n      break;\n  }\n}\nconst ku = \"components\", aE = \"directives\";\nfunction lE(t, e) {\n  return bO(ku, t, !0, e) || t;\n}\nconst mO = Symbol.for(\"v-ndc\");\nfunction Zl(t) {\n  return we(t) ? bO(ku, t, !1) || t : t || mO;\n}\nfunction cE(t) {\n  return bO(aE, t);\n}\nfunction bO(t, e, n = !0, r = !1) {\n  const i = Ot || xt;\n  if (i) {\n    const s = i.type;\n    if (t === ku) {\n      const a = al(\n        s,\n        !1\n      );\n      if (a && (a === e || a === mt(e) || a === Wr(mt(e))))\n        return s;\n    }\n    const o = (\n      // local registration\n      // check instance[type] first which is resolved for options API\n      Sm(i[t] || s[t], e) || // global registration\n      Sm(i.appContext[t], e)\n    );\n    if (!o && r)\n      return s;\n    if ( true && n && !o) {\n      const a = t === ku ? `\nIf this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : \"\";\n      I(`Failed to resolve ${t.slice(0, -1)}: ${e}${a}`);\n    }\n    return o;\n  } else\n     true && I(\n      `resolve${Wr(t.slice(0, -1))} can only be used in render() or setup().`\n    );\n}\nfunction Sm(t, e) {\n  return t && (t[e] || t[mt(e)] || t[Wr(mt(e))]);\n}\nconst Ky = (t) => t.__isSuspense;\nlet fh = 0;\nconst uE = {\n  name: \"Suspense\",\n  // In order to make Suspense tree-shakable, we need to avoid importing it\n  // directly in the renderer. The renderer checks for the __isSuspense flag\n  // on a vnode's type and calls the `process` method, passing in renderer\n  // internals.\n  __isSuspense: !0,\n  process(t, e, n, r, i, s, o, a, l, c) {\n    if (t == null)\n      fE(\n        e,\n        n,\n        r,\n        i,\n        s,\n        o,\n        a,\n        l,\n        c\n      );\n    else {\n      if (s && s.deps > 0 && !t.suspense.isInFallback) {\n        e.suspense = t.suspense, e.suspense.vnode = e, e.el = t.el;\n        return;\n      }\n      hE(\n        t,\n        e,\n        n,\n        r,\n        i,\n        o,\n        a,\n        l,\n        c\n      );\n    }\n  },\n  hydrate: pE,\n  create: vO,\n  normalize: OE\n}, dE = uE;\nfunction sl(t, e) {\n  const n = t.props && t.props[e];\n  be(n) && n();\n}\nfunction fE(t, e, n, r, i, s, o, a, l) {\n  const {\n    p: c,\n    o: { createElement: u }\n  } = l, d = u(\"div\"), f = t.suspense = vO(\n    t,\n    i,\n    r,\n    e,\n    d,\n    n,\n    s,\n    o,\n    a,\n    l\n  );\n  c(\n    null,\n    f.pendingBranch = t.ssContent,\n    d,\n    null,\n    r,\n    f,\n    s,\n    o\n  ), f.deps > 0 ? (sl(t, \"onPending\"), sl(t, \"onFallback\"), c(\n    null,\n    t.ssFallback,\n    e,\n    n,\n    r,\n    null,\n    // fallback tree will not have suspense context\n    s,\n    o\n  ), So(f, t.ssFallback)) : f.resolve(!1, !0);\n}\nfunction hE(t, e, n, r, i, s, o, a, { p: l, um: c, o: { createElement: u } }) {\n  const d = e.suspense = t.suspense;\n  d.vnode = e, e.el = t.el;\n  const f = e.ssContent, h = e.ssFallback, { activeBranch: p, pendingBranch: O, isInFallback: m, isHydrating: y } = d;\n  if (O)\n    d.pendingBranch = f, lr(f, O) ? (l(\n      O,\n      f,\n      d.hiddenContainer,\n      null,\n      i,\n      d,\n      s,\n      o,\n      a\n    ), d.deps <= 0 ? d.resolve() : m && (y || (l(\n      p,\n      h,\n      n,\n      r,\n      i,\n      null,\n      // fallback tree will not have suspense context\n      s,\n      o,\n      a\n    ), So(d, h)))) : (d.pendingId = fh++, y ? (d.isHydrating = !1, d.activeBranch = O) : c(O, i, d), d.deps = 0, d.effects.length = 0, d.hiddenContainer = u(\"div\"), m ? (l(\n      null,\n      f,\n      d.hiddenContainer,\n      null,\n      i,\n      d,\n      s,\n      o,\n      a\n    ), d.deps <= 0 ? d.resolve() : (l(\n      p,\n      h,\n      n,\n      r,\n      i,\n      null,\n      // fallback tree will not have suspense context\n      s,\n      o,\n      a\n    ), So(d, h))) : p && lr(f, p) ? (l(\n      p,\n      f,\n      n,\n      r,\n      i,\n      d,\n      s,\n      o,\n      a\n    ), d.resolve(!0)) : (l(\n      null,\n      f,\n      d.hiddenContainer,\n      null,\n      i,\n      d,\n      s,\n      o,\n      a\n    ), d.deps <= 0 && d.resolve()));\n  else if (p && lr(f, p))\n    l(\n      p,\n      f,\n      n,\n      r,\n      i,\n      d,\n      s,\n      o,\n      a\n    ), So(d, f);\n  else if (sl(e, \"onPending\"), d.pendingBranch = f, f.shapeFlag & 512 ? d.pendingId = f.component.suspenseId : d.pendingId = fh++, l(\n    null,\n    f,\n    d.hiddenContainer,\n    null,\n    i,\n    d,\n    s,\n    o,\n    a\n  ), d.deps <= 0)\n    d.resolve();\n  else {\n    const { timeout: b, pendingId: g } = d;\n    b > 0 ? setTimeout(() => {\n      d.pendingId === g && d.fallback(h);\n    }, b) : b === 0 && d.fallback(h);\n  }\n}\nlet wm = !1;\nfunction vO(t, e, n, r, i, s, o, a, l, c, u = !1) {\n   true && !wm && (wm = !0, console[console.info ? \"info\" : \"log\"](\n    \"<Suspense> is an experimental feature and its API will likely change.\"\n  ));\n  const {\n    p: d,\n    m: f,\n    um: h,\n    n: p,\n    o: { parentNode: O, remove: m }\n  } = c;\n  let y;\n  const b = gE(t);\n  b && e != null && e.pendingBranch && (y = e.pendingId, e.deps++);\n  const g = t.props ? vu(t.props.timeout) : void 0;\n   true && dO(g, \"Suspense timeout\");\n  const v = s, S = {\n    vnode: t,\n    parent: e,\n    parentComponent: n,\n    namespace: o,\n    container: r,\n    hiddenContainer: i,\n    deps: 0,\n    pendingId: fh++,\n    timeout: typeof g == \"number\" ? g : -1,\n    activeBranch: null,\n    pendingBranch: null,\n    isInFallback: !u,\n    isHydrating: u,\n    isUnmounted: !1,\n    effects: [],\n    resolve(w = !1, k = !1) {\n      if (true) {\n        if (!w && !S.pendingBranch)\n          throw new Error(\n            \"suspense.resolve() is called without a pending branch.\"\n          );\n        if (S.isUnmounted)\n          throw new Error(\n            \"suspense.resolve() is called on an already unmounted suspense boundary.\"\n          );\n      }\n      const {\n        vnode: _,\n        activeBranch: T,\n        pendingBranch: C,\n        pendingId: A,\n        effects: Q,\n        parentComponent: W,\n        container: L\n      } = S;\n      let re = !1;\n      S.isHydrating ? S.isHydrating = !1 : w || (re = T && C.transition && C.transition.mode === \"out-in\", re && (T.transition.afterLeave = () => {\n        A === S.pendingId && (f(\n          C,\n          L,\n          s === v ? p(T) : s,\n          0\n        ), nl(Q));\n      }), T && (O(T.el) !== S.hiddenContainer && (s = p(T)), h(T, W, S, !0)), re || f(C, L, s, 0)), So(S, C), S.pendingBranch = null, S.isInFallback = !1;\n      let Y = S.parent, K = !1;\n      for (; Y; ) {\n        if (Y.pendingBranch) {\n          Y.effects.push(...Q), K = !0;\n          break;\n        }\n        Y = Y.parent;\n      }\n      !K && !re && nl(Q), S.effects = [], b && e && e.pendingBranch && y === e.pendingId && (e.deps--, e.deps === 0 && !k && e.resolve()), sl(_, \"onResolve\");\n    },\n    fallback(w) {\n      if (!S.pendingBranch)\n        return;\n      const { vnode: k, activeBranch: _, parentComponent: T, container: C, namespace: A } = S;\n      sl(k, \"onFallback\");\n      const Q = p(_), W = () => {\n        S.isInFallback && (d(\n          null,\n          w,\n          C,\n          Q,\n          T,\n          null,\n          // fallback tree will not have suspense context\n          A,\n          a,\n          l\n        ), So(S, w));\n      }, L = w.transition && w.transition.mode === \"out-in\";\n      L && (_.transition.afterLeave = W), S.isInFallback = !0, h(\n        _,\n        T,\n        null,\n        // no suspense so unmount hooks fire now\n        !0\n        // shouldRemove\n      ), L || W();\n    },\n    move(w, k, _) {\n      S.activeBranch && f(S.activeBranch, w, k, _), S.container = w;\n    },\n    next() {\n      return S.activeBranch && p(S.activeBranch);\n    },\n    registerDep(w, k) {\n      const _ = !!S.pendingBranch;\n      _ && S.deps++;\n      const T = w.vnode.el;\n      w.asyncDep.catch((C) => {\n        hs(C, w, 0);\n      }).then((C) => {\n        if (w.isUnmounted || S.isUnmounted || S.pendingId !== w.suspenseId)\n          return;\n        w.asyncResolved = !0;\n        const { vnode: A } = w;\n         true && Ia(A), xh(w, C, !1), T && (A.el = T);\n        const Q = !T && w.subTree.el;\n        k(\n          w,\n          A,\n          // component may have been moved before resolve.\n          // if this is not a hydration, instance.subTree will be the comment\n          // placeholder.\n          O(T || w.subTree.el),\n          // anchor will not be used if this is hydration, so only need to\n          // consider the comment placeholder case.\n          T ? null : p(w.subTree),\n          S,\n          o,\n          l\n        ), Q && m(Q), gO(w, A.el),  true && Wa(), _ && --S.deps === 0 && S.resolve();\n      });\n    },\n    unmount(w, k) {\n      S.isUnmounted = !0, S.activeBranch && h(\n        S.activeBranch,\n        n,\n        w,\n        k\n      ), S.pendingBranch && h(\n        S.pendingBranch,\n        n,\n        w,\n        k\n      );\n    }\n  };\n  return S;\n}\nfunction pE(t, e, n, r, i, s, o, a, l) {\n  const c = e.suspense = vO(\n    e,\n    r,\n    n,\n    t.parentNode,\n    // eslint-disable-next-line no-restricted-globals\n    document.createElement(\"div\"),\n    null,\n    i,\n    s,\n    o,\n    a,\n    !0\n  ), u = l(\n    t,\n    c.pendingBranch = e.ssContent,\n    n,\n    c,\n    s,\n    o\n  );\n  return c.deps === 0 && c.resolve(!1, !0), u;\n}\nfunction OE(t) {\n  const { shapeFlag: e, children: n } = t, r = e & 32;\n  t.ssContent = km(\n    r ? n.default : n\n  ), t.ssFallback = r ? km(n.fallback) : J(_t);\n}\nfunction km(t) {\n  let e;\n  if (be(t)) {\n    const n = js && t._c;\n    n && (t._d = !1, Z()), t = t(), n && (t._d = !0, e = kn, A1());\n  }\n  if (ie(t)) {\n    const n = yd(t);\n     true && !n && t.filter((r) => r !== mO).length > 0 && I(\"<Suspense> slots expect a single root node.\"), t = n;\n  }\n  return t = Sn(t), e && !t.dynamicChildren && (t.dynamicChildren = e.filter((n) => n !== t)), t;\n}\nfunction Jy(t, e) {\n  e && e.pendingBranch ? ie(t) ? e.effects.push(...t) : e.effects.push(t) : nl(t);\n}\nfunction So(t, e) {\n  t.activeBranch = e;\n  const { vnode: n, parentComponent: r } = t;\n  let i = e.el;\n  for (; !i && e.component; )\n    e = e.component.subTree, i = e.el;\n  n.el = i, r && r.subTree === n && (r.vnode.el = i, gO(r, i));\n}\nfunction gE(t) {\n  var e;\n  return ((e = t.props) == null ? void 0 : e.suspensible) != null && t.props.suspensible !== !1;\n}\nconst e1 = Symbol.for(\"v-scx\"), yO = () => {\n  {\n    const t = Pt(e1);\n    return t ||  true && I(\n      \"Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.\"\n    ), t;\n  }\n};\nfunction Bn(t, e) {\n  return Vl(t, null, e);\n}\nfunction t1(t, e) {\n  return Vl(\n    t,\n    null,\n     true ? $e({}, e, { flush: \"post\" }) : 0\n  );\n}\nfunction n1(t, e) {\n  return Vl(\n    t,\n    null,\n     true ? $e({}, e, { flush: \"sync\" }) : 0\n  );\n}\nconst pc = {};\nfunction ht(t, e, n) {\n  return  true && !be(e) && I(\n    \"`watch(fn, options?)` signature has been moved to a separate API. Use `watchEffect(fn, options?)` instead. `watch` now only supports `watch(source, cb, options?) signature.\"\n  ), Vl(t, e, n);\n}\nfunction Vl(t, e, {\n  immediate: n,\n  deep: r,\n  flush: i,\n  once: s,\n  onTrack: o,\n  onTrigger: a\n} = Ve) {\n  if (e && s) {\n    const k = e;\n    e = (..._) => {\n      k(..._), w();\n    };\n  }\n   true && r !== void 0 && typeof r == \"number\" && I(\n    'watch() \"deep\" option with number value will be used as watch depth in future versions. Please use a boolean instead to avoid potential breakage.'\n  ),  true && !e && (n !== void 0 && I(\n    'watch() \"immediate\" option is only respected when using the watch(source, callback, options?) signature.'\n  ), r !== void 0 && I(\n    'watch() \"deep\" option is only respected when using the watch(source, callback, options?) signature.'\n  ), s !== void 0 && I(\n    'watch() \"once\" option is only respected when using the watch(source, callback, options?) signature.'\n  ));\n  const l = (k) => {\n    I(\n      \"Invalid watch source: \",\n      k,\n      \"A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.\"\n    );\n  }, c = xt, u = (k) => r === !0 ? k : (\n    // for deep: false, only traverse root-level properties\n    ws(k, r === !1 ? 1 : void 0)\n  );\n  let d, f = !1, h = !1;\n  if (Ct(t) ? (d = () => t.value, f = zi(t)) : Yi(t) ? (d = () => u(t), f = !0) : ie(t) ? (h = !0, f = t.some((k) => Yi(k) || zi(k)), d = () => t.map((k) => {\n    if (Ct(k))\n      return k.value;\n    if (Yi(k))\n      return u(k);\n    if (be(k))\n      return Vr(k, c, 2);\n     true && l(k);\n  })) : be(t) ? e ? d = () => Vr(t, c, 2) : d = () => (p && p(), Wn(\n    t,\n    c,\n    3,\n    [O]\n  )) : (d = it,  true && l(t)), e && r) {\n    const k = d;\n    d = () => ws(k());\n  }\n  let p, O = (k) => {\n    p = v.onStop = () => {\n      Vr(k, c, 4), p = v.onStop = void 0;\n    };\n  }, m;\n  if (Xl)\n    if (O = it, e ? n && Wn(e, c, 3, [\n      d(),\n      h ? [] : void 0,\n      O\n    ]) : d(), i === \"sync\") {\n      const k = yO();\n      m = k.__watcherHandles || (k.__watcherHandles = []);\n    } else\n      return it;\n  let y = h ? new Array(t.length).fill(pc) : pc;\n  const b = () => {\n    if (!(!v.active || !v.dirty))\n      if (e) {\n        const k = v.run();\n        (r || f || (h ? k.some((_, T) => gr(_, y[T])) : gr(k, y))) && (p && p(), Wn(e, c, 3, [\n          k,\n          // pass undefined as the old value when it's changed for the first time\n          y === pc ? void 0 : h && y[0] === pc ? [] : y,\n          O\n        ]), y = k);\n      } else\n        v.run();\n  };\n  b.allowRecurse = !!e;\n  let g;\n  i === \"sync\" ? g = b : i === \"post\" ? g = () => Yt(b, c && c.suspense) : (b.pre = !0, c && (b.id = c.uid), g = () => Nl(b));\n  const v = new Ao(d, it, g), S = Rl(), w = () => {\n    v.stop(), S && Fp(S.effects, v);\n  };\n  return  true && (v.onTrack = o, v.onTrigger = a), e ? n ? b() : y = v.run() : i === \"post\" ? Yt(\n    v.run.bind(v),\n    c && c.suspense\n  ) : v.run(), m && m.push(w), w;\n}\nfunction mE(t, e, n) {\n  const r = this.proxy, i = we(t) ? t.includes(\".\") ? r1(r, t) : () => r[t] : t.bind(r, r);\n  let s;\n  be(e) ? s = e : (s = e.handler, n = e);\n  const o = Bs(this), a = Vl(i, s.bind(r), n);\n  return o(), a;\n}\nfunction r1(t, e) {\n  const n = e.split(\".\");\n  return () => {\n    let r = t;\n    for (let i = 0; i < n.length && r; i++)\n      r = r[n[i]];\n    return r;\n  };\n}\nfunction ws(t, e, n = 0, r) {\n  if (!Ze(t) || t.__v_skip)\n    return t;\n  if (e && e > 0) {\n    if (n >= e)\n      return t;\n    n++;\n  }\n  if (r = r || /* @__PURE__ */ new Set(), r.has(t))\n    return t;\n  if (r.add(t), Ct(t))\n    ws(t.value, e, n, r);\n  else if (ie(t))\n    for (let i = 0; i < t.length; i++)\n      ws(t[i], e, n, r);\n  else if (Gs(t) || Cs(t))\n    t.forEach((i) => {\n      ws(i, e, n, r);\n    });\n  else if (py(t))\n    for (const i in t)\n      ws(t[i], e, n, r);\n  return t;\n}\nfunction i1(t) {\n  Oy(t) && I(\"Do not use built-in directive ids as custom directive id: \" + t);\n}\nfunction Xi(t, e) {\n  if (Ot === null)\n    return  true && I(\"withDirectives can only be used inside render functions.\"), t;\n  const n = _d(Ot) || Ot.proxy, r = t.dirs || (t.dirs = []);\n  for (let i = 0; i < e.length; i++) {\n    let [s, o, a, l = Ve] = e[i];\n    s && (be(s) && (s = {\n      mounted: s,\n      updated: s\n    }), s.deep && ws(o), r.push({\n      dir: s,\n      instance: n,\n      value: o,\n      oldValue: void 0,\n      arg: a,\n      modifiers: l\n    }));\n  }\n  return t;\n}\nfunction _r(t, e, n, r) {\n  const i = t.dirs, s = e && e.dirs;\n  for (let o = 0; o < i.length; o++) {\n    const a = i[o];\n    s && (a.oldValue = s[o].value);\n    let l = a.dir[r];\n    l && (ds(), Wn(l, n, 8, [\n      t.el,\n      a,\n      t,\n      e\n    ]), fs());\n  }\n}\nconst Ci = Symbol(\"_leaveCb\"), Oc = Symbol(\"_enterCb\");\nfunction SO() {\n  const t = {\n    isMounted: !1,\n    isLeaving: !1,\n    isUnmounting: !1,\n    leavingVNodes: /* @__PURE__ */ new Map()\n  };\n  return et(() => {\n    t.isMounted = !0;\n  }), Il(() => {\n    t.isUnmounting = !0;\n  }), t;\n}\nconst Yn = [Function, Array], wO = {\n  mode: String,\n  appear: Boolean,\n  persisted: Boolean,\n  // enter\n  onBeforeEnter: Yn,\n  onEnter: Yn,\n  onAfterEnter: Yn,\n  onEnterCancelled: Yn,\n  // leave\n  onBeforeLeave: Yn,\n  onLeave: Yn,\n  onAfterLeave: Yn,\n  onLeaveCancelled: Yn,\n  // appear\n  onBeforeAppear: Yn,\n  onAppear: Yn,\n  onAfterAppear: Yn,\n  onAppearCancelled: Yn\n}, bE = {\n  name: \"BaseTransition\",\n  props: wO,\n  setup(t, { slots: e }) {\n    const n = ir(), r = SO();\n    return () => {\n      const i = e.default && Sd(e.default(), !0);\n      if (!i || !i.length)\n        return;\n      let s = i[0];\n      if (i.length > 1) {\n        let f = !1;\n        for (const h of i)\n          if (h.type !== _t) {\n            if ( true && f) {\n              I(\n                \"<transition> can only be used on a single element or component. Use <transition-group> for lists.\"\n              );\n              break;\n            }\n            if (s = h, f = !0, \"development\" === \"production\")\n              break;\n          }\n      }\n      const o = Oe(t), { mode: a } = o;\n      if ( true && a && a !== \"in-out\" && a !== \"out-in\" && a !== \"default\" && I(`invalid <transition> mode: ${a}`), r.isLeaving)\n        return af(s);\n      const l = xm(s);\n      if (!l)\n        return af(s);\n      const c = Ro(\n        l,\n        o,\n        r,\n        n\n      );\n      Xs(l, c);\n      const u = n.subTree, d = u && xm(u);\n      if (d && d.type !== _t && !lr(l, d)) {\n        const f = Ro(\n          d,\n          o,\n          r,\n          n\n        );\n        if (Xs(d, f), a === \"out-in\")\n          return r.isLeaving = !0, f.afterLeave = () => {\n            r.isLeaving = !1, n.update.active !== !1 && (n.effect.dirty = !0, n.update());\n          }, af(s);\n        a === \"in-out\" && l.type !== _t && (f.delayLeave = (h, p, O) => {\n          const m = o1(\n            r,\n            d\n          );\n          m[String(d.key)] = d, h[Ci] = () => {\n            p(), h[Ci] = void 0, delete c.delayedLeave;\n          }, c.delayedLeave = O;\n        });\n      }\n      return s;\n    };\n  }\n}, s1 = bE;\nfunction o1(t, e) {\n  const { leavingVNodes: n } = t;\n  let r = n.get(e.type);\n  return r || (r = /* @__PURE__ */ Object.create(null), n.set(e.type, r)), r;\n}\nfunction Ro(t, e, n, r) {\n  const {\n    appear: i,\n    mode: s,\n    persisted: o = !1,\n    onBeforeEnter: a,\n    onEnter: l,\n    onAfterEnter: c,\n    onEnterCancelled: u,\n    onBeforeLeave: d,\n    onLeave: f,\n    onAfterLeave: h,\n    onLeaveCancelled: p,\n    onBeforeAppear: O,\n    onAppear: m,\n    onAfterAppear: y,\n    onAppearCancelled: b\n  } = e, g = String(t.key), v = o1(n, t), S = (_, T) => {\n    _ && Wn(\n      _,\n      r,\n      9,\n      T\n    );\n  }, w = (_, T) => {\n    const C = T[1];\n    S(_, T), ie(_) ? _.every((A) => A.length <= 1) && C() : _.length <= 1 && C();\n  }, k = {\n    mode: s,\n    persisted: o,\n    beforeEnter(_) {\n      let T = a;\n      if (!n.isMounted)\n        if (i)\n          T = O || a;\n        else\n          return;\n      _[Ci] && _[Ci](\n        !0\n        /* cancelled */\n      );\n      const C = v[g];\n      C && lr(t, C) && C.el[Ci] && C.el[Ci](), S(T, [_]);\n    },\n    enter(_) {\n      let T = l, C = c, A = u;\n      if (!n.isMounted)\n        if (i)\n          T = m || l, C = y || c, A = b || u;\n        else\n          return;\n      let Q = !1;\n      const W = _[Oc] = (L) => {\n        Q || (Q = !0, L ? S(A, [_]) : S(C, [_]), k.delayedLeave && k.delayedLeave(), _[Oc] = void 0);\n      };\n      T ? w(T, [_, W]) : W();\n    },\n    leave(_, T) {\n      const C = String(t.key);\n      if (_[Oc] && _[Oc](\n        !0\n        /* cancelled */\n      ), n.isUnmounting)\n        return T();\n      S(d, [_]);\n      let A = !1;\n      const Q = _[Ci] = (W) => {\n        A || (A = !0, T(), W ? S(p, [_]) : S(h, [_]), _[Ci] = void 0, v[C] === t && delete v[C]);\n      };\n      v[C] = t, f ? w(f, [_, Q]) : Q();\n    },\n    clone(_) {\n      return Ro(_, e, n, r);\n    }\n  };\n  return k;\n}\nfunction af(t) {\n  if (ta(t))\n    return t = jn(t), t.children = null, t;\n}\nfunction xm(t) {\n  return ta(t) ? (\n    // #7121 ensure get the child component subtree in case\n    // it's been replaced during HMR\n     true && t.component ? t.component.subTree : t.children ? t.children[0] : void 0\n  ) : t;\n}\nfunction Xs(t, e) {\n  t.shapeFlag & 6 && t.component ? Xs(t.component.subTree, e) : t.shapeFlag & 128 ? (t.ssContent.transition = e.clone(t.ssContent), t.ssFallback.transition = e.clone(t.ssFallback)) : t.transition = e;\n}\nfunction Sd(t, e = !1, n) {\n  let r = [], i = 0;\n  for (let s = 0; s < t.length; s++) {\n    let o = t[s];\n    const a = n == null ? o.key : String(n) + String(o.key != null ? o.key : s);\n    o.type === Pe ? (o.patchFlag & 128 && i++, r = r.concat(\n      Sd(o.children, e, a)\n    )) : (e || o.type !== _t) && r.push(a != null ? jn(o, { key: a }) : o);\n  }\n  if (i > 1)\n    for (let s = 0; s < r.length; s++)\n      r[s].patchFlag = -2;\n  return r;\n}\n/*! #__NO_SIDE_EFFECTS__ */\n// @__NO_SIDE_EFFECTS__\nfunction le(t, e) {\n  return be(t) ? (\n    // #8326: extend call and options.name access are considered side-effects\n    // by Rollup, so we have to wrap it in a pure-annotated IIFE.\n    $e({ name: t.name }, e, { setup: t })\n  ) : t;\n}\nconst Ds = (t) => !!t.type.__asyncLoader;\n/*! #__NO_SIDE_EFFECTS__ */\n// @__NO_SIDE_EFFECTS__\nfunction a1(t) {\n  be(t) && (t = { loader: t });\n  const {\n    loader: e,\n    loadingComponent: n,\n    errorComponent: r,\n    delay: i = 200,\n    timeout: s,\n    // undefined = never times out\n    suspensible: o = !0,\n    onError: a\n  } = t;\n  let l = null, c, u = 0;\n  const d = () => (u++, l = null, f()), f = () => {\n    let h;\n    return l || (h = l = e().catch((p) => {\n      if (p = p instanceof Error ? p : new Error(String(p)), a)\n        return new Promise((O, m) => {\n          a(p, () => O(d()), () => m(p), u + 1);\n        });\n      throw p;\n    }).then((p) => {\n      if (h !== l && l)\n        return l;\n      if ( true && !p && I(\n        \"Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.\"\n      ), p && (p.__esModule || p[Symbol.toStringTag] === \"Module\") && (p = p.default),  true && p && !Ze(p) && !be(p))\n        throw new Error(`Invalid async component load result: ${p}`);\n      return c = p, p;\n    }));\n  };\n  return /* @__PURE__ */ le({\n    name: \"AsyncComponentWrapper\",\n    __asyncLoader: f,\n    get __asyncResolved() {\n      return c;\n    },\n    setup() {\n      const h = xt;\n      if (c)\n        return () => lf(c, h);\n      const p = (b) => {\n        l = null, hs(\n          b,\n          h,\n          13,\n          !r\n        );\n      };\n      if (o && h.suspense || Xl)\n        return f().then((b) => () => lf(b, h)).catch((b) => (p(b), () => r ? J(r, {\n          error: b\n        }) : null));\n      const O = G(!1), m = G(), y = G(!!i);\n      return i && setTimeout(() => {\n        y.value = !1;\n      }, i), s != null && setTimeout(() => {\n        if (!O.value && !m.value) {\n          const b = new Error(\n            `Async component timed out after ${s}ms.`\n          );\n          p(b), m.value = b;\n        }\n      }, s), f().then(() => {\n        O.value = !0, h.parent && ta(h.parent.vnode) && (h.parent.effect.dirty = !0, Nl(h.parent.update));\n      }).catch((b) => {\n        p(b), m.value = b;\n      }), () => {\n        if (O.value && c)\n          return lf(c, h);\n        if (m.value && r)\n          return J(r, {\n            error: m.value\n          });\n        if (n && !y.value)\n          return J(n);\n      };\n    }\n  });\n}\nfunction lf(t, e) {\n  const { ref: n, props: r, children: i, ce: s } = e.vnode, o = J(t, r, i);\n  return o.ref = n, o.ce = s, delete e.vnode.ce, o;\n}\nconst ta = (t) => t.type.__isKeepAlive, vE = {\n  name: \"KeepAlive\",\n  // Marker for special handling inside the renderer. We are not using a ===\n  // check directly on KeepAlive in the renderer, because importing it directly\n  // would prevent it from being tree-shaken.\n  __isKeepAlive: !0,\n  props: {\n    include: [String, RegExp, Array],\n    exclude: [String, RegExp, Array],\n    max: [String, Number]\n  },\n  setup(t, { slots: e }) {\n    const n = ir(), r = n.ctx;\n    if (!r.renderer)\n      return () => {\n        const b = e.default && e.default();\n        return b && b.length === 1 ? b[0] : b;\n      };\n    const i = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Set();\n    let o = null;\n    ( true) && (n.__v_cache = i);\n    const a = n.suspense, {\n      renderer: {\n        p: l,\n        m: c,\n        um: u,\n        o: { createElement: d }\n      }\n    } = r, f = d(\"div\");\n    r.activate = (b, g, v, S, w) => {\n      const k = b.component;\n      c(b, g, v, 0, a), l(\n        k.vnode,\n        b,\n        g,\n        v,\n        k,\n        a,\n        S,\n        b.slotScopeIds,\n        w\n      ), Yt(() => {\n        k.isDeactivated = !1, k.a && Ii(k.a);\n        const _ = b.props && b.props.onVnodeMounted;\n        _ && yn(_, k.parent, b);\n      }, a), ( true) && uh(k);\n    }, r.deactivate = (b) => {\n      const g = b.component;\n      c(b, f, null, 1, a), Yt(() => {\n        g.da && Ii(g.da);\n        const v = b.props && b.props.onVnodeUnmounted;\n        v && yn(v, g.parent, b), g.isDeactivated = !0;\n      }, a), ( true) && uh(g);\n    };\n    function h(b) {\n      cf(b), u(b, n, a, !0);\n    }\n    function p(b) {\n      i.forEach((g, v) => {\n        const S = al(g.type);\n        S && (!b || !b(S)) && O(v);\n      });\n    }\n    function O(b) {\n      const g = i.get(b);\n      !o || !lr(g, o) ? h(g) : o && cf(o), i.delete(b), s.delete(b);\n    }\n    ht(\n      () => [t.include, t.exclude],\n      ([b, g]) => {\n        b && p((v) => Qa(b, v)), g && p((v) => !Qa(g, v));\n      },\n      // prune post-render after `current` has been updated\n      { flush: \"post\", deep: !0 }\n    );\n    let m = null;\n    const y = () => {\n      m != null && i.set(m, uf(n.subTree));\n    };\n    return et(y), kd(y), Il(() => {\n      i.forEach((b) => {\n        const { subTree: g, suspense: v } = n, S = uf(g);\n        if (b.type === S.type && b.key === S.key) {\n          cf(S);\n          const w = S.component.da;\n          w && Yt(w, v);\n          return;\n        }\n        h(b);\n      });\n    }), () => {\n      if (m = null, !e.default)\n        return null;\n      const b = e.default(), g = b[0];\n      if (b.length > 1)\n        return  true && I(\"KeepAlive should contain exactly one component child.\"), o = null, b;\n      if (!li(g) || !(g.shapeFlag & 4) && !(g.shapeFlag & 128))\n        return o = null, g;\n      let v = uf(g);\n      const S = v.type, w = al(\n        Ds(v) ? v.type.__asyncResolved || {} : S\n      ), { include: k, exclude: _, max: T } = t;\n      if (k && (!w || !Qa(k, w)) || _ && w && Qa(_, w))\n        return o = v, g;\n      const C = v.key == null ? S : v.key, A = i.get(C);\n      return v.el && (v = jn(v), g.shapeFlag & 128 && (g.ssContent = v)), m = C, A ? (v.el = A.el, v.component = A.component, v.transition && Xs(v, v.transition), v.shapeFlag |= 512, s.delete(C), s.add(C)) : (s.add(C), T && s.size > parseInt(T, 10) && O(s.values().next().value)), v.shapeFlag |= 256, o = v, Ky(g.type) ? g : v;\n    };\n  }\n}, yE = vE;\nfunction Qa(t, e) {\n  return ie(t) ? t.some((n) => Qa(n, e)) : we(t) ? t.split(\",\").includes(e) : N_(t) ? t.test(e) : !1;\n}\nfunction l1(t, e) {\n  u1(t, \"a\", e);\n}\nfunction c1(t, e) {\n  u1(t, \"da\", e);\n}\nfunction u1(t, e, n = xt) {\n  const r = t.__wdc || (t.__wdc = () => {\n    let i = n;\n    for (; i; ) {\n      if (i.isDeactivated)\n        return;\n      i = i.parent;\n    }\n    return t();\n  });\n  if (wd(e, r, n), n) {\n    let i = n.parent;\n    for (; i && i.parent; )\n      ta(i.parent.vnode) && SE(r, e, n, i), i = i.parent;\n  }\n}\nfunction SE(t, e, n, r) {\n  const i = wd(\n    e,\n    t,\n    r,\n    !0\n    /* prepend */\n  );\n  jt(() => {\n    Fp(r[e], i);\n  }, n);\n}\nfunction cf(t) {\n  t.shapeFlag &= -257, t.shapeFlag &= -513;\n}\nfunction uf(t) {\n  return t.shapeFlag & 128 ? t.ssContent : t;\n}\nfunction wd(t, e, n = xt, r = !1) {\n  if (n) {\n    const i = n[t] || (n[t] = []), s = e.__weh || (e.__weh = (...o) => {\n      if (n.isUnmounted)\n        return;\n      ds();\n      const a = Bs(n), l = Wn(e, n, t, o);\n      return a(), fs(), l;\n    });\n    return r ? i.unshift(s) : i.push(s), s;\n  } else if (true) {\n    const i = Tr(md[t].replace(/ hook$/, \"\"));\n    I(\n      `${i} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`\n    );\n  }\n}\nconst gi = (t) => (e, n = xt) => (\n  // post-create lifecycle registrations are noops during SSR (except for serverPrefetch)\n  (!Xl || t === \"sp\") && wd(t, (...r) => e(...r), n)\n), d1 = gi(\"bm\"), et = gi(\"m\"), f1 = gi(\"bu\"), kd = gi(\"u\"), Il = gi(\"bum\"), jt = gi(\"um\"), xd = gi(\"sp\"), h1 = gi(\n  \"rtg\"\n), p1 = gi(\n  \"rtc\"\n);\nfunction O1(t, e = xt) {\n  wd(\"ec\", t, e);\n}\nfunction Xr(t, e, n, r) {\n  let i;\n  const s = n && n[r];\n  if (ie(t) || we(t)) {\n    i = new Array(t.length);\n    for (let o = 0, a = t.length; o < a; o++)\n      i[o] = e(t[o], o, void 0, s && s[o]);\n  } else if (typeof t == \"number\") {\n     true && !Number.isInteger(t) && I(`The v-for range expect an integer value but got ${t}.`), i = new Array(t);\n    for (let o = 0; o < t; o++)\n      i[o] = e(o + 1, o, void 0, s && s[o]);\n  } else if (Ze(t))\n    if (t[Symbol.iterator])\n      i = Array.from(\n        t,\n        (o, a) => e(o, a, void 0, s && s[a])\n      );\n    else {\n      const o = Object.keys(t);\n      i = new Array(o.length);\n      for (let a = 0, l = o.length; a < l; a++) {\n        const c = o[a];\n        i[a] = e(t[c], c, a, s && s[a]);\n      }\n    }\n  else\n    i = [];\n  return n && (n[r] = i), i;\n}\nfunction wE(t, e) {\n  for (let n = 0; n < e.length; n++) {\n    const r = e[n];\n    if (ie(r))\n      for (let i = 0; i < r.length; i++)\n        t[r[i].name] = r[i].fn;\n    else\n      r && (t[r.name] = r.key ? (...i) => {\n        const s = r.fn(...i);\n        return s && (s.key = r.key), s;\n      } : r.fn);\n  }\n  return t;\n}\nfunction pt(t, e, n = {}, r, i) {\n  if (Ot.isCE || Ot.parent && Ds(Ot.parent) && Ot.parent.isCE)\n    return e !== \"default\" && (n.name = e), J(\"slot\", n, r && r());\n  let s = t[e];\n   true && s && s.length > 1 && (I(\n    \"SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.\"\n  ), s = () => []), s && s._c && (s._d = !1), Z();\n  const o = s && g1(s(n)), a = ke(\n    Pe,\n    {\n      key: n.key || // slot content array of a dynamic conditional slot may have a branch\n      // key attached in the `createSlots` helper, respect that\n      o && o.key || `_${e}`\n    },\n    o || (r ? r() : []),\n    o && t._ === 1 ? 64 : -2\n  );\n  return !i && a.scopeId && (a.slotScopeIds = [a.scopeId + \"-s\"]), s && s._c && (s._d = !0), a;\n}\nfunction g1(t) {\n  return t.some((e) => li(e) ? !(e.type === _t || e.type === Pe && !g1(e.children)) : !0) ? t : null;\n}\nfunction kE(t, e) {\n  const n = {};\n  if ( true && !Ze(t))\n    return I(\"v-on with no argument expects an object value.\"), n;\n  for (const r in t)\n    n[e && /[A-Z]/.test(r) ? `on:${r}` : Tr(r)] = t[r];\n  return n;\n}\nconst hh = (t) => t ? I1(t) ? _d(t) || t.proxy : hh(t.parent) : null, Zs = (\n  // Move PURE marker to new line to workaround compiler discarding it\n  // due to type annotation\n  /* @__PURE__ */ $e(/* @__PURE__ */ Object.create(null), {\n    $: (t) => t,\n    $el: (t) => t.vnode.el,\n    $data: (t) => t.data,\n    $props: (t) =>  true ? Dn(t.props) : 0,\n    $attrs: (t) =>  true ? Dn(t.attrs) : 0,\n    $slots: (t) =>  true ? Dn(t.slots) : 0,\n    $refs: (t) =>  true ? Dn(t.refs) : 0,\n    $parent: (t) => hh(t.parent),\n    $root: (t) => hh(t.root),\n    $emit: (t) => t.emit,\n    $options: (t) => __VUE_OPTIONS_API__ ? PO(t) : t.type,\n    $forceUpdate: (t) => t.f || (t.f = () => {\n      t.effect.dirty = !0, Nl(t.update);\n    }),\n    $nextTick: (t) => t.n || (t.n = Pn.bind(t.proxy)),\n    $watch: (t) => __VUE_OPTIONS_API__ ? mE.bind(t) : it\n  })\n), kO = (t) => t === \"_\" || t === \"$\", df = (t, e) => t !== Ve && !t.__isScriptSetup && Ae(t, e), Xa = {\n  get({ _: t }, e) {\n    const { ctx: n, setupState: r, data: i, props: s, accessCache: o, type: a, appContext: l } = t;\n    if ( true && e === \"__isVue\")\n      return !0;\n    let c;\n    if (e[0] !== \"$\") {\n      const h = o[e];\n      if (h !== void 0)\n        switch (h) {\n          case 1:\n            return r[e];\n          case 2:\n            return i[e];\n          case 4:\n            return n[e];\n          case 3:\n            return s[e];\n        }\n      else {\n        if (df(r, e))\n          return o[e] = 1, r[e];\n        if (i !== Ve && Ae(i, e))\n          return o[e] = 2, i[e];\n        if (\n          // only cache other properties when instance has declared (thus stable)\n          // props\n          (c = t.propsOptions[0]) && Ae(c, e)\n        )\n          return o[e] = 3, s[e];\n        if (n !== Ve && Ae(n, e))\n          return o[e] = 4, n[e];\n        (!__VUE_OPTIONS_API__ || ph) && (o[e] = 0);\n      }\n    }\n    const u = Zs[e];\n    let d, f;\n    if (u)\n      return e === \"$attrs\" ? (Kt(t, \"get\", e),  true && wu()) :  true && e === \"$slots\" && Kt(t, \"get\", e), u(t);\n    if (\n      // css module (injected by vue-loader)\n      (d = a.__cssModules) && (d = d[e])\n    )\n      return d;\n    if (n !== Ve && Ae(n, e))\n      return o[e] = 4, n[e];\n    if (\n      // global properties\n      f = l.config.globalProperties, Ae(f, e)\n    )\n      return f[e];\n     true && Ot && (!we(e) || // #1091 avoid internal isRef/isVNode checks on component instance leading\n    // to infinite warning loop\n    e.indexOf(\"__v\") !== 0) && (i !== Ve && kO(e[0]) && Ae(i, e) ? I(\n      `Property ${JSON.stringify(\n        e\n      )} must be accessed via $data because it starts with a reserved character (\"$\" or \"_\") and is not proxied on the render context.`\n    ) : t === Ot && I(\n      `Property ${JSON.stringify(e)} was accessed during render but is not defined on instance.`\n    ));\n  },\n  set({ _: t }, e, n) {\n    const { data: r, setupState: i, ctx: s } = t;\n    return df(i, e) ? (i[e] = n, !0) :  true && i.__isScriptSetup && Ae(i, e) ? (I(`Cannot mutate <script setup> binding \"${e}\" from Options API.`), !1) : r !== Ve && Ae(r, e) ? (r[e] = n, !0) : Ae(t.props, e) ? ( true && I(`Attempting to mutate prop \"${e}\". Props are readonly.`), !1) : e[0] === \"$\" && e.slice(1) in t ? ( true && I(\n      `Attempting to mutate public property \"${e}\". Properties starting with $ are reserved and readonly.`\n    ), !1) : ( true && e in t.appContext.config.globalProperties ? Object.defineProperty(s, e, {\n      enumerable: !0,\n      configurable: !0,\n      value: n\n    }) : s[e] = n, !0);\n  },\n  has({\n    _: { data: t, setupState: e, accessCache: n, ctx: r, appContext: i, propsOptions: s }\n  }, o) {\n    let a;\n    return !!n[o] || t !== Ve && Ae(t, o) || df(e, o) || (a = s[0]) && Ae(a, o) || Ae(r, o) || Ae(Zs, o) || Ae(i.config.globalProperties, o);\n  },\n  defineProperty(t, e, n) {\n    return n.get != null ? t._.accessCache[e] = 0 : Ae(n, \"value\") && this.set(t, e, n.value, null), Reflect.defineProperty(t, e, n);\n  }\n};\n true && (Xa.ownKeys = (t) => (I(\n  \"Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.\"\n), Reflect.ownKeys(t)));\nconst xE = /* @__PURE__ */ $e(\n  {},\n  Xa,\n  {\n    get(t, e) {\n      if (e !== Symbol.unscopables)\n        return Xa.get(t, e, t);\n    },\n    has(t, e) {\n      const n = e[0] !== \"_\" && !W_(e);\n      return  true && !n && Xa.has(t, e) && I(\n        `Property ${JSON.stringify(\n          e\n        )} should not start with _ which is a reserved prefix for Vue internals.`\n      ), n;\n    }\n  }\n);\nfunction PE(t) {\n  const e = {};\n  return Object.defineProperty(e, \"_\", {\n    configurable: !0,\n    enumerable: !1,\n    get: () => t\n  }), Object.keys(Zs).forEach((n) => {\n    Object.defineProperty(e, n, {\n      configurable: !0,\n      enumerable: !1,\n      get: () => Zs[n](t),\n      // intercepted by the proxy so no need for implementation,\n      // but needed to prevent set errors\n      set: it\n    });\n  }), e;\n}\nfunction _E(t) {\n  const {\n    ctx: e,\n    propsOptions: [n]\n  } = t;\n  n && Object.keys(n).forEach((r) => {\n    Object.defineProperty(e, r, {\n      enumerable: !0,\n      configurable: !0,\n      get: () => t.props[r],\n      set: it\n    });\n  });\n}\nfunction TE(t) {\n  const { ctx: e, setupState: n } = t;\n  Object.keys(Oe(n)).forEach((r) => {\n    if (!n.__isScriptSetup) {\n      if (kO(r[0])) {\n        I(\n          `setup() return property ${JSON.stringify(\n            r\n          )} should not start with \"$\" or \"_\" which are reserved prefixes for Vue internals.`\n        );\n        return;\n      }\n      Object.defineProperty(e, r, {\n        enumerable: !0,\n        configurable: !0,\n        get: () => n[r],\n        set: it\n      });\n    }\n  });\n}\nconst eo = (t) => I(\n  `${t}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`\n);\nfunction EE() {\n  return  true && eo(\"defineProps\"), null;\n}\nfunction $E() {\n  return  true && eo(\"defineEmits\"), null;\n}\nfunction QE(t) {\n   true && eo(\"defineExpose\");\n}\nfunction CE(t) {\n   true && eo(\"defineOptions\");\n}\nfunction AE() {\n  return  true && eo(\"defineSlots\"), null;\n}\nfunction RE() {\n   true && eo(\"defineModel\");\n}\nfunction NE(t, e) {\n  return  true && eo(\"withDefaults\"), null;\n}\nfunction DE() {\n  return m1().slots;\n}\nfunction xO() {\n  return m1().attrs;\n}\nfunction m1() {\n  const t = ir();\n  return  true && !t && I(\"useContext() called without active instance.\"), t.setupContext || (t.setupContext = j1(t));\n}\nfunction ol(t) {\n  return ie(t) ? t.reduce(\n    (e, n) => (e[n] = null, e),\n    {}\n  ) : t;\n}\nfunction ZE(t, e) {\n  const n = ol(t);\n  for (const r in e) {\n    if (r.startsWith(\"__skip\"))\n      continue;\n    let i = n[r];\n    i ? ie(i) || be(i) ? i = n[r] = { type: i, default: e[r] } : i.default = e[r] : i === null ? i = n[r] = { default: e[r] } :  true && I(`props default key \"${r}\" has no corresponding declaration.`), i && e[`__skip_${r}`] && (i.skipFactory = !0);\n  }\n  return n;\n}\nfunction VE(t, e) {\n  return !t || !e ? t || e : ie(t) && ie(e) ? t.concat(e) : $e({}, ol(t), ol(e));\n}\nfunction IE(t, e) {\n  const n = {};\n  for (const r in t)\n    e.includes(r) || Object.defineProperty(n, r, {\n      enumerable: !0,\n      get: () => t[r]\n    });\n  return n;\n}\nfunction WE(t) {\n  const e = ir();\n   true && !e && I(\n    \"withAsyncContext called without active current instance. This is likely a bug.\"\n  );\n  let n = t();\n  return wh(), dd(n) && (n = n.catch((r) => {\n    throw Bs(e), r;\n  })), [n, () => Bs(e)];\n}\nfunction ME() {\n  const t = /* @__PURE__ */ Object.create(null);\n  return (e, n) => {\n    t[n] ? I(`${e} property \"${n}\" is already defined in ${t[n]}.`) : t[n] = e;\n  };\n}\nlet ph = !0;\nfunction XE(t) {\n  const e = PO(t), n = t.proxy, r = t.ctx;\n  ph = !1, e.beforeCreate && Pm(e.beforeCreate, t, \"bc\");\n  const {\n    // state\n    data: i,\n    computed: s,\n    methods: o,\n    watch: a,\n    provide: l,\n    inject: c,\n    // lifecycle\n    created: u,\n    beforeMount: d,\n    mounted: f,\n    beforeUpdate: h,\n    updated: p,\n    activated: O,\n    deactivated: m,\n    beforeDestroy: y,\n    beforeUnmount: b,\n    destroyed: g,\n    unmounted: v,\n    render: S,\n    renderTracked: w,\n    renderTriggered: k,\n    errorCaptured: _,\n    serverPrefetch: T,\n    // public API\n    expose: C,\n    inheritAttrs: A,\n    // assets\n    components: Q,\n    directives: W,\n    filters: L\n  } = e, re =  true ? ME() : 0;\n  if (true) {\n    const [K] = t.propsOptions;\n    if (K)\n      for (const B in K)\n        re(\"Props\", B);\n  }\n  if (c && jE(c, r, re), o)\n    for (const K in o) {\n      const B = o[K];\n      be(B) ? ( true ? Object.defineProperty(r, K, {\n        value: B.bind(n),\n        configurable: !0,\n        enumerable: !0,\n        writable: !0\n      }) : 0,  true && re(\"Methods\", K)) :  true && I(\n        `Method \"${K}\" has type \"${typeof B}\" in the component definition. Did you reference the function correctly?`\n      );\n    }\n  if (i) {\n     true && !be(i) && I(\n      \"The data option must be a function. Plain object usage is no longer supported.\"\n    );\n    const K = i.call(n, n);\n    if ( true && dd(K) && I(\n      \"data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.\"\n    ), !Ze(K))\n       true && I(\"data() should return an object.\");\n    else if (t.data = Xn(K), \"development\" !== \"production\")\n      for (const B in K)\n        re(\"Data\", B), kO(B[0]) || Object.defineProperty(r, B, {\n          configurable: !0,\n          enumerable: !0,\n          get: () => K[B],\n          set: it\n        });\n  }\n  if (ph = !0, s)\n    for (const K in s) {\n      const B = s[K], _e = be(B) ? B.bind(n, n) : be(B.get) ? B.get.bind(n, n) : it;\n       true && _e === it && I(`Computed property \"${K}\" has no getter.`);\n      const Ce = !be(B) && be(B.set) ? B.set.bind(n) :  true ? () => {\n        I(\n          `Write operation failed: computed property \"${K}\" is readonly.`\n        );\n      } : 0, ue = j({\n        get: _e,\n        set: Ce\n      });\n      Object.defineProperty(r, K, {\n        enumerable: !0,\n        configurable: !0,\n        get: () => ue.value,\n        set: (ge) => ue.value = ge\n      }),  true && re(\"Computed\", K);\n    }\n  if (a)\n    for (const K in a)\n      b1(a[K], r, n, K);\n  if (l) {\n    const K = be(l) ? l.call(n) : l;\n    Reflect.ownKeys(K).forEach((B) => {\n      _n(B, K[B]);\n    });\n  }\n  u && Pm(u, t, \"c\");\n  function Y(K, B) {\n    ie(B) ? B.forEach((_e) => K(_e.bind(n))) : B && K(B.bind(n));\n  }\n  if (Y(d1, d), Y(et, f), Y(f1, h), Y(kd, p), Y(l1, O), Y(c1, m), Y(O1, _), Y(p1, w), Y(h1, k), Y(Il, b), Y(jt, v), Y(xd, T), ie(C))\n    if (C.length) {\n      const K = t.exposed || (t.exposed = {});\n      C.forEach((B) => {\n        Object.defineProperty(K, B, {\n          get: () => n[B],\n          set: (_e) => n[B] = _e\n        });\n      });\n    } else\n      t.exposed || (t.exposed = {});\n  S && t.render === it && (t.render = S), A != null && (t.inheritAttrs = A), Q && (t.components = Q), W && (t.directives = W);\n}\nfunction jE(t, e, n = it) {\n  ie(t) && (t = Oh(t));\n  for (const r in t) {\n    const i = t[r];\n    let s;\n    Ze(i) ? \"default\" in i ? s = Pt(\n      i.from || r,\n      i.default,\n      !0\n    ) : s = Pt(i.from || r) : s = Pt(i), Ct(s) ? Object.defineProperty(e, r, {\n      enumerable: !0,\n      configurable: !0,\n      get: () => s.value,\n      set: (o) => s.value = o\n    }) : e[r] = s,  true && n(\"Inject\", r);\n  }\n}\nfunction Pm(t, e, n) {\n  Wn(\n    ie(t) ? t.map((r) => r.bind(e.proxy)) : t.bind(e.proxy),\n    e,\n    n\n  );\n}\nfunction b1(t, e, n, r) {\n  const i = r.includes(\".\") ? r1(n, r) : () => n[r];\n  if (we(t)) {\n    const s = e[t];\n    be(s) ? ht(i, s) :  true && I(`Invalid watch handler specified by key \"${t}\"`, s);\n  } else if (be(t))\n    ht(i, t.bind(n));\n  else if (Ze(t))\n    if (ie(t))\n      t.forEach((s) => b1(s, e, n, r));\n    else {\n      const s = be(t.handler) ? t.handler.bind(n) : e[t.handler];\n      be(s) ? ht(i, s, t) :  true && I(`Invalid watch handler specified by key \"${t.handler}\"`, s);\n    }\n  else\n     true && I(`Invalid watch option: \"${r}\"`, t);\n}\nfunction PO(t) {\n  const e = t.type, { mixins: n, extends: r } = e, {\n    mixins: i,\n    optionsCache: s,\n    config: { optionMergeStrategies: o }\n  } = t.appContext, a = s.get(e);\n  let l;\n  return a ? l = a : !i.length && !n && !r ? l = e : (l = {}, i.length && i.forEach(\n    (c) => xu(l, c, o, !0)\n  ), xu(l, e, o)), Ze(e) && s.set(e, l), l;\n}\nfunction xu(t, e, n, r = !1) {\n  const { mixins: i, extends: s } = e;\n  s && xu(t, s, n, !0), i && i.forEach(\n    (o) => xu(t, o, n, !0)\n  );\n  for (const o in e)\n    if (r && o === \"expose\")\n       true && I(\n        '\"expose\" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.'\n      );\n    else {\n      const a = BE[o] || n && n[o];\n      t[o] = a ? a(t[o], e[o]) : e[o];\n    }\n  return t;\n}\nconst BE = {\n  data: _m,\n  props: Tm,\n  emits: Tm,\n  // objects\n  methods: Ca,\n  computed: Ca,\n  // lifecycle\n  beforeCreate: fn,\n  created: fn,\n  beforeMount: fn,\n  mounted: fn,\n  beforeUpdate: fn,\n  updated: fn,\n  beforeDestroy: fn,\n  beforeUnmount: fn,\n  destroyed: fn,\n  unmounted: fn,\n  activated: fn,\n  deactivated: fn,\n  errorCaptured: fn,\n  serverPrefetch: fn,\n  // assets\n  components: Ca,\n  directives: Ca,\n  // watch\n  watch: UE,\n  // provide / inject\n  provide: _m,\n  inject: LE\n};\nfunction _m(t, e) {\n  return e ? t ? function() {\n    return $e(\n      be(t) ? t.call(this, this) : t,\n      be(e) ? e.call(this, this) : e\n    );\n  } : e : t;\n}\nfunction LE(t, e) {\n  return Ca(Oh(t), Oh(e));\n}\nfunction Oh(t) {\n  if (ie(t)) {\n    const e = {};\n    for (let n = 0; n < t.length; n++)\n      e[t[n]] = t[n];\n    return e;\n  }\n  return t;\n}\nfunction fn(t, e) {\n  return t ? [...new Set([].concat(t, e))] : e;\n}\nfunction Ca(t, e) {\n  return t ? $e(/* @__PURE__ */ Object.create(null), t, e) : e;\n}\nfunction Tm(t, e) {\n  return t ? ie(t) && ie(e) ? [.../* @__PURE__ */ new Set([...t, ...e])] : $e(\n    /* @__PURE__ */ Object.create(null),\n    ol(t),\n    ol(e ?? {})\n  ) : e;\n}\nfunction UE(t, e) {\n  if (!t)\n    return e;\n  if (!e)\n    return t;\n  const n = $e(/* @__PURE__ */ Object.create(null), t);\n  for (const r in e)\n    n[r] = fn(t[r], e[r]);\n  return n;\n}\nfunction v1() {\n  return {\n    app: null,\n    config: {\n      isNativeTag: zc,\n      performance: !1,\n      globalProperties: {},\n      optionMergeStrategies: {},\n      errorHandler: void 0,\n      warnHandler: void 0,\n      compilerOptions: {}\n    },\n    mixins: [],\n    components: {},\n    directives: {},\n    provides: /* @__PURE__ */ Object.create(null),\n    optionsCache: /* @__PURE__ */ new WeakMap(),\n    propsCache: /* @__PURE__ */ new WeakMap(),\n    emitsCache: /* @__PURE__ */ new WeakMap()\n  };\n}\nlet qE = 0;\nfunction YE(t, e) {\n  return function(r, i = null) {\n    be(r) || (r = $e({}, r)), i != null && !Ze(i) && ( true && I(\"root props passed to app.mount() must be an object.\"), i = null);\n    const s = v1(), o = /* @__PURE__ */ new WeakSet();\n    let a = !1;\n    const l = s.app = {\n      _uid: qE++,\n      _component: r,\n      _props: i,\n      _container: null,\n      _context: s,\n      _instance: null,\n      version: _h,\n      get config() {\n        return s.config;\n      },\n      set config(c) {\n         true && I(\n          \"app.config cannot be replaced. Modify individual options instead.\"\n        );\n      },\n      use(c, ...u) {\n        return o.has(c) ?  true && I(\"Plugin has already been applied to target app.\") : c && be(c.install) ? (o.add(c), c.install(l, ...u)) : be(c) ? (o.add(c), c(l, ...u)) :  true && I(\n          'A plugin must either be a function or an object with an \"install\" function.'\n        ), l;\n      },\n      mixin(c) {\n        return __VUE_OPTIONS_API__ ? s.mixins.includes(c) ?  true && I(\n          \"Mixin has already been applied to target app\" + (c.name ? `: ${c.name}` : \"\")\n        ) : s.mixins.push(c) :  true && I(\"Mixins are only available in builds supporting Options API\"), l;\n      },\n      component(c, u) {\n        return  true && kh(c, s.config), u ? ( true && s.components[c] && I(`Component \"${c}\" has already been registered in target app.`), s.components[c] = u, l) : s.components[c];\n      },\n      directive(c, u) {\n        return  true && i1(c), u ? ( true && s.directives[c] && I(`Directive \"${c}\" has already been registered in target app.`), s.directives[c] = u, l) : s.directives[c];\n      },\n      mount(c, u, d) {\n        if (a)\n           true && I(\n            \"App has already been mounted.\\nIf you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. `const createMyApp = () => createApp(App)`\"\n          );\n        else {\n           true && c.__vue_app__ && I(\n            \"There is already an app instance mounted on the host container.\\n If you want to mount another app on the same host container, you need to unmount the previous app by calling `app.unmount()` first.\"\n          );\n          const f = J(r, i);\n          return f.appContext = s, d === !0 ? d = \"svg\" : d === !1 && (d = void 0),  true && (s.reload = () => {\n            t(\n              jn(f),\n              c,\n              d\n            );\n          }), u && e ? e(f, c) : t(f, c, d), a = !0, l._container = c, c.__vue_app__ = l, ( true) && (l._instance = f.component, HT(l, _h)), _d(f.component) || f.component.proxy;\n        }\n      },\n      unmount() {\n        a ? (t(null, l._container), ( true) && (l._instance = null, FT(l)), delete l._container.__vue_app__) :  true && I(\"Cannot unmount an app that is not mounted.\");\n      },\n      provide(c, u) {\n        return  true && c in s.provides && I(\n          `App already provides property with key \"${String(c)}\". It will be overwritten with the new value.`\n        ), s.provides[c] = u, l;\n      },\n      runWithContext(c) {\n        const u = wo;\n        wo = l;\n        try {\n          return c();\n        } finally {\n          wo = u;\n        }\n      }\n    };\n    return l;\n  };\n}\nlet wo = null;\nfunction _n(t, e) {\n  if (!xt)\n     true && I(\"provide() can only be used inside setup().\");\n  else {\n    let n = xt.provides;\n    const r = xt.parent && xt.parent.provides;\n    r === n && (n = xt.provides = Object.create(r)), n[t] = e;\n  }\n}\nfunction Pt(t, e, n = !1) {\n  const r = xt || Ot;\n  if (r || wo) {\n    const i = r ? r.parent == null ? r.vnode.appContext && r.vnode.appContext.provides : r.parent.provides : wo._context.provides;\n    if (i && t in i)\n      return i[t];\n    if (arguments.length > 1)\n      return n && be(e) ? e.call(r && r.proxy) : e;\n     true && I(`injection \"${String(t)}\" not found.`);\n  } else\n     true && I(\"inject() can only be used inside setup() or functional components.\");\n}\nfunction zE() {\n  return !!(xt || Ot || wo);\n}\nfunction HE(t, e, n, r = !1) {\n  const i = {}, s = {};\n  bu(s, Pd, 1), t.propsDefaults = /* @__PURE__ */ Object.create(null), y1(t, e, i, s);\n  for (const o in t.propsOptions[0])\n    o in i || (i[o] = void 0);\n   true && w1(e || {}, i, t), n ? t.props = r ? i : Iy(i) : t.type.props ? t.props = i : t.props = s, t.attrs = s;\n}\nfunction FE(t) {\n  for (; t; ) {\n    if (t.type.__hmrId)\n      return !0;\n    t = t.parent;\n  }\n}\nfunction GE(t, e, n, r) {\n  const {\n    props: i,\n    attrs: s,\n    vnode: { patchFlag: o }\n  } = t, a = Oe(i), [l] = t.propsOptions;\n  let c = !1;\n  if (\n    // always force full diff in dev\n    // - #1942 if hmr is enabled with sfc component\n    // - vite#872 non-sfc component used by sfc component\n    !( true && FE(t)) && (r || o > 0) && !(o & 16)\n  ) {\n    if (o & 8) {\n      const u = t.vnode.dynamicProps;\n      for (let d = 0; d < u.length; d++) {\n        let f = u[d];\n        if (bd(t.emitsOptions, f))\n          continue;\n        const h = e[f];\n        if (l)\n          if (Ae(s, f))\n            h !== s[f] && (s[f] = h, c = !0);\n          else {\n            const p = mt(f);\n            i[p] = gh(\n              l,\n              a,\n              p,\n              h,\n              t,\n              !1\n            );\n          }\n        else\n          h !== s[f] && (s[f] = h, c = !0);\n      }\n    }\n  } else {\n    y1(t, e, i, s) && (c = !0);\n    let u;\n    for (const d in a)\n      (!e || // for camelCase\n      !Ae(e, d) && // it's possible the original props was passed in as kebab-case\n      // and converted to camelCase (#955)\n      ((u = rn(d)) === d || !Ae(e, u))) && (l ? n && // for camelCase\n      (n[d] !== void 0 || // for kebab-case\n      n[u] !== void 0) && (i[d] = gh(\n        l,\n        a,\n        d,\n        void 0,\n        t,\n        !0\n      )) : delete i[d]);\n    if (s !== a)\n      for (const d in s)\n        (!e || !Ae(e, d)) && (delete s[d], c = !0);\n  }\n  c && Zr(t, \"set\", \"$attrs\"),  true && w1(e || {}, i, t);\n}\nfunction y1(t, e, n, r) {\n  const [i, s] = t.propsOptions;\n  let o = !1, a;\n  if (e)\n    for (let l in e) {\n      if (Ui(l))\n        continue;\n      const c = e[l];\n      let u;\n      i && Ae(i, u = mt(l)) ? !s || !s.includes(u) ? n[u] = c : (a || (a = {}))[u] = c : bd(t.emitsOptions, l) || (!(l in r) || c !== r[l]) && (r[l] = c, o = !0);\n    }\n  if (s) {\n    const l = Oe(n), c = a || Ve;\n    for (let u = 0; u < s.length; u++) {\n      const d = s[u];\n      n[d] = gh(\n        i,\n        l,\n        d,\n        c[d],\n        t,\n        !Ae(c, d)\n      );\n    }\n  }\n  return o;\n}\nfunction gh(t, e, n, r, i, s) {\n  const o = t[n];\n  if (o != null) {\n    const a = Ae(o, \"default\");\n    if (a && r === void 0) {\n      const l = o.default;\n      if (o.type !== Function && !o.skipFactory && be(l)) {\n        const { propsDefaults: c } = i;\n        if (n in c)\n          r = c[n];\n        else {\n          const u = Bs(i);\n          r = c[n] = l.call(\n            null,\n            e\n          ), u();\n        }\n      } else\n        r = l;\n    }\n    o[\n      0\n      /* shouldCast */\n    ] && (s && !a ? r = !1 : o[\n      1\n      /* shouldCastTrue */\n    ] && (r === \"\" || r === rn(n)) && (r = !0));\n  }\n  return r;\n}\nfunction S1(t, e, n = !1) {\n  const r = e.propsCache, i = r.get(t);\n  if (i)\n    return i;\n  const s = t.props, o = {}, a = [];\n  let l = !1;\n  if (__VUE_OPTIONS_API__ && !be(t)) {\n    const u = (d) => {\n      l = !0;\n      const [f, h] = S1(d, e, !0);\n      $e(o, f), h && a.push(...h);\n    };\n    !n && e.mixins.length && e.mixins.forEach(u), t.extends && u(t.extends), t.mixins && t.mixins.forEach(u);\n  }\n  if (!s && !l)\n    return Ze(t) && r.set(t, mo), mo;\n  if (ie(s))\n    for (let u = 0; u < s.length; u++) {\n       true && !we(s[u]) && I(\"props must be strings when using array syntax.\", s[u]);\n      const d = mt(s[u]);\n      Em(d) && (o[d] = Ve);\n    }\n  else if (s) {\n     true && !Ze(s) && I(\"invalid props options\", s);\n    for (const u in s) {\n      const d = mt(u);\n      if (Em(d)) {\n        const f = s[u], h = o[d] = ie(f) || be(f) ? { type: f } : $e({}, f);\n        if (h) {\n          const p = Qm(Boolean, h.type), O = Qm(String, h.type);\n          h[\n            0\n            /* shouldCast */\n          ] = p > -1, h[\n            1\n            /* shouldCastTrue */\n          ] = O < 0 || p < O, (p > -1 || Ae(h, \"default\")) && a.push(d);\n        }\n      }\n    }\n  }\n  const c = [o, a];\n  return Ze(t) && r.set(t, c), c;\n}\nfunction Em(t) {\n  return t[0] !== \"$\" && !Ui(t) ? !0 : ( true && I(`Invalid prop name: \"${t}\" is a reserved property.`), !1);\n}\nfunction mh(t) {\n  return t === null ? \"null\" : typeof t == \"function\" ? t.name || \"\" : typeof t == \"object\" && t.constructor && t.constructor.name || \"\";\n}\nfunction $m(t, e) {\n  return mh(t) === mh(e);\n}\nfunction Qm(t, e) {\n  return ie(e) ? e.findIndex((n) => $m(n, t)) : be(e) && $m(e, t) ? 0 : -1;\n}\nfunction w1(t, e, n) {\n  const r = Oe(e), i = n.propsOptions[0];\n  for (const s in i) {\n    let o = i[s];\n    o != null && KE(\n      s,\n      r[s],\n      o,\n       true ? Dn(r) : 0,\n      !Ae(t, s) && !Ae(t, rn(s))\n    );\n  }\n}\nfunction KE(t, e, n, r, i) {\n  const { type: s, required: o, validator: a, skipCheck: l } = n;\n  if (o && i) {\n    I('Missing required prop: \"' + t + '\"');\n    return;\n  }\n  if (!(e == null && !o)) {\n    if (s != null && s !== !0 && !l) {\n      let c = !1;\n      const u = ie(s) ? s : [s], d = [];\n      for (let f = 0; f < u.length && !c; f++) {\n        const { valid: h, expectedType: p } = e$(e, u[f]);\n        d.push(p || \"\"), c = h;\n      }\n      if (!c) {\n        I(t$(t, e, d));\n        return;\n      }\n    }\n    a && !a(e, r) && I('Invalid prop: custom validator check failed for prop \"' + t + '\".');\n  }\n}\nconst JE = /* @__PURE__ */ Bt(\n  \"String,Number,Boolean,Function,Symbol,BigInt\"\n);\nfunction e$(t, e) {\n  let n;\n  const r = mh(e);\n  if (JE(r)) {\n    const i = typeof t;\n    n = i === r.toLowerCase(), !n && i === \"object\" && (n = t instanceof e);\n  } else\n    r === \"Object\" ? n = Ze(t) : r === \"Array\" ? n = ie(t) : r === \"null\" ? n = t === null : n = t instanceof e;\n  return {\n    valid: n,\n    expectedType: r\n  };\n}\nfunction t$(t, e, n) {\n  if (n.length === 0)\n    return `Prop type [] for prop \"${t}\" won't match anything. Did you mean to use type Array instead?`;\n  let r = `Invalid prop: type check failed for prop \"${t}\". Expected ${n.map(Wr).join(\" | \")}`;\n  const i = n[0], s = Gp(e), o = Cm(e, i), a = Cm(e, s);\n  return n.length === 1 && Am(i) && !n$(i, s) && (r += ` with value ${o}`), r += `, got ${s} `, Am(s) && (r += `with value ${a}.`), r;\n}\nfunction Cm(t, e) {\n  return e === \"String\" ? `\"${t}\"` : e === \"Number\" ? `${Number(t)}` : `${t}`;\n}\nfunction Am(t) {\n  return [\"string\", \"number\", \"boolean\"].some((n) => t.toLowerCase() === n);\n}\nfunction n$(...t) {\n  return t.some((e) => e.toLowerCase() === \"boolean\");\n}\nconst k1 = (t) => t[0] === \"_\" || t === \"$stable\", _O = (t) => ie(t) ? t.map(Sn) : [Sn(t)], r$ = (t, e, n) => {\n  if (e._n)\n    return e;\n  const r = ce((...i) => ( true && xt && (!n || n.root === xt.root) && I(\n    `Slot \"${t}\" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`\n  ), _O(e(...i))), n);\n  return r._c = !1, r;\n}, x1 = (t, e, n) => {\n  const r = t._ctx;\n  for (const i in t) {\n    if (k1(i))\n      continue;\n    const s = t[i];\n    if (be(s))\n      e[i] = r$(i, s, r);\n    else if (s != null) {\n       true && I(\n        `Non-function value encountered for slot \"${i}\". Prefer function slots for better performance.`\n      );\n      const o = _O(s);\n      e[i] = () => o;\n    }\n  }\n}, P1 = (t, e) => {\n   true && !ta(t.vnode) && I(\n    \"Non-function value encountered for default slot. Prefer function slots for better performance.\"\n  );\n  const n = _O(e);\n  t.slots.default = () => n;\n}, i$ = (t, e) => {\n  if (t.vnode.shapeFlag & 32) {\n    const n = e._;\n    n ? (t.slots = Oe(e), bu(e, \"_\", n)) : x1(\n      e,\n      t.slots = {}\n    );\n  } else\n    t.slots = {}, e && P1(t, e);\n  bu(t.slots, Pd, 1);\n}, s$ = (t, e, n) => {\n  const { vnode: r, slots: i } = t;\n  let s = !0, o = Ve;\n  if (r.shapeFlag & 32) {\n    const a = e._;\n    a ?  true && Hi ? ($e(i, e), Zr(t, \"set\", \"$slots\")) : n && a === 1 ? s = !1 : ($e(i, e), !n && a === 1 && delete i._) : (s = !e.$stable, x1(e, i)), o = e;\n  } else\n    e && (P1(t, e), o = { default: 1 });\n  if (s)\n    for (const a in i)\n      !k1(a) && o[a] == null && delete i[a];\n};\nfunction Pu(t, e, n, r, i = !1) {\n  if (ie(t)) {\n    t.forEach(\n      (f, h) => Pu(\n        f,\n        e && (ie(e) ? e[h] : e),\n        n,\n        r,\n        i\n      )\n    );\n    return;\n  }\n  if (Ds(r) && !i)\n    return;\n  const s = r.shapeFlag & 4 ? _d(r.component) || r.component.proxy : r.el, o = i ? null : s, { i: a, r: l } = t;\n  if ( true && !a) {\n    I(\n      \"Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.\"\n    );\n    return;\n  }\n  const c = e && e.r, u = a.refs === Ve ? a.refs = {} : a.refs, d = a.setupState;\n  if (c != null && c !== l && (we(c) ? (u[c] = null, Ae(d, c) && (d[c] = null)) : Ct(c) && (c.value = null)), be(l))\n    Vr(l, a, 12, [o, u]);\n  else {\n    const f = we(l), h = Ct(l);\n    if (f || h) {\n      const p = () => {\n        if (t.f) {\n          const O = f ? Ae(d, l) ? d[l] : u[l] : l.value;\n          i ? ie(O) && Fp(O, s) : ie(O) ? O.includes(s) || O.push(s) : f ? (u[l] = [s], Ae(d, l) && (d[l] = u[l])) : (l.value = [s], t.k && (u[t.k] = l.value));\n        } else\n          f ? (u[l] = o, Ae(d, l) && (d[l] = o)) : h ? (l.value = o, t.k && (u[t.k] = o)) :  true && I(\"Invalid template ref type:\", l, `(${typeof l})`);\n      };\n      o ? (p.id = -1, Yt(p, n)) : p();\n    } else\n       true && I(\"Invalid template ref type:\", l, `(${typeof l})`);\n  }\n}\nlet Yr = !1;\nconst o$ = (t) => t.namespaceURI.includes(\"svg\") && t.tagName !== \"foreignObject\", a$ = (t) => t.namespaceURI.includes(\"MathML\"), gc = (t) => {\n  if (o$(t))\n    return \"svg\";\n  if (a$(t))\n    return \"mathml\";\n}, ua = (t) => t.nodeType === 8;\nfunction l$(t) {\n  const {\n    mt: e,\n    p: n,\n    o: {\n      patchProp: r,\n      createText: i,\n      nextSibling: s,\n      parentNode: o,\n      remove: a,\n      insert: l,\n      createComment: c\n    }\n  } = t, u = (g, v) => {\n    if (!v.hasChildNodes()) {\n      ( true) && I(\n        \"Attempting to hydrate existing markup but container is empty. Performing full mount instead.\"\n      ), n(null, g, v), Su(), v._vnode = g;\n      return;\n    }\n    Yr = !1, d(v.firstChild, g, null, null, null), Su(), v._vnode = g, Yr && console.error(\"Hydration completed but contains mismatches.\");\n  }, d = (g, v, S, w, k, _ = !1) => {\n    const T = ua(g) && g.data === \"[\", C = () => O(\n      g,\n      v,\n      S,\n      w,\n      k,\n      T\n    ), { type: A, ref: Q, shapeFlag: W, patchFlag: L } = v;\n    let re = g.nodeType;\n    v.el = g, ( true) && (\"__vnode\" in g || Object.defineProperty(g, \"__vnode\", {\n      value: v,\n      enumerable: !1\n    }), \"__vueParentComponent\" in g || Object.defineProperty(g, \"__vueParentComponent\", {\n      value: S,\n      enumerable: !1\n    })), L === -2 && (_ = !1, v.dynamicChildren = null);\n    let Y = null;\n    switch (A) {\n      case ns:\n        re !== 3 ? v.children === \"\" ? (l(v.el = i(\"\"), o(g), g), Y = g) : Y = C() : (g.data !== v.children && (Yr = !0, ( true) && I(\n          \"Hydration text mismatch in\",\n          g.parentNode,\n          `\n  - rendered on server: ${JSON.stringify(\n            g.data\n          )}\n  - expected on client: ${JSON.stringify(v.children)}`\n        ), g.data = v.children), Y = s(g));\n        break;\n      case _t:\n        b(g) ? (Y = s(g), y(\n          v.el = g.content.firstChild,\n          g,\n          S\n        )) : re !== 8 || T ? Y = C() : Y = s(g);\n        break;\n      case Fi:\n        if (T && (g = s(g), re = g.nodeType), re === 1 || re === 3) {\n          Y = g;\n          const K = !v.children.length;\n          for (let B = 0; B < v.staticCount; B++)\n            K && (v.children += Y.nodeType === 1 ? Y.outerHTML : Y.data), B === v.staticCount - 1 && (v.anchor = Y), Y = s(Y);\n          return T ? s(Y) : Y;\n        } else\n          C();\n        break;\n      case Pe:\n        T ? Y = p(\n          g,\n          v,\n          S,\n          w,\n          k,\n          _\n        ) : Y = C();\n        break;\n      default:\n        if (W & 1)\n          (re !== 1 || v.type.toLowerCase() !== g.tagName.toLowerCase()) && !b(g) ? Y = C() : Y = f(\n            g,\n            v,\n            S,\n            w,\n            k,\n            _\n          );\n        else if (W & 6) {\n          v.slotScopeIds = k;\n          const K = o(g);\n          if (T ? Y = m(g) : ua(g) && g.data === \"teleport start\" ? Y = m(g, g.data, \"teleport end\") : Y = s(g), e(\n            v,\n            K,\n            null,\n            S,\n            w,\n            gc(K),\n            _\n          ), Ds(v)) {\n            let B;\n            T ? (B = J(Pe), B.anchor = Y ? Y.previousSibling : K.lastChild) : B = g.nodeType === 3 ? He(\"\") : J(\"div\"), B.el = g, v.component.subTree = B;\n          }\n        } else\n          W & 64 ? re !== 8 ? Y = C() : Y = v.type.hydrate(\n            g,\n            v,\n            S,\n            w,\n            k,\n            _,\n            t,\n            h\n          ) : W & 128 ? Y = v.type.hydrate(\n            g,\n            v,\n            S,\n            w,\n            gc(o(g)),\n            k,\n            _,\n            t,\n            d\n          ) : ( true) && I(\"Invalid HostVNode type:\", A, `(${typeof A})`);\n    }\n    return Q != null && Pu(Q, null, w, v), Y;\n  }, f = (g, v, S, w, k, _) => {\n    _ = _ || !!v.dynamicChildren;\n    const { type: T, props: C, patchFlag: A, shapeFlag: Q, dirs: W, transition: L } = v, re = T === \"input\" || T === \"option\";\n    if (true) {\n      W && _r(v, null, S, \"created\");\n      let Y = !1;\n      if (b(g)) {\n        Y = $1(w, L) && S && S.vnode.props && S.vnode.props.appear;\n        const B = g.content.firstChild;\n        Y && L.beforeEnter(B), y(B, g, S), v.el = g = B;\n      }\n      if (Q & 16 && // skip if element has innerHTML / textContent\n      !(C && (C.innerHTML || C.textContent))) {\n        let B = h(\n          g.firstChild,\n          v,\n          g,\n          S,\n          w,\n          k,\n          _\n        ), _e = !1;\n        for (; B; ) {\n          Yr = !0, ( true) && !_e && (I(\n            \"Hydration children mismatch on\",\n            g,\n            `\nServer rendered element contains more child nodes than client vdom.`\n          ), _e = !0);\n          const Ce = B;\n          B = B.nextSibling, a(Ce);\n        }\n      } else\n        Q & 8 && g.textContent !== v.children && (Yr = !0, ( true) && I(\n          \"Hydration text content mismatch on\",\n          g,\n          `\n  - rendered on server: ${g.textContent}\n  - expected on client: ${v.children}`\n        ), g.textContent = v.children);\n      if (C)\n        if (true)\n          for (const B in C)\n             true && c$(g, B, C[B], v, S) && (Yr = !0), (re && (B.endsWith(\"value\") || B === \"indeterminate\") || oi(B) && !Ui(B) || // force hydrate v-bind with .prop modifiers\n            B[0] === \".\") && r(\n              g,\n              B,\n              null,\n              C[B],\n              void 0,\n              void 0,\n              S\n            );\n        else\n          {}\n      let K;\n      (K = C && C.onVnodeBeforeMount) && yn(K, S, v), W && _r(v, null, S, \"beforeMount\"), ((K = C && C.onVnodeMounted) || W || Y) && Jy(() => {\n        K && yn(K, S, v), Y && L.enter(g), W && _r(v, null, S, \"mounted\");\n      }, w);\n    }\n    return g.nextSibling;\n  }, h = (g, v, S, w, k, _, T) => {\n    T = T || !!v.dynamicChildren;\n    const C = v.children, A = C.length;\n    let Q = !1;\n    for (let W = 0; W < A; W++) {\n      const L = T ? C[W] : C[W] = Sn(C[W]);\n      if (g)\n        g = d(\n          g,\n          L,\n          w,\n          k,\n          _,\n          T\n        );\n      else {\n        if (L.type === ns && !L.children)\n          continue;\n        Yr = !0, ( true) && !Q && (I(\n          \"Hydration children mismatch on\",\n          S,\n          `\nServer rendered element contains fewer child nodes than client vdom.`\n        ), Q = !0), n(\n          null,\n          L,\n          S,\n          null,\n          w,\n          k,\n          gc(S),\n          _\n        );\n      }\n    }\n    return g;\n  }, p = (g, v, S, w, k, _) => {\n    const { slotScopeIds: T } = v;\n    T && (k = k ? k.concat(T) : T);\n    const C = o(g), A = h(\n      s(g),\n      v,\n      C,\n      S,\n      w,\n      k,\n      _\n    );\n    return A && ua(A) && A.data === \"]\" ? s(v.anchor = A) : (Yr = !0, l(v.anchor = c(\"]\"), C, A), A);\n  }, O = (g, v, S, w, k, _) => {\n    if (Yr = !0, ( true) && I(\n      `Hydration node mismatch:\n- rendered on server:`,\n      g,\n      g.nodeType === 3 ? \"(text)\" : ua(g) && g.data === \"[\" ? \"(start of fragment)\" : \"\",\n      `\n- expected on client:`,\n      v.type\n    ), v.el = null, _) {\n      const A = m(g);\n      for (; ; ) {\n        const Q = s(g);\n        if (Q && Q !== A)\n          a(Q);\n        else\n          break;\n      }\n    }\n    const T = s(g), C = o(g);\n    return a(g), n(\n      null,\n      v,\n      C,\n      T,\n      S,\n      w,\n      gc(C),\n      k\n    ), T;\n  }, m = (g, v = \"[\", S = \"]\") => {\n    let w = 0;\n    for (; g; )\n      if (g = s(g), g && ua(g) && (g.data === v && w++, g.data === S)) {\n        if (w === 0)\n          return s(g);\n        w--;\n      }\n    return g;\n  }, y = (g, v, S) => {\n    const w = v.parentNode;\n    w && w.replaceChild(g, v);\n    let k = S;\n    for (; k; )\n      k.vnode.el === v && (k.vnode.el = k.subTree.el = g), k = k.parent;\n  }, b = (g) => g.nodeType === 1 && g.tagName.toLowerCase() === \"template\";\n  return [u, d];\n}\nfunction c$(t, e, n, r, i) {\n  var s;\n  let o, a, l, c;\n  if (e === \"class\")\n    l = t.getAttribute(\"class\"), c = Ke(n), u$(Rm(l || \"\"), Rm(c)) || (o = a = \"class\");\n  else if (e === \"style\") {\n    l = t.getAttribute(\"style\"), c = we(n) ? n : L_(Br(n));\n    const u = Nm(l), d = Nm(c);\n    if (r.dirs)\n      for (const { dir: h, value: p } of r.dirs)\n        h.name === \"show\" && !p && d.set(\"display\", \"none\");\n    const f = i == null ? void 0 : i.subTree;\n    if (r === f || (f == null ? void 0 : f.type) === Pe && f.children.includes(r)) {\n      const h = (s = i == null ? void 0 : i.getCssVars) == null ? void 0 : s.call(i);\n      for (const p in h)\n        d.set(`--${p}`, String(h[p]));\n    }\n    d$(u, d) || (o = a = \"style\");\n  } else\n    (t instanceof SVGElement && K_(e) || t instanceof HTMLElement && (cm(e) || G_(e))) && (cm(e) ? (l = t.hasAttribute(e), c = Jp(n)) : n == null ? (l = t.hasAttribute(e), c = !1) : (t.hasAttribute(e) ? l = t.getAttribute(e) : e === \"value\" && t.tagName === \"TEXTAREA\" ? l = t.value : l = !1, c = J_(n) ? String(n) : !1), l !== c && (o = \"attribute\", a = e));\n  if (o) {\n    const u = (h) => h === !1 ? \"(not rendered)\" : `${a}=\"${h}\"`, d = `Hydration ${o} mismatch on`, f = `\n  - rendered on server: ${u(l)}\n  - expected on client: ${u(c)}\n  Note: this mismatch is check-only. The DOM will not be rectified in production due to performance overhead.\n  You should fix the source of the mismatch.`;\n    return I(d, t, f), !0;\n  }\n  return !1;\n}\nfunction Rm(t) {\n  return new Set(t.trim().split(/\\s+/));\n}\nfunction u$(t, e) {\n  if (t.size !== e.size)\n    return !1;\n  for (const n of t)\n    if (!e.has(n))\n      return !1;\n  return !0;\n}\nfunction Nm(t) {\n  const e = /* @__PURE__ */ new Map();\n  for (const n of t.split(\";\")) {\n    let [r, i] = n.split(\":\");\n    r = r == null ? void 0 : r.trim(), i = i == null ? void 0 : i.trim(), r && i && e.set(r, i);\n  }\n  return e;\n}\nfunction d$(t, e) {\n  if (t.size !== e.size)\n    return !1;\n  for (const [n, r] of t)\n    if (r !== e.get(n))\n      return !1;\n  return !0;\n}\nlet da, Wi;\nfunction Fr(t, e) {\n  t.appContext.config.performance && _u() && Wi.mark(`vue-${e}-${t.uid}`), ( true) && JT(t, e, _u() ? Wi.now() : Date.now());\n}\nfunction Gr(t, e) {\n  if (t.appContext.config.performance && _u()) {\n    const n = `vue-${e}-${t.uid}`, r = n + \":end\";\n    Wi.mark(r), Wi.measure(\n      `<${Td(t, t.type)}> ${e}`,\n      n,\n      r\n    ), Wi.clearMarks(n), Wi.clearMarks(r);\n  }\n  ( true) && eE(t, e, _u() ? Wi.now() : Date.now());\n}\nfunction _u() {\n  return da !== void 0 || (typeof window < \"u\" && window.performance ? (da = !0, Wi = window.performance) : da = !1), da;\n}\nfunction f$() {\n  const t = [];\n  if (typeof __VUE_OPTIONS_API__ != \"boolean\" && ( true && t.push(\"__VUE_OPTIONS_API__\"), bo().__VUE_OPTIONS_API__ = !0), typeof __VUE_PROD_DEVTOOLS__ != \"boolean\" && ( true && t.push(\"__VUE_PROD_DEVTOOLS__\"), bo().__VUE_PROD_DEVTOOLS__ = !1), typeof __VUE_PROD_HYDRATION_MISMATCH_DETAILS__ != \"boolean\" && ( true && t.push(\"__VUE_PROD_HYDRATION_MISMATCH_DETAILS__\"), bo().__VUE_PROD_HYDRATION_MISMATCH_DETAILS__ = !1),  true && t.length) {\n    const e = t.length > 1;\n    console.warn(\n      `Feature flag${e ? \"s\" : \"\"} ${t.join(\", \")} ${e ? \"are\" : \"is\"} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.\n\nFor more details, see https://link.vuejs.org/feature-flags.`\n    );\n  }\n}\nconst Yt = Jy;\nfunction _1(t) {\n  return E1(t);\n}\nfunction T1(t) {\n  return E1(t, l$);\n}\nfunction E1(t, e) {\n  f$();\n  const n = bo();\n  n.__VUE__ = !0, ( true) && pO(n.__VUE_DEVTOOLS_GLOBAL_HOOK__, n);\n  const {\n    insert: r,\n    remove: i,\n    patchProp: s,\n    createElement: o,\n    createText: a,\n    createComment: l,\n    setText: c,\n    setElementText: u,\n    parentNode: d,\n    nextSibling: f,\n    setScopeId: h = it,\n    insertStaticContent: p\n  } = t, O = (x, $, N, M = null, X = null, z = null, ee = void 0, H = null, F =  true && Hi ? !1 : !!$.dynamicChildren) => {\n    if (x === $)\n      return;\n    x && !lr(x, $) && (M = Tn(x), Be(x, X, z, !0), x = null), $.patchFlag === -2 && (F = !1, $.dynamicChildren = null);\n    const { type: U, ref: se, shapeFlag: me } = $;\n    switch (U) {\n      case ns:\n        m(x, $, N, M);\n        break;\n      case _t:\n        y(x, $, N, M);\n        break;\n      case Fi:\n        x == null ? b($, N, M, ee) :  true && g(x, $, N, ee);\n        break;\n      case Pe:\n        W(\n          x,\n          $,\n          N,\n          M,\n          X,\n          z,\n          ee,\n          H,\n          F\n        );\n        break;\n      default:\n        me & 1 ? w(\n          x,\n          $,\n          N,\n          M,\n          X,\n          z,\n          ee,\n          H,\n          F\n        ) : me & 6 ? L(\n          x,\n          $,\n          N,\n          M,\n          X,\n          z,\n          ee,\n          H,\n          F\n        ) : me & 64 || me & 128 ? U.process(\n          x,\n          $,\n          N,\n          M,\n          X,\n          z,\n          ee,\n          H,\n          F,\n          En\n        ) :  true && I(\"Invalid VNode type:\", U, `(${typeof U})`);\n    }\n    se != null && X && Pu(se, x && x.ref, z, $ || x, !$);\n  }, m = (x, $, N, M) => {\n    if (x == null)\n      r(\n        $.el = a($.children),\n        N,\n        M\n      );\n    else {\n      const X = $.el = x.el;\n      $.children !== x.children && c(X, $.children);\n    }\n  }, y = (x, $, N, M) => {\n    x == null ? r(\n      $.el = l($.children || \"\"),\n      N,\n      M\n    ) : $.el = x.el;\n  }, b = (x, $, N, M) => {\n    [x.el, x.anchor] = p(\n      x.children,\n      $,\n      N,\n      M,\n      x.el,\n      x.anchor\n    );\n  }, g = (x, $, N, M) => {\n    if ($.children !== x.children) {\n      const X = f(x.anchor);\n      S(x), [$.el, $.anchor] = p(\n        $.children,\n        N,\n        X,\n        M\n      );\n    } else\n      $.el = x.el, $.anchor = x.anchor;\n  }, v = ({ el: x, anchor: $ }, N, M) => {\n    let X;\n    for (; x && x !== $; )\n      X = f(x), r(x, N, M), x = X;\n    r($, N, M);\n  }, S = ({ el: x, anchor: $ }) => {\n    let N;\n    for (; x && x !== $; )\n      N = f(x), i(x), x = N;\n    i($);\n  }, w = (x, $, N, M, X, z, ee, H, F) => {\n    $.type === \"svg\" ? ee = \"svg\" : $.type === \"math\" && (ee = \"mathml\"), x == null ? k(\n      $,\n      N,\n      M,\n      X,\n      z,\n      ee,\n      H,\n      F\n    ) : C(\n      x,\n      $,\n      X,\n      z,\n      ee,\n      H,\n      F\n    );\n  }, k = (x, $, N, M, X, z, ee, H) => {\n    let F, U;\n    const { props: se, shapeFlag: me, transition: he, dirs: ye } = x;\n    if (F = x.el = o(\n      x.type,\n      z,\n      se && se.is,\n      se\n    ), me & 8 ? u(F, x.children) : me & 16 && T(\n      x.children,\n      F,\n      null,\n      M,\n      X,\n      ff(x, z),\n      ee,\n      H\n    ), ye && _r(x, null, M, \"created\"), _(F, x, x.scopeId, ee, M), se) {\n      for (const Ue in se)\n        Ue !== \"value\" && !Ui(Ue) && s(\n          F,\n          Ue,\n          null,\n          se[Ue],\n          z,\n          x.children,\n          M,\n          X,\n          It\n        );\n      \"value\" in se && s(F, \"value\", null, se.value, z), (U = se.onVnodeBeforeMount) && yn(U, M, x);\n    }\n    ( true) && (Object.defineProperty(F, \"__vnode\", {\n      value: x,\n      enumerable: !1\n    }), Object.defineProperty(F, \"__vueParentComponent\", {\n      value: M,\n      enumerable: !1\n    })), ye && _r(x, null, M, \"beforeMount\");\n    const Qe = $1(X, he);\n    Qe && he.beforeEnter(F), r(F, $, N), ((U = se && se.onVnodeMounted) || Qe || ye) && Yt(() => {\n      U && yn(U, M, x), Qe && he.enter(F), ye && _r(x, null, M, \"mounted\");\n    }, X);\n  }, _ = (x, $, N, M, X) => {\n    if (N && h(x, N), M)\n      for (let z = 0; z < M.length; z++)\n        h(x, M[z]);\n    if (X) {\n      let z = X.subTree;\n      if ( true && z.patchFlag > 0 && z.patchFlag & 2048 && (z = yd(z.children) || z), $ === z) {\n        const ee = X.vnode;\n        _(\n          x,\n          ee,\n          ee.scopeId,\n          ee.slotScopeIds,\n          X.parent\n        );\n      }\n    }\n  }, T = (x, $, N, M, X, z, ee, H, F = 0) => {\n    for (let U = F; U < x.length; U++) {\n      const se = x[U] = H ? Ai(x[U]) : Sn(x[U]);\n      O(\n        null,\n        se,\n        $,\n        N,\n        M,\n        X,\n        z,\n        ee,\n        H\n      );\n    }\n  }, C = (x, $, N, M, X, z, ee) => {\n    const H = $.el = x.el;\n    let { patchFlag: F, dynamicChildren: U, dirs: se } = $;\n    F |= x.patchFlag & 16;\n    const me = x.props || Ve, he = $.props || Ve;\n    let ye;\n    if (N && Os(N, !1), (ye = he.onVnodeBeforeUpdate) && yn(ye, N, $, x), se && _r($, x, N, \"beforeUpdate\"), N && Os(N, !0),  true && Hi && (F = 0, ee = !1, U = null), U ? (A(\n      x.dynamicChildren,\n      U,\n      H,\n      N,\n      M,\n      ff($, X),\n      z\n    ),  true && ja(x, $)) : ee || _e(\n      x,\n      $,\n      H,\n      null,\n      N,\n      M,\n      ff($, X),\n      z,\n      !1\n    ), F > 0) {\n      if (F & 16)\n        Q(\n          H,\n          $,\n          me,\n          he,\n          N,\n          M,\n          X\n        );\n      else if (F & 2 && me.class !== he.class && s(H, \"class\", null, he.class, X), F & 4 && s(H, \"style\", me.style, he.style, X), F & 8) {\n        const Qe = $.dynamicProps;\n        for (let Ue = 0; Ue < Qe.length; Ue++) {\n          const tt = Qe[Ue], bt = me[tt], $n = he[tt];\n          ($n !== bt || tt === \"value\") && s(\n            H,\n            tt,\n            bt,\n            $n,\n            X,\n            x.children,\n            N,\n            M,\n            It\n          );\n        }\n      }\n      F & 1 && x.children !== $.children && u(H, $.children);\n    } else\n      !ee && U == null && Q(\n        H,\n        $,\n        me,\n        he,\n        N,\n        M,\n        X\n      );\n    ((ye = he.onVnodeUpdated) || se) && Yt(() => {\n      ye && yn(ye, N, $, x), se && _r($, x, N, \"updated\");\n    }, M);\n  }, A = (x, $, N, M, X, z, ee) => {\n    for (let H = 0; H < $.length; H++) {\n      const F = x[H], U = $[H], se = (\n        // oldVNode may be an errored async setup() component inside Suspense\n        // which will not have a mounted element\n        F.el && // - In the case of a Fragment, we need to provide the actual parent\n        // of the Fragment itself so it can move its children.\n        (F.type === Pe || // - In the case of different nodes, there is going to be a replacement\n        // which also requires the correct parent container\n        !lr(F, U) || // - In the case of a component, it could contain anything.\n        F.shapeFlag & 70) ? d(F.el) : (\n          // In other cases, the parent container is not actually used so we\n          // just pass the block element here to avoid a DOM parentNode call.\n          N\n        )\n      );\n      O(\n        F,\n        U,\n        se,\n        null,\n        M,\n        X,\n        z,\n        ee,\n        !0\n      );\n    }\n  }, Q = (x, $, N, M, X, z, ee) => {\n    if (N !== M) {\n      if (N !== Ve)\n        for (const H in N)\n          !Ui(H) && !(H in M) && s(\n            x,\n            H,\n            N[H],\n            null,\n            ee,\n            $.children,\n            X,\n            z,\n            It\n          );\n      for (const H in M) {\n        if (Ui(H))\n          continue;\n        const F = M[H], U = N[H];\n        F !== U && H !== \"value\" && s(\n          x,\n          H,\n          U,\n          F,\n          ee,\n          $.children,\n          X,\n          z,\n          It\n        );\n      }\n      \"value\" in M && s(x, \"value\", N.value, M.value, ee);\n    }\n  }, W = (x, $, N, M, X, z, ee, H, F) => {\n    const U = $.el = x ? x.el : a(\"\"), se = $.anchor = x ? x.anchor : a(\"\");\n    let { patchFlag: me, dynamicChildren: he, slotScopeIds: ye } = $;\n     true && // #5523 dev root fragment may inherit directives\n    (Hi || me & 2048) && (me = 0, F = !1, he = null), ye && (H = H ? H.concat(ye) : ye), x == null ? (r(U, N, M), r(se, N, M), T(\n      // #10007\n      // such fragment like `<></>` will be compiled into\n      // a fragment which doesn't have a children.\n      // In this case fallback to an empty array\n      $.children || [],\n      N,\n      se,\n      X,\n      z,\n      ee,\n      H,\n      F\n    )) : me > 0 && me & 64 && he && // #2715 the previous fragment could've been a BAILed one as a result\n    // of renderSlot() with no valid children\n    x.dynamicChildren ? (A(\n      x.dynamicChildren,\n      he,\n      N,\n      X,\n      z,\n      ee,\n      H\n    ),  true ? ja(x, $) : (\n      // #2080 if the stable fragment has a key, it's a <template v-for> that may\n      //  get moved around. Make sure all root level vnodes inherit el.\n      // #2134 or if it's a component root, it may also get moved around\n      // as the component is being moved.\n      0\n    )) : _e(\n      x,\n      $,\n      N,\n      se,\n      X,\n      z,\n      ee,\n      H,\n      F\n    );\n  }, L = (x, $, N, M, X, z, ee, H, F) => {\n    $.slotScopeIds = H, x == null ? $.shapeFlag & 512 ? X.ctx.activate(\n      $,\n      N,\n      M,\n      ee,\n      F\n    ) : re(\n      $,\n      N,\n      M,\n      X,\n      z,\n      ee,\n      F\n    ) : Y(x, $, F);\n  }, re = (x, $, N, M, X, z, ee) => {\n    const H = x.component = V1(\n      x,\n      M,\n      X\n    );\n    if ( true && H.type.__hmrId && UT(H),  true && (Ia(x), Fr(H, \"mount\")), ta(x) && (H.ctx.renderer = En),  true && Fr(H, \"init\"), W1(H),  true && Gr(H, \"init\"), H.asyncDep) {\n      if (X && X.registerDep(H, K), !x.el) {\n        const F = H.subTree = J(_t);\n        y(null, F, $, N);\n      }\n    } else\n      K(\n        H,\n        x,\n        $,\n        N,\n        X,\n        z,\n        ee\n      );\n     true && (Wa(), Gr(H, \"mount\"));\n  }, Y = (x, $, N) => {\n    const M = $.component = x.component;\n    if (oE(x, $, N))\n      if (M.asyncDep && !M.asyncResolved) {\n         true && Ia($), B(M, $, N),  true && Wa();\n        return;\n      } else\n        M.next = $, BT(M.update), M.effect.dirty = !0, M.update();\n    else\n      $.el = x.el, M.vnode = $;\n  }, K = (x, $, N, M, X, z, ee) => {\n    const H = () => {\n      if (x.isMounted) {\n        let { next: se, bu: me, u: he, parent: ye, vnode: Qe } = x;\n        {\n          const yi = Q1(x);\n          if (yi) {\n            se && (se.el = Qe.el, B(x, se, ee)), yi.asyncDep.then(() => {\n              x.isUnmounted || H();\n            });\n            return;\n          }\n        }\n        let Ue = se, tt;\n         true && Ia(se || x.vnode), Os(x, !1), se ? (se.el = Qe.el, B(x, se, ee)) : se = Qe, me && Ii(me), (tt = se.props && se.props.onVnodeBeforeUpdate) && yn(tt, ye, se, Qe), Os(x, !0),  true && Fr(x, \"render\");\n        const bt = Hc(x);\n         true && Gr(x, \"render\");\n        const $n = x.subTree;\n        x.subTree = bt,  true && Fr(x, \"patch\"), O(\n          $n,\n          bt,\n          // parent may have changed if it's in a teleport\n          d($n.el),\n          // anchor may have changed if it's in a fragment\n          Tn($n),\n          x,\n          X,\n          z\n        ),  true && Gr(x, \"patch\"), se.el = bt.el, Ue === null && gO(x, bt.el), he && Yt(he, X), (tt = se.props && se.props.onVnodeUpdated) && Yt(\n          () => yn(tt, ye, se, Qe),\n          X\n        ), ( true) && zy(x),  true && Wa();\n      } else {\n        let se;\n        const { el: me, props: he } = $, { bm: ye, m: Qe, parent: Ue } = x, tt = Ds($);\n        if (Os(x, !1), ye && Ii(ye), !tt && (se = he && he.onVnodeBeforeMount) && yn(se, Ue, $), Os(x, !0), me && Ur) {\n          const bt = () => {\n             true && Fr(x, \"render\"), x.subTree = Hc(x),  true && Gr(x, \"render\"),  true && Fr(x, \"hydrate\"), Ur(\n              me,\n              x.subTree,\n              x,\n              X,\n              null\n            ),  true && Gr(x, \"hydrate\");\n          };\n          tt ? $.type.__asyncLoader().then(\n            // note: we are moving the render call into an async callback,\n            // which means it won't track dependencies - but it's ok because\n            // a server-rendered async wrapper is already in resolved state\n            // and it will never need to change.\n            () => !x.isUnmounted && bt()\n          ) : bt();\n        } else {\n           true && Fr(x, \"render\");\n          const bt = x.subTree = Hc(x);\n           true && Gr(x, \"render\"),  true && Fr(x, \"patch\"), O(\n            null,\n            bt,\n            N,\n            M,\n            x,\n            X,\n            z\n          ),  true && Gr(x, \"patch\"), $.el = bt.el;\n        }\n        if (Qe && Yt(Qe, X), !tt && (se = he && he.onVnodeMounted)) {\n          const bt = $;\n          Yt(\n            () => yn(se, Ue, bt),\n            X\n          );\n        }\n        ($.shapeFlag & 256 || Ue && Ds(Ue.vnode) && Ue.vnode.shapeFlag & 256) && x.a && Yt(x.a, X), x.isMounted = !0, ( true) && uh(x), $ = N = M = null;\n      }\n    }, F = x.effect = new Ao(\n      H,\n      it,\n      () => Nl(U),\n      x.scope\n      // track it in component's effect scope\n    ), U = x.update = () => {\n      F.dirty && F.run();\n    };\n    U.id = x.uid, Os(x, !0),  true && (F.onTrack = x.rtc ? (se) => Ii(x.rtc, se) : void 0, F.onTrigger = x.rtg ? (se) => Ii(x.rtg, se) : void 0, U.ownerInstance = x), U();\n  }, B = (x, $, N) => {\n    $.component = x;\n    const M = x.vnode.props;\n    x.vnode = $, x.next = null, GE(x, $.props, M, N), s$(x, $.children, N), ds(), mm(x), fs();\n  }, _e = (x, $, N, M, X, z, ee, H, F = !1) => {\n    const U = x && x.children, se = x ? x.shapeFlag : 0, me = $.children, { patchFlag: he, shapeFlag: ye } = $;\n    if (he > 0) {\n      if (he & 128) {\n        ue(\n          U,\n          me,\n          N,\n          M,\n          X,\n          z,\n          ee,\n          H,\n          F\n        );\n        return;\n      } else if (he & 256) {\n        Ce(\n          U,\n          me,\n          N,\n          M,\n          X,\n          z,\n          ee,\n          H,\n          F\n        );\n        return;\n      }\n    }\n    ye & 8 ? (se & 16 && It(U, X, z), me !== U && u(N, me)) : se & 16 ? ye & 16 ? ue(\n      U,\n      me,\n      N,\n      M,\n      X,\n      z,\n      ee,\n      H,\n      F\n    ) : It(U, X, z, !0) : (se & 8 && u(N, \"\"), ye & 16 && T(\n      me,\n      N,\n      M,\n      X,\n      z,\n      ee,\n      H,\n      F\n    ));\n  }, Ce = (x, $, N, M, X, z, ee, H, F) => {\n    x = x || mo, $ = $ || mo;\n    const U = x.length, se = $.length, me = Math.min(U, se);\n    let he;\n    for (he = 0; he < me; he++) {\n      const ye = $[he] = F ? Ai($[he]) : Sn($[he]);\n      O(\n        x[he],\n        ye,\n        N,\n        null,\n        X,\n        z,\n        ee,\n        H,\n        F\n      );\n    }\n    U > se ? It(\n      x,\n      X,\n      z,\n      !0,\n      !1,\n      me\n    ) : T(\n      $,\n      N,\n      M,\n      X,\n      z,\n      ee,\n      H,\n      F,\n      me\n    );\n  }, ue = (x, $, N, M, X, z, ee, H, F) => {\n    let U = 0;\n    const se = $.length;\n    let me = x.length - 1, he = se - 1;\n    for (; U <= me && U <= he; ) {\n      const ye = x[U], Qe = $[U] = F ? Ai($[U]) : Sn($[U]);\n      if (lr(ye, Qe))\n        O(\n          ye,\n          Qe,\n          N,\n          null,\n          X,\n          z,\n          ee,\n          H,\n          F\n        );\n      else\n        break;\n      U++;\n    }\n    for (; U <= me && U <= he; ) {\n      const ye = x[me], Qe = $[he] = F ? Ai($[he]) : Sn($[he]);\n      if (lr(ye, Qe))\n        O(\n          ye,\n          Qe,\n          N,\n          null,\n          X,\n          z,\n          ee,\n          H,\n          F\n        );\n      else\n        break;\n      me--, he--;\n    }\n    if (U > me) {\n      if (U <= he) {\n        const ye = he + 1, Qe = ye < se ? $[ye].el : M;\n        for (; U <= he; )\n          O(\n            null,\n            $[U] = F ? Ai($[U]) : Sn($[U]),\n            N,\n            Qe,\n            X,\n            z,\n            ee,\n            H,\n            F\n          ), U++;\n      }\n    } else if (U > he)\n      for (; U <= me; )\n        Be(x[U], X, z, !0), U++;\n    else {\n      const ye = U, Qe = U, Ue = /* @__PURE__ */ new Map();\n      for (U = Qe; U <= he; U++) {\n        const Lt = $[U] = F ? Ai($[U]) : Sn($[U]);\n        Lt.key != null && ( true && Ue.has(Lt.key) && I(\n          \"Duplicate keys found during update:\",\n          JSON.stringify(Lt.key),\n          \"Make sure keys are unique.\"\n        ), Ue.set(Lt.key, U));\n      }\n      let tt, bt = 0;\n      const $n = he - Qe + 1;\n      let yi = !1, ac = 0;\n      const ps = new Array($n);\n      for (U = 0; U < $n; U++)\n        ps[U] = 0;\n      for (U = ye; U <= me; U++) {\n        const Lt = x[U];\n        if (bt >= $n) {\n          Be(Lt, X, z, !0);\n          continue;\n        }\n        let Un;\n        if (Lt.key != null)\n          Un = Ue.get(Lt.key);\n        else\n          for (tt = Qe; tt <= he; tt++)\n            if (ps[tt - Qe] === 0 && lr(Lt, $[tt])) {\n              Un = tt;\n              break;\n            }\n        Un === void 0 ? Be(Lt, X, z, !0) : (ps[Un - Qe] = U + 1, Un >= ac ? ac = Un : yi = !0, O(\n          Lt,\n          $[Un],\n          N,\n          null,\n          X,\n          z,\n          ee,\n          H,\n          F\n        ), bt++);\n      }\n      const lc = yi ? h$(ps) : mo;\n      for (tt = lc.length - 1, U = $n - 1; U >= 0; U--) {\n        const Lt = Qe + U, Un = $[Lt], ro = Lt + 1 < se ? $[Lt + 1].el : M;\n        ps[U] === 0 ? O(\n          null,\n          Un,\n          N,\n          ro,\n          X,\n          z,\n          ee,\n          H,\n          F\n        ) : yi && (tt < 0 || U !== lc[tt] ? ge(Un, N, ro, 2) : tt--);\n      }\n    }\n  }, ge = (x, $, N, M, X = null) => {\n    const { el: z, type: ee, transition: H, children: F, shapeFlag: U } = x;\n    if (U & 6) {\n      ge(x.component.subTree, $, N, M);\n      return;\n    }\n    if (U & 128) {\n      x.suspense.move($, N, M);\n      return;\n    }\n    if (U & 64) {\n      ee.move(x, $, N, En);\n      return;\n    }\n    if (ee === Pe) {\n      r(z, $, N);\n      for (let me = 0; me < F.length; me++)\n        ge(F[me], $, N, M);\n      r(x.anchor, $, N);\n      return;\n    }\n    if (ee === Fi) {\n      v(x, $, N);\n      return;\n    }\n    if (M !== 2 && U & 1 && H)\n      if (M === 0)\n        H.beforeEnter(z), r(z, $, N), Yt(() => H.enter(z), X);\n      else {\n        const { leave: me, delayLeave: he, afterLeave: ye } = H, Qe = () => r(z, $, N), Ue = () => {\n          me(z, () => {\n            Qe(), ye && ye();\n          });\n        };\n        he ? he(z, Qe, Ue) : Ue();\n      }\n    else\n      r(z, $, N);\n  }, Be = (x, $, N, M = !1, X = !1) => {\n    const {\n      type: z,\n      props: ee,\n      ref: H,\n      children: F,\n      dynamicChildren: U,\n      shapeFlag: se,\n      patchFlag: me,\n      dirs: he\n    } = x;\n    if (H != null && Pu(H, null, N, x, !0), se & 256) {\n      $.ctx.deactivate(x);\n      return;\n    }\n    const ye = se & 1 && he, Qe = !Ds(x);\n    let Ue;\n    if (Qe && (Ue = ee && ee.onVnodeBeforeUnmount) && yn(Ue, $, x), se & 6)\n      Vt(x.component, N, M);\n    else {\n      if (se & 128) {\n        x.suspense.unmount(N, M);\n        return;\n      }\n      ye && _r(x, null, $, \"beforeUnmount\"), se & 64 ? x.type.remove(\n        x,\n        $,\n        N,\n        X,\n        En,\n        M\n      ) : U && // #1153: fast path should not be taken for non-stable (v-for) fragments\n      (z !== Pe || me > 0 && me & 64) ? It(\n        U,\n        $,\n        N,\n        !1,\n        !0\n      ) : (z === Pe && me & 384 || !X && se & 16) && It(F, $, N), M && Le(x);\n    }\n    (Qe && (Ue = ee && ee.onVnodeUnmounted) || ye) && Yt(() => {\n      Ue && yn(Ue, $, x), ye && _r(x, null, $, \"unmounted\");\n    }, N);\n  }, Le = (x) => {\n    const { type: $, el: N, anchor: M, transition: X } = x;\n    if ($ === Pe) {\n       true && x.patchFlag > 0 && x.patchFlag & 2048 && X && !X.persisted ? x.children.forEach((ee) => {\n        ee.type === _t ? i(ee.el) : Le(ee);\n      }) : Zt(N, M);\n      return;\n    }\n    if ($ === Fi) {\n      S(x);\n      return;\n    }\n    const z = () => {\n      i(N), X && !X.persisted && X.afterLeave && X.afterLeave();\n    };\n    if (x.shapeFlag & 1 && X && !X.persisted) {\n      const { leave: ee, delayLeave: H } = X, F = () => ee(N, z);\n      H ? H(x.el, z, F) : F();\n    } else\n      z();\n  }, Zt = (x, $) => {\n    let N;\n    for (; x !== $; )\n      N = f(x), i(x), x = N;\n    i($);\n  }, Vt = (x, $, N) => {\n     true && x.type.__hmrId && qT(x);\n    const { bum: M, scope: X, update: z, subTree: ee, um: H } = x;\n    M && Ii(M), X.stop(), z && (z.active = !1, Be(ee, x, $, N)), H && Yt(H, $), Yt(() => {\n      x.isUnmounted = !0;\n    }, $), $ && $.pendingBranch && !$.isUnmounted && x.asyncDep && !x.asyncResolved && x.suspenseId === $.pendingId && ($.deps--, $.deps === 0 && $.resolve()), ( true) && KT(x);\n  }, It = (x, $, N, M = !1, X = !1, z = 0) => {\n    for (let ee = z; ee < x.length; ee++)\n      Be(x[ee], $, N, M, X);\n  }, Tn = (x) => x.shapeFlag & 6 ? Tn(x.component.subTree) : x.shapeFlag & 128 ? x.suspense.next() : f(x.anchor || x.el);\n  let Sr = !1;\n  const or = (x, $, N) => {\n    x == null ? $._vnode && Be($._vnode, null, null, !0) : O(\n      $._vnode || null,\n      x,\n      $,\n      null,\n      null,\n      null,\n      N\n    ), Sr || (Sr = !0, mm(), Su(), Sr = !1), $._vnode = x;\n  }, En = {\n    p: O,\n    um: Be,\n    m: ge,\n    r: Le,\n    mt: re,\n    mc: T,\n    pc: _e,\n    pbc: A,\n    n: Tn,\n    o: t\n  };\n  let vi, Ur;\n  return e && ([vi, Ur] = e(\n    En\n  )), {\n    render: or,\n    hydrate: vi,\n    createApp: YE(or, vi)\n  };\n}\nfunction ff({ type: t, props: e }, n) {\n  return n === \"svg\" && t === \"foreignObject\" || n === \"mathml\" && t === \"annotation-xml\" && e && e.encoding && e.encoding.includes(\"html\") ? void 0 : n;\n}\nfunction Os({ effect: t, update: e }, n) {\n  t.allowRecurse = e.allowRecurse = n;\n}\nfunction $1(t, e) {\n  return (!t || t && !t.pendingBranch) && e && !e.persisted;\n}\nfunction ja(t, e, n = !1) {\n  const r = t.children, i = e.children;\n  if (ie(r) && ie(i))\n    for (let s = 0; s < r.length; s++) {\n      const o = r[s];\n      let a = i[s];\n      a.shapeFlag & 1 && !a.dynamicChildren && ((a.patchFlag <= 0 || a.patchFlag === 32) && (a = i[s] = Ai(i[s]), a.el = o.el), n || ja(o, a)), a.type === ns && (a.el = o.el),  true && a.type === _t && !a.el && (a.el = o.el);\n    }\n}\nfunction h$(t) {\n  const e = t.slice(), n = [0];\n  let r, i, s, o, a;\n  const l = t.length;\n  for (r = 0; r < l; r++) {\n    const c = t[r];\n    if (c !== 0) {\n      if (i = n[n.length - 1], t[i] < c) {\n        e[r] = i, n.push(r);\n        continue;\n      }\n      for (s = 0, o = n.length - 1; s < o; )\n        a = s + o >> 1, t[n[a]] < c ? s = a + 1 : o = a;\n      c < t[n[s]] && (s > 0 && (e[r] = n[s - 1]), n[s] = r);\n    }\n  }\n  for (s = n.length, o = n[s - 1]; s-- > 0; )\n    n[s] = o, o = e[o];\n  return n;\n}\nfunction Q1(t) {\n  const e = t.subTree.component;\n  if (e)\n    return e.asyncDep && !e.asyncResolved ? e : Q1(e);\n}\nconst p$ = (t) => t.__isTeleport, ko = (t) => t && (t.disabled || t.disabled === \"\"), Dm = (t) => typeof SVGElement < \"u\" && t instanceof SVGElement, Zm = (t) => typeof MathMLElement == \"function\" && t instanceof MathMLElement, bh = (t, e) => {\n  const n = t && t.to;\n  if (we(n))\n    if (e) {\n      const r = e(n);\n      return r ||  true && I(\n        `Failed to locate Teleport target with selector \"${n}\". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`\n      ), r;\n    } else\n      return  true && I(\n        \"Current renderer does not support string target for Teleports. (missing querySelector renderer option)\"\n      ), null;\n  else\n    return  true && !n && !ko(t) && I(`Invalid Teleport target: ${n}`), n;\n}, O$ = {\n  name: \"Teleport\",\n  __isTeleport: !0,\n  process(t, e, n, r, i, s, o, a, l, c) {\n    const {\n      mc: u,\n      pc: d,\n      pbc: f,\n      o: { insert: h, querySelector: p, createText: O, createComment: m }\n    } = c, y = ko(e.props);\n    let { shapeFlag: b, children: g, dynamicChildren: v } = e;\n    if ( true && Hi && (l = !1, v = null), t == null) {\n      const S = e.el =  true ? m(\"teleport start\") : 0, w = e.anchor =  true ? m(\"teleport end\") : 0;\n      h(S, n, r), h(w, n, r);\n      const k = e.target = bh(e.props, p), _ = e.targetAnchor = O(\"\");\n      k ? (h(_, k), o === \"svg\" || Dm(k) ? o = \"svg\" : (o === \"mathml\" || Zm(k)) && (o = \"mathml\")) :  true && !y && I(\"Invalid Teleport target on mount:\", k, `(${typeof k})`);\n      const T = (C, A) => {\n        b & 16 && u(\n          g,\n          C,\n          A,\n          i,\n          s,\n          o,\n          a,\n          l\n        );\n      };\n      y ? T(n, w) : k && T(k, _);\n    } else {\n      e.el = t.el;\n      const S = e.anchor = t.anchor, w = e.target = t.target, k = e.targetAnchor = t.targetAnchor, _ = ko(t.props), T = _ ? n : w, C = _ ? S : k;\n      if (o === \"svg\" || Dm(w) ? o = \"svg\" : (o === \"mathml\" || Zm(w)) && (o = \"mathml\"), v ? (f(\n        t.dynamicChildren,\n        v,\n        T,\n        i,\n        s,\n        o,\n        a\n      ), ja(t, e, !0)) : l || d(\n        t,\n        e,\n        T,\n        C,\n        i,\n        s,\n        o,\n        a,\n        !1\n      ), y)\n        _ ? e.props && t.props && e.props.to !== t.props.to && (e.props.to = t.props.to) : mc(\n          e,\n          n,\n          S,\n          c,\n          1\n        );\n      else if ((e.props && e.props.to) !== (t.props && t.props.to)) {\n        const A = e.target = bh(\n          e.props,\n          p\n        );\n        A ? mc(\n          e,\n          A,\n          null,\n          c,\n          0\n        ) :  true && I(\n          \"Invalid Teleport target on update:\",\n          w,\n          `(${typeof w})`\n        );\n      } else\n        _ && mc(\n          e,\n          w,\n          k,\n          c,\n          1\n        );\n    }\n    C1(e);\n  },\n  remove(t, e, n, r, { um: i, o: { remove: s } }, o) {\n    const { shapeFlag: a, children: l, anchor: c, targetAnchor: u, target: d, props: f } = t;\n    if (d && s(u), o && s(c), a & 16) {\n      const h = o || !ko(f);\n      for (let p = 0; p < l.length; p++) {\n        const O = l[p];\n        i(\n          O,\n          e,\n          n,\n          h,\n          !!O.dynamicChildren\n        );\n      }\n    }\n  },\n  move: mc,\n  hydrate: g$\n};\nfunction mc(t, e, n, { o: { insert: r }, m: i }, s = 2) {\n  s === 0 && r(t.targetAnchor, e, n);\n  const { el: o, anchor: a, shapeFlag: l, children: c, props: u } = t, d = s === 2;\n  if (d && r(o, e, n), (!d || ko(u)) && l & 16)\n    for (let f = 0; f < c.length; f++)\n      i(\n        c[f],\n        e,\n        n,\n        2\n      );\n  d && r(a, e, n);\n}\nfunction g$(t, e, n, r, i, s, {\n  o: { nextSibling: o, parentNode: a, querySelector: l }\n}, c) {\n  const u = e.target = bh(\n    e.props,\n    l\n  );\n  if (u) {\n    const d = u._lpa || u.firstChild;\n    if (e.shapeFlag & 16)\n      if (ko(e.props))\n        e.anchor = c(\n          o(t),\n          e,\n          a(t),\n          n,\n          r,\n          i,\n          s\n        ), e.targetAnchor = d;\n      else {\n        e.anchor = o(t);\n        let f = d;\n        for (; f; )\n          if (f = o(f), f && f.nodeType === 8 && f.data === \"teleport anchor\") {\n            e.targetAnchor = f, u._lpa = e.targetAnchor && o(e.targetAnchor);\n            break;\n          }\n        c(\n          d,\n          e,\n          u,\n          n,\n          r,\n          i,\n          s\n        );\n      }\n    C1(e);\n  }\n  return e.anchor && o(e.anchor);\n}\nconst TO = O$;\nfunction C1(t) {\n  const e = t.ctx;\n  if (e && e.ut) {\n    let n = t.children[0].el;\n    for (; n && n !== t.targetAnchor; )\n      n.nodeType === 1 && n.setAttribute(\"data-v-owner\", e.uid), n = n.nextSibling;\n    e.ut();\n  }\n}\nconst Pe = Symbol.for(\"v-fgt\"), ns = Symbol.for(\"v-txt\"), _t = Symbol.for(\"v-cmt\"), Fi = Symbol.for(\"v-stc\"), Ba = [];\nlet kn = null;\nfunction Z(t = !1) {\n  Ba.push(kn = t ? null : []);\n}\nfunction A1() {\n  Ba.pop(), kn = Ba[Ba.length - 1] || null;\n}\nlet js = 1;\nfunction vh(t) {\n  js += t;\n}\nfunction R1(t) {\n  return t.dynamicChildren = js > 0 ? kn || mo : null, A1(), js > 0 && kn && kn.push(t), t;\n}\nfunction ne(t, e, n, r, i, s) {\n  return R1(\n    D(\n      t,\n      e,\n      n,\n      r,\n      i,\n      s,\n      !0\n    )\n  );\n}\nfunction ke(t, e, n, r, i) {\n  return R1(\n    J(\n      t,\n      e,\n      n,\n      r,\n      i,\n      !0\n    )\n  );\n}\nfunction li(t) {\n  return t ? t.__v_isVNode === !0 : !1;\n}\nfunction lr(t, e) {\n  return  true && e.shapeFlag & 6 && uo.has(e.type) ? (t.shapeFlag &= -257, e.shapeFlag &= -513, !1) : t.type === e.type && t.key === e.key;\n}\nlet yh;\nfunction m$(t) {\n  yh = t;\n}\nconst b$ = (...t) => D1(\n  ...yh ? yh(t, Ot) : t\n), Pd = \"__vInternal\", N1 = ({ key: t }) => t ?? null, Fc = ({\n  ref: t,\n  ref_key: e,\n  ref_for: n\n}) => (typeof t == \"number\" && (t = \"\" + t), t != null ? we(t) || Ct(t) || be(t) ? { i: Ot, r: t, k: e, f: !!n } : t : null);\nfunction D(t, e = null, n = null, r = 0, i = null, s = t === Pe ? 0 : 1, o = !1, a = !1) {\n  const l = {\n    __v_isVNode: !0,\n    __v_skip: !0,\n    type: t,\n    props: e,\n    key: e && N1(e),\n    ref: e && Fc(e),\n    scopeId: vd,\n    slotScopeIds: null,\n    children: n,\n    component: null,\n    suspense: null,\n    ssContent: null,\n    ssFallback: null,\n    dirs: null,\n    transition: null,\n    el: null,\n    anchor: null,\n    target: null,\n    targetAnchor: null,\n    staticCount: 0,\n    shapeFlag: s,\n    patchFlag: r,\n    dynamicProps: i,\n    dynamicChildren: null,\n    appContext: null,\n    ctx: Ot\n  };\n  return a ? ($O(l, n), s & 128 && t.normalize(l)) : n && (l.shapeFlag |= we(n) ? 8 : 16),  true && l.key !== l.key && I(\"VNode created with invalid key (NaN). VNode type:\", l.type), js > 0 && // avoid a block node from tracking itself\n  !o && // has current parent block\n  kn && // presence of a patch flag indicates this node needs patching on updates.\n  // component nodes also should always be patched, because even if the\n  // component doesn't need to update, it needs to persist the instance on to\n  // the next vnode so that it can be properly unmounted later.\n  (l.patchFlag > 0 || s & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the\n  // vnode should not be considered dynamic due to handler caching.\n  l.patchFlag !== 32 && kn.push(l), l;\n}\nconst J =  true ? b$ : 0;\nfunction D1(t, e = null, n = null, r = 0, i = null, s = !1) {\n  if ((!t || t === mO) && ( true && !t && I(`Invalid vnode type when creating vnode: ${t}.`), t = _t), li(t)) {\n    const a = jn(\n      t,\n      e,\n      !0\n      /* mergeRef: true */\n    );\n    return n && $O(a, n), js > 0 && !s && kn && (a.shapeFlag & 6 ? kn[kn.indexOf(t)] = a : kn.push(a)), a.patchFlag |= -2, a;\n  }\n  if (B1(t) && (t = t.__vccOpts), e) {\n    e = EO(e);\n    let { class: a, style: l } = e;\n    a && !we(a) && (e.class = Ke(a)), Ze(l) && (Ja(l) && !ie(l) && (l = $e({}, l)), e.style = Br(l));\n  }\n  const o = we(t) ? 1 : Ky(t) ? 128 : p$(t) ? 64 : Ze(t) ? 4 : be(t) ? 2 : 0;\n  return  true && o & 4 && Ja(t) && (t = Oe(t), I(\n    \"Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with `markRaw` or using `shallowRef` instead of `ref`.\",\n    `\nComponent that was made reactive: `,\n    t\n  )), D(\n    t,\n    e,\n    n,\n    r,\n    i,\n    o,\n    s,\n    !0\n  );\n}\nfunction EO(t) {\n  return t ? Ja(t) || Pd in t ? $e({}, t) : t : null;\n}\nfunction jn(t, e, n = !1) {\n  const { props: r, ref: i, patchFlag: s, children: o } = t, a = e ? Ml(r || {}, e) : r;\n  return {\n    __v_isVNode: !0,\n    __v_skip: !0,\n    type: t.type,\n    props: a,\n    key: a && N1(a),\n    ref: e && e.ref ? (\n      // #2078 in the case of <component :is=\"vnode\" ref=\"extra\"/>\n      // if the vnode itself already has a ref, cloneVNode will need to merge\n      // the refs so the single vnode can be set on multiple refs\n      n && i ? ie(i) ? i.concat(Fc(e)) : [i, Fc(e)] : Fc(e)\n    ) : i,\n    scopeId: t.scopeId,\n    slotScopeIds: t.slotScopeIds,\n    children:  true && s === -1 && ie(o) ? o.map(Z1) : o,\n    target: t.target,\n    targetAnchor: t.targetAnchor,\n    staticCount: t.staticCount,\n    shapeFlag: t.shapeFlag,\n    // if the vnode is cloned with extra props, we can no longer assume its\n    // existing patch flag to be reliable and need to add the FULL_PROPS flag.\n    // note: preserve flag for fragments since they use the flag for children\n    // fast paths only.\n    patchFlag: e && t.type !== Pe ? s === -1 ? 16 : s | 16 : s,\n    dynamicProps: t.dynamicProps,\n    dynamicChildren: t.dynamicChildren,\n    appContext: t.appContext,\n    dirs: t.dirs,\n    transition: t.transition,\n    // These should technically only be non-null on mounted VNodes. However,\n    // they *should* be copied for kept-alive vnodes. So we just always copy\n    // them since them being non-null during a mount doesn't affect the logic as\n    // they will simply be overwritten.\n    component: t.component,\n    suspense: t.suspense,\n    ssContent: t.ssContent && jn(t.ssContent),\n    ssFallback: t.ssFallback && jn(t.ssFallback),\n    el: t.el,\n    anchor: t.anchor,\n    ctx: t.ctx,\n    ce: t.ce\n  };\n}\nfunction Z1(t) {\n  const e = jn(t);\n  return ie(t.children) && (e.children = t.children.map(Z1)), e;\n}\nfunction He(t = \" \", e = 0) {\n  return J(ns, null, t, e);\n}\nfunction Wl(t, e) {\n  const n = J(Fi, null, t);\n  return n.staticCount = e, n;\n}\nfunction st(t = \"\", e = !1) {\n  return e ? (Z(), ke(_t, null, t)) : J(_t, null, t);\n}\nfunction Sn(t) {\n  return t == null || typeof t == \"boolean\" ? J(_t) : ie(t) ? J(\n    Pe,\n    null,\n    // #3666, avoid reference pollution when reusing vnode\n    t.slice()\n  ) : typeof t == \"object\" ? Ai(t) : J(ns, null, String(t));\n}\nfunction Ai(t) {\n  return t.el === null && t.patchFlag !== -1 || t.memo ? t : jn(t);\n}\nfunction $O(t, e) {\n  let n = 0;\n  const { shapeFlag: r } = t;\n  if (e == null)\n    e = null;\n  else if (ie(e))\n    n = 16;\n  else if (typeof e == \"object\")\n    if (r & 65) {\n      const i = e.default;\n      i && (i._c && (i._d = !1), $O(t, i()), i._c && (i._d = !0));\n      return;\n    } else {\n      n = 32;\n      const i = e._;\n      !i && !(Pd in e) ? e._ctx = Ot : i === 3 && Ot && (Ot.slots._ === 1 ? e._ = 1 : (e._ = 2, t.patchFlag |= 1024));\n    }\n  else\n    be(e) ? (e = { default: e, _ctx: Ot }, n = 32) : (e = String(e), r & 64 ? (n = 16, e = [He(e)]) : n = 8);\n  t.children = e, t.shapeFlag |= n;\n}\nfunction Ml(...t) {\n  const e = {};\n  for (let n = 0; n < t.length; n++) {\n    const r = t[n];\n    for (const i in r)\n      if (i === \"class\")\n        e.class !== r.class && (e.class = Ke([e.class, r.class]));\n      else if (i === \"style\")\n        e.style = Br([e.style, r.style]);\n      else if (oi(i)) {\n        const s = e[i], o = r[i];\n        o && s !== o && !(ie(s) && s.includes(o)) && (e[i] = s ? [].concat(s, o) : o);\n      } else\n        i !== \"\" && (e[i] = r[i]);\n  }\n  return e;\n}\nfunction yn(t, e, n, r = null) {\n  Wn(t, e, 7, [\n    n,\n    r\n  ]);\n}\nconst v$ = v1();\nlet y$ = 0;\nfunction V1(t, e, n) {\n  const r = t.type, i = (e ? e.appContext : t.appContext) || v$, s = {\n    uid: y$++,\n    vnode: t,\n    type: r,\n    parent: e,\n    appContext: i,\n    root: null,\n    // to be immediately set\n    next: null,\n    subTree: null,\n    // will be set synchronously right after creation\n    effect: null,\n    update: null,\n    // will be set synchronously right after creation\n    scope: new eO(\n      !0\n      /* detached */\n    ),\n    render: null,\n    proxy: null,\n    exposed: null,\n    exposeProxy: null,\n    withProxy: null,\n    provides: e ? e.provides : Object.create(i.provides),\n    accessCache: null,\n    renderCache: [],\n    // local resolved assets\n    components: null,\n    directives: null,\n    // resolved props and emits options\n    propsOptions: S1(r, i),\n    emitsOptions: Fy(r, i),\n    // emit\n    emit: null,\n    // to be set immediately\n    emitted: null,\n    // props default value\n    propsDefaults: Ve,\n    // inheritAttrs\n    inheritAttrs: r.inheritAttrs,\n    // state\n    ctx: Ve,\n    data: Ve,\n    props: Ve,\n    attrs: Ve,\n    slots: Ve,\n    refs: Ve,\n    setupState: Ve,\n    setupContext: null,\n    attrsProxy: null,\n    slotsProxy: null,\n    // suspense related\n    suspense: n,\n    suspenseId: n ? n.pendingId : 0,\n    asyncDep: null,\n    asyncResolved: !1,\n    // lifecycle hooks\n    // not using enums here because it results in computed properties\n    isMounted: !1,\n    isUnmounted: !1,\n    isDeactivated: !1,\n    bc: null,\n    c: null,\n    bm: null,\n    m: null,\n    bu: null,\n    u: null,\n    um: null,\n    bum: null,\n    da: null,\n    a: null,\n    rtg: null,\n    rtc: null,\n    ec: null,\n    sp: null\n  };\n  return  true ? s.ctx = PE(s) : 0, s.root = e ? e.root : s, s.emit = nE.bind(null, s), t.ce && t.ce(s), s;\n}\nlet xt = null;\nconst ir = () => xt || Ot;\nlet Tu, Sh;\n{\n  const t = bo(), e = (n, r) => {\n    let i;\n    return (i = t[n]) || (i = t[n] = []), i.push(r), (s) => {\n      i.length > 1 ? i.forEach((o) => o(s)) : i[0](s);\n    };\n  };\n  Tu = e(\n    \"__VUE_INSTANCE_SETTERS__\",\n    (n) => xt = n\n  ), Sh = e(\n    \"__VUE_SSR_SETTERS__\",\n    (n) => Xl = n\n  );\n}\nconst Bs = (t) => {\n  const e = xt;\n  return Tu(t), t.scope.on(), () => {\n    t.scope.off(), Tu(e);\n  };\n}, wh = () => {\n  xt && xt.scope.off(), Tu(null);\n}, S$ = /* @__PURE__ */ Bt(\"slot,component\");\nfunction kh(t, { isNativeTag: e }) {\n  (S$(t) || e(t)) && I(\n    \"Do not use built-in or reserved HTML elements as component id: \" + t\n  );\n}\nfunction I1(t) {\n  return t.vnode.shapeFlag & 4;\n}\nlet Xl = !1;\nfunction W1(t, e = !1) {\n  e && Sh(e);\n  const { props: n, children: r } = t.vnode, i = I1(t);\n  HE(t, n, i, e), i$(t, r);\n  const s = i ? w$(t, e) : void 0;\n  return e && Sh(!1), s;\n}\nfunction w$(t, e) {\n  var n;\n  const r = t.type;\n  if (true) {\n    if (r.name && kh(r.name, t.appContext.config), r.components) {\n      const s = Object.keys(r.components);\n      for (let o = 0; o < s.length; o++)\n        kh(s[o], t.appContext.config);\n    }\n    if (r.directives) {\n      const s = Object.keys(r.directives);\n      for (let o = 0; o < s.length; o++)\n        i1(s[o]);\n    }\n    r.compilerOptions && QO() && I(\n      '\"compilerOptions\" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.'\n    );\n  }\n  t.accessCache = /* @__PURE__ */ Object.create(null), t.proxy = oO(new Proxy(t.ctx, Xa)),  true && _E(t);\n  const { setup: i } = r;\n  if (i) {\n    const s = t.setupContext = i.length > 1 ? j1(t) : null, o = Bs(t);\n    ds();\n    const a = Vr(\n      i,\n      t,\n      0,\n      [\n         true ? Dn(t.props) : 0,\n        s\n      ]\n    );\n    if (fs(), o(), dd(a)) {\n      if (a.then(wh, wh), e)\n        return a.then((l) => {\n          xh(t, l, e);\n        }).catch((l) => {\n          hs(l, t, 0);\n        });\n      if (t.asyncDep = a,  true && !t.suspense) {\n        const l = (n = r.name) != null ? n : \"Anonymous\";\n        I(\n          `Component <${l}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`\n        );\n      }\n    } else\n      xh(t, a, e);\n  } else\n    X1(t, e);\n}\nfunction xh(t, e, n) {\n  be(e) ? t.type.__ssrInlineRender ? t.ssrRender = e : t.render = e : Ze(e) ? ( true && li(e) && I(\n    \"setup() should not return VNodes directly - return a render function instead.\"\n  ), ( true) && (t.devtoolsRawSetupState = e), t.setupState = uO(e),  true && TE(t)) :  true && e !== void 0 && I(\n    `setup() should return an object. Received: ${e === null ? \"null\" : typeof e}`\n  ), X1(t, n);\n}\nlet La, Ph;\nfunction M1(t) {\n  La = t, Ph = (e) => {\n    e.render._rc && (e.withProxy = new Proxy(e.ctx, xE));\n  };\n}\nconst QO = () => !La;\nfunction X1(t, e, n) {\n  const r = t.type;\n  if (!t.render) {\n    if (!e && La && !r.render) {\n      const i = r.template || PO(t).template;\n      if (i) {\n         true && Fr(t, \"compile\");\n        const { isCustomElement: s, compilerOptions: o } = t.appContext.config, { delimiters: a, compilerOptions: l } = r, c = $e(\n          $e(\n            {\n              isCustomElement: s,\n              delimiters: a\n            },\n            o\n          ),\n          l\n        );\n        r.render = La(i, c),  true && Gr(t, \"compile\");\n      }\n    }\n    t.render = r.render || it, Ph && Ph(t);\n  }\n  if (__VUE_OPTIONS_API__) {\n    const i = Bs(t);\n    ds();\n    try {\n      XE(t);\n    } finally {\n      fs(), i();\n    }\n  }\n   true && !r.render && t.render === it && !e && (!La && r.template ? I(\n    'Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias \"vue\" to \"vue/dist/vue.esm-bundler.js\".'\n  ) : I(\"Component is missing template or render function.\"));\n}\nfunction Vm(t) {\n  return t.attrsProxy || (t.attrsProxy = new Proxy(\n    t.attrs,\n     true ? {\n      get(e, n) {\n        return wu(), Kt(t, \"get\", \"$attrs\"), e[n];\n      },\n      set() {\n        return I(\"setupContext.attrs is readonly.\"), !1;\n      },\n      deleteProperty() {\n        return I(\"setupContext.attrs is readonly.\"), !1;\n      }\n    } : 0\n  ));\n}\nfunction k$(t) {\n  return t.slotsProxy || (t.slotsProxy = new Proxy(t.slots, {\n    get(e, n) {\n      return Kt(t, \"get\", \"$slots\"), e[n];\n    }\n  }));\n}\nfunction j1(t) {\n  const e = (n) => {\n    if ( true && (t.exposed && I(\"expose() should be called only once per setup().\"), n != null)) {\n      let r = typeof n;\n      r === \"object\" && (ie(n) ? r = \"array\" : Ct(n) && (r = \"ref\")), r !== \"object\" && I(\n        `expose() should be passed a plain object, received ${r}.`\n      );\n    }\n    t.exposed = n || {};\n  };\n  return  true ? Object.freeze({\n    get attrs() {\n      return Vm(t);\n    },\n    get slots() {\n      return k$(t);\n    },\n    get emit() {\n      return (n, ...r) => t.emit(n, ...r);\n    },\n    expose: e\n  }) : 0;\n}\nfunction _d(t) {\n  if (t.exposed)\n    return t.exposeProxy || (t.exposeProxy = new Proxy(uO(oO(t.exposed)), {\n      get(e, n) {\n        if (n in e)\n          return e[n];\n        if (n in Zs)\n          return Zs[n](t);\n      },\n      has(e, n) {\n        return n in e || n in Zs;\n      }\n    }));\n}\nconst x$ = /(?:^|[-_])(\\w)/g, P$ = (t) => t.replace(x$, (e) => e.toUpperCase()).replace(/[-_]/g, \"\");\nfunction al(t, e = !0) {\n  return be(t) ? t.displayName || t.name : t.name || e && t.__name;\n}\nfunction Td(t, e, n = !1) {\n  let r = al(e);\n  if (!r && e.__file) {\n    const i = e.__file.match(/([^/\\\\]+)\\.\\w+$/);\n    i && (r = i[1]);\n  }\n  if (!r && t && t.parent) {\n    const i = (s) => {\n      for (const o in s)\n        if (s[o] === e)\n          return o;\n    };\n    r = i(\n      t.components || t.parent.type.components\n    ) || i(t.appContext.components);\n  }\n  return r ? P$(r) : n ? \"App\" : \"Anonymous\";\n}\nfunction B1(t) {\n  return be(t) && \"__vccOpts\" in t;\n}\nconst j = (t, e) => {\n  const n = PT(t, e, Xl);\n  if (true) {\n    const r = ir();\n    r && r.appContext.config.warnRecursiveComputed && (n._warnRecursive = !0);\n  }\n  return n;\n};\nfunction _$(t, e, n = Ve) {\n  const r = ir();\n  if ( true && !r)\n    return I(\"useModel() called without active instance.\"), G();\n  if ( true && !r.propsOptions[0][e])\n    return I(`useModel() called with prop \"${e}\" which is not declared.`), G();\n  const i = mt(e), s = rn(e), o = Xy((l, c) => {\n    let u;\n    return n1(() => {\n      const d = t[e];\n      gr(u, d) && (u = d, c());\n    }), {\n      get() {\n        return l(), n.get ? n.get(u) : u;\n      },\n      set(d) {\n        const f = r.vnode.props;\n        !(f && // check if parent has passed v-model\n        (e in f || i in f || s in f) && (`onUpdate:${e}` in f || `onUpdate:${i}` in f || `onUpdate:${s}` in f)) && gr(d, u) && (u = d, c()), r.emit(`update:${e}`, n.set ? n.set(d) : d);\n      }\n    };\n  }), a = e === \"modelValue\" ? \"modelModifiers\" : `${e}Modifiers`;\n  return o[Symbol.iterator] = () => {\n    let l = 0;\n    return {\n      next() {\n        return l < 2 ? { value: l++ ? t[a] || {} : o, done: !1 } : { done: !0 };\n      }\n    };\n  }, o;\n}\nfunction kt(t, e, n) {\n  const r = arguments.length;\n  return r === 2 ? Ze(e) && !ie(e) ? li(e) ? J(t, null, [e]) : J(t, e) : J(t, null, e) : (r > 3 ? n = Array.prototype.slice.call(arguments, 2) : r === 3 && li(n) && (n = [n]), J(t, e, n));\n}\nfunction CO() {\n  if ( false || typeof window > \"u\")\n    return;\n  const t = { style: \"color:#3ba776\" }, e = { style: \"color:#1677ff\" }, n = { style: \"color:#f5222d\" }, r = { style: \"color:#eb2f96\" }, i = {\n    header(d) {\n      return Ze(d) ? d.__isVue ? [\"div\", t, \"VueInstance\"] : Ct(d) ? [\n        \"div\",\n        {},\n        [\"span\", t, u(d)],\n        \"<\",\n        a(d.value),\n        \">\"\n      ] : Yi(d) ? [\n        \"div\",\n        {},\n        [\"span\", t, zi(d) ? \"ShallowReactive\" : \"Reactive\"],\n        \"<\",\n        a(d),\n        `>${ai(d) ? \" (readonly)\" : \"\"}`\n      ] : ai(d) ? [\n        \"div\",\n        {},\n        [\"span\", t, zi(d) ? \"ShallowReadonly\" : \"Readonly\"],\n        \"<\",\n        a(d),\n        \">\"\n      ] : null : null;\n    },\n    hasBody(d) {\n      return d && d.__isVue;\n    },\n    body(d) {\n      if (d && d.__isVue)\n        return [\n          \"div\",\n          {},\n          ...s(d.$)\n        ];\n    }\n  };\n  function s(d) {\n    const f = [];\n    d.type.props && d.props && f.push(o(\"props\", Oe(d.props))), d.setupState !== Ve && f.push(o(\"setup\", d.setupState)), d.data !== Ve && f.push(o(\"data\", Oe(d.data)));\n    const h = l(d, \"computed\");\n    h && f.push(o(\"computed\", h));\n    const p = l(d, \"inject\");\n    return p && f.push(o(\"injected\", p)), f.push([\n      \"div\",\n      {},\n      [\n        \"span\",\n        {\n          style: r.style + \";opacity:0.66\"\n        },\n        \"$ (internal): \"\n      ],\n      [\"object\", { object: d }]\n    ]), f;\n  }\n  function o(d, f) {\n    return f = $e({}, f), Object.keys(f).length ? [\n      \"div\",\n      { style: \"line-height:1.25em;margin-bottom:0.6em\" },\n      [\n        \"div\",\n        {\n          style: \"color:#476582\"\n        },\n        d\n      ],\n      [\n        \"div\",\n        {\n          style: \"padding-left:1.25em\"\n        },\n        ...Object.keys(f).map((h) => [\n          \"div\",\n          {},\n          [\"span\", r, h + \": \"],\n          a(f[h], !1)\n        ])\n      ]\n    ] : [\"span\", {}];\n  }\n  function a(d, f = !0) {\n    return typeof d == \"number\" ? [\"span\", e, d] : typeof d == \"string\" ? [\"span\", n, JSON.stringify(d)] : typeof d == \"boolean\" ? [\"span\", r, d] : Ze(d) ? [\"object\", { object: f ? Oe(d) : d }] : [\"span\", n, String(d)];\n  }\n  function l(d, f) {\n    const h = d.type;\n    if (be(h))\n      return;\n    const p = {};\n    for (const O in d.ctx)\n      c(h, O, f) && (p[O] = d.ctx[O]);\n    return p;\n  }\n  function c(d, f, h) {\n    const p = d[h];\n    if (ie(p) && p.includes(f) || Ze(p) && f in p || d.extends && c(d.extends, f, h) || d.mixins && d.mixins.some((O) => c(O, f, h)))\n      return !0;\n  }\n  function u(d) {\n    return zi(d) ? \"ShallowRef\" : d.effect ? \"ComputedRef\" : \"Ref\";\n  }\n  window.devtoolsFormatters ? window.devtoolsFormatters.push(i) : window.devtoolsFormatters = [i];\n}\nfunction T$(t, e, n, r) {\n  const i = n[r];\n  if (i && L1(i, t))\n    return i;\n  const s = e();\n  return s.memo = t.slice(), n[r] = s;\n}\nfunction L1(t, e) {\n  const n = t.memo;\n  if (n.length != e.length)\n    return !1;\n  for (let r = 0; r < n.length; r++)\n    if (gr(n[r], e[r]))\n      return !1;\n  return js > 0 && kn && kn.push(t), !0;\n}\nconst _h = \"3.4.21\", Xt =  true ? I : 0, E$ = md, $$ = (\"development\", ar), Q$ = (\"development\", pO), C$ = {\n  createComponentInstance: V1,\n  setupComponent: W1,\n  renderComponentRoot: Hc,\n  setCurrentRenderingInstance: il,\n  isVNode: li,\n  normalizeVNode: Sn\n}, A$ = C$, R$ = null, N$ = null, D$ = null;\n/**\n* @vue/runtime-dom v3.4.21\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\nconst Z$ = \"http://www.w3.org/2000/svg\", V$ = \"http://www.w3.org/1998/Math/MathML\", Ri = typeof document < \"u\" ? document : null, Im = Ri && /* @__PURE__ */ Ri.createElement(\"template\"), I$ = {\n  insert: (t, e, n) => {\n    e.insertBefore(t, n || null);\n  },\n  remove: (t) => {\n    const e = t.parentNode;\n    e && e.removeChild(t);\n  },\n  createElement: (t, e, n, r) => {\n    const i = e === \"svg\" ? Ri.createElementNS(Z$, t) : e === \"mathml\" ? Ri.createElementNS(V$, t) : Ri.createElement(t, n ? { is: n } : void 0);\n    return t === \"select\" && r && r.multiple != null && i.setAttribute(\"multiple\", r.multiple), i;\n  },\n  createText: (t) => Ri.createTextNode(t),\n  createComment: (t) => Ri.createComment(t),\n  setText: (t, e) => {\n    t.nodeValue = e;\n  },\n  setElementText: (t, e) => {\n    t.textContent = e;\n  },\n  parentNode: (t) => t.parentNode,\n  nextSibling: (t) => t.nextSibling,\n  querySelector: (t) => Ri.querySelector(t),\n  setScopeId(t, e) {\n    t.setAttribute(e, \"\");\n  },\n  // __UNSAFE__\n  // Reason: innerHTML.\n  // Static content here can only come from compiled templates.\n  // As long as the user only uses trusted templates, this is safe.\n  insertStaticContent(t, e, n, r, i, s) {\n    const o = n ? n.previousSibling : e.lastChild;\n    if (i && (i === s || i.nextSibling))\n      for (; e.insertBefore(i.cloneNode(!0), n), !(i === s || !(i = i.nextSibling)); )\n        ;\n    else {\n      Im.innerHTML = r === \"svg\" ? `<svg>${t}</svg>` : r === \"mathml\" ? `<math>${t}</math>` : t;\n      const a = Im.content;\n      if (r === \"svg\" || r === \"mathml\") {\n        const l = a.firstChild;\n        for (; l.firstChild; )\n          a.appendChild(l.firstChild);\n        a.removeChild(l);\n      }\n      e.insertBefore(a, n);\n    }\n    return [\n      // first\n      o ? o.nextSibling : e.firstChild,\n      // last\n      n ? n.previousSibling : e.lastChild\n    ];\n  }\n}, wi = \"transition\", fa = \"animation\", No = Symbol(\"_vtc\"), AO = (t, { slots: e }) => kt(s1, q1(t), e);\nAO.displayName = \"Transition\";\nconst U1 = {\n  name: String,\n  type: String,\n  css: {\n    type: Boolean,\n    default: !0\n  },\n  duration: [String, Number, Object],\n  enterFromClass: String,\n  enterActiveClass: String,\n  enterToClass: String,\n  appearFromClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  leaveFromClass: String,\n  leaveActiveClass: String,\n  leaveToClass: String\n}, W$ = AO.props = /* @__PURE__ */ $e(\n  {},\n  wO,\n  U1\n), gs = (t, e = []) => {\n  ie(t) ? t.forEach((n) => n(...e)) : t && t(...e);\n}, Wm = (t) => t ? ie(t) ? t.some((e) => e.length > 1) : t.length > 1 : !1;\nfunction q1(t) {\n  const e = {};\n  for (const Q in t)\n    Q in U1 || (e[Q] = t[Q]);\n  if (t.css === !1)\n    return e;\n  const {\n    name: n = \"v\",\n    type: r,\n    duration: i,\n    enterFromClass: s = `${n}-enter-from`,\n    enterActiveClass: o = `${n}-enter-active`,\n    enterToClass: a = `${n}-enter-to`,\n    appearFromClass: l = s,\n    appearActiveClass: c = o,\n    appearToClass: u = a,\n    leaveFromClass: d = `${n}-leave-from`,\n    leaveActiveClass: f = `${n}-leave-active`,\n    leaveToClass: h = `${n}-leave-to`\n  } = t, p = M$(i), O = p && p[0], m = p && p[1], {\n    onBeforeEnter: y,\n    onEnter: b,\n    onEnterCancelled: g,\n    onLeave: v,\n    onLeaveCancelled: S,\n    onBeforeAppear: w = y,\n    onAppear: k = b,\n    onAppearCancelled: _ = g\n  } = e, T = (Q, W, L) => {\n    $i(Q, W ? u : a), $i(Q, W ? c : o), L && L();\n  }, C = (Q, W) => {\n    Q._isLeaving = !1, $i(Q, d), $i(Q, h), $i(Q, f), W && W();\n  }, A = (Q) => (W, L) => {\n    const re = Q ? k : b, Y = () => T(W, Q, L);\n    gs(re, [W, Y]), Mm(() => {\n      $i(W, Q ? l : s), Kr(W, Q ? u : a), Wm(re) || Xm(W, r, O, Y);\n    });\n  };\n  return $e(e, {\n    onBeforeEnter(Q) {\n      gs(y, [Q]), Kr(Q, s), Kr(Q, o);\n    },\n    onBeforeAppear(Q) {\n      gs(w, [Q]), Kr(Q, l), Kr(Q, c);\n    },\n    onEnter: A(!1),\n    onAppear: A(!0),\n    onLeave(Q, W) {\n      Q._isLeaving = !0;\n      const L = () => C(Q, W);\n      Kr(Q, d), z1(), Kr(Q, f), Mm(() => {\n        Q._isLeaving && ($i(Q, d), Kr(Q, h), Wm(v) || Xm(Q, r, m, L));\n      }), gs(v, [Q, L]);\n    },\n    onEnterCancelled(Q) {\n      T(Q, !1), gs(g, [Q]);\n    },\n    onAppearCancelled(Q) {\n      T(Q, !0), gs(_, [Q]);\n    },\n    onLeaveCancelled(Q) {\n      C(Q), gs(S, [Q]);\n    }\n  });\n}\nfunction M$(t) {\n  if (t == null)\n    return null;\n  if (Ze(t))\n    return [hf(t.enter), hf(t.leave)];\n  {\n    const e = hf(t);\n    return [e, e];\n  }\n}\nfunction hf(t) {\n  const e = vu(t);\n  return  true && dO(e, \"<transition> explicit duration\"), e;\n}\nfunction Kr(t, e) {\n  e.split(/\\s+/).forEach((n) => n && t.classList.add(n)), (t[No] || (t[No] = /* @__PURE__ */ new Set())).add(e);\n}\nfunction $i(t, e) {\n  e.split(/\\s+/).forEach((r) => r && t.classList.remove(r));\n  const n = t[No];\n  n && (n.delete(e), n.size || (t[No] = void 0));\n}\nfunction Mm(t) {\n  requestAnimationFrame(() => {\n    requestAnimationFrame(t);\n  });\n}\nlet X$ = 0;\nfunction Xm(t, e, n, r) {\n  const i = t._endId = ++X$, s = () => {\n    i === t._endId && r();\n  };\n  if (n)\n    return setTimeout(s, n);\n  const { type: o, timeout: a, propCount: l } = Y1(t, e);\n  if (!o)\n    return r();\n  const c = o + \"end\";\n  let u = 0;\n  const d = () => {\n    t.removeEventListener(c, f), s();\n  }, f = (h) => {\n    h.target === t && ++u >= l && d();\n  };\n  setTimeout(() => {\n    u < l && d();\n  }, a + 1), t.addEventListener(c, f);\n}\nfunction Y1(t, e) {\n  const n = window.getComputedStyle(t), r = (p) => (n[p] || \"\").split(\", \"), i = r(`${wi}Delay`), s = r(`${wi}Duration`), o = jm(i, s), a = r(`${fa}Delay`), l = r(`${fa}Duration`), c = jm(a, l);\n  let u = null, d = 0, f = 0;\n  e === wi ? o > 0 && (u = wi, d = o, f = s.length) : e === fa ? c > 0 && (u = fa, d = c, f = l.length) : (d = Math.max(o, c), u = d > 0 ? o > c ? wi : fa : null, f = u ? u === wi ? s.length : l.length : 0);\n  const h = u === wi && /\\b(transform|all)(,|$)/.test(\n    r(`${wi}Property`).toString()\n  );\n  return {\n    type: u,\n    timeout: d,\n    propCount: f,\n    hasTransform: h\n  };\n}\nfunction jm(t, e) {\n  for (; t.length < e.length; )\n    t = t.concat(t);\n  return Math.max(...e.map((n, r) => Bm(n) + Bm(t[r])));\n}\nfunction Bm(t) {\n  return t === \"auto\" ? 0 : Number(t.slice(0, -1).replace(\",\", \".\")) * 1e3;\n}\nfunction z1() {\n  return document.body.offsetHeight;\n}\nfunction j$(t, e, n) {\n  const r = t[No];\n  r && (e = (e ? [e, ...r] : [...r]).join(\" \")), e == null ? t.removeAttribute(\"class\") : n ? t.setAttribute(\"class\", e) : t.className = e;\n}\nconst Eu = Symbol(\"_vod\"), H1 = Symbol(\"_vsh\"), jl = {\n  beforeMount(t, { value: e }, { transition: n }) {\n    t[Eu] = t.style.display === \"none\" ? \"\" : t.style.display, n && e ? n.beforeEnter(t) : ha(t, e);\n  },\n  mounted(t, { value: e }, { transition: n }) {\n    n && e && n.enter(t);\n  },\n  updated(t, { value: e, oldValue: n }, { transition: r }) {\n    !e != !n && (r ? e ? (r.beforeEnter(t), ha(t, !0), r.enter(t)) : r.leave(t, () => {\n      ha(t, !1);\n    }) : ha(t, e));\n  },\n  beforeUnmount(t, { value: e }) {\n    ha(t, e);\n  }\n};\n true && (jl.name = \"show\");\nfunction ha(t, e) {\n  t.style.display = e ? t[Eu] : \"none\", t[H1] = !e;\n}\nfunction B$() {\n  jl.getSSRProps = ({ value: t }) => {\n    if (!t)\n      return { style: { display: \"none\" } };\n  };\n}\nconst F1 = Symbol( true ? \"CSS_VAR_TEXT\" : 0);\nfunction G1(t) {\n  const e = ir();\n  if (!e) {\n     true && Xt(\"useCssVars is called without current active component instance.\");\n    return;\n  }\n  const n = e.ut = (i = t(e.proxy)) => {\n    Array.from(\n      document.querySelectorAll(`[data-v-owner=\"${e.uid}\"]`)\n    ).forEach((s) => Eh(s, i));\n  };\n   true && (e.getCssVars = () => t(e.proxy));\n  const r = () => {\n    const i = t(e.proxy);\n    Th(e.subTree, i), n(i);\n  };\n  t1(r), et(() => {\n    const i = new MutationObserver(r);\n    i.observe(e.subTree.el.parentNode, { childList: !0 }), jt(() => i.disconnect());\n  });\n}\nfunction Th(t, e) {\n  if (t.shapeFlag & 128) {\n    const n = t.suspense;\n    t = n.activeBranch, n.pendingBranch && !n.isHydrating && n.effects.push(() => {\n      Th(n.activeBranch, e);\n    });\n  }\n  for (; t.component; )\n    t = t.component.subTree;\n  if (t.shapeFlag & 1 && t.el)\n    Eh(t.el, e);\n  else if (t.type === Pe)\n    t.children.forEach((n) => Th(n, e));\n  else if (t.type === Fi) {\n    let { el: n, anchor: r } = t;\n    for (; n && (Eh(n, e), n !== r); )\n      n = n.nextSibling;\n  }\n}\nfunction Eh(t, e) {\n  if (t.nodeType === 1) {\n    const n = t.style;\n    let r = \"\";\n    for (const i in e)\n      n.setProperty(`--${i}`, e[i]), r += `--${i}: ${e[i]};`;\n    n[F1] = r;\n  }\n}\nconst L$ = /(^|;)\\s*display\\s*:/;\nfunction U$(t, e, n) {\n  const r = t.style, i = we(n);\n  let s = !1;\n  if (n && !i) {\n    if (e)\n      if (we(e))\n        for (const o of e.split(\";\")) {\n          const a = o.slice(0, o.indexOf(\":\")).trim();\n          n[a] == null && Gc(r, a, \"\");\n        }\n      else\n        for (const o in e)\n          n[o] == null && Gc(r, o, \"\");\n    for (const o in n)\n      o === \"display\" && (s = !0), Gc(r, o, n[o]);\n  } else if (i) {\n    if (e !== n) {\n      const o = r[F1];\n      o && (n += \";\" + o), r.cssText = n, s = L$.test(n);\n    }\n  } else\n    e && t.removeAttribute(\"style\");\n  Eu in t && (t[Eu] = s ? r.display : \"\", t[H1] && (r.display = \"none\"));\n}\nconst q$ = /[^\\\\];\\s*$/, Lm = /\\s*!important$/;\nfunction Gc(t, e, n) {\n  if (ie(n))\n    n.forEach((r) => Gc(t, e, r));\n  else if (n == null && (n = \"\"),  true && q$.test(n) && Xt(\n    `Unexpected semicolon at the end of '${e}' style value: '${n}'`\n  ), e.startsWith(\"--\"))\n    t.setProperty(e, n);\n  else {\n    const r = Y$(t, e);\n    Lm.test(n) ? t.setProperty(\n      rn(r),\n      n.replace(Lm, \"\"),\n      \"important\"\n    ) : t[r] = n;\n  }\n}\nconst Um = [\"Webkit\", \"Moz\", \"ms\"], pf = {};\nfunction Y$(t, e) {\n  const n = pf[e];\n  if (n)\n    return n;\n  let r = mt(e);\n  if (r !== \"filter\" && r in t)\n    return pf[e] = r;\n  r = Wr(r);\n  for (let i = 0; i < Um.length; i++) {\n    const s = Um[i] + r;\n    if (s in t)\n      return pf[e] = s;\n  }\n  return e;\n}\nconst qm = \"http://www.w3.org/1999/xlink\";\nfunction z$(t, e, n, r, i) {\n  if (r && e.startsWith(\"xlink:\"))\n    n == null ? t.removeAttributeNS(qm, e.slice(6, e.length)) : t.setAttributeNS(qm, e, n);\n  else {\n    const s = F_(e);\n    n == null || s && !Jp(n) ? t.removeAttribute(e) : t.setAttribute(e, s ? \"\" : n);\n  }\n}\nfunction H$(t, e, n, r, i, s, o) {\n  if (e === \"innerHTML\" || e === \"textContent\") {\n    r && o(r, i, s), t[e] = n ?? \"\";\n    return;\n  }\n  const a = t.tagName;\n  if (e === \"value\" && a !== \"PROGRESS\" && // custom elements may use _value internally\n  !a.includes(\"-\")) {\n    const c = a === \"OPTION\" ? t.getAttribute(\"value\") || \"\" : t.value, u = n ?? \"\";\n    (c !== u || !(\"_value\" in t)) && (t.value = u), n == null && t.removeAttribute(e), t._value = n;\n    return;\n  }\n  let l = !1;\n  if (n === \"\" || n == null) {\n    const c = typeof t[e];\n    c === \"boolean\" ? n = Jp(n) : n == null && c === \"string\" ? (n = \"\", l = !0) : c === \"number\" && (n = 0, l = !0);\n  }\n  try {\n    t[e] = n;\n  } catch (c) {\n     true && !l && Xt(\n      `Failed setting prop \"${e}\" on <${a.toLowerCase()}>: value ${n} is invalid.`,\n      c\n    );\n  }\n  l && t.removeAttribute(e);\n}\nfunction ni(t, e, n, r) {\n  t.addEventListener(e, n, r);\n}\nfunction F$(t, e, n, r) {\n  t.removeEventListener(e, n, r);\n}\nconst Ym = Symbol(\"_vei\");\nfunction G$(t, e, n, r, i = null) {\n  const s = t[Ym] || (t[Ym] = {}), o = s[e];\n  if (r && o)\n    o.value = r;\n  else {\n    const [a, l] = K$(e);\n    if (r) {\n      const c = s[e] = tQ(r, i);\n      ni(t, a, c, l);\n    } else\n      o && (F$(t, a, o, l), s[e] = void 0);\n  }\n}\nconst zm = /(?:Once|Passive|Capture)$/;\nfunction K$(t) {\n  let e;\n  if (zm.test(t)) {\n    e = {};\n    let r;\n    for (; r = t.match(zm); )\n      t = t.slice(0, t.length - r[0].length), e[r[0].toLowerCase()] = !0;\n  }\n  return [t[2] === \":\" ? t.slice(3) : rn(t.slice(2)), e];\n}\nlet Of = 0;\nconst J$ = /* @__PURE__ */ Promise.resolve(), eQ = () => Of || (J$.then(() => Of = 0), Of = Date.now());\nfunction tQ(t, e) {\n  const n = (r) => {\n    if (!r._vts)\n      r._vts = Date.now();\n    else if (r._vts <= n.attached)\n      return;\n    Wn(\n      nQ(r, n.value),\n      e,\n      5,\n      [r]\n    );\n  };\n  return n.value = t, n.attached = eQ(), n;\n}\nfunction nQ(t, e) {\n  if (ie(e)) {\n    const n = t.stopImmediatePropagation;\n    return t.stopImmediatePropagation = () => {\n      n.call(t), t._stopped = !0;\n    }, e.map((r) => (i) => !i._stopped && r && r(i));\n  } else\n    return e;\n}\nconst Hm = (t) => t.charCodeAt(0) === 111 && t.charCodeAt(1) === 110 && // lowercase letter\nt.charCodeAt(2) > 96 && t.charCodeAt(2) < 123, rQ = (t, e, n, r, i, s, o, a, l) => {\n  const c = i === \"svg\";\n  e === \"class\" ? j$(t, r, c) : e === \"style\" ? U$(t, n, r) : oi(e) ? mu(e) || G$(t, e, n, r, o) : (e[0] === \".\" ? (e = e.slice(1), !0) : e[0] === \"^\" ? (e = e.slice(1), !1) : iQ(t, e, r, c)) ? H$(\n    t,\n    e,\n    r,\n    s,\n    o,\n    a,\n    l\n  ) : (e === \"true-value\" ? t._trueValue = r : e === \"false-value\" && (t._falseValue = r), z$(t, e, r, c));\n};\nfunction iQ(t, e, n, r) {\n  if (r)\n    return !!(e === \"innerHTML\" || e === \"textContent\" || e in t && Hm(e) && be(n));\n  if (e === \"spellcheck\" || e === \"draggable\" || e === \"translate\" || e === \"form\" || e === \"list\" && t.tagName === \"INPUT\" || e === \"type\" && t.tagName === \"TEXTAREA\")\n    return !1;\n  if (e === \"width\" || e === \"height\") {\n    const i = t.tagName;\n    if (i === \"IMG\" || i === \"VIDEO\" || i === \"CANVAS\" || i === \"SOURCE\")\n      return !1;\n  }\n  return Hm(e) && we(n) ? !1 : e in t;\n}\n/*! #__NO_SIDE_EFFECTS__ */\n// @__NO_SIDE_EFFECTS__\nfunction K1(t, e) {\n  const n = /* @__PURE__ */ le(t);\n  class r extends Ed {\n    constructor(s) {\n      super(n, s, e);\n    }\n  }\n  return r.def = n, r;\n}\n/*! #__NO_SIDE_EFFECTS__ */\nconst sQ = /* @__NO_SIDE_EFFECTS__ */ (t) => /* @__PURE__ */ K1(t, fS), oQ = typeof HTMLElement < \"u\" ? HTMLElement : class {\n};\nclass Ed extends oQ {\n  constructor(e, n = {}, r) {\n    super(), this._def = e, this._props = n, this._instance = null, this._connected = !1, this._resolved = !1, this._numberProps = null, this._ob = null, this.shadowRoot && r ? r(this._createVNode(), this.shadowRoot) : ( true && this.shadowRoot && Xt(\n      \"Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use `defineSSRCustomElement`.\"\n    ), this.attachShadow({ mode: \"open\" }), this._def.__asyncLoader || this._resolveProps(this._def));\n  }\n  connectedCallback() {\n    this._connected = !0, this._instance || (this._resolved ? this._update() : this._resolveDef());\n  }\n  disconnectedCallback() {\n    this._connected = !1, this._ob && (this._ob.disconnect(), this._ob = null), Pn(() => {\n      this._connected || ($h(null, this.shadowRoot), this._instance = null);\n    });\n  }\n  /**\n   * resolve inner component definition (handle possible async component)\n   */\n  _resolveDef() {\n    this._resolved = !0;\n    for (let r = 0; r < this.attributes.length; r++)\n      this._setAttr(this.attributes[r].name);\n    this._ob = new MutationObserver((r) => {\n      for (const i of r)\n        this._setAttr(i.attributeName);\n    }), this._ob.observe(this, { attributes: !0 });\n    const e = (r, i = !1) => {\n      const { props: s, styles: o } = r;\n      let a;\n      if (s && !ie(s))\n        for (const l in s) {\n          const c = s[l];\n          (c === Number || c && c.type === Number) && (l in this._props && (this._props[l] = vu(this._props[l])), (a || (a = /* @__PURE__ */ Object.create(null)))[mt(l)] = !0);\n        }\n      this._numberProps = a, i && this._resolveProps(r), this._applyStyles(o), this._update();\n    }, n = this._def.__asyncLoader;\n    n ? n().then((r) => e(r, !0)) : e(this._def);\n  }\n  _resolveProps(e) {\n    const { props: n } = e, r = ie(n) ? n : Object.keys(n || {});\n    for (const i of Object.keys(this))\n      i[0] !== \"_\" && r.includes(i) && this._setProp(i, this[i], !0, !1);\n    for (const i of r.map(mt))\n      Object.defineProperty(this, i, {\n        get() {\n          return this._getProp(i);\n        },\n        set(s) {\n          this._setProp(i, s);\n        }\n      });\n  }\n  _setAttr(e) {\n    let n = this.getAttribute(e);\n    const r = mt(e);\n    this._numberProps && this._numberProps[r] && (n = vu(n)), this._setProp(r, n, !1);\n  }\n  /**\n   * @internal\n   */\n  _getProp(e) {\n    return this._props[e];\n  }\n  /**\n   * @internal\n   */\n  _setProp(e, n, r = !0, i = !0) {\n    n !== this._props[e] && (this._props[e] = n, i && this._instance && this._update(), r && (n === !0 ? this.setAttribute(rn(e), \"\") : typeof n == \"string\" || typeof n == \"number\" ? this.setAttribute(rn(e), n + \"\") : n || this.removeAttribute(rn(e))));\n  }\n  _update() {\n    $h(this._createVNode(), this.shadowRoot);\n  }\n  _createVNode() {\n    const e = J(this._def, $e({}, this._props));\n    return this._instance || (e.ce = (n) => {\n      this._instance = n, n.isCE = !0,  true && (n.ceReload = (s) => {\n        this._styles && (this._styles.forEach((o) => this.shadowRoot.removeChild(o)), this._styles.length = 0), this._applyStyles(s), this._instance = null, this._update();\n      });\n      const r = (s, o) => {\n        this.dispatchEvent(\n          new CustomEvent(s, {\n            detail: o\n          })\n        );\n      };\n      n.emit = (s, ...o) => {\n        r(s, o), rn(s) !== s && r(rn(s), o);\n      };\n      let i = this;\n      for (; i = i && (i.parentNode || i.host); )\n        if (i instanceof Ed) {\n          n.parent = i._instance, n.provides = i._instance.provides;\n          break;\n        }\n    }), e;\n  }\n  _applyStyles(e) {\n    e && e.forEach((n) => {\n      const r = document.createElement(\"style\");\n      r.textContent = n, this.shadowRoot.appendChild(r),  true && (this._styles || (this._styles = [])).push(r);\n    });\n  }\n}\nfunction J1(t = \"$style\") {\n  {\n    const e = ir();\n    if (!e)\n      return  true && Xt(\"useCssModule must be called inside setup()\"), Ve;\n    const n = e.type.__cssModules;\n    if (!n)\n      return  true && Xt(\"Current instance does not have CSS modules injected.\"), Ve;\n    const r = n[t];\n    return r || ( true && Xt(`Current instance does not have CSS module named \"${t}\".`), Ve);\n  }\n}\nconst eS = /* @__PURE__ */ new WeakMap(), tS = /* @__PURE__ */ new WeakMap(), $u = Symbol(\"_moveCb\"), Fm = Symbol(\"_enterCb\"), nS = {\n  name: \"TransitionGroup\",\n  props: /* @__PURE__ */ $e({}, W$, {\n    tag: String,\n    moveClass: String\n  }),\n  setup(t, { slots: e }) {\n    const n = ir(), r = SO();\n    let i, s;\n    return kd(() => {\n      if (!i.length)\n        return;\n      const o = t.moveClass || `${t.name || \"v\"}-move`;\n      if (!fQ(\n        i[0].el,\n        n.vnode.el,\n        o\n      ))\n        return;\n      i.forEach(cQ), i.forEach(uQ);\n      const a = i.filter(dQ);\n      z1(), a.forEach((l) => {\n        const c = l.el, u = c.style;\n        Kr(c, o), u.transform = u.webkitTransform = u.transitionDuration = \"\";\n        const d = c[$u] = (f) => {\n          f && f.target !== c || (!f || /transform$/.test(f.propertyName)) && (c.removeEventListener(\"transitionend\", d), c[$u] = null, $i(c, o));\n        };\n        c.addEventListener(\"transitionend\", d);\n      });\n    }), () => {\n      const o = Oe(t), a = q1(o);\n      let l = o.tag || Pe;\n      i = s, s = e.default ? Sd(e.default()) : [];\n      for (let c = 0; c < s.length; c++) {\n        const u = s[c];\n        u.key != null ? Xs(\n          u,\n          Ro(u, a, r, n)\n        ) :  true && Xt(\"<TransitionGroup> children must be keyed.\");\n      }\n      if (i)\n        for (let c = 0; c < i.length; c++) {\n          const u = i[c];\n          Xs(\n            u,\n            Ro(u, a, r, n)\n          ), eS.set(u, u.el.getBoundingClientRect());\n        }\n      return J(l, null, s);\n    };\n  }\n}, aQ = (t) => delete t.mode;\nnS.props;\nconst lQ = nS;\nfunction cQ(t) {\n  const e = t.el;\n  e[$u] && e[$u](), e[Fm] && e[Fm]();\n}\nfunction uQ(t) {\n  tS.set(t, t.el.getBoundingClientRect());\n}\nfunction dQ(t) {\n  const e = eS.get(t), n = tS.get(t), r = e.left - n.left, i = e.top - n.top;\n  if (r || i) {\n    const s = t.el.style;\n    return s.transform = s.webkitTransform = `translate(${r}px,${i}px)`, s.transitionDuration = \"0s\", t;\n  }\n}\nfunction fQ(t, e, n) {\n  const r = t.cloneNode(), i = t[No];\n  i && i.forEach((a) => {\n    a.split(/\\s+/).forEach((l) => l && r.classList.remove(l));\n  }), n.split(/\\s+/).forEach((a) => a && r.classList.add(a)), r.style.display = \"none\";\n  const s = e.nodeType === 1 ? e : e.parentNode;\n  s.appendChild(r);\n  const { hasTransform: o } = Y1(r);\n  return s.removeChild(r), o;\n}\nconst rs = (t) => {\n  const e = t.props[\"onUpdate:modelValue\"] || !1;\n  return ie(e) ? (n) => Ii(e, n) : e;\n};\nfunction hQ(t) {\n  t.target.composing = !0;\n}\nfunction Gm(t) {\n  const e = t.target;\n  e.composing && (e.composing = !1, e.dispatchEvent(new Event(\"input\")));\n}\nconst Jn = Symbol(\"_assign\"), Gi = {\n  created(t, { modifiers: { lazy: e, trim: n, number: r } }, i) {\n    t[Jn] = rs(i);\n    const s = r || i.props && i.props.type === \"number\";\n    ni(t, e ? \"change\" : \"input\", (o) => {\n      if (o.target.composing)\n        return;\n      let a = t.value;\n      n && (a = a.trim()), s && (a = Ka(a)), t[Jn](a);\n    }), n && ni(t, \"change\", () => {\n      t.value = t.value.trim();\n    }), e || (ni(t, \"compositionstart\", hQ), ni(t, \"compositionend\", Gm), ni(t, \"change\", Gm));\n  },\n  // set value on mounted so it's after min/max for type=\"range\"\n  mounted(t, { value: e }) {\n    t.value = e ?? \"\";\n  },\n  beforeUpdate(t, { value: e, modifiers: { lazy: n, trim: r, number: i } }, s) {\n    if (t[Jn] = rs(s), t.composing)\n      return;\n    const o = i || t.type === \"number\" ? Ka(t.value) : t.value, a = e ?? \"\";\n    o !== a && (document.activeElement === t && t.type !== \"range\" && (n || r && t.value.trim() === a) || (t.value = a));\n  }\n}, $d = {\n  // #4096 array checkboxes need to be deep traversed\n  deep: !0,\n  created(t, e, n) {\n    t[Jn] = rs(n), ni(t, \"change\", () => {\n      const r = t._modelValue, i = Do(t), s = t.checked, o = t[Jn];\n      if (ie(r)) {\n        const a = hd(r, i), l = a !== -1;\n        if (s && !l)\n          o(r.concat(i));\n        else if (!s && l) {\n          const c = [...r];\n          c.splice(a, 1), o(c);\n        }\n      } else if (Gs(r)) {\n        const a = new Set(r);\n        s ? a.add(i) : a.delete(i), o(a);\n      } else\n        o(iS(t, s));\n    });\n  },\n  // set initial checked on mount to wait for true-value/false-value\n  mounted: Km,\n  beforeUpdate(t, e, n) {\n    t[Jn] = rs(n), Km(t, e, n);\n  }\n};\nfunction Km(t, { value: e, oldValue: n }, r) {\n  t._modelValue = e, ie(e) ? t.checked = hd(e, r.props.value) > -1 : Gs(e) ? t.checked = e.has(r.props.value) : e !== n && (t.checked = ts(e, iS(t, !0)));\n}\nconst RO = {\n  created(t, { value: e }, n) {\n    t.checked = ts(e, n.props.value), t[Jn] = rs(n), ni(t, \"change\", () => {\n      t[Jn](Do(t));\n    });\n  },\n  beforeUpdate(t, { value: e, oldValue: n }, r) {\n    t[Jn] = rs(r), e !== n && (t.checked = ts(e, r.props.value));\n  }\n}, rS = {\n  // <select multiple> value need to be deep traversed\n  deep: !0,\n  created(t, { value: e, modifiers: { number: n } }, r) {\n    const i = Gs(e);\n    ni(t, \"change\", () => {\n      const s = Array.prototype.filter.call(t.options, (o) => o.selected).map(\n        (o) => n ? Ka(Do(o)) : Do(o)\n      );\n      t[Jn](\n        t.multiple ? i ? new Set(s) : s : s[0]\n      ), t._assigning = !0, Pn(() => {\n        t._assigning = !1;\n      });\n    }), t[Jn] = rs(r);\n  },\n  // set value in mounted & updated because <select> relies on its children\n  // <option>s.\n  mounted(t, { value: e, modifiers: { number: n } }) {\n    Jm(t, e, n);\n  },\n  beforeUpdate(t, e, n) {\n    t[Jn] = rs(n);\n  },\n  updated(t, { value: e, modifiers: { number: n } }) {\n    t._assigning || Jm(t, e, n);\n  }\n};\nfunction Jm(t, e, n) {\n  const r = t.multiple, i = ie(e);\n  if (r && !i && !Gs(e)) {\n     true && Xt(\n      `<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(e).slice(8, -1)}.`\n    );\n    return;\n  }\n  for (let s = 0, o = t.options.length; s < o; s++) {\n    const a = t.options[s], l = Do(a);\n    if (r)\n      if (i) {\n        const c = typeof l;\n        c === \"string\" || c === \"number\" ? a.selected = e.includes(\n          n ? Ka(l) : l\n        ) : a.selected = hd(e, l) > -1;\n      } else\n        a.selected = e.has(l);\n    else if (ts(Do(a), e)) {\n      t.selectedIndex !== s && (t.selectedIndex = s);\n      return;\n    }\n  }\n  !r && t.selectedIndex !== -1 && (t.selectedIndex = -1);\n}\nfunction Do(t) {\n  return \"_value\" in t ? t._value : t.value;\n}\nfunction iS(t, e) {\n  const n = e ? \"_trueValue\" : \"_falseValue\";\n  return n in t ? t[n] : e;\n}\nconst sS = {\n  created(t, e, n) {\n    bc(t, e, n, null, \"created\");\n  },\n  mounted(t, e, n) {\n    bc(t, e, n, null, \"mounted\");\n  },\n  beforeUpdate(t, e, n, r) {\n    bc(t, e, n, r, \"beforeUpdate\");\n  },\n  updated(t, e, n, r) {\n    bc(t, e, n, r, \"updated\");\n  }\n};\nfunction oS(t, e) {\n  switch (t) {\n    case \"SELECT\":\n      return rS;\n    case \"TEXTAREA\":\n      return Gi;\n    default:\n      switch (e) {\n        case \"checkbox\":\n          return $d;\n        case \"radio\":\n          return RO;\n        default:\n          return Gi;\n      }\n  }\n}\nfunction bc(t, e, n, r, i) {\n  const o = oS(\n    t.tagName,\n    n.props && n.props.type\n  )[i];\n  o && o(t, e, n, r);\n}\nfunction pQ() {\n  Gi.getSSRProps = ({ value: t }) => ({ value: t }), RO.getSSRProps = ({ value: t }, e) => {\n    if (e.props && ts(e.props.value, t))\n      return { checked: !0 };\n  }, $d.getSSRProps = ({ value: t }, e) => {\n    if (ie(t)) {\n      if (e.props && hd(t, e.props.value) > -1)\n        return { checked: !0 };\n    } else if (Gs(t)) {\n      if (e.props && t.has(e.props.value))\n        return { checked: !0 };\n    } else if (t)\n      return { checked: !0 };\n  }, sS.getSSRProps = (t, e) => {\n    if (typeof e.type != \"string\")\n      return;\n    const n = oS(\n      // resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase\n      e.type.toUpperCase(),\n      e.props && e.props.type\n    );\n    if (n.getSSRProps)\n      return n.getSSRProps(t, e);\n  };\n}\nconst OQ = [\"ctrl\", \"shift\", \"alt\", \"meta\"], gQ = {\n  stop: (t) => t.stopPropagation(),\n  prevent: (t) => t.preventDefault(),\n  self: (t) => t.target !== t.currentTarget,\n  ctrl: (t) => !t.ctrlKey,\n  shift: (t) => !t.shiftKey,\n  alt: (t) => !t.altKey,\n  meta: (t) => !t.metaKey,\n  left: (t) => \"button\" in t && t.button !== 0,\n  middle: (t) => \"button\" in t && t.button !== 1,\n  right: (t) => \"button\" in t && t.button !== 2,\n  exact: (t, e) => OQ.some((n) => t[`${n}Key`] && !e.includes(n))\n}, aS = (t, e) => {\n  const n = t._withMods || (t._withMods = {}), r = e.join(\".\");\n  return n[r] || (n[r] = (i, ...s) => {\n    for (let o = 0; o < e.length; o++) {\n      const a = gQ[e[o]];\n      if (a && a(i, e))\n        return;\n    }\n    return t(i, ...s);\n  });\n}, mQ = {\n  esc: \"escape\",\n  space: \" \",\n  up: \"arrow-up\",\n  left: \"arrow-left\",\n  right: \"arrow-right\",\n  down: \"arrow-down\",\n  delete: \"backspace\"\n}, lS = (t, e) => {\n  const n = t._withKeys || (t._withKeys = {}), r = e.join(\".\");\n  return n[r] || (n[r] = (i) => {\n    if (!(\"key\" in i))\n      return;\n    const s = rn(i.key);\n    if (e.some((o) => o === s || mQ[o] === s))\n      return t(i);\n  });\n}, cS = /* @__PURE__ */ $e({ patchProp: rQ }, I$);\nlet Ua, eb = !1;\nfunction uS() {\n  return Ua || (Ua = _1(cS));\n}\nfunction dS() {\n  return Ua = eb ? Ua : T1(cS), eb = !0, Ua;\n}\nconst $h = (...t) => {\n  uS().render(...t);\n}, fS = (...t) => {\n  dS().hydrate(...t);\n}, hS = (...t) => {\n  const e = uS().createApp(...t);\n   true && (OS(e), gS(e));\n  const { mount: n } = e;\n  return e.mount = (r) => {\n    const i = mS(r);\n    if (!i)\n      return;\n    const s = e._component;\n    !be(s) && !s.render && !s.template && (s.template = i.innerHTML), i.innerHTML = \"\";\n    const o = n(i, !1, pS(i));\n    return i instanceof Element && (i.removeAttribute(\"v-cloak\"), i.setAttribute(\"data-v-app\", \"\")), o;\n  }, e;\n}, bQ = (...t) => {\n  const e = dS().createApp(...t);\n   true && (OS(e), gS(e));\n  const { mount: n } = e;\n  return e.mount = (r) => {\n    const i = mS(r);\n    if (i)\n      return n(i, !0, pS(i));\n  }, e;\n};\nfunction pS(t) {\n  if (t instanceof SVGElement)\n    return \"svg\";\n  if (typeof MathMLElement == \"function\" && t instanceof MathMLElement)\n    return \"mathml\";\n}\nfunction OS(t) {\n  Object.defineProperty(t.config, \"isNativeTag\", {\n    value: (e) => by(e) || vy(e) || yy(e),\n    writable: !1\n  });\n}\nfunction gS(t) {\n  if (QO()) {\n    const e = t.config.isCustomElement;\n    Object.defineProperty(t.config, \"isCustomElement\", {\n      get() {\n        return e;\n      },\n      set() {\n        Xt(\n          \"The `isCustomElement` config option is deprecated. Use `compilerOptions.isCustomElement` instead.\"\n        );\n      }\n    });\n    const n = t.config.compilerOptions, r = 'The `compilerOptions` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka \"full build\"). Since you are using the runtime-only build, `compilerOptions` must be passed to `@vue/compiler-dom` in the build setup instead.\\n- For vue-loader: pass it via vue-loader\\'s `compilerOptions` loader option.\\n- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\\n- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc';\n    Object.defineProperty(t.config, \"compilerOptions\", {\n      get() {\n        return Xt(r), n;\n      },\n      set() {\n        Xt(r);\n      }\n    });\n  }\n}\nfunction mS(t) {\n  if (we(t)) {\n    const e = document.querySelector(t);\n    return  true && !e && Xt(\n      `Failed to mount app: mount target selector \"${t}\" returned null.`\n    ), e;\n  }\n  return  true && window.ShadowRoot && t instanceof window.ShadowRoot && t.mode === \"closed\" && Xt(\n    'mounting on a ShadowRoot with `{mode: \"closed\"}` may lead to unpredictable bugs'\n  ), t;\n}\nlet tb = !1;\nconst vQ = () => {\n  tb || (tb = !0, pQ(), B$());\n}, yQ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  BaseTransition: s1,\n  BaseTransitionPropsValidators: wO,\n  Comment: _t,\n  DeprecationTypes: D$,\n  EffectScope: eO,\n  ErrorCodes: WT,\n  ErrorTypeStrings: E$,\n  Fragment: Pe,\n  KeepAlive: yE,\n  ReactiveEffect: Ao,\n  Static: Fi,\n  Suspense: dE,\n  Teleport: TO,\n  Text: ns,\n  TrackOpTypes: RT,\n  Transition: AO,\n  TransitionGroup: lQ,\n  TriggerOpTypes: NT,\n  VueElement: Ed,\n  assertNumber: dO,\n  callWithAsyncErrorHandling: Wn,\n  callWithErrorHandling: Vr,\n  camelize: mt,\n  capitalize: Wr,\n  cloneVNode: jn,\n  compatUtils: N$,\n  computed: j,\n  createApp: hS,\n  createBlock: ke,\n  createCommentVNode: st,\n  createElementBlock: ne,\n  createElementVNode: D,\n  createHydrationRenderer: T1,\n  createPropsRestProxy: IE,\n  createRenderer: _1,\n  createSSRApp: bQ,\n  createSlots: wE,\n  createStaticVNode: Wl,\n  createTextVNode: He,\n  createVNode: J,\n  customRef: Xy,\n  defineAsyncComponent: a1,\n  defineComponent: le,\n  defineCustomElement: K1,\n  defineEmits: $E,\n  defineExpose: QE,\n  defineModel: RE,\n  defineOptions: CE,\n  defineProps: EE,\n  defineSSRCustomElement: sQ,\n  defineSlots: AE,\n  devtools: $$,\n  effect: rT,\n  effectScope: tT,\n  getCurrentInstance: ir,\n  getCurrentScope: Rl,\n  getTransitionRawChildren: Sd,\n  guardReactiveProps: EO,\n  h: kt,\n  handleError: hs,\n  hasInjectionContext: zE,\n  hydrate: fS,\n  initCustomFormatter: CO,\n  initDirectivesForSSR: vQ,\n  inject: Pt,\n  isMemoSame: L1,\n  isProxy: Ja,\n  isReactive: Yi,\n  isReadonly: ai,\n  isRef: Ct,\n  isRuntimeOnly: QO,\n  isShallow: zi,\n  isVNode: li,\n  markRaw: oO,\n  mergeDefaults: ZE,\n  mergeModels: VE,\n  mergeProps: Ml,\n  nextTick: Pn,\n  normalizeClass: Ke,\n  normalizeProps: my,\n  normalizeStyle: Br,\n  onActivated: l1,\n  onBeforeMount: d1,\n  onBeforeUnmount: Il,\n  onBeforeUpdate: f1,\n  onDeactivated: c1,\n  onErrorCaptured: O1,\n  onMounted: et,\n  onRenderTracked: p1,\n  onRenderTriggered: h1,\n  onScopeDispose: tO,\n  onServerPrefetch: xd,\n  onUnmounted: jt,\n  onUpdated: kd,\n  openBlock: Z,\n  popScopeId: Js,\n  provide: _n,\n  proxyRefs: uO,\n  pushScopeId: Ks,\n  queuePostFlushCb: nl,\n  reactive: Xn,\n  readonly: sO,\n  ref: G,\n  registerRuntimeCompiler: M1,\n  render: $h,\n  renderList: Xr,\n  renderSlot: pt,\n  resolveComponent: lE,\n  resolveDirective: cE,\n  resolveDynamicComponent: Zl,\n  resolveFilter: R$,\n  resolveTransitionHooks: Ro,\n  setBlockTracking: vh,\n  setDevtoolsHook: Q$,\n  setTransitionHooks: Xs,\n  shallowReactive: Iy,\n  shallowReadonly: Dn,\n  shallowRef: cO,\n  ssrContextKey: e1,\n  ssrUtils: A$,\n  stop: iT,\n  toDisplayString: De,\n  toHandlerKey: Tr,\n  toHandlers: kE,\n  toRaw: Oe,\n  toRef: Ei,\n  toRefs: QT,\n  toValue: Jt,\n  transformVNodeArgs: m$,\n  triggerRef: TT,\n  unref: R,\n  useAttrs: xO,\n  useCssModule: J1,\n  useCssVars: G1,\n  useModel: _$,\n  useSSRContext: yO,\n  useSlots: DE,\n  useTransitionState: SO,\n  vModelCheckbox: $d,\n  vModelDynamic: sS,\n  vModelRadio: RO,\n  vModelSelect: rS,\n  vModelText: Gi,\n  vShow: jl,\n  version: _h,\n  warn: Xt,\n  watch: ht,\n  watchEffect: Bn,\n  watchPostEffect: t1,\n  watchSyncEffect: n1,\n  withAsyncContext: WE,\n  withCtx: ce,\n  withDefaults: NE,\n  withDirectives: Xi,\n  withKeys: lS,\n  withMemo: T$,\n  withModifiers: aS,\n  withScopeId: rE\n}, Symbol.toStringTag, { value: \"Module\" }));\n/**\n* vue v3.4.21\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\nfunction SQ() {\n  CO();\n}\n true && SQ();\nfunction wQ(t, e, n) {\n  let r = G(n == null ? void 0 : n.value), i = j(() => t.value !== void 0);\n  return [j(() => i.value ? t.value : r.value), function(s) {\n    return i.value || (r.value = s), e == null ? void 0 : e(s);\n  }];\n}\nlet kQ = Symbol(\"headlessui.useid\"), xQ = 0;\nfunction mr() {\n  return Pt(kQ, () => `${++xQ}`)();\n}\nfunction pe(t) {\n  var e;\n  if (t == null || t.value == null)\n    return null;\n  let n = (e = t.value.$el) != null ? e : t.value;\n  return n instanceof Node ? n : null;\n}\nfunction Tt(t, e, ...n) {\n  if (t in e) {\n    let i = e[t];\n    return typeof i == \"function\" ? i(...n) : i;\n  }\n  let r = new Error(`Tried to handle \"${t}\" but there is no handler defined. Only defined handlers are: ${Object.keys(e).map((i) => `\"${i}\"`).join(\", \")}.`);\n  throw Error.captureStackTrace && Error.captureStackTrace(r, Tt), r;\n}\nvar PQ = Object.defineProperty, _Q = (t, e, n) => e in t ? PQ(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n, nb = (t, e, n) => (_Q(t, typeof e != \"symbol\" ? e + \"\" : e, n), n);\nlet TQ = class {\n  constructor() {\n    nb(this, \"current\", this.detect()), nb(this, \"currentId\", 0);\n  }\n  set(e) {\n    this.current !== e && (this.currentId = 0, this.current = e);\n  }\n  reset() {\n    this.set(this.detect());\n  }\n  nextId() {\n    return ++this.currentId;\n  }\n  get isServer() {\n    return this.current === \"server\";\n  }\n  get isClient() {\n    return this.current === \"client\";\n  }\n  detect() {\n    return typeof window > \"u\" || typeof document > \"u\" ? \"server\" : \"client\";\n  }\n}, Qd = new TQ();\nfunction to(t) {\n  if (Qd.isServer)\n    return null;\n  if (t instanceof Node)\n    return t.ownerDocument;\n  if (t != null && t.hasOwnProperty(\"value\")) {\n    let e = pe(t);\n    if (e)\n      return e.ownerDocument;\n  }\n  return document;\n}\nlet Qh = [\"[contentEditable=true]\", \"[tabindex]\", \"a[href]\", \"area[href]\", \"button:not([disabled])\", \"iframe\", \"input:not([disabled])\", \"select:not([disabled])\", \"textarea:not([disabled])\"].map((t) => `${t}:not([tabindex='-1'])`).join(\",\");\nvar Wt = ((t) => (t[t.First = 1] = \"First\", t[t.Previous = 2] = \"Previous\", t[t.Next = 4] = \"Next\", t[t.Last = 8] = \"Last\", t[t.WrapAround = 16] = \"WrapAround\", t[t.NoScroll = 32] = \"NoScroll\", t))(Wt || {}), ho = ((t) => (t[t.Error = 0] = \"Error\", t[t.Overflow = 1] = \"Overflow\", t[t.Success = 2] = \"Success\", t[t.Underflow = 3] = \"Underflow\", t))(ho || {}), EQ = ((t) => (t[t.Previous = -1] = \"Previous\", t[t.Next = 1] = \"Next\", t))(EQ || {});\nfunction $Q(t = document.body) {\n  return t == null ? [] : Array.from(t.querySelectorAll(Qh)).sort((e, n) => Math.sign((e.tabIndex || Number.MAX_SAFE_INTEGER) - (n.tabIndex || Number.MAX_SAFE_INTEGER)));\n}\nvar NO = ((t) => (t[t.Strict = 0] = \"Strict\", t[t.Loose = 1] = \"Loose\", t))(NO || {});\nfunction bS(t, e = 0) {\n  var n;\n  return t === ((n = to(t)) == null ? void 0 : n.body) ? !1 : Tt(e, { 0() {\n    return t.matches(Qh);\n  }, 1() {\n    let r = t;\n    for (; r !== null; ) {\n      if (r.matches(Qh))\n        return !0;\n      r = r.parentElement;\n    }\n    return !1;\n  } });\n}\nvar QQ = ((t) => (t[t.Keyboard = 0] = \"Keyboard\", t[t.Mouse = 1] = \"Mouse\", t))(QQ || {});\ntypeof window < \"u\" && typeof document < \"u\" && (document.addEventListener(\"keydown\", (t) => {\n  t.metaKey || t.altKey || t.ctrlKey || (document.documentElement.dataset.headlessuiFocusVisible = \"\");\n}, !0), document.addEventListener(\"click\", (t) => {\n  t.detail === 1 ? delete document.documentElement.dataset.headlessuiFocusVisible : t.detail === 0 && (document.documentElement.dataset.headlessuiFocusVisible = \"\");\n}, !0));\nfunction Vs(t) {\n  t == null || t.focus({ preventScroll: !0 });\n}\nlet CQ = [\"textarea\", \"input\"].join(\",\");\nfunction AQ(t) {\n  var e, n;\n  return (n = (e = t == null ? void 0 : t.matches) == null ? void 0 : e.call(t, CQ)) != null ? n : !1;\n}\nfunction vs(t, e = (n) => n) {\n  return t.slice().sort((n, r) => {\n    let i = e(n), s = e(r);\n    if (i === null || s === null)\n      return 0;\n    let o = i.compareDocumentPosition(s);\n    return o & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : o & Node.DOCUMENT_POSITION_PRECEDING ? 1 : 0;\n  });\n}\nfunction Er(t, e, { sorted: n = !0, relativeTo: r = null, skipElements: i = [] } = {}) {\n  var s;\n  let o = (s = Array.isArray(t) ? t.length > 0 ? t[0].ownerDocument : document : t == null ? void 0 : t.ownerDocument) != null ? s : document, a = Array.isArray(t) ? n ? vs(t) : t : $Q(t);\n  i.length > 0 && a.length > 1 && (a = a.filter((p) => !i.includes(p))), r = r ?? o.activeElement;\n  let l = (() => {\n    if (e & 5)\n      return 1;\n    if (e & 10)\n      return -1;\n    throw new Error(\"Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last\");\n  })(), c = (() => {\n    if (e & 1)\n      return 0;\n    if (e & 2)\n      return Math.max(0, a.indexOf(r)) - 1;\n    if (e & 4)\n      return Math.max(0, a.indexOf(r)) + 1;\n    if (e & 8)\n      return a.length - 1;\n    throw new Error(\"Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last\");\n  })(), u = e & 32 ? { preventScroll: !0 } : {}, d = 0, f = a.length, h;\n  do {\n    if (d >= f || d + f <= 0)\n      return 0;\n    let p = c + d;\n    if (e & 16)\n      p = (p + f) % f;\n    else {\n      if (p < 0)\n        return 3;\n      if (p >= f)\n        return 1;\n    }\n    h = a[p], h == null || h.focus(u), d += l;\n  } while (h !== o.activeElement);\n  return e & 6 && AQ(h) && h.select(), 2;\n}\nfunction vS() {\n  return /iPhone/gi.test(window.navigator.platform) || /Mac/gi.test(window.navigator.platform) && window.navigator.maxTouchPoints > 0;\n}\nfunction RQ() {\n  return /Android/gi.test(window.navigator.userAgent);\n}\nfunction NQ() {\n  return vS() || RQ();\n}\nfunction vc(t, e, n) {\n  Qd.isServer || Bn((r) => {\n    document.addEventListener(t, e, n), r(() => document.removeEventListener(t, e, n));\n  });\n}\nfunction yS(t, e, n) {\n  Qd.isServer || Bn((r) => {\n    window.addEventListener(t, e, n), r(() => window.removeEventListener(t, e, n));\n  });\n}\nfunction SS(t, e, n = j(() => !0)) {\n  function r(s, o) {\n    if (!n.value || s.defaultPrevented)\n      return;\n    let a = o(s);\n    if (a === null || !a.getRootNode().contains(a))\n      return;\n    let l = function c(u) {\n      return typeof u == \"function\" ? c(u()) : Array.isArray(u) || u instanceof Set ? u : [u];\n    }(t);\n    for (let c of l) {\n      if (c === null)\n        continue;\n      let u = c instanceof HTMLElement ? c : pe(c);\n      if (u != null && u.contains(a) || s.composed && s.composedPath().includes(u))\n        return;\n    }\n    return !bS(a, NO.Loose) && a.tabIndex !== -1 && s.preventDefault(), e(s, a);\n  }\n  let i = G(null);\n  vc(\"pointerdown\", (s) => {\n    var o, a;\n    n.value && (i.value = ((a = (o = s.composedPath) == null ? void 0 : o.call(s)) == null ? void 0 : a[0]) || s.target);\n  }, !0), vc(\"mousedown\", (s) => {\n    var o, a;\n    n.value && (i.value = ((a = (o = s.composedPath) == null ? void 0 : o.call(s)) == null ? void 0 : a[0]) || s.target);\n  }, !0), vc(\"click\", (s) => {\n    NQ() || i.value && (r(s, () => i.value), i.value = null);\n  }, !0), vc(\"touchend\", (s) => r(s, () => s.target instanceof HTMLElement ? s.target : null), !0), yS(\"blur\", (s) => r(s, () => window.document.activeElement instanceof HTMLIFrameElement ? window.document.activeElement : null), !0);\n}\nfunction rb(t, e) {\n  if (t)\n    return t;\n  let n = e ?? \"button\";\n  if (typeof n == \"string\" && n.toLowerCase() === \"button\")\n    return \"button\";\n}\nfunction DO(t, e) {\n  let n = G(rb(t.value.type, t.value.as));\n  return et(() => {\n    n.value = rb(t.value.type, t.value.as);\n  }), Bn(() => {\n    var r;\n    n.value || pe(e) && pe(e) instanceof HTMLButtonElement && !((r = pe(e)) != null && r.hasAttribute(\"type\")) && (n.value = \"button\");\n  }), n;\n}\nfunction ib(t) {\n  return [t.screenX, t.screenY];\n}\nfunction DQ() {\n  let t = G([-1, -1]);\n  return { wasMoved(e) {\n    let n = ib(e);\n    return t.value[0] === n[0] && t.value[1] === n[1] ? !1 : (t.value = n, !0);\n  }, update(e) {\n    t.value = ib(e);\n  } };\n}\nvar ci = ((t) => (t[t.None = 0] = \"None\", t[t.RenderStrategy = 1] = \"RenderStrategy\", t[t.Static = 2] = \"Static\", t))(ci || {}), ZQ = ((t) => (t[t.Unmount = 0] = \"Unmount\", t[t.Hidden = 1] = \"Hidden\", t))(ZQ || {});\nfunction Et({ visible: t = !0, features: e = 0, ourProps: n, theirProps: r, ...i }) {\n  var s;\n  let o = kS(r, n), a = Object.assign(i, { props: o });\n  if (t || e & 2 && o.static)\n    return gf(a);\n  if (e & 1) {\n    let l = (s = o.unmount) == null || s ? 0 : 1;\n    return Tt(l, { 0() {\n      return null;\n    }, 1() {\n      return gf({ ...i, props: { ...o, hidden: !0, style: { display: \"none\" } } });\n    } });\n  }\n  return gf(a);\n}\nfunction gf({ props: t, attrs: e, slots: n, slot: r, name: i }) {\n  var s, o;\n  let { as: a, ...l } = ZO(t, [\"unmount\", \"static\"]), c = (s = n.default) == null ? void 0 : s.call(n, r), u = {};\n  if (r) {\n    let d = !1, f = [];\n    for (let [h, p] of Object.entries(r))\n      typeof p == \"boolean\" && (d = !0), p === !0 && f.push(h);\n    d && (u[\"data-headlessui-state\"] = f.join(\" \"));\n  }\n  if (a === \"template\") {\n    if (c = wS(c ?? []), Object.keys(l).length > 0 || Object.keys(e).length > 0) {\n      let [d, ...f] = c ?? [];\n      if (!IQ(d) || f.length > 0)\n        throw new Error(['Passing props on \"template\"!', \"\", `The current component <${i} /> is rendering a \"template\".`, \"However we need to passthrough the following props:\", Object.keys(l).concat(Object.keys(e)).map((O) => O.trim()).filter((O, m, y) => y.indexOf(O) === m).sort((O, m) => O.localeCompare(m)).map((O) => `  - ${O}`).join(`\n`), \"\", \"You can apply a few solutions:\", ['Add an `as=\"...\"` prop, to ensure that we render an actual element instead of a \"template\".', \"Render a single element as the child so that we can forward the props onto that element.\"].map((O) => `  - ${O}`).join(`\n`)].join(`\n`));\n      let h = kS((o = d.props) != null ? o : {}, l, u), p = jn(d, h, !0);\n      for (let O in h)\n        O.startsWith(\"on\") && (p.props || (p.props = {}), p.props[O] = h[O]);\n      return p;\n    }\n    return Array.isArray(c) && c.length === 1 ? c[0] : c;\n  }\n  return kt(a, Object.assign({}, l, u), { default: () => c });\n}\nfunction wS(t) {\n  return t.flatMap((e) => e.type === Pe ? wS(e.children) : [e]);\n}\nfunction kS(...t) {\n  if (t.length === 0)\n    return {};\n  if (t.length === 1)\n    return t[0];\n  let e = {}, n = {};\n  for (let r of t)\n    for (let i in r)\n      i.startsWith(\"on\") && typeof r[i] == \"function\" ? (n[i] != null || (n[i] = []), n[i].push(r[i])) : e[i] = r[i];\n  if (e.disabled || e[\"aria-disabled\"])\n    return Object.assign(e, Object.fromEntries(Object.keys(n).map((r) => [r, void 0])));\n  for (let r in n)\n    Object.assign(e, { [r](i, ...s) {\n      let o = n[r];\n      for (let a of o) {\n        if (i instanceof Event && i.defaultPrevented)\n          return;\n        a(i, ...s);\n      }\n    } });\n  return e;\n}\nfunction VQ(t) {\n  let e = Object.assign({}, t);\n  for (let n in e)\n    e[n] === void 0 && delete e[n];\n  return e;\n}\nfunction ZO(t, e = []) {\n  let n = Object.assign({}, t);\n  for (let r of e)\n    r in n && delete n[r];\n  return n;\n}\nfunction IQ(t) {\n  return t == null ? !1 : typeof t.type == \"string\" || typeof t.type == \"object\" || typeof t.type == \"function\";\n}\nvar Zo = ((t) => (t[t.None = 1] = \"None\", t[t.Focusable = 2] = \"Focusable\", t[t.Hidden = 4] = \"Hidden\", t))(Zo || {});\nlet Vo = /* @__PURE__ */ le({ name: \"Hidden\", props: { as: { type: [Object, String], default: \"div\" }, features: { type: Number, default: 1 } }, setup(t, { slots: e, attrs: n }) {\n  return () => {\n    var r;\n    let { features: i, ...s } = t, o = { \"aria-hidden\": (i & 2) === 2 ? !0 : (r = s[\"aria-hidden\"]) != null ? r : void 0, hidden: (i & 4) === 4 ? !0 : void 0, style: { position: \"fixed\", top: 1, left: 1, width: 1, height: 0, padding: 0, margin: -1, overflow: \"hidden\", clip: \"rect(0, 0, 0, 0)\", whiteSpace: \"nowrap\", borderWidth: \"0\", ...(i & 4) === 4 && (i & 2) !== 2 && { display: \"none\" } } };\n    return Et({ ourProps: o, theirProps: s, slot: {}, attrs: n, slots: e, name: \"Hidden\" });\n  };\n} }), xS = Symbol(\"Context\");\nvar In = ((t) => (t[t.Open = 1] = \"Open\", t[t.Closed = 2] = \"Closed\", t[t.Closing = 4] = \"Closing\", t[t.Opening = 8] = \"Opening\", t))(In || {});\nfunction VO() {\n  return Pt(xS, null);\n}\nfunction PS(t) {\n  _n(xS, t);\n}\nvar Xe = ((t) => (t.Space = \" \", t.Enter = \"Enter\", t.Escape = \"Escape\", t.Backspace = \"Backspace\", t.Delete = \"Delete\", t.ArrowLeft = \"ArrowLeft\", t.ArrowUp = \"ArrowUp\", t.ArrowRight = \"ArrowRight\", t.ArrowDown = \"ArrowDown\", t.Home = \"Home\", t.End = \"End\", t.PageUp = \"PageUp\", t.PageDown = \"PageDown\", t.Tab = \"Tab\", t))(Xe || {});\nfunction WQ(t) {\n  function e() {\n    document.readyState !== \"loading\" && (t(), document.removeEventListener(\"DOMContentLoaded\", e));\n  }\n  typeof window < \"u\" && typeof document < \"u\" && (document.addEventListener(\"DOMContentLoaded\", e), e());\n}\nlet ys = [];\nWQ(() => {\n  function t(e) {\n    e.target instanceof HTMLElement && e.target !== document.body && ys[0] !== e.target && (ys.unshift(e.target), ys = ys.filter((n) => n != null && n.isConnected), ys.splice(10));\n  }\n  window.addEventListener(\"click\", t, { capture: !0 }), window.addEventListener(\"mousedown\", t, { capture: !0 }), window.addEventListener(\"focus\", t, { capture: !0 }), document.body.addEventListener(\"click\", t, { capture: !0 }), document.body.addEventListener(\"mousedown\", t, { capture: !0 }), document.body.addEventListener(\"focus\", t, { capture: !0 });\n});\nfunction MQ(t) {\n  throw new Error(\"Unexpected object: \" + t);\n}\nvar hn = ((t) => (t[t.First = 0] = \"First\", t[t.Previous = 1] = \"Previous\", t[t.Next = 2] = \"Next\", t[t.Last = 3] = \"Last\", t[t.Specific = 4] = \"Specific\", t[t.Nothing = 5] = \"Nothing\", t))(hn || {});\nfunction XQ(t, e) {\n  let n = e.resolveItems();\n  if (n.length <= 0)\n    return null;\n  let r = e.resolveActiveIndex(), i = r ?? -1;\n  switch (t.focus) {\n    case 0: {\n      for (let s = 0; s < n.length; ++s)\n        if (!e.resolveDisabled(n[s], s, n))\n          return s;\n      return r;\n    }\n    case 1: {\n      i === -1 && (i = n.length);\n      for (let s = i - 1; s >= 0; --s)\n        if (!e.resolveDisabled(n[s], s, n))\n          return s;\n      return r;\n    }\n    case 2: {\n      for (let s = i + 1; s < n.length; ++s)\n        if (!e.resolveDisabled(n[s], s, n))\n          return s;\n      return r;\n    }\n    case 3: {\n      for (let s = n.length - 1; s >= 0; --s)\n        if (!e.resolveDisabled(n[s], s, n))\n          return s;\n      return r;\n    }\n    case 4: {\n      for (let s = 0; s < n.length; ++s)\n        if (e.resolveId(n[s], s, n) === t.id)\n          return s;\n      return r;\n    }\n    case 5:\n      return null;\n    default:\n      MQ(t);\n  }\n}\nfunction Cd(t) {\n  typeof queueMicrotask == \"function\" ? queueMicrotask(t) : Promise.resolve().then(t).catch((e) => setTimeout(() => {\n    throw e;\n  }));\n}\nfunction IO() {\n  let t = [], e = { addEventListener(n, r, i, s) {\n    return n.addEventListener(r, i, s), e.add(() => n.removeEventListener(r, i, s));\n  }, requestAnimationFrame(...n) {\n    let r = requestAnimationFrame(...n);\n    e.add(() => cancelAnimationFrame(r));\n  }, nextFrame(...n) {\n    e.requestAnimationFrame(() => {\n      e.requestAnimationFrame(...n);\n    });\n  }, setTimeout(...n) {\n    let r = setTimeout(...n);\n    e.add(() => clearTimeout(r));\n  }, microTask(...n) {\n    let r = { current: !0 };\n    return Cd(() => {\n      r.current && n[0]();\n    }), e.add(() => {\n      r.current = !1;\n    });\n  }, style(n, r, i) {\n    let s = n.style.getPropertyValue(r);\n    return Object.assign(n.style, { [r]: i }), this.add(() => {\n      Object.assign(n.style, { [r]: s });\n    });\n  }, group(n) {\n    let r = IO();\n    return n(r), this.add(() => r.dispose());\n  }, add(n) {\n    return t.push(n), () => {\n      let r = t.indexOf(n);\n      if (r >= 0)\n        for (let i of t.splice(r, 1))\n          i();\n    };\n  }, dispose() {\n    for (let n of t.splice(0))\n      n();\n  } };\n  return e;\n}\nfunction _S(t = {}, e = null, n = []) {\n  for (let [r, i] of Object.entries(t))\n    ES(n, TS(e, r), i);\n  return n;\n}\nfunction TS(t, e) {\n  return t ? t + \"[\" + e + \"]\" : e;\n}\nfunction ES(t, e, n) {\n  if (Array.isArray(n))\n    for (let [r, i] of n.entries())\n      ES(t, TS(e, r.toString()), i);\n  else\n    n instanceof Date ? t.push([e, n.toISOString()]) : typeof n == \"boolean\" ? t.push([e, n ? \"1\" : \"0\"]) : typeof n == \"string\" ? t.push([e, n]) : typeof n == \"number\" ? t.push([e, `${n}`]) : n == null ? t.push([e, \"\"]) : _S(n, e, t);\n}\nfunction $S(t, e, n, r) {\n  Qd.isServer || Bn((i) => {\n    t = t ?? window, t.addEventListener(e, n, r), i(() => t.removeEventListener(e, n, r));\n  });\n}\nvar Aa = ((t) => (t[t.Forwards = 0] = \"Forwards\", t[t.Backwards = 1] = \"Backwards\", t))(Aa || {});\nfunction jQ() {\n  let t = G(0);\n  return yS(\"keydown\", (e) => {\n    e.key === \"Tab\" && (t.value = e.shiftKey ? 1 : 0);\n  }), t;\n}\nfunction QS(t) {\n  if (!t)\n    return /* @__PURE__ */ new Set();\n  if (typeof t == \"function\")\n    return new Set(t());\n  let e = /* @__PURE__ */ new Set();\n  for (let n of t.value) {\n    let r = pe(n);\n    r instanceof HTMLElement && e.add(r);\n  }\n  return e;\n}\nvar CS = ((t) => (t[t.None = 1] = \"None\", t[t.InitialFocus = 2] = \"InitialFocus\", t[t.TabLock = 4] = \"TabLock\", t[t.FocusLock = 8] = \"FocusLock\", t[t.RestoreFocus = 16] = \"RestoreFocus\", t[t.All = 30] = \"All\", t))(CS || {});\nlet pa = Object.assign(/* @__PURE__ */ le({ name: \"FocusTrap\", props: { as: { type: [Object, String], default: \"div\" }, initialFocus: { type: Object, default: null }, features: { type: Number, default: 30 }, containers: { type: [Object, Function], default: G(/* @__PURE__ */ new Set()) } }, inheritAttrs: !1, setup(t, { attrs: e, slots: n, expose: r }) {\n  let i = G(null);\n  r({ el: i, $el: i });\n  let s = j(() => to(i)), o = G(!1);\n  et(() => o.value = !0), jt(() => o.value = !1), LQ({ ownerDocument: s }, j(() => o.value && !!(t.features & 16)));\n  let a = UQ({ ownerDocument: s, container: i, initialFocus: j(() => t.initialFocus) }, j(() => o.value && !!(t.features & 2)));\n  qQ({ ownerDocument: s, container: i, containers: t.containers, previousActiveElement: a }, j(() => o.value && !!(t.features & 8)));\n  let l = jQ();\n  function c(h) {\n    let p = pe(i);\n    p && ((O) => O())(() => {\n      Tt(l.value, { [Aa.Forwards]: () => {\n        Er(p, Wt.First, { skipElements: [h.relatedTarget] });\n      }, [Aa.Backwards]: () => {\n        Er(p, Wt.Last, { skipElements: [h.relatedTarget] });\n      } });\n    });\n  }\n  let u = G(!1);\n  function d(h) {\n    h.key === \"Tab\" && (u.value = !0, requestAnimationFrame(() => {\n      u.value = !1;\n    }));\n  }\n  function f(h) {\n    if (!o.value)\n      return;\n    let p = QS(t.containers);\n    pe(i) instanceof HTMLElement && p.add(pe(i));\n    let O = h.relatedTarget;\n    O instanceof HTMLElement && O.dataset.headlessuiFocusGuard !== \"true\" && (AS(p, O) || (u.value ? Er(pe(i), Tt(l.value, { [Aa.Forwards]: () => Wt.Next, [Aa.Backwards]: () => Wt.Previous }) | Wt.WrapAround, { relativeTo: h.target }) : h.target instanceof HTMLElement && Vs(h.target)));\n  }\n  return () => {\n    let h = {}, p = { ref: i, onKeydown: d, onFocusout: f }, { features: O, initialFocus: m, containers: y, ...b } = t;\n    return kt(Pe, [!!(O & 4) && kt(Vo, { as: \"button\", type: \"button\", \"data-headlessui-focus-guard\": !0, onFocus: c, features: Zo.Focusable }), Et({ ourProps: p, theirProps: { ...e, ...b }, slot: h, attrs: e, slots: n, name: \"FocusTrap\" }), !!(O & 4) && kt(Vo, { as: \"button\", type: \"button\", \"data-headlessui-focus-guard\": !0, onFocus: c, features: Zo.Focusable })]);\n  };\n} }), { features: CS });\nfunction BQ(t) {\n  let e = G(ys.slice());\n  return ht([t], ([n], [r]) => {\n    r === !0 && n === !1 ? Cd(() => {\n      e.value.splice(0);\n    }) : r === !1 && n === !0 && (e.value = ys.slice());\n  }, { flush: \"post\" }), () => {\n    var n;\n    return (n = e.value.find((r) => r != null && r.isConnected)) != null ? n : null;\n  };\n}\nfunction LQ({ ownerDocument: t }, e) {\n  let n = BQ(e);\n  et(() => {\n    Bn(() => {\n      var r, i;\n      e.value || ((r = t.value) == null ? void 0 : r.activeElement) === ((i = t.value) == null ? void 0 : i.body) && Vs(n());\n    }, { flush: \"post\" });\n  }), jt(() => {\n    e.value && Vs(n());\n  });\n}\nfunction UQ({ ownerDocument: t, container: e, initialFocus: n }, r) {\n  let i = G(null), s = G(!1);\n  return et(() => s.value = !0), jt(() => s.value = !1), et(() => {\n    ht([e, n, r], (o, a) => {\n      if (o.every((c, u) => (a == null ? void 0 : a[u]) === c) || !r.value)\n        return;\n      let l = pe(e);\n      l && Cd(() => {\n        var c, u;\n        if (!s.value)\n          return;\n        let d = pe(n), f = (c = t.value) == null ? void 0 : c.activeElement;\n        if (d) {\n          if (d === f) {\n            i.value = f;\n            return;\n          }\n        } else if (l.contains(f)) {\n          i.value = f;\n          return;\n        }\n        d ? Vs(d) : Er(l, Wt.First | Wt.NoScroll) === ho.Error && console.warn(\"There are no focusable elements inside the <FocusTrap />\"), i.value = (u = t.value) == null ? void 0 : u.activeElement;\n      });\n    }, { immediate: !0, flush: \"post\" });\n  }), i;\n}\nfunction qQ({ ownerDocument: t, container: e, containers: n, previousActiveElement: r }, i) {\n  var s;\n  $S((s = t.value) == null ? void 0 : s.defaultView, \"focus\", (o) => {\n    if (!i.value)\n      return;\n    let a = QS(n);\n    pe(e) instanceof HTMLElement && a.add(pe(e));\n    let l = r.value;\n    if (!l)\n      return;\n    let c = o.target;\n    c && c instanceof HTMLElement ? AS(a, c) ? (r.value = c, Vs(c)) : (o.preventDefault(), o.stopPropagation(), Vs(l)) : Vs(r.value);\n  }, !0);\n}\nfunction AS(t, e) {\n  for (let n of t)\n    if (n.contains(e))\n      return !0;\n  return !1;\n}\nfunction YQ(t) {\n  let e = cO(t.getSnapshot());\n  return jt(t.subscribe(() => {\n    e.value = t.getSnapshot();\n  })), e;\n}\nfunction zQ(t, e) {\n  let n = t(), r = /* @__PURE__ */ new Set();\n  return { getSnapshot() {\n    return n;\n  }, subscribe(i) {\n    return r.add(i), () => r.delete(i);\n  }, dispatch(i, ...s) {\n    let o = e[i].call(n, ...s);\n    o && (n = o, r.forEach((a) => a()));\n  } };\n}\nfunction HQ() {\n  let t;\n  return { before({ doc: e }) {\n    var n;\n    let r = e.documentElement;\n    t = ((n = e.defaultView) != null ? n : window).innerWidth - r.clientWidth;\n  }, after({ doc: e, d: n }) {\n    let r = e.documentElement, i = r.clientWidth - r.offsetWidth, s = t - i;\n    n.style(r, \"paddingRight\", `${s}px`);\n  } };\n}\nfunction FQ() {\n  return vS() ? { before({ doc: t, d: e, meta: n }) {\n    function r(i) {\n      return n.containers.flatMap((s) => s()).some((s) => s.contains(i));\n    }\n    e.microTask(() => {\n      var i;\n      if (window.getComputedStyle(t.documentElement).scrollBehavior !== \"auto\") {\n        let a = IO();\n        a.style(t.documentElement, \"scrollBehavior\", \"auto\"), e.add(() => e.microTask(() => a.dispose()));\n      }\n      let s = (i = window.scrollY) != null ? i : window.pageYOffset, o = null;\n      e.addEventListener(t, \"click\", (a) => {\n        if (a.target instanceof HTMLElement)\n          try {\n            let l = a.target.closest(\"a\");\n            if (!l)\n              return;\n            let { hash: c } = new URL(l.href), u = t.querySelector(c);\n            u && !r(u) && (o = u);\n          } catch {\n          }\n      }, !0), e.addEventListener(t, \"touchstart\", (a) => {\n        if (a.target instanceof HTMLElement)\n          if (r(a.target)) {\n            let l = a.target;\n            for (; l.parentElement && r(l.parentElement); )\n              l = l.parentElement;\n            e.style(l, \"overscrollBehavior\", \"contain\");\n          } else\n            e.style(a.target, \"touchAction\", \"none\");\n      }), e.addEventListener(t, \"touchmove\", (a) => {\n        if (a.target instanceof HTMLElement)\n          if (r(a.target)) {\n            let l = a.target;\n            for (; l.parentElement && l.dataset.headlessuiPortal !== \"\" && !(l.scrollHeight > l.clientHeight || l.scrollWidth > l.clientWidth); )\n              l = l.parentElement;\n            l.dataset.headlessuiPortal === \"\" && a.preventDefault();\n          } else\n            a.preventDefault();\n      }, { passive: !1 }), e.add(() => {\n        var a;\n        let l = (a = window.scrollY) != null ? a : window.pageYOffset;\n        s !== l && window.scrollTo(0, s), o && o.isConnected && (o.scrollIntoView({ block: \"nearest\" }), o = null);\n      });\n    });\n  } } : {};\n}\nfunction GQ() {\n  return { before({ doc: t, d: e }) {\n    e.style(t.documentElement, \"overflow\", \"hidden\");\n  } };\n}\nfunction KQ(t) {\n  let e = {};\n  for (let n of t)\n    Object.assign(e, n(e));\n  return e;\n}\nlet ks = zQ(() => /* @__PURE__ */ new Map(), { PUSH(t, e) {\n  var n;\n  let r = (n = this.get(t)) != null ? n : { doc: t, count: 0, d: IO(), meta: /* @__PURE__ */ new Set() };\n  return r.count++, r.meta.add(e), this.set(t, r), this;\n}, POP(t, e) {\n  let n = this.get(t);\n  return n && (n.count--, n.meta.delete(e)), this;\n}, SCROLL_PREVENT({ doc: t, d: e, meta: n }) {\n  let r = { doc: t, d: e, meta: KQ(n) }, i = [FQ(), HQ(), GQ()];\n  i.forEach(({ before: s }) => s == null ? void 0 : s(r)), i.forEach(({ after: s }) => s == null ? void 0 : s(r));\n}, SCROLL_ALLOW({ d: t }) {\n  t.dispose();\n}, TEARDOWN({ doc: t }) {\n  this.delete(t);\n} });\nks.subscribe(() => {\n  let t = ks.getSnapshot(), e = /* @__PURE__ */ new Map();\n  for (let [n] of t)\n    e.set(n, n.documentElement.style.overflow);\n  for (let n of t.values()) {\n    let r = e.get(n.doc) === \"hidden\", i = n.count !== 0;\n    (i && !r || !i && r) && ks.dispatch(n.count > 0 ? \"SCROLL_PREVENT\" : \"SCROLL_ALLOW\", n), n.count === 0 && ks.dispatch(\"TEARDOWN\", n);\n  }\n});\nfunction JQ(t, e, n) {\n  let r = YQ(ks), i = j(() => {\n    let s = t.value ? r.value.get(t.value) : void 0;\n    return s ? s.count > 0 : !1;\n  });\n  return ht([t, e], ([s, o], [a], l) => {\n    if (!s || !o)\n      return;\n    ks.dispatch(\"PUSH\", s, n);\n    let c = !1;\n    l(() => {\n      c || (ks.dispatch(\"POP\", a ?? s, n), c = !0);\n    });\n  }, { immediate: !0 }), i;\n}\nlet mf = /* @__PURE__ */ new Map(), Oa = /* @__PURE__ */ new Map();\nfunction sb(t, e = G(!0)) {\n  Bn((n) => {\n    var r;\n    if (!e.value)\n      return;\n    let i = pe(t);\n    if (!i)\n      return;\n    n(function() {\n      var o;\n      if (!i)\n        return;\n      let a = (o = Oa.get(i)) != null ? o : 1;\n      if (a === 1 ? Oa.delete(i) : Oa.set(i, a - 1), a !== 1)\n        return;\n      let l = mf.get(i);\n      l && (l[\"aria-hidden\"] === null ? i.removeAttribute(\"aria-hidden\") : i.setAttribute(\"aria-hidden\", l[\"aria-hidden\"]), i.inert = l.inert, mf.delete(i));\n    });\n    let s = (r = Oa.get(i)) != null ? r : 0;\n    Oa.set(i, s + 1), s === 0 && (mf.set(i, { \"aria-hidden\": i.getAttribute(\"aria-hidden\"), inert: i.inert }), i.setAttribute(\"aria-hidden\", \"true\"), i.inert = !0);\n  });\n}\nfunction eC({ defaultContainers: t = [], portals: e, mainTreeNodeRef: n } = {}) {\n  let r = G(null), i = to(r);\n  function s() {\n    var o, a, l;\n    let c = [];\n    for (let u of t)\n      u !== null && (u instanceof HTMLElement ? c.push(u) : \"value\" in u && u.value instanceof HTMLElement && c.push(u.value));\n    if (e != null && e.value)\n      for (let u of e.value)\n        c.push(u);\n    for (let u of (o = i == null ? void 0 : i.querySelectorAll(\"html > *, body > *\")) != null ? o : [])\n      u !== document.body && u !== document.head && u instanceof HTMLElement && u.id !== \"headlessui-portal-root\" && (u.contains(pe(r)) || u.contains((l = (a = pe(r)) == null ? void 0 : a.getRootNode()) == null ? void 0 : l.host) || c.some((d) => u.contains(d)) || c.push(u));\n    return c;\n  }\n  return { resolveContainers: s, contains(o) {\n    return s().some((a) => a.contains(o));\n  }, mainTreeNodeRef: r, MainTreeNode() {\n    return n != null ? null : kt(Vo, { features: Zo.Hidden, ref: r });\n  } };\n}\nlet RS = Symbol(\"ForcePortalRootContext\");\nfunction tC() {\n  return Pt(RS, !1);\n}\nlet ob = /* @__PURE__ */ le({ name: \"ForcePortalRoot\", props: { as: { type: [Object, String], default: \"template\" }, force: { type: Boolean, default: !1 } }, setup(t, { slots: e, attrs: n }) {\n  return _n(RS, t.force), () => {\n    let { force: r, ...i } = t;\n    return Et({ theirProps: i, ourProps: {}, slot: {}, slots: e, attrs: n, name: \"ForcePortalRoot\" });\n  };\n} }), NS = Symbol(\"StackContext\");\nvar Ch = ((t) => (t[t.Add = 0] = \"Add\", t[t.Remove = 1] = \"Remove\", t))(Ch || {});\nfunction nC() {\n  return Pt(NS, () => {\n  });\n}\nfunction rC({ type: t, enabled: e, element: n, onUpdate: r }) {\n  let i = nC();\n  function s(...o) {\n    r == null || r(...o), i(...o);\n  }\n  et(() => {\n    ht(e, (o, a) => {\n      o ? s(0, t, n) : a === !0 && s(1, t, n);\n    }, { immediate: !0, flush: \"sync\" });\n  }), jt(() => {\n    e.value && s(1, t, n);\n  }), _n(NS, s);\n}\nlet DS = Symbol(\"DescriptionContext\");\nfunction iC() {\n  let t = Pt(DS, null);\n  if (t === null)\n    throw new Error(\"Missing parent\");\n  return t;\n}\nfunction sC({ slot: t = G({}), name: e = \"Description\", props: n = {} } = {}) {\n  let r = G([]);\n  function i(s) {\n    return r.value.push(s), () => {\n      let o = r.value.indexOf(s);\n      o !== -1 && r.value.splice(o, 1);\n    };\n  }\n  return _n(DS, { register: i, slot: t, name: e, props: n }), j(() => r.value.length > 0 ? r.value.join(\" \") : void 0);\n}\nlet oC = /* @__PURE__ */ le({ name: \"Description\", props: { as: { type: [Object, String], default: \"p\" }, id: { type: String, default: null } }, setup(t, { attrs: e, slots: n }) {\n  var r;\n  let i = (r = t.id) != null ? r : `headlessui-description-${mr()}`, s = iC();\n  return et(() => jt(s.register(i))), () => {\n    let { name: o = \"Description\", slot: a = G({}), props: l = {} } = s, { ...c } = t, u = { ...Object.entries(l).reduce((d, [f, h]) => Object.assign(d, { [f]: R(h) }), {}), id: i };\n    return Et({ ourProps: u, theirProps: c, slot: a.value, attrs: e, slots: n, name: o });\n  };\n} });\nfunction aC(t) {\n  let e = to(t);\n  if (!e) {\n    if (t === null)\n      return null;\n    throw new Error(`[Headless UI]: Cannot find ownerDocument for contextElement: ${t}`);\n  }\n  let n = e.getElementById(\"headlessui-portal-root\");\n  if (n)\n    return n;\n  let r = e.createElement(\"div\");\n  return r.setAttribute(\"id\", \"headlessui-portal-root\"), e.body.appendChild(r);\n}\nlet lC = /* @__PURE__ */ le({ name: \"Portal\", props: { as: { type: [Object, String], default: \"div\" } }, setup(t, { slots: e, attrs: n }) {\n  let r = G(null), i = j(() => to(r)), s = tC(), o = Pt(ZS, null), a = G(s === !0 || o == null ? aC(r.value) : o.resolveTarget()), l = G(!1);\n  et(() => {\n    l.value = !0;\n  }), Bn(() => {\n    s || o != null && (a.value = o.resolveTarget());\n  });\n  let c = Pt(Ah, null), u = !1, d = ir();\n  return ht(r, () => {\n    if (u || !c)\n      return;\n    let f = pe(r);\n    f && (jt(c.register(f), d), u = !0);\n  }), jt(() => {\n    var f, h;\n    let p = (f = i.value) == null ? void 0 : f.getElementById(\"headlessui-portal-root\");\n    p && a.value === p && a.value.children.length <= 0 && ((h = a.value.parentElement) == null || h.removeChild(a.value));\n  }), () => {\n    if (!l.value || a.value === null)\n      return null;\n    let f = { ref: r, \"data-headlessui-portal\": \"\" };\n    return kt(TO, { to: a.value }, Et({ ourProps: f, theirProps: t, slot: {}, attrs: n, slots: e, name: \"Portal\" }));\n  };\n} }), Ah = Symbol(\"PortalParentContext\");\nfunction cC() {\n  let t = Pt(Ah, null), e = G([]);\n  function n(s) {\n    return e.value.push(s), t && t.register(s), () => r(s);\n  }\n  function r(s) {\n    let o = e.value.indexOf(s);\n    o !== -1 && e.value.splice(o, 1), t && t.unregister(s);\n  }\n  let i = { register: n, unregister: r, portals: e };\n  return [e, /* @__PURE__ */ le({ name: \"PortalWrapper\", setup(s, { slots: o }) {\n    return _n(Ah, i), () => {\n      var a;\n      return (a = o.default) == null ? void 0 : a.call(o);\n    };\n  } })];\n}\nlet ZS = Symbol(\"PortalGroupContext\"), uC = /* @__PURE__ */ le({ name: \"PortalGroup\", props: { as: { type: [Object, String], default: \"template\" }, target: { type: Object, default: null } }, setup(t, { attrs: e, slots: n }) {\n  let r = Xn({ resolveTarget() {\n    return t.target;\n  } });\n  return _n(ZS, r), () => {\n    let { target: i, ...s } = t;\n    return Et({ theirProps: s, ourProps: {}, slot: {}, attrs: e, slots: n, name: \"PortalGroup\" });\n  };\n} });\nvar dC = ((t) => (t[t.Open = 0] = \"Open\", t[t.Closed = 1] = \"Closed\", t))(dC || {});\nlet Rh = Symbol(\"DialogContext\");\nfunction WO(t) {\n  let e = Pt(Rh, null);\n  if (e === null) {\n    let n = new Error(`<${t} /> is missing a parent <Dialog /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(n, WO), n;\n  }\n  return e;\n}\nlet yc = \"DC8F892D-2EBD-447C-A4C8-A03058436FF4\", fC = /* @__PURE__ */ le({ name: \"Dialog\", inheritAttrs: !1, props: { as: { type: [Object, String], default: \"div\" }, static: { type: Boolean, default: !1 }, unmount: { type: Boolean, default: !0 }, open: { type: [Boolean, String], default: yc }, initialFocus: { type: Object, default: null }, id: { type: String, default: null }, role: { type: String, default: \"dialog\" } }, emits: { close: (t) => !0 }, setup(t, { emit: e, attrs: n, slots: r, expose: i }) {\n  var s, o;\n  let a = (s = t.id) != null ? s : `headlessui-dialog-${mr()}`, l = G(!1);\n  et(() => {\n    l.value = !0;\n  });\n  let c = !1, u = j(() => t.role === \"dialog\" || t.role === \"alertdialog\" ? t.role : (c || (c = !0, console.warn(`Invalid role [${u}] passed to <Dialog />. Only \\`dialog\\` and and \\`alertdialog\\` are supported. Using \\`dialog\\` instead.`)), \"dialog\")), d = G(0), f = VO(), h = j(() => t.open === yc && f !== null ? (f.value & In.Open) === In.Open : t.open), p = G(null), O = j(() => to(p));\n  if (i({ el: p, $el: p }), !(t.open !== yc || f !== null))\n    throw new Error(\"You forgot to provide an `open` prop to the `Dialog`.\");\n  if (typeof h.value != \"boolean\")\n    throw new Error(`You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${h.value === yc ? void 0 : t.open}`);\n  let m = j(() => l.value && h.value ? 0 : 1), y = j(() => m.value === 0), b = j(() => d.value > 1), g = Pt(Rh, null) !== null, [v, S] = cC(), { resolveContainers: w, mainTreeNodeRef: k, MainTreeNode: _ } = eC({ portals: v, defaultContainers: [j(() => {\n    var ue;\n    return (ue = K.panelRef.value) != null ? ue : p.value;\n  })] }), T = j(() => b.value ? \"parent\" : \"leaf\"), C = j(() => f !== null ? (f.value & In.Closing) === In.Closing : !1), A = j(() => g || C.value ? !1 : y.value), Q = j(() => {\n    var ue, ge, Be;\n    return (Be = Array.from((ge = (ue = O.value) == null ? void 0 : ue.querySelectorAll(\"body > *\")) != null ? ge : []).find((Le) => Le.id === \"headlessui-portal-root\" ? !1 : Le.contains(pe(k)) && Le instanceof HTMLElement)) != null ? Be : null;\n  });\n  sb(Q, A);\n  let W = j(() => b.value ? !0 : y.value), L = j(() => {\n    var ue, ge, Be;\n    return (Be = Array.from((ge = (ue = O.value) == null ? void 0 : ue.querySelectorAll(\"[data-headlessui-portal]\")) != null ? ge : []).find((Le) => Le.contains(pe(k)) && Le instanceof HTMLElement)) != null ? Be : null;\n  });\n  sb(L, W), rC({ type: \"Dialog\", enabled: j(() => m.value === 0), element: p, onUpdate: (ue, ge) => {\n    if (ge === \"Dialog\")\n      return Tt(ue, { [Ch.Add]: () => d.value += 1, [Ch.Remove]: () => d.value -= 1 });\n  } });\n  let re = sC({ name: \"DialogDescription\", slot: j(() => ({ open: h.value })) }), Y = G(null), K = { titleId: Y, panelRef: G(null), dialogState: m, setTitleId(ue) {\n    Y.value !== ue && (Y.value = ue);\n  }, close() {\n    e(\"close\", !1);\n  } };\n  _n(Rh, K);\n  let B = j(() => !(!y.value || b.value));\n  SS(w, (ue, ge) => {\n    ue.preventDefault(), K.close(), Pn(() => ge == null ? void 0 : ge.focus());\n  }, B);\n  let _e = j(() => !(b.value || m.value !== 0));\n  $S((o = O.value) == null ? void 0 : o.defaultView, \"keydown\", (ue) => {\n    _e.value && (ue.defaultPrevented || ue.key === Xe.Escape && (ue.preventDefault(), ue.stopPropagation(), K.close()));\n  });\n  let Ce = j(() => !(C.value || m.value !== 0 || g));\n  return JQ(O, Ce, (ue) => {\n    var ge;\n    return { containers: [...(ge = ue.containers) != null ? ge : [], w] };\n  }), Bn((ue) => {\n    if (m.value !== 0)\n      return;\n    let ge = pe(p);\n    if (!ge)\n      return;\n    let Be = new ResizeObserver((Le) => {\n      for (let Zt of Le) {\n        let Vt = Zt.target.getBoundingClientRect();\n        Vt.x === 0 && Vt.y === 0 && Vt.width === 0 && Vt.height === 0 && K.close();\n      }\n    });\n    Be.observe(ge), ue(() => Be.disconnect());\n  }), () => {\n    let { open: ue, initialFocus: ge, ...Be } = t, Le = { ...n, ref: p, id: a, role: u.value, \"aria-modal\": m.value === 0 ? !0 : void 0, \"aria-labelledby\": Y.value, \"aria-describedby\": re.value }, Zt = { open: m.value === 0 };\n    return kt(ob, { force: !0 }, () => [kt(lC, () => kt(uC, { target: p.value }, () => kt(ob, { force: !1 }, () => kt(pa, { initialFocus: ge, containers: w, features: y.value ? Tt(T.value, { parent: pa.features.RestoreFocus, leaf: pa.features.All & ~pa.features.FocusLock }) : pa.features.None }, () => kt(S, {}, () => Et({ ourProps: Le, theirProps: { ...Be, ...n }, slot: Zt, attrs: n, slots: r, visible: m.value === 0, features: ci.RenderStrategy | ci.Static, name: \"Dialog\" })))))), kt(_)]);\n  };\n} }), hC = /* @__PURE__ */ le({ name: \"DialogPanel\", props: { as: { type: [Object, String], default: \"div\" }, id: { type: String, default: null } }, setup(t, { attrs: e, slots: n, expose: r }) {\n  var i;\n  let s = (i = t.id) != null ? i : `headlessui-dialog-panel-${mr()}`, o = WO(\"DialogPanel\");\n  r({ el: o.panelRef, $el: o.panelRef });\n  function a(l) {\n    l.stopPropagation();\n  }\n  return () => {\n    let { ...l } = t, c = { id: s, ref: o.panelRef, onClick: a };\n    return Et({ ourProps: c, theirProps: l, slot: { open: o.dialogState.value === 0 }, attrs: e, slots: n, name: \"DialogPanel\" });\n  };\n} }), pC = /* @__PURE__ */ le({ name: \"DialogTitle\", props: { as: { type: [Object, String], default: \"h2\" }, id: { type: String, default: null } }, setup(t, { attrs: e, slots: n }) {\n  var r;\n  let i = (r = t.id) != null ? r : `headlessui-dialog-title-${mr()}`, s = WO(\"DialogTitle\");\n  return et(() => {\n    s.setTitleId(i), jt(() => s.setTitleId(null));\n  }), () => {\n    let { ...o } = t;\n    return Et({ ourProps: { id: i }, theirProps: o, slot: { open: s.dialogState.value === 0 }, attrs: e, slots: n, name: \"DialogTitle\" });\n  };\n} }), OC = oC;\nvar gC = ((t) => (t[t.Open = 0] = \"Open\", t[t.Closed = 1] = \"Closed\", t))(gC || {});\nlet VS = Symbol(\"DisclosureContext\");\nfunction MO(t) {\n  let e = Pt(VS, null);\n  if (e === null) {\n    let n = new Error(`<${t} /> is missing a parent <Disclosure /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(n, MO), n;\n  }\n  return e;\n}\nlet IS = Symbol(\"DisclosurePanelContext\");\nfunction mC() {\n  return Pt(IS, null);\n}\nlet bC = /* @__PURE__ */ le({ name: \"Disclosure\", props: { as: { type: [Object, String], default: \"template\" }, defaultOpen: { type: [Boolean], default: !1 } }, setup(t, { slots: e, attrs: n }) {\n  let r = G(t.defaultOpen ? 0 : 1), i = G(null), s = G(null), o = { buttonId: G(`headlessui-disclosure-button-${mr()}`), panelId: G(`headlessui-disclosure-panel-${mr()}`), disclosureState: r, panel: i, button: s, toggleDisclosure() {\n    r.value = Tt(r.value, { 0: 1, 1: 0 });\n  }, closeDisclosure() {\n    r.value !== 1 && (r.value = 1);\n  }, close(a) {\n    o.closeDisclosure();\n    let l = a ? a instanceof HTMLElement ? a : a.value instanceof HTMLElement ? pe(a) : pe(o.button) : pe(o.button);\n    l == null || l.focus();\n  } };\n  return _n(VS, o), PS(j(() => Tt(r.value, { 0: In.Open, 1: In.Closed }))), () => {\n    let { defaultOpen: a, ...l } = t, c = { open: r.value === 0, close: o.close };\n    return Et({ theirProps: l, ourProps: {}, slot: c, slots: e, attrs: n, name: \"Disclosure\" });\n  };\n} }), vC = /* @__PURE__ */ le({ name: \"DisclosureButton\", props: { as: { type: [Object, String], default: \"button\" }, disabled: { type: [Boolean], default: !1 }, id: { type: String, default: null } }, setup(t, { attrs: e, slots: n, expose: r }) {\n  let i = MO(\"DisclosureButton\"), s = mC(), o = j(() => s === null ? !1 : s.value === i.panelId.value);\n  et(() => {\n    o.value || t.id !== null && (i.buttonId.value = t.id);\n  }), jt(() => {\n    o.value || (i.buttonId.value = null);\n  });\n  let a = G(null);\n  r({ el: a, $el: a }), o.value || Bn(() => {\n    i.button.value = a.value;\n  });\n  let l = DO(j(() => ({ as: t.as, type: e.type })), a);\n  function c() {\n    var f;\n    t.disabled || (o.value ? (i.toggleDisclosure(), (f = pe(i.button)) == null || f.focus()) : i.toggleDisclosure());\n  }\n  function u(f) {\n    var h;\n    if (!t.disabled)\n      if (o.value)\n        switch (f.key) {\n          case Xe.Space:\n          case Xe.Enter:\n            f.preventDefault(), f.stopPropagation(), i.toggleDisclosure(), (h = pe(i.button)) == null || h.focus();\n            break;\n        }\n      else\n        switch (f.key) {\n          case Xe.Space:\n          case Xe.Enter:\n            f.preventDefault(), f.stopPropagation(), i.toggleDisclosure();\n            break;\n        }\n  }\n  function d(f) {\n    switch (f.key) {\n      case Xe.Space:\n        f.preventDefault();\n        break;\n    }\n  }\n  return () => {\n    var f;\n    let h = { open: i.disclosureState.value === 0 }, { id: p, ...O } = t, m = o.value ? { ref: a, type: l.value, onClick: c, onKeydown: u } : { id: (f = i.buttonId.value) != null ? f : p, ref: a, type: l.value, \"aria-expanded\": i.disclosureState.value === 0, \"aria-controls\": i.disclosureState.value === 0 || pe(i.panel) ? i.panelId.value : void 0, disabled: t.disabled ? !0 : void 0, onClick: c, onKeydown: u, onKeyup: d };\n    return Et({ ourProps: m, theirProps: O, slot: h, attrs: e, slots: n, name: \"DisclosureButton\" });\n  };\n} }), yC = /* @__PURE__ */ le({ name: \"DisclosurePanel\", props: { as: { type: [Object, String], default: \"div\" }, static: { type: Boolean, default: !1 }, unmount: { type: Boolean, default: !0 }, id: { type: String, default: null } }, setup(t, { attrs: e, slots: n, expose: r }) {\n  let i = MO(\"DisclosurePanel\");\n  et(() => {\n    t.id !== null && (i.panelId.value = t.id);\n  }), jt(() => {\n    i.panelId.value = null;\n  }), r({ el: i.panel, $el: i.panel }), _n(IS, i.panelId);\n  let s = VO(), o = j(() => s !== null ? (s.value & In.Open) === In.Open : i.disclosureState.value === 0);\n  return () => {\n    var a;\n    let l = { open: i.disclosureState.value === 0, close: i.close }, { id: c, ...u } = t, d = { id: (a = i.panelId.value) != null ? a : c, ref: i.panel };\n    return Et({ ourProps: d, theirProps: u, slot: l, attrs: e, slots: n, features: ci.RenderStrategy | ci.Static, visible: o.value, name: \"DisclosurePanel\" });\n  };\n} }), ab = /([\\u2700-\\u27BF]|[\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])/g;\nfunction lb(t) {\n  var e, n;\n  let r = (e = t.innerText) != null ? e : \"\", i = t.cloneNode(!0);\n  if (!(i instanceof HTMLElement))\n    return r;\n  let s = !1;\n  for (let a of i.querySelectorAll('[hidden],[aria-hidden],[role=\"img\"]'))\n    a.remove(), s = !0;\n  let o = s ? (n = i.innerText) != null ? n : \"\" : r;\n  return ab.test(o) && (o = o.replace(ab, \"\")), o;\n}\nfunction SC(t) {\n  let e = t.getAttribute(\"aria-label\");\n  if (typeof e == \"string\")\n    return e.trim();\n  let n = t.getAttribute(\"aria-labelledby\");\n  if (n) {\n    let r = n.split(\" \").map((i) => {\n      let s = document.getElementById(i);\n      if (s) {\n        let o = s.getAttribute(\"aria-label\");\n        return typeof o == \"string\" ? o.trim() : lb(s).trim();\n      }\n      return null;\n    }).filter(Boolean);\n    if (r.length > 0)\n      return r.join(\", \");\n  }\n  return lb(t).trim();\n}\nfunction wC(t) {\n  let e = G(\"\"), n = G(\"\");\n  return () => {\n    let r = pe(t);\n    if (!r)\n      return \"\";\n    let i = r.innerText;\n    if (e.value === i)\n      return n.value;\n    let s = SC(r).trim().toLowerCase();\n    return e.value = i, n.value = s, s;\n  };\n}\nfunction kC(t, e) {\n  return t === e;\n}\nvar xC = ((t) => (t[t.Open = 0] = \"Open\", t[t.Closed = 1] = \"Closed\", t))(xC || {}), PC = ((t) => (t[t.Single = 0] = \"Single\", t[t.Multi = 1] = \"Multi\", t))(PC || {}), _C = ((t) => (t[t.Pointer = 0] = \"Pointer\", t[t.Other = 1] = \"Other\", t))(_C || {});\nfunction TC(t) {\n  requestAnimationFrame(() => requestAnimationFrame(t));\n}\nlet WS = Symbol(\"ListboxContext\");\nfunction Ad(t) {\n  let e = Pt(WS, null);\n  if (e === null) {\n    let n = new Error(`<${t} /> is missing a parent <Listbox /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(n, Ad), n;\n  }\n  return e;\n}\nlet EC = /* @__PURE__ */ le({ name: \"Listbox\", emits: { \"update:modelValue\": (t) => !0 }, props: { as: { type: [Object, String], default: \"template\" }, disabled: { type: [Boolean], default: !1 }, by: { type: [String, Function], default: () => kC }, horizontal: { type: [Boolean], default: !1 }, modelValue: { type: [Object, String, Number, Boolean], default: void 0 }, defaultValue: { type: [Object, String, Number, Boolean], default: void 0 }, form: { type: String, optional: !0 }, name: { type: String, optional: !0 }, multiple: { type: [Boolean], default: !1 } }, inheritAttrs: !1, setup(t, { slots: e, attrs: n, emit: r }) {\n  let i = G(1), s = G(null), o = G(null), a = G(null), l = G([]), c = G(\"\"), u = G(null), d = G(1);\n  function f(g = (v) => v) {\n    let v = u.value !== null ? l.value[u.value] : null, S = vs(g(l.value.slice()), (k) => pe(k.dataRef.domRef)), w = v ? S.indexOf(v) : null;\n    return w === -1 && (w = null), { options: S, activeOptionIndex: w };\n  }\n  let h = j(() => t.multiple ? 1 : 0), [p, O] = wQ(j(() => t.modelValue), (g) => r(\"update:modelValue\", g), j(() => t.defaultValue)), m = j(() => p.value === void 0 ? Tt(h.value, { 1: [], 0: void 0 }) : p.value), y = { listboxState: i, value: m, mode: h, compare(g, v) {\n    if (typeof t.by == \"string\") {\n      let S = t.by;\n      return (g == null ? void 0 : g[S]) === (v == null ? void 0 : v[S]);\n    }\n    return t.by(g, v);\n  }, orientation: j(() => t.horizontal ? \"horizontal\" : \"vertical\"), labelRef: s, buttonRef: o, optionsRef: a, disabled: j(() => t.disabled), options: l, searchQuery: c, activeOptionIndex: u, activationTrigger: d, closeListbox() {\n    t.disabled || i.value !== 1 && (i.value = 1, u.value = null);\n  }, openListbox() {\n    t.disabled || i.value !== 0 && (i.value = 0);\n  }, goToOption(g, v, S) {\n    if (t.disabled || i.value === 1)\n      return;\n    let w = f(), k = XQ(g === hn.Specific ? { focus: hn.Specific, id: v } : { focus: g }, { resolveItems: () => w.options, resolveActiveIndex: () => w.activeOptionIndex, resolveId: (_) => _.id, resolveDisabled: (_) => _.dataRef.disabled });\n    c.value = \"\", u.value = k, d.value = S ?? 1, l.value = w.options;\n  }, search(g) {\n    if (t.disabled || i.value === 1)\n      return;\n    let v = c.value !== \"\" ? 0 : 1;\n    c.value += g.toLowerCase();\n    let S = (u.value !== null ? l.value.slice(u.value + v).concat(l.value.slice(0, u.value + v)) : l.value).find((k) => k.dataRef.textValue.startsWith(c.value) && !k.dataRef.disabled), w = S ? l.value.indexOf(S) : -1;\n    w === -1 || w === u.value || (u.value = w, d.value = 1);\n  }, clearSearch() {\n    t.disabled || i.value !== 1 && c.value !== \"\" && (c.value = \"\");\n  }, registerOption(g, v) {\n    let S = f((w) => [...w, { id: g, dataRef: v }]);\n    l.value = S.options, u.value = S.activeOptionIndex;\n  }, unregisterOption(g) {\n    let v = f((S) => {\n      let w = S.findIndex((k) => k.id === g);\n      return w !== -1 && S.splice(w, 1), S;\n    });\n    l.value = v.options, u.value = v.activeOptionIndex, d.value = 1;\n  }, theirOnChange(g) {\n    t.disabled || O(g);\n  }, select(g) {\n    t.disabled || O(Tt(h.value, { 0: () => g, 1: () => {\n      let v = Oe(y.value.value).slice(), S = Oe(g), w = v.findIndex((k) => y.compare(S, Oe(k)));\n      return w === -1 ? v.push(S) : v.splice(w, 1), v;\n    } }));\n  } };\n  SS([o, a], (g, v) => {\n    var S;\n    y.closeListbox(), bS(v, NO.Loose) || (g.preventDefault(), (S = pe(o)) == null || S.focus());\n  }, j(() => i.value === 0)), _n(WS, y), PS(j(() => Tt(i.value, { 0: In.Open, 1: In.Closed })));\n  let b = j(() => {\n    var g;\n    return (g = pe(o)) == null ? void 0 : g.closest(\"form\");\n  });\n  return et(() => {\n    ht([b], () => {\n      if (!b.value || t.defaultValue === void 0)\n        return;\n      function g() {\n        y.theirOnChange(t.defaultValue);\n      }\n      return b.value.addEventListener(\"reset\", g), () => {\n        var v;\n        (v = b.value) == null || v.removeEventListener(\"reset\", g);\n      };\n    }, { immediate: !0 });\n  }), () => {\n    let { name: g, modelValue: v, disabled: S, form: w, ...k } = t, _ = { open: i.value === 0, disabled: S, value: m.value };\n    return kt(Pe, [...g != null && m.value != null ? _S({ [g]: m.value }).map(([T, C]) => kt(Vo, VQ({ features: Zo.Hidden, key: T, as: \"input\", type: \"hidden\", hidden: !0, readOnly: !0, form: w, disabled: S, name: T, value: C }))) : [], Et({ ourProps: {}, theirProps: { ...n, ...ZO(k, [\"defaultValue\", \"onUpdate:modelValue\", \"horizontal\", \"multiple\", \"by\"]) }, slot: _, slots: e, attrs: n, name: \"Listbox\" })]);\n  };\n} }), $C = /* @__PURE__ */ le({ name: \"ListboxButton\", props: { as: { type: [Object, String], default: \"button\" }, id: { type: String, default: null } }, setup(t, { attrs: e, slots: n, expose: r }) {\n  var i;\n  let s = (i = t.id) != null ? i : `headlessui-listbox-button-${mr()}`, o = Ad(\"ListboxButton\");\n  r({ el: o.buttonRef, $el: o.buttonRef });\n  function a(d) {\n    switch (d.key) {\n      case Xe.Space:\n      case Xe.Enter:\n      case Xe.ArrowDown:\n        d.preventDefault(), o.openListbox(), Pn(() => {\n          var f;\n          (f = pe(o.optionsRef)) == null || f.focus({ preventScroll: !0 }), o.value.value || o.goToOption(hn.First);\n        });\n        break;\n      case Xe.ArrowUp:\n        d.preventDefault(), o.openListbox(), Pn(() => {\n          var f;\n          (f = pe(o.optionsRef)) == null || f.focus({ preventScroll: !0 }), o.value.value || o.goToOption(hn.Last);\n        });\n        break;\n    }\n  }\n  function l(d) {\n    switch (d.key) {\n      case Xe.Space:\n        d.preventDefault();\n        break;\n    }\n  }\n  function c(d) {\n    o.disabled.value || (o.listboxState.value === 0 ? (o.closeListbox(), Pn(() => {\n      var f;\n      return (f = pe(o.buttonRef)) == null ? void 0 : f.focus({ preventScroll: !0 });\n    })) : (d.preventDefault(), o.openListbox(), TC(() => {\n      var f;\n      return (f = pe(o.optionsRef)) == null ? void 0 : f.focus({ preventScroll: !0 });\n    })));\n  }\n  let u = DO(j(() => ({ as: t.as, type: e.type })), o.buttonRef);\n  return () => {\n    var d, f;\n    let h = { open: o.listboxState.value === 0, disabled: o.disabled.value, value: o.value.value }, { ...p } = t, O = { ref: o.buttonRef, id: s, type: u.value, \"aria-haspopup\": \"listbox\", \"aria-controls\": (d = pe(o.optionsRef)) == null ? void 0 : d.id, \"aria-expanded\": o.listboxState.value === 0, \"aria-labelledby\": o.labelRef.value ? [(f = pe(o.labelRef)) == null ? void 0 : f.id, s].join(\" \") : void 0, disabled: o.disabled.value === !0 ? !0 : void 0, onKeydown: a, onKeyup: l, onClick: c };\n    return Et({ ourProps: O, theirProps: p, slot: h, attrs: e, slots: n, name: \"ListboxButton\" });\n  };\n} }), QC = /* @__PURE__ */ le({ name: \"ListboxOptions\", props: { as: { type: [Object, String], default: \"ul\" }, static: { type: Boolean, default: !1 }, unmount: { type: Boolean, default: !0 }, id: { type: String, default: null } }, setup(t, { attrs: e, slots: n, expose: r }) {\n  var i;\n  let s = (i = t.id) != null ? i : `headlessui-listbox-options-${mr()}`, o = Ad(\"ListboxOptions\"), a = G(null);\n  r({ el: o.optionsRef, $el: o.optionsRef });\n  function l(d) {\n    switch (a.value && clearTimeout(a.value), d.key) {\n      case Xe.Space:\n        if (o.searchQuery.value !== \"\")\n          return d.preventDefault(), d.stopPropagation(), o.search(d.key);\n      case Xe.Enter:\n        if (d.preventDefault(), d.stopPropagation(), o.activeOptionIndex.value !== null) {\n          let f = o.options.value[o.activeOptionIndex.value];\n          o.select(f.dataRef.value);\n        }\n        o.mode.value === 0 && (o.closeListbox(), Pn(() => {\n          var f;\n          return (f = pe(o.buttonRef)) == null ? void 0 : f.focus({ preventScroll: !0 });\n        }));\n        break;\n      case Tt(o.orientation.value, { vertical: Xe.ArrowDown, horizontal: Xe.ArrowRight }):\n        return d.preventDefault(), d.stopPropagation(), o.goToOption(hn.Next);\n      case Tt(o.orientation.value, { vertical: Xe.ArrowUp, horizontal: Xe.ArrowLeft }):\n        return d.preventDefault(), d.stopPropagation(), o.goToOption(hn.Previous);\n      case Xe.Home:\n      case Xe.PageUp:\n        return d.preventDefault(), d.stopPropagation(), o.goToOption(hn.First);\n      case Xe.End:\n      case Xe.PageDown:\n        return d.preventDefault(), d.stopPropagation(), o.goToOption(hn.Last);\n      case Xe.Escape:\n        d.preventDefault(), d.stopPropagation(), o.closeListbox(), Pn(() => {\n          var f;\n          return (f = pe(o.buttonRef)) == null ? void 0 : f.focus({ preventScroll: !0 });\n        });\n        break;\n      case Xe.Tab:\n        d.preventDefault(), d.stopPropagation();\n        break;\n      default:\n        d.key.length === 1 && (o.search(d.key), a.value = setTimeout(() => o.clearSearch(), 350));\n        break;\n    }\n  }\n  let c = VO(), u = j(() => c !== null ? (c.value & In.Open) === In.Open : o.listboxState.value === 0);\n  return () => {\n    var d, f;\n    let h = { open: o.listboxState.value === 0 }, { ...p } = t, O = { \"aria-activedescendant\": o.activeOptionIndex.value === null || (d = o.options.value[o.activeOptionIndex.value]) == null ? void 0 : d.id, \"aria-multiselectable\": o.mode.value === 1 ? !0 : void 0, \"aria-labelledby\": (f = pe(o.buttonRef)) == null ? void 0 : f.id, \"aria-orientation\": o.orientation.value, id: s, onKeydown: l, role: \"listbox\", tabIndex: 0, ref: o.optionsRef };\n    return Et({ ourProps: O, theirProps: p, slot: h, attrs: e, slots: n, features: ci.RenderStrategy | ci.Static, visible: u.value, name: \"ListboxOptions\" });\n  };\n} }), CC = /* @__PURE__ */ le({ name: \"ListboxOption\", props: { as: { type: [Object, String], default: \"li\" }, value: { type: [Object, String, Number, Boolean] }, disabled: { type: Boolean, default: !1 }, id: { type: String, default: null } }, setup(t, { slots: e, attrs: n, expose: r }) {\n  var i;\n  let s = (i = t.id) != null ? i : `headlessui-listbox-option-${mr()}`, o = Ad(\"ListboxOption\"), a = G(null);\n  r({ el: a, $el: a });\n  let l = j(() => o.activeOptionIndex.value !== null ? o.options.value[o.activeOptionIndex.value].id === s : !1), c = j(() => Tt(o.mode.value, { 0: () => o.compare(Oe(o.value.value), Oe(t.value)), 1: () => Oe(o.value.value).some((g) => o.compare(Oe(g), Oe(t.value))) })), u = j(() => Tt(o.mode.value, { 1: () => {\n    var g;\n    let v = Oe(o.value.value);\n    return ((g = o.options.value.find((S) => v.some((w) => o.compare(Oe(w), Oe(S.dataRef.value))))) == null ? void 0 : g.id) === s;\n  }, 0: () => c.value })), d = wC(a), f = j(() => ({ disabled: t.disabled, value: t.value, get textValue() {\n    return d();\n  }, domRef: a }));\n  et(() => o.registerOption(s, f)), jt(() => o.unregisterOption(s)), et(() => {\n    ht([o.listboxState, c], () => {\n      o.listboxState.value === 0 && c.value && Tt(o.mode.value, { 1: () => {\n        u.value && o.goToOption(hn.Specific, s);\n      }, 0: () => {\n        o.goToOption(hn.Specific, s);\n      } });\n    }, { immediate: !0 });\n  }), Bn(() => {\n    o.listboxState.value === 0 && l.value && o.activationTrigger.value !== 0 && Pn(() => {\n      var g, v;\n      return (v = (g = pe(a)) == null ? void 0 : g.scrollIntoView) == null ? void 0 : v.call(g, { block: \"nearest\" });\n    });\n  });\n  function h(g) {\n    if (t.disabled)\n      return g.preventDefault();\n    o.select(t.value), o.mode.value === 0 && (o.closeListbox(), Pn(() => {\n      var v;\n      return (v = pe(o.buttonRef)) == null ? void 0 : v.focus({ preventScroll: !0 });\n    }));\n  }\n  function p() {\n    if (t.disabled)\n      return o.goToOption(hn.Nothing);\n    o.goToOption(hn.Specific, s);\n  }\n  let O = DQ();\n  function m(g) {\n    O.update(g);\n  }\n  function y(g) {\n    O.wasMoved(g) && (t.disabled || l.value || o.goToOption(hn.Specific, s, 0));\n  }\n  function b(g) {\n    O.wasMoved(g) && (t.disabled || l.value && o.goToOption(hn.Nothing));\n  }\n  return () => {\n    let { disabled: g } = t, v = { active: l.value, selected: c.value, disabled: g }, { value: S, disabled: w, ...k } = t, _ = { id: s, ref: a, role: \"option\", tabIndex: g === !0 ? void 0 : -1, \"aria-disabled\": g === !0 ? !0 : void 0, \"aria-selected\": c.value, disabled: void 0, onClick: h, onFocus: p, onPointerenter: m, onMouseenter: m, onPointermove: y, onMousemove: y, onPointerleave: b, onMouseleave: b };\n    return Et({ ourProps: _, theirProps: k, slot: v, attrs: n, slots: e, name: \"ListboxOption\" });\n  };\n} }), AC = /* @__PURE__ */ le({ props: { onFocus: { type: Function, required: !0 } }, setup(t) {\n  let e = G(!0);\n  return () => e.value ? kt(Vo, { as: \"button\", type: \"button\", features: Zo.Focusable, onFocus(n) {\n    n.preventDefault();\n    let r, i = 50;\n    function s() {\n      var o;\n      if (i-- <= 0) {\n        r && cancelAnimationFrame(r);\n        return;\n      }\n      if ((o = t.onFocus) != null && o.call(t)) {\n        e.value = !1, cancelAnimationFrame(r);\n        return;\n      }\n      r = requestAnimationFrame(s);\n    }\n    r = requestAnimationFrame(s);\n  } }) : null;\n} });\nvar RC = ((t) => (t[t.Forwards = 0] = \"Forwards\", t[t.Backwards = 1] = \"Backwards\", t))(RC || {}), NC = ((t) => (t[t.Less = -1] = \"Less\", t[t.Equal = 0] = \"Equal\", t[t.Greater = 1] = \"Greater\", t))(NC || {});\nlet MS = Symbol(\"TabsContext\");\nfunction Bl(t) {\n  let e = Pt(MS, null);\n  if (e === null) {\n    let n = new Error(`<${t} /> is missing a parent <TabGroup /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(n, Bl), n;\n  }\n  return e;\n}\nlet XO = Symbol(\"TabsSSRContext\"), DC = /* @__PURE__ */ le({ name: \"TabGroup\", emits: { change: (t) => !0 }, props: { as: { type: [Object, String], default: \"template\" }, selectedIndex: { type: [Number], default: null }, defaultIndex: { type: [Number], default: 0 }, vertical: { type: [Boolean], default: !1 }, manual: { type: [Boolean], default: !1 } }, inheritAttrs: !1, setup(t, { slots: e, attrs: n, emit: r }) {\n  var i;\n  let s = G((i = t.selectedIndex) != null ? i : t.defaultIndex), o = G([]), a = G([]), l = j(() => t.selectedIndex !== null), c = j(() => l.value ? t.selectedIndex : s.value);\n  function u(O) {\n    var m;\n    let y = vs(d.tabs.value, pe), b = vs(d.panels.value, pe), g = y.filter((v) => {\n      var S;\n      return !((S = pe(v)) != null && S.hasAttribute(\"disabled\"));\n    });\n    if (O < 0 || O > y.length - 1) {\n      let v = Tt(s.value === null ? 0 : Math.sign(O - s.value), { [-1]: () => 1, 0: () => Tt(Math.sign(O), { [-1]: () => 0, 0: () => 0, 1: () => 1 }), 1: () => 0 }), S = Tt(v, { 0: () => y.indexOf(g[0]), 1: () => y.indexOf(g[g.length - 1]) });\n      S !== -1 && (s.value = S), d.tabs.value = y, d.panels.value = b;\n    } else {\n      let v = y.slice(0, O), S = [...y.slice(O), ...v].find((k) => g.includes(k));\n      if (!S)\n        return;\n      let w = (m = y.indexOf(S)) != null ? m : d.selectedIndex.value;\n      w === -1 && (w = d.selectedIndex.value), s.value = w, d.tabs.value = y, d.panels.value = b;\n    }\n  }\n  let d = { selectedIndex: j(() => {\n    var O, m;\n    return (m = (O = s.value) != null ? O : t.defaultIndex) != null ? m : null;\n  }), orientation: j(() => t.vertical ? \"vertical\" : \"horizontal\"), activation: j(() => t.manual ? \"manual\" : \"auto\"), tabs: o, panels: a, setSelectedIndex(O) {\n    c.value !== O && r(\"change\", O), l.value || u(O);\n  }, registerTab(O) {\n    var m;\n    if (o.value.includes(O))\n      return;\n    let y = o.value[s.value];\n    if (o.value.push(O), o.value = vs(o.value, pe), !l.value) {\n      let b = (m = o.value.indexOf(y)) != null ? m : s.value;\n      b !== -1 && (s.value = b);\n    }\n  }, unregisterTab(O) {\n    let m = o.value.indexOf(O);\n    m !== -1 && o.value.splice(m, 1);\n  }, registerPanel(O) {\n    a.value.includes(O) || (a.value.push(O), a.value = vs(a.value, pe));\n  }, unregisterPanel(O) {\n    let m = a.value.indexOf(O);\n    m !== -1 && a.value.splice(m, 1);\n  } };\n  _n(MS, d);\n  let f = G({ tabs: [], panels: [] }), h = G(!1);\n  et(() => {\n    h.value = !0;\n  }), _n(XO, j(() => h.value ? null : f.value));\n  let p = j(() => t.selectedIndex);\n  return et(() => {\n    ht([p], () => {\n      var O;\n      return u((O = t.selectedIndex) != null ? O : t.defaultIndex);\n    }, { immediate: !0 });\n  }), Bn(() => {\n    if (!l.value || c.value == null || d.tabs.value.length <= 0)\n      return;\n    let O = vs(d.tabs.value, pe);\n    O.some((m, y) => pe(d.tabs.value[y]) !== pe(m)) && d.setSelectedIndex(O.findIndex((m) => pe(m) === pe(d.tabs.value[c.value])));\n  }), () => {\n    let O = { selectedIndex: s.value };\n    return kt(Pe, [o.value.length <= 0 && kt(AC, { onFocus: () => {\n      for (let m of o.value) {\n        let y = pe(m);\n        if ((y == null ? void 0 : y.tabIndex) === 0)\n          return y.focus(), !0;\n      }\n      return !1;\n    } }), Et({ theirProps: { ...n, ...ZO(t, [\"selectedIndex\", \"defaultIndex\", \"manual\", \"vertical\", \"onChange\"]) }, ourProps: {}, slot: O, slots: e, attrs: n, name: \"TabGroup\" })]);\n  };\n} }), ZC = /* @__PURE__ */ le({ name: \"TabList\", props: { as: { type: [Object, String], default: \"div\" } }, setup(t, { attrs: e, slots: n }) {\n  let r = Bl(\"TabList\");\n  return () => {\n    let i = { selectedIndex: r.selectedIndex.value }, s = { role: \"tablist\", \"aria-orientation\": r.orientation.value };\n    return Et({ ourProps: s, theirProps: t, slot: i, attrs: e, slots: n, name: \"TabList\" });\n  };\n} }), cb = /* @__PURE__ */ le({ name: \"Tab\", props: { as: { type: [Object, String], default: \"button\" }, disabled: { type: [Boolean], default: !1 }, id: { type: String, default: null } }, setup(t, { attrs: e, slots: n, expose: r }) {\n  var i;\n  let s = (i = t.id) != null ? i : `headlessui-tabs-tab-${mr()}`, o = Bl(\"Tab\"), a = G(null);\n  r({ el: a, $el: a }), et(() => o.registerTab(a)), jt(() => o.unregisterTab(a));\n  let l = Pt(XO), c = j(() => {\n    if (l.value) {\n      let b = l.value.tabs.indexOf(s);\n      return b === -1 ? l.value.tabs.push(s) - 1 : b;\n    }\n    return -1;\n  }), u = j(() => {\n    let b = o.tabs.value.indexOf(a);\n    return b === -1 ? c.value : b;\n  }), d = j(() => u.value === o.selectedIndex.value);\n  function f(b) {\n    var g;\n    let v = b();\n    if (v === ho.Success && o.activation.value === \"auto\") {\n      let S = (g = to(a)) == null ? void 0 : g.activeElement, w = o.tabs.value.findIndex((k) => pe(k) === S);\n      w !== -1 && o.setSelectedIndex(w);\n    }\n    return v;\n  }\n  function h(b) {\n    let g = o.tabs.value.map((v) => pe(v)).filter(Boolean);\n    if (b.key === Xe.Space || b.key === Xe.Enter) {\n      b.preventDefault(), b.stopPropagation(), o.setSelectedIndex(u.value);\n      return;\n    }\n    switch (b.key) {\n      case Xe.Home:\n      case Xe.PageUp:\n        return b.preventDefault(), b.stopPropagation(), f(() => Er(g, Wt.First));\n      case Xe.End:\n      case Xe.PageDown:\n        return b.preventDefault(), b.stopPropagation(), f(() => Er(g, Wt.Last));\n    }\n    if (f(() => Tt(o.orientation.value, { vertical() {\n      return b.key === Xe.ArrowUp ? Er(g, Wt.Previous | Wt.WrapAround) : b.key === Xe.ArrowDown ? Er(g, Wt.Next | Wt.WrapAround) : ho.Error;\n    }, horizontal() {\n      return b.key === Xe.ArrowLeft ? Er(g, Wt.Previous | Wt.WrapAround) : b.key === Xe.ArrowRight ? Er(g, Wt.Next | Wt.WrapAround) : ho.Error;\n    } })) === ho.Success)\n      return b.preventDefault();\n  }\n  let p = G(!1);\n  function O() {\n    var b;\n    p.value || (p.value = !0, !t.disabled && ((b = pe(a)) == null || b.focus({ preventScroll: !0 }), o.setSelectedIndex(u.value), Cd(() => {\n      p.value = !1;\n    })));\n  }\n  function m(b) {\n    b.preventDefault();\n  }\n  let y = DO(j(() => ({ as: t.as, type: e.type })), a);\n  return () => {\n    var b, g;\n    let v = { selected: d.value, disabled: (b = t.disabled) != null ? b : !1 }, { ...S } = t, w = { ref: a, onKeydown: h, onMousedown: m, onClick: O, id: s, role: \"tab\", type: y.value, \"aria-controls\": (g = pe(o.panels.value[u.value])) == null ? void 0 : g.id, \"aria-selected\": d.value, tabIndex: d.value ? 0 : -1, disabled: t.disabled ? !0 : void 0 };\n    return Et({ ourProps: w, theirProps: S, slot: v, attrs: e, slots: n, name: \"Tab\" });\n  };\n} }), VC = /* @__PURE__ */ le({ name: \"TabPanels\", props: { as: { type: [Object, String], default: \"div\" } }, setup(t, { slots: e, attrs: n }) {\n  let r = Bl(\"TabPanels\");\n  return () => {\n    let i = { selectedIndex: r.selectedIndex.value };\n    return Et({ theirProps: t, ourProps: {}, slot: i, attrs: n, slots: e, name: \"TabPanels\" });\n  };\n} }), ub = /* @__PURE__ */ le({ name: \"TabPanel\", props: { as: { type: [Object, String], default: \"div\" }, static: { type: Boolean, default: !1 }, unmount: { type: Boolean, default: !0 }, id: { type: String, default: null }, tabIndex: { type: Number, default: 0 } }, setup(t, { attrs: e, slots: n, expose: r }) {\n  var i;\n  let s = (i = t.id) != null ? i : `headlessui-tabs-panel-${mr()}`, o = Bl(\"TabPanel\"), a = G(null);\n  r({ el: a, $el: a }), et(() => o.registerPanel(a)), jt(() => o.unregisterPanel(a));\n  let l = Pt(XO), c = j(() => {\n    if (l.value) {\n      let f = l.value.panels.indexOf(s);\n      return f === -1 ? l.value.panels.push(s) - 1 : f;\n    }\n    return -1;\n  }), u = j(() => {\n    let f = o.panels.value.indexOf(a);\n    return f === -1 ? c.value : f;\n  }), d = j(() => u.value === o.selectedIndex.value);\n  return () => {\n    var f;\n    let h = { selected: d.value }, { tabIndex: p, ...O } = t, m = { ref: a, id: s, role: \"tabpanel\", \"aria-labelledby\": (f = pe(o.tabs.value[u.value])) == null ? void 0 : f.id, tabIndex: d.value ? p : -1 };\n    return !d.value && t.unmount && !t.static ? kt(Vo, { as: \"span\", \"aria-hidden\": !0, ...m }) : Et({ ourProps: m, theirProps: O, slot: h, attrs: e, slots: n, features: ci.Static | ci.RenderStrategy, visible: d.value, name: \"TabPanel\" });\n  };\n} });\nfunction XS(t) {\n  return Rl() ? (tO(t), !0) : !1;\n}\nfunction ll(t) {\n  return typeof t == \"function\" ? t() : R(t);\n}\nconst IC = typeof window < \"u\" && typeof document < \"u\";\ntypeof WorkerGlobalScope < \"u\" && globalThis instanceof WorkerGlobalScope;\nconst WC = Object.prototype.toString, MC = (t) => WC.call(t) === \"[object Object]\", jS = () => {\n};\nfunction Nh(t, e, n) {\n  const r = ht(\n    t,\n    (i, s, o) => {\n      i && (n != null && n.once && Pn(() => r()), e(i, s, o));\n    },\n    {\n      ...n,\n      once: !1\n    }\n  );\n  return r;\n}\nfunction XC(t) {\n  var e;\n  const n = ll(t);\n  return (e = n == null ? void 0 : n.$el) != null ? e : n;\n}\nconst jO = IC ? window : void 0;\nfunction Sc(...t) {\n  let e, n, r, i;\n  if (typeof t[0] == \"string\" || Array.isArray(t[0]) ? ([n, r, i] = t, e = jO) : [e, n, r, i] = t, !e)\n    return jS;\n  Array.isArray(n) || (n = [n]), Array.isArray(r) || (r = [r]);\n  const s = [], o = () => {\n    s.forEach((u) => u()), s.length = 0;\n  }, a = (u, d, f, h) => (u.addEventListener(d, f, h), () => u.removeEventListener(d, f, h)), l = ht(\n    () => [XC(e), ll(i)],\n    ([u, d]) => {\n      if (o(), !u)\n        return;\n      const f = MC(d) ? { ...d } : d;\n      s.push(\n        ...n.flatMap((h) => r.map((p) => a(u, h, p, f)))\n      );\n    },\n    { immediate: !0, flush: \"post\" }\n  ), c = () => {\n    l(), o();\n  };\n  return XS(c), c;\n}\nfunction jC() {\n  const t = G(!1), e = ir();\n  return e && et(() => {\n    t.value = !0;\n  }, e), t;\n}\nfunction BC(t) {\n  const e = jC();\n  return j(() => (e.value, !!t()));\n}\nfunction LC(t, e = {}) {\n  const { window: n = jO } = e, r = BC(() => n && \"matchMedia\" in n && typeof n.matchMedia == \"function\");\n  let i;\n  const s = G(!1), o = (c) => {\n    s.value = c.matches;\n  }, a = () => {\n    i && (\"removeEventListener\" in i ? i.removeEventListener(\"change\", o) : i.removeListener(o));\n  }, l = Bn(() => {\n    r.value && (a(), i = n.matchMedia(ll(t)), \"addEventListener\" in i ? i.addEventListener(\"change\", o) : i.addListener(o), s.value = i.matches);\n  });\n  return XS(() => {\n    l(), a(), i = void 0;\n  }), s;\n}\nconst ga = /* @__PURE__ */ new Map();\nfunction UC(t) {\n  const e = Rl();\n  function n(a) {\n    var l;\n    const c = ga.get(t) || /* @__PURE__ */ new Set();\n    c.add(a), ga.set(t, c);\n    const u = () => i(a);\n    return (l = e == null ? void 0 : e.cleanups) == null || l.push(u), u;\n  }\n  function r(a) {\n    function l(...c) {\n      i(l), a(...c);\n    }\n    return n(l);\n  }\n  function i(a) {\n    const l = ga.get(t);\n    l && (l.delete(a), l.size || s());\n  }\n  function s() {\n    ga.delete(t);\n  }\n  function o(a, l) {\n    var c;\n    (c = ga.get(t)) == null || c.forEach((u) => u(a, l));\n  }\n  return { on: n, once: r, off: i, emit: o, reset: s };\n}\nconst qC = {\n  ctrl: \"control\",\n  command: \"meta\",\n  cmd: \"meta\",\n  option: \"alt\",\n  up: \"arrowup\",\n  down: \"arrowdown\",\n  left: \"arrowleft\",\n  right: \"arrowright\"\n};\nfunction BS(t = {}) {\n  const {\n    reactive: e = !1,\n    target: n = jO,\n    aliasMap: r = qC,\n    passive: i = !0,\n    onEventFired: s = jS\n  } = t, o = Xn(/* @__PURE__ */ new Set()), a = {\n    toJSON() {\n      return {};\n    },\n    current: o\n  }, l = e ? Xn(a) : a, c = /* @__PURE__ */ new Set(), u = /* @__PURE__ */ new Set();\n  function d(O, m) {\n    O in l && (e ? l[O] = m : l[O].value = m);\n  }\n  function f() {\n    o.clear();\n    for (const O of u)\n      d(O, !1);\n  }\n  function h(O, m) {\n    var y, b;\n    const g = (y = O.key) == null ? void 0 : y.toLowerCase(), S = [(b = O.code) == null ? void 0 : b.toLowerCase(), g].filter(Boolean);\n    g && (m ? o.add(g) : o.delete(g));\n    for (const w of S)\n      u.add(w), d(w, m);\n    g === \"meta\" && !m ? (c.forEach((w) => {\n      o.delete(w), d(w, !1);\n    }), c.clear()) : typeof O.getModifierState == \"function\" && O.getModifierState(\"Meta\") && m && [...o, ...S].forEach((w) => c.add(w));\n  }\n  Sc(n, \"keydown\", (O) => (h(O, !0), s(O)), { passive: i }), Sc(n, \"keyup\", (O) => (h(O, !1), s(O)), { passive: i }), Sc(\"blur\", f, { passive: !0 }), Sc(\"focus\", f, { passive: !0 });\n  const p = new Proxy(\n    l,\n    {\n      get(O, m, y) {\n        if (typeof m != \"string\")\n          return Reflect.get(O, m, y);\n        if (m = m.toLowerCase(), m in r && (m = r[m]), !(m in l))\n          if (/[+_-]/.test(m)) {\n            const g = m.split(/[+_-]/g).map((v) => v.trim());\n            l[m] = j(() => g.every((v) => ll(p[v])));\n          } else\n            l[m] = G(!1);\n        const b = Reflect.get(O, m, y);\n        return e ? ll(b) : b;\n      }\n    }\n  );\n  return p;\n}\nfunction LS(t, e) {\n  return function() {\n    return t.apply(e, arguments);\n  };\n}\nconst { toString: YC } = Object.prototype, { getPrototypeOf: BO } = Object, Rd = /* @__PURE__ */ ((t) => (e) => {\n  const n = YC.call(e);\n  return t[n] || (t[n] = n.slice(8, -1).toLowerCase());\n})(/* @__PURE__ */ Object.create(null)), Lr = (t) => (t = t.toLowerCase(), (e) => Rd(e) === t), Nd = (t) => (e) => typeof e === t, { isArray: na } = Array, cl = Nd(\"undefined\");\nfunction zC(t) {\n  return t !== null && !cl(t) && t.constructor !== null && !cl(t.constructor) && er(t.constructor.isBuffer) && t.constructor.isBuffer(t);\n}\nconst US = Lr(\"ArrayBuffer\");\nfunction HC(t) {\n  let e;\n  return typeof ArrayBuffer < \"u\" && ArrayBuffer.isView ? e = ArrayBuffer.isView(t) : e = t && t.buffer && US(t.buffer), e;\n}\nconst FC = Nd(\"string\"), er = Nd(\"function\"), qS = Nd(\"number\"), Dd = (t) => t !== null && typeof t == \"object\", GC = (t) => t === !0 || t === !1, Kc = (t) => {\n  if (Rd(t) !== \"object\")\n    return !1;\n  const e = BO(t);\n  return (e === null || e === Object.prototype || Object.getPrototypeOf(e) === null) && !(Symbol.toStringTag in t) && !(Symbol.iterator in t);\n}, KC = Lr(\"Date\"), JC = Lr(\"File\"), eA = Lr(\"Blob\"), tA = Lr(\"FileList\"), nA = (t) => Dd(t) && er(t.pipe), rA = (t) => {\n  let e;\n  return t && (typeof FormData == \"function\" && t instanceof FormData || er(t.append) && ((e = Rd(t)) === \"formdata\" || // detect form-data instance\n  e === \"object\" && er(t.toString) && t.toString() === \"[object FormData]\"));\n}, iA = Lr(\"URLSearchParams\"), sA = (t) => t.trim ? t.trim() : t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\nfunction Ll(t, e, { allOwnKeys: n = !1 } = {}) {\n  if (t === null || typeof t > \"u\")\n    return;\n  let r, i;\n  if (typeof t != \"object\" && (t = [t]), na(t))\n    for (r = 0, i = t.length; r < i; r++)\n      e.call(null, t[r], r, t);\n  else {\n    const s = n ? Object.getOwnPropertyNames(t) : Object.keys(t), o = s.length;\n    let a;\n    for (r = 0; r < o; r++)\n      a = s[r], e.call(null, t[a], a, t);\n  }\n}\nfunction YS(t, e) {\n  e = e.toLowerCase();\n  const n = Object.keys(t);\n  let r = n.length, i;\n  for (; r-- > 0; )\n    if (i = n[r], e === i.toLowerCase())\n      return i;\n  return null;\n}\nconst zS = typeof globalThis < \"u\" ? globalThis : typeof self < \"u\" ? self : typeof window < \"u\" ? window : global, HS = (t) => !cl(t) && t !== zS;\nfunction Dh() {\n  const { caseless: t } = HS(this) && this || {}, e = {}, n = (r, i) => {\n    const s = t && YS(e, i) || i;\n    Kc(e[s]) && Kc(r) ? e[s] = Dh(e[s], r) : Kc(r) ? e[s] = Dh({}, r) : na(r) ? e[s] = r.slice() : e[s] = r;\n  };\n  for (let r = 0, i = arguments.length; r < i; r++)\n    arguments[r] && Ll(arguments[r], n);\n  return e;\n}\nconst oA = (t, e, n, { allOwnKeys: r } = {}) => (Ll(e, (i, s) => {\n  n && er(i) ? t[s] = LS(i, n) : t[s] = i;\n}, { allOwnKeys: r }), t), aA = (t) => (t.charCodeAt(0) === 65279 && (t = t.slice(1)), t), lA = (t, e, n, r) => {\n  t.prototype = Object.create(e.prototype, r), t.prototype.constructor = t, Object.defineProperty(t, \"super\", {\n    value: e.prototype\n  }), n && Object.assign(t.prototype, n);\n}, cA = (t, e, n, r) => {\n  let i, s, o;\n  const a = {};\n  if (e = e || {}, t == null)\n    return e;\n  do {\n    for (i = Object.getOwnPropertyNames(t), s = i.length; s-- > 0; )\n      o = i[s], (!r || r(o, t, e)) && !a[o] && (e[o] = t[o], a[o] = !0);\n    t = n !== !1 && BO(t);\n  } while (t && (!n || n(t, e)) && t !== Object.prototype);\n  return e;\n}, uA = (t, e, n) => {\n  t = String(t), (n === void 0 || n > t.length) && (n = t.length), n -= e.length;\n  const r = t.indexOf(e, n);\n  return r !== -1 && r === n;\n}, dA = (t) => {\n  if (!t)\n    return null;\n  if (na(t))\n    return t;\n  let e = t.length;\n  if (!qS(e))\n    return null;\n  const n = new Array(e);\n  for (; e-- > 0; )\n    n[e] = t[e];\n  return n;\n}, fA = /* @__PURE__ */ ((t) => (e) => t && e instanceof t)(typeof Uint8Array < \"u\" && BO(Uint8Array)), hA = (t, e) => {\n  const r = (t && t[Symbol.iterator]).call(t);\n  let i;\n  for (; (i = r.next()) && !i.done; ) {\n    const s = i.value;\n    e.call(t, s[0], s[1]);\n  }\n}, pA = (t, e) => {\n  let n;\n  const r = [];\n  for (; (n = t.exec(e)) !== null; )\n    r.push(n);\n  return r;\n}, OA = Lr(\"HTMLFormElement\"), gA = (t) => t.toLowerCase().replace(\n  /[-_\\s]([a-z\\d])(\\w*)/g,\n  function(n, r, i) {\n    return r.toUpperCase() + i;\n  }\n), db = (({ hasOwnProperty: t }) => (e, n) => t.call(e, n))(Object.prototype), mA = Lr(\"RegExp\"), FS = (t, e) => {\n  const n = Object.getOwnPropertyDescriptors(t), r = {};\n  Ll(n, (i, s) => {\n    let o;\n    (o = e(i, s, t)) !== !1 && (r[s] = o || i);\n  }), Object.defineProperties(t, r);\n}, bA = (t) => {\n  FS(t, (e, n) => {\n    if (er(t) && [\"arguments\", \"caller\", \"callee\"].indexOf(n) !== -1)\n      return !1;\n    const r = t[n];\n    if (er(r)) {\n      if (e.enumerable = !1, \"writable\" in e) {\n        e.writable = !1;\n        return;\n      }\n      e.set || (e.set = () => {\n        throw Error(\"Can not rewrite read-only method '\" + n + \"'\");\n      });\n    }\n  });\n}, vA = (t, e) => {\n  const n = {}, r = (i) => {\n    i.forEach((s) => {\n      n[s] = !0;\n    });\n  };\n  return na(t) ? r(t) : r(String(t).split(e)), n;\n}, yA = () => {\n}, SA = (t, e) => (t = +t, Number.isFinite(t) ? t : e), bf = \"abcdefghijklmnopqrstuvwxyz\", fb = \"0123456789\", GS = {\n  DIGIT: fb,\n  ALPHA: bf,\n  ALPHA_DIGIT: bf + bf.toUpperCase() + fb\n}, wA = (t = 16, e = GS.ALPHA_DIGIT) => {\n  let n = \"\";\n  const { length: r } = e;\n  for (; t--; )\n    n += e[Math.random() * r | 0];\n  return n;\n};\nfunction kA(t) {\n  return !!(t && er(t.append) && t[Symbol.toStringTag] === \"FormData\" && t[Symbol.iterator]);\n}\nconst xA = (t) => {\n  const e = new Array(10), n = (r, i) => {\n    if (Dd(r)) {\n      if (e.indexOf(r) >= 0)\n        return;\n      if (!(\"toJSON\" in r)) {\n        e[i] = r;\n        const s = na(r) ? [] : {};\n        return Ll(r, (o, a) => {\n          const l = n(o, i + 1);\n          !cl(l) && (s[a] = l);\n        }), e[i] = void 0, s;\n      }\n    }\n    return r;\n  };\n  return n(t, 0);\n}, PA = Lr(\"AsyncFunction\"), _A = (t) => t && (Dd(t) || er(t)) && er(t.then) && er(t.catch), V = {\n  isArray: na,\n  isArrayBuffer: US,\n  isBuffer: zC,\n  isFormData: rA,\n  isArrayBufferView: HC,\n  isString: FC,\n  isNumber: qS,\n  isBoolean: GC,\n  isObject: Dd,\n  isPlainObject: Kc,\n  isUndefined: cl,\n  isDate: KC,\n  isFile: JC,\n  isBlob: eA,\n  isRegExp: mA,\n  isFunction: er,\n  isStream: nA,\n  isURLSearchParams: iA,\n  isTypedArray: fA,\n  isFileList: tA,\n  forEach: Ll,\n  merge: Dh,\n  extend: oA,\n  trim: sA,\n  stripBOM: aA,\n  inherits: lA,\n  toFlatObject: cA,\n  kindOf: Rd,\n  kindOfTest: Lr,\n  endsWith: uA,\n  toArray: dA,\n  forEachEntry: hA,\n  matchAll: pA,\n  isHTMLForm: OA,\n  hasOwnProperty: db,\n  hasOwnProp: db,\n  // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors: FS,\n  freezeMethods: bA,\n  toObjectSet: vA,\n  toCamelCase: gA,\n  noop: yA,\n  toFiniteNumber: SA,\n  findKey: YS,\n  global: zS,\n  isContextDefined: HS,\n  ALPHABET: GS,\n  generateString: wA,\n  isSpecCompliantForm: kA,\n  toJSONObject: xA,\n  isAsyncFn: PA,\n  isThenable: _A\n};\nfunction je(t, e, n, r, i) {\n  Error.call(this), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack, this.message = t, this.name = \"AxiosError\", e && (this.code = e), n && (this.config = n), r && (this.request = r), i && (this.response = i);\n}\nV.inherits(je, Error, {\n  toJSON: function() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: V.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\nconst KS = je.prototype, JS = {};\n[\n  \"ERR_BAD_OPTION_VALUE\",\n  \"ERR_BAD_OPTION\",\n  \"ECONNABORTED\",\n  \"ETIMEDOUT\",\n  \"ERR_NETWORK\",\n  \"ERR_FR_TOO_MANY_REDIRECTS\",\n  \"ERR_DEPRECATED\",\n  \"ERR_BAD_RESPONSE\",\n  \"ERR_BAD_REQUEST\",\n  \"ERR_CANCELED\",\n  \"ERR_NOT_SUPPORT\",\n  \"ERR_INVALID_URL\"\n  // eslint-disable-next-line func-names\n].forEach((t) => {\n  JS[t] = { value: t };\n});\nObject.defineProperties(je, JS);\nObject.defineProperty(KS, \"isAxiosError\", { value: !0 });\nje.from = (t, e, n, r, i, s) => {\n  const o = Object.create(KS);\n  return V.toFlatObject(t, o, function(l) {\n    return l !== Error.prototype;\n  }, (a) => a !== \"isAxiosError\"), je.call(o, t.message, e, n, r, i), o.cause = t, o.name = t.name, s && Object.assign(o, s), o;\n};\nconst TA = null;\nfunction Zh(t) {\n  return V.isPlainObject(t) || V.isArray(t);\n}\nfunction ew(t) {\n  return V.endsWith(t, \"[]\") ? t.slice(0, -2) : t;\n}\nfunction hb(t, e, n) {\n  return t ? t.concat(e).map(function(i, s) {\n    return i = ew(i), !n && s ? \"[\" + i + \"]\" : i;\n  }).join(n ? \".\" : \"\") : e;\n}\nfunction EA(t) {\n  return V.isArray(t) && !t.some(Zh);\n}\nconst $A = V.toFlatObject(V, {}, null, function(e) {\n  return /^is[A-Z]/.test(e);\n});\nfunction Zd(t, e, n) {\n  if (!V.isObject(t))\n    throw new TypeError(\"target must be an object\");\n  e = e || new FormData(), n = V.toFlatObject(n, {\n    metaTokens: !0,\n    dots: !1,\n    indexes: !1\n  }, !1, function(O, m) {\n    return !V.isUndefined(m[O]);\n  });\n  const r = n.metaTokens, i = n.visitor || u, s = n.dots, o = n.indexes, l = (n.Blob || typeof Blob < \"u\" && Blob) && V.isSpecCompliantForm(e);\n  if (!V.isFunction(i))\n    throw new TypeError(\"visitor must be a function\");\n  function c(p) {\n    if (p === null)\n      return \"\";\n    if (V.isDate(p))\n      return p.toISOString();\n    if (!l && V.isBlob(p))\n      throw new je(\"Blob is not supported. Use a Buffer instead.\");\n    return V.isArrayBuffer(p) || V.isTypedArray(p) ? l && typeof Blob == \"function\" ? new Blob([p]) : Buffer.from(p) : p;\n  }\n  function u(p, O, m) {\n    let y = p;\n    if (p && !m && typeof p == \"object\") {\n      if (V.endsWith(O, \"{}\"))\n        O = r ? O : O.slice(0, -2), p = JSON.stringify(p);\n      else if (V.isArray(p) && EA(p) || (V.isFileList(p) || V.endsWith(O, \"[]\")) && (y = V.toArray(p)))\n        return O = ew(O), y.forEach(function(g, v) {\n          !(V.isUndefined(g) || g === null) && e.append(\n            // eslint-disable-next-line no-nested-ternary\n            o === !0 ? hb([O], v, s) : o === null ? O : O + \"[]\",\n            c(g)\n          );\n        }), !1;\n    }\n    return Zh(p) ? !0 : (e.append(hb(m, O, s), c(p)), !1);\n  }\n  const d = [], f = Object.assign($A, {\n    defaultVisitor: u,\n    convertValue: c,\n    isVisitable: Zh\n  });\n  function h(p, O) {\n    if (!V.isUndefined(p)) {\n      if (d.indexOf(p) !== -1)\n        throw Error(\"Circular reference detected in \" + O.join(\".\"));\n      d.push(p), V.forEach(p, function(y, b) {\n        (!(V.isUndefined(y) || y === null) && i.call(\n          e,\n          y,\n          V.isString(b) ? b.trim() : b,\n          O,\n          f\n        )) === !0 && h(y, O ? O.concat(b) : [b]);\n      }), d.pop();\n    }\n  }\n  if (!V.isObject(t))\n    throw new TypeError(\"data must be an object\");\n  return h(t), e;\n}\nfunction pb(t) {\n  const e = {\n    \"!\": \"%21\",\n    \"'\": \"%27\",\n    \"(\": \"%28\",\n    \")\": \"%29\",\n    \"~\": \"%7E\",\n    \"%20\": \"+\",\n    \"%00\": \"\\0\"\n  };\n  return encodeURIComponent(t).replace(/[!'()~]|%20|%00/g, function(r) {\n    return e[r];\n  });\n}\nfunction LO(t, e) {\n  this._pairs = [], t && Zd(t, this, e);\n}\nconst tw = LO.prototype;\ntw.append = function(e, n) {\n  this._pairs.push([e, n]);\n};\ntw.toString = function(e) {\n  const n = e ? function(r) {\n    return e.call(this, r, pb);\n  } : pb;\n  return this._pairs.map(function(i) {\n    return n(i[0]) + \"=\" + n(i[1]);\n  }, \"\").join(\"&\");\n};\nfunction QA(t) {\n  return encodeURIComponent(t).replace(/%3A/gi, \":\").replace(/%24/g, \"$\").replace(/%2C/gi, \",\").replace(/%20/g, \"+\").replace(/%5B/gi, \"[\").replace(/%5D/gi, \"]\");\n}\nfunction nw(t, e, n) {\n  if (!e)\n    return t;\n  const r = n && n.encode || QA, i = n && n.serialize;\n  let s;\n  if (i ? s = i(e, n) : s = V.isURLSearchParams(e) ? e.toString() : new LO(e, n).toString(r), s) {\n    const o = t.indexOf(\"#\");\n    o !== -1 && (t = t.slice(0, o)), t += (t.indexOf(\"?\") === -1 ? \"?\" : \"&\") + s;\n  }\n  return t;\n}\nclass Ob {\n  constructor() {\n    this.handlers = [];\n  }\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(e, n, r) {\n    return this.handlers.push({\n      fulfilled: e,\n      rejected: n,\n      synchronous: r ? r.synchronous : !1,\n      runWhen: r ? r.runWhen : null\n    }), this.handlers.length - 1;\n  }\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(e) {\n    this.handlers[e] && (this.handlers[e] = null);\n  }\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    this.handlers && (this.handlers = []);\n  }\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(e) {\n    V.forEach(this.handlers, function(r) {\n      r !== null && e(r);\n    });\n  }\n}\nconst rw = {\n  silentJSONParsing: !0,\n  forcedJSONParsing: !0,\n  clarifyTimeoutError: !1\n}, CA = typeof URLSearchParams < \"u\" ? URLSearchParams : LO, AA = typeof FormData < \"u\" ? FormData : null, RA = typeof Blob < \"u\" ? Blob : null, NA = {\n  isBrowser: !0,\n  classes: {\n    URLSearchParams: CA,\n    FormData: AA,\n    Blob: RA\n  },\n  protocols: [\"http\", \"https\", \"file\", \"blob\", \"url\", \"data\"]\n}, iw = typeof window < \"u\" && typeof document < \"u\", DA = ((t) => iw && [\"ReactNative\", \"NativeScript\", \"NS\"].indexOf(t) < 0)(typeof navigator < \"u\" && navigator.product), ZA = typeof WorkerGlobalScope < \"u\" && // eslint-disable-next-line no-undef\nself instanceof WorkerGlobalScope && typeof self.importScripts == \"function\", VA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  hasBrowserEnv: iw,\n  hasStandardBrowserEnv: DA,\n  hasStandardBrowserWebWorkerEnv: ZA\n}, Symbol.toStringTag, { value: \"Module\" })), Ar = {\n  ...VA,\n  ...NA\n};\nfunction IA(t, e) {\n  return Zd(t, new Ar.classes.URLSearchParams(), Object.assign({\n    visitor: function(n, r, i, s) {\n      return Ar.isNode && V.isBuffer(n) ? (this.append(r, n.toString(\"base64\")), !1) : s.defaultVisitor.apply(this, arguments);\n    }\n  }, e));\n}\nfunction WA(t) {\n  return V.matchAll(/\\w+|\\[(\\w*)]/g, t).map((e) => e[0] === \"[]\" ? \"\" : e[1] || e[0]);\n}\nfunction MA(t) {\n  const e = {}, n = Object.keys(t);\n  let r;\n  const i = n.length;\n  let s;\n  for (r = 0; r < i; r++)\n    s = n[r], e[s] = t[s];\n  return e;\n}\nfunction sw(t) {\n  function e(n, r, i, s) {\n    let o = n[s++];\n    if (o === \"__proto__\")\n      return !0;\n    const a = Number.isFinite(+o), l = s >= n.length;\n    return o = !o && V.isArray(i) ? i.length : o, l ? (V.hasOwnProp(i, o) ? i[o] = [i[o], r] : i[o] = r, !a) : ((!i[o] || !V.isObject(i[o])) && (i[o] = []), e(n, r, i[o], s) && V.isArray(i[o]) && (i[o] = MA(i[o])), !a);\n  }\n  if (V.isFormData(t) && V.isFunction(t.entries)) {\n    const n = {};\n    return V.forEachEntry(t, (r, i) => {\n      e(WA(r), i, n, 0);\n    }), n;\n  }\n  return null;\n}\nfunction XA(t, e, n) {\n  if (V.isString(t))\n    try {\n      return (e || JSON.parse)(t), V.trim(t);\n    } catch (r) {\n      if (r.name !== \"SyntaxError\")\n        throw r;\n    }\n  return (n || JSON.stringify)(t);\n}\nconst UO = {\n  transitional: rw,\n  adapter: [\"xhr\", \"http\"],\n  transformRequest: [function(e, n) {\n    const r = n.getContentType() || \"\", i = r.indexOf(\"application/json\") > -1, s = V.isObject(e);\n    if (s && V.isHTMLForm(e) && (e = new FormData(e)), V.isFormData(e))\n      return i ? JSON.stringify(sw(e)) : e;\n    if (V.isArrayBuffer(e) || V.isBuffer(e) || V.isStream(e) || V.isFile(e) || V.isBlob(e))\n      return e;\n    if (V.isArrayBufferView(e))\n      return e.buffer;\n    if (V.isURLSearchParams(e))\n      return n.setContentType(\"application/x-www-form-urlencoded;charset=utf-8\", !1), e.toString();\n    let a;\n    if (s) {\n      if (r.indexOf(\"application/x-www-form-urlencoded\") > -1)\n        return IA(e, this.formSerializer).toString();\n      if ((a = V.isFileList(e)) || r.indexOf(\"multipart/form-data\") > -1) {\n        const l = this.env && this.env.FormData;\n        return Zd(\n          a ? { \"files[]\": e } : e,\n          l && new l(),\n          this.formSerializer\n        );\n      }\n    }\n    return s || i ? (n.setContentType(\"application/json\", !1), XA(e)) : e;\n  }],\n  transformResponse: [function(e) {\n    const n = this.transitional || UO.transitional, r = n && n.forcedJSONParsing, i = this.responseType === \"json\";\n    if (e && V.isString(e) && (r && !this.responseType || i)) {\n      const o = !(n && n.silentJSONParsing) && i;\n      try {\n        return JSON.parse(e);\n      } catch (a) {\n        if (o)\n          throw a.name === \"SyntaxError\" ? je.from(a, je.ERR_BAD_RESPONSE, this, null, this.response) : a;\n      }\n    }\n    return e;\n  }],\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n  xsrfCookieName: \"XSRF-TOKEN\",\n  xsrfHeaderName: \"X-XSRF-TOKEN\",\n  maxContentLength: -1,\n  maxBodyLength: -1,\n  env: {\n    FormData: Ar.classes.FormData,\n    Blob: Ar.classes.Blob\n  },\n  validateStatus: function(e) {\n    return e >= 200 && e < 300;\n  },\n  headers: {\n    common: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": void 0\n    }\n  }\n};\nV.forEach([\"delete\", \"get\", \"head\", \"post\", \"put\", \"patch\"], (t) => {\n  UO.headers[t] = {};\n});\nconst qO = UO, jA = V.toObjectSet([\n  \"age\",\n  \"authorization\",\n  \"content-length\",\n  \"content-type\",\n  \"etag\",\n  \"expires\",\n  \"from\",\n  \"host\",\n  \"if-modified-since\",\n  \"if-unmodified-since\",\n  \"last-modified\",\n  \"location\",\n  \"max-forwards\",\n  \"proxy-authorization\",\n  \"referer\",\n  \"retry-after\",\n  \"user-agent\"\n]), BA = (t) => {\n  const e = {};\n  let n, r, i;\n  return t && t.split(`\n`).forEach(function(o) {\n    i = o.indexOf(\":\"), n = o.substring(0, i).trim().toLowerCase(), r = o.substring(i + 1).trim(), !(!n || e[n] && jA[n]) && (n === \"set-cookie\" ? e[n] ? e[n].push(r) : e[n] = [r] : e[n] = e[n] ? e[n] + \", \" + r : r);\n  }), e;\n}, gb = Symbol(\"internals\");\nfunction ma(t) {\n  return t && String(t).trim().toLowerCase();\n}\nfunction Jc(t) {\n  return t === !1 || t == null ? t : V.isArray(t) ? t.map(Jc) : String(t);\n}\nfunction LA(t) {\n  const e = /* @__PURE__ */ Object.create(null), n = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let r;\n  for (; r = n.exec(t); )\n    e[r[1]] = r[2];\n  return e;\n}\nconst UA = (t) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(t.trim());\nfunction vf(t, e, n, r, i) {\n  if (V.isFunction(r))\n    return r.call(this, e, n);\n  if (i && (e = n), !!V.isString(e)) {\n    if (V.isString(r))\n      return e.indexOf(r) !== -1;\n    if (V.isRegExp(r))\n      return r.test(e);\n  }\n}\nfunction qA(t) {\n  return t.trim().toLowerCase().replace(/([a-z\\d])(\\w*)/g, (e, n, r) => n.toUpperCase() + r);\n}\nfunction YA(t, e) {\n  const n = V.toCamelCase(\" \" + e);\n  [\"get\", \"set\", \"has\"].forEach((r) => {\n    Object.defineProperty(t, r + n, {\n      value: function(i, s, o) {\n        return this[r].call(this, e, i, s, o);\n      },\n      configurable: !0\n    });\n  });\n}\nclass Vd {\n  constructor(e) {\n    e && this.set(e);\n  }\n  set(e, n, r) {\n    const i = this;\n    function s(a, l, c) {\n      const u = ma(l);\n      if (!u)\n        throw new Error(\"header name must be a non-empty string\");\n      const d = V.findKey(i, u);\n      (!d || i[d] === void 0 || c === !0 || c === void 0 && i[d] !== !1) && (i[d || l] = Jc(a));\n    }\n    const o = (a, l) => V.forEach(a, (c, u) => s(c, u, l));\n    return V.isPlainObject(e) || e instanceof this.constructor ? o(e, n) : V.isString(e) && (e = e.trim()) && !UA(e) ? o(BA(e), n) : e != null && s(n, e, r), this;\n  }\n  get(e, n) {\n    if (e = ma(e), e) {\n      const r = V.findKey(this, e);\n      if (r) {\n        const i = this[r];\n        if (!n)\n          return i;\n        if (n === !0)\n          return LA(i);\n        if (V.isFunction(n))\n          return n.call(this, i, r);\n        if (V.isRegExp(n))\n          return n.exec(i);\n        throw new TypeError(\"parser must be boolean|regexp|function\");\n      }\n    }\n  }\n  has(e, n) {\n    if (e = ma(e), e) {\n      const r = V.findKey(this, e);\n      return !!(r && this[r] !== void 0 && (!n || vf(this, this[r], r, n)));\n    }\n    return !1;\n  }\n  delete(e, n) {\n    const r = this;\n    let i = !1;\n    function s(o) {\n      if (o = ma(o), o) {\n        const a = V.findKey(r, o);\n        a && (!n || vf(r, r[a], a, n)) && (delete r[a], i = !0);\n      }\n    }\n    return V.isArray(e) ? e.forEach(s) : s(e), i;\n  }\n  clear(e) {\n    const n = Object.keys(this);\n    let r = n.length, i = !1;\n    for (; r--; ) {\n      const s = n[r];\n      (!e || vf(this, this[s], s, e, !0)) && (delete this[s], i = !0);\n    }\n    return i;\n  }\n  normalize(e) {\n    const n = this, r = {};\n    return V.forEach(this, (i, s) => {\n      const o = V.findKey(r, s);\n      if (o) {\n        n[o] = Jc(i), delete n[s];\n        return;\n      }\n      const a = e ? qA(s) : String(s).trim();\n      a !== s && delete n[s], n[a] = Jc(i), r[a] = !0;\n    }), this;\n  }\n  concat(...e) {\n    return this.constructor.concat(this, ...e);\n  }\n  toJSON(e) {\n    const n = /* @__PURE__ */ Object.create(null);\n    return V.forEach(this, (r, i) => {\n      r != null && r !== !1 && (n[i] = e && V.isArray(r) ? r.join(\", \") : r);\n    }), n;\n  }\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n  toString() {\n    return Object.entries(this.toJSON()).map(([e, n]) => e + \": \" + n).join(`\n`);\n  }\n  get [Symbol.toStringTag]() {\n    return \"AxiosHeaders\";\n  }\n  static from(e) {\n    return e instanceof this ? e : new this(e);\n  }\n  static concat(e, ...n) {\n    const r = new this(e);\n    return n.forEach((i) => r.set(i)), r;\n  }\n  static accessor(e) {\n    const r = (this[gb] = this[gb] = {\n      accessors: {}\n    }).accessors, i = this.prototype;\n    function s(o) {\n      const a = ma(o);\n      r[a] || (YA(i, o), r[a] = !0);\n    }\n    return V.isArray(e) ? e.forEach(s) : s(e), this;\n  }\n}\nVd.accessor([\"Content-Type\", \"Content-Length\", \"Accept\", \"Accept-Encoding\", \"User-Agent\", \"Authorization\"]);\nV.reduceDescriptors(Vd.prototype, ({ value: t }, e) => {\n  let n = e[0].toUpperCase() + e.slice(1);\n  return {\n    get: () => t,\n    set(r) {\n      this[n] = r;\n    }\n  };\n});\nV.freezeMethods(Vd);\nconst ri = Vd;\nfunction yf(t, e) {\n  const n = this || qO, r = e || n, i = ri.from(r.headers);\n  let s = r.data;\n  return V.forEach(t, function(a) {\n    s = a.call(n, s, i.normalize(), e ? e.status : void 0);\n  }), i.normalize(), s;\n}\nfunction ow(t) {\n  return !!(t && t.__CANCEL__);\n}\nfunction Ul(t, e, n) {\n  je.call(this, t ?? \"canceled\", je.ERR_CANCELED, e, n), this.name = \"CanceledError\";\n}\nV.inherits(Ul, je, {\n  __CANCEL__: !0\n});\nfunction zA(t, e, n) {\n  const r = n.config.validateStatus;\n  !n.status || !r || r(n.status) ? t(n) : e(new je(\n    \"Request failed with status code \" + n.status,\n    [je.ERR_BAD_REQUEST, je.ERR_BAD_RESPONSE][Math.floor(n.status / 100) - 4],\n    n.config,\n    n.request,\n    n\n  ));\n}\nconst HA = Ar.hasStandardBrowserEnv ? (\n  // Standard browser envs support document.cookie\n  {\n    write(t, e, n, r, i, s) {\n      const o = [t + \"=\" + encodeURIComponent(e)];\n      V.isNumber(n) && o.push(\"expires=\" + new Date(n).toGMTString()), V.isString(r) && o.push(\"path=\" + r), V.isString(i) && o.push(\"domain=\" + i), s === !0 && o.push(\"secure\"), document.cookie = o.join(\"; \");\n    },\n    read(t) {\n      const e = document.cookie.match(new RegExp(\"(^|;\\\\s*)(\" + t + \")=([^;]*)\"));\n      return e ? decodeURIComponent(e[3]) : null;\n    },\n    remove(t) {\n      this.write(t, \"\", Date.now() - 864e5);\n    }\n  }\n) : (\n  // Non-standard browser env (web workers, react-native) lack needed support.\n  {\n    write() {\n    },\n    read() {\n      return null;\n    },\n    remove() {\n    }\n  }\n);\nfunction FA(t) {\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(t);\n}\nfunction GA(t, e) {\n  return e ? t.replace(/\\/?\\/$/, \"\") + \"/\" + e.replace(/^\\/+/, \"\") : t;\n}\nfunction aw(t, e) {\n  return t && !FA(e) ? GA(t, e) : e;\n}\nconst KA = Ar.hasStandardBrowserEnv ? (\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n  function() {\n    const e = /(msie|trident)/i.test(navigator.userAgent), n = document.createElement(\"a\");\n    let r;\n    function i(s) {\n      let o = s;\n      return e && (n.setAttribute(\"href\", o), o = n.href), n.setAttribute(\"href\", o), {\n        href: n.href,\n        protocol: n.protocol ? n.protocol.replace(/:$/, \"\") : \"\",\n        host: n.host,\n        search: n.search ? n.search.replace(/^\\?/, \"\") : \"\",\n        hash: n.hash ? n.hash.replace(/^#/, \"\") : \"\",\n        hostname: n.hostname,\n        port: n.port,\n        pathname: n.pathname.charAt(0) === \"/\" ? n.pathname : \"/\" + n.pathname\n      };\n    }\n    return r = i(window.location.href), function(o) {\n      const a = V.isString(o) ? i(o) : o;\n      return a.protocol === r.protocol && a.host === r.host;\n    };\n  }()\n) : (\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  /* @__PURE__ */ function() {\n    return function() {\n      return !0;\n    };\n  }()\n);\nfunction JA(t) {\n  const e = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(t);\n  return e && e[1] || \"\";\n}\nfunction e2(t, e) {\n  t = t || 10;\n  const n = new Array(t), r = new Array(t);\n  let i = 0, s = 0, o;\n  return e = e !== void 0 ? e : 1e3, function(l) {\n    const c = Date.now(), u = r[s];\n    o || (o = c), n[i] = l, r[i] = c;\n    let d = s, f = 0;\n    for (; d !== i; )\n      f += n[d++], d = d % t;\n    if (i = (i + 1) % t, i === s && (s = (s + 1) % t), c - o < e)\n      return;\n    const h = u && c - u;\n    return h ? Math.round(f * 1e3 / h) : void 0;\n  };\n}\nfunction mb(t, e) {\n  let n = 0;\n  const r = e2(50, 250);\n  return (i) => {\n    const s = i.loaded, o = i.lengthComputable ? i.total : void 0, a = s - n, l = r(a), c = s <= o;\n    n = s;\n    const u = {\n      loaded: s,\n      total: o,\n      progress: o ? s / o : void 0,\n      bytes: a,\n      rate: l || void 0,\n      estimated: l && o && c ? (o - s) / l : void 0,\n      event: i\n    };\n    u[e ? \"download\" : \"upload\"] = !0, t(u);\n  };\n}\nconst t2 = typeof XMLHttpRequest < \"u\", n2 = t2 && function(t) {\n  return new Promise(function(n, r) {\n    let i = t.data;\n    const s = ri.from(t.headers).normalize();\n    let { responseType: o, withXSRFToken: a } = t, l;\n    function c() {\n      t.cancelToken && t.cancelToken.unsubscribe(l), t.signal && t.signal.removeEventListener(\"abort\", l);\n    }\n    let u;\n    if (V.isFormData(i)) {\n      if (Ar.hasStandardBrowserEnv || Ar.hasStandardBrowserWebWorkerEnv)\n        s.setContentType(!1);\n      else if ((u = s.getContentType()) !== !1) {\n        const [O, ...m] = u ? u.split(\";\").map((y) => y.trim()).filter(Boolean) : [];\n        s.setContentType([O || \"multipart/form-data\", ...m].join(\"; \"));\n      }\n    }\n    let d = new XMLHttpRequest();\n    if (t.auth) {\n      const O = t.auth.username || \"\", m = t.auth.password ? unescape(encodeURIComponent(t.auth.password)) : \"\";\n      s.set(\"Authorization\", \"Basic \" + btoa(O + \":\" + m));\n    }\n    const f = aw(t.baseURL, t.url);\n    d.open(t.method.toUpperCase(), nw(f, t.params, t.paramsSerializer), !0), d.timeout = t.timeout;\n    function h() {\n      if (!d)\n        return;\n      const O = ri.from(\n        \"getAllResponseHeaders\" in d && d.getAllResponseHeaders()\n      ), y = {\n        data: !o || o === \"text\" || o === \"json\" ? d.responseText : d.response,\n        status: d.status,\n        statusText: d.statusText,\n        headers: O,\n        config: t,\n        request: d\n      };\n      zA(function(g) {\n        n(g), c();\n      }, function(g) {\n        r(g), c();\n      }, y), d = null;\n    }\n    if (\"onloadend\" in d ? d.onloadend = h : d.onreadystatechange = function() {\n      !d || d.readyState !== 4 || d.status === 0 && !(d.responseURL && d.responseURL.indexOf(\"file:\") === 0) || setTimeout(h);\n    }, d.onabort = function() {\n      d && (r(new je(\"Request aborted\", je.ECONNABORTED, t, d)), d = null);\n    }, d.onerror = function() {\n      r(new je(\"Network Error\", je.ERR_NETWORK, t, d)), d = null;\n    }, d.ontimeout = function() {\n      let m = t.timeout ? \"timeout of \" + t.timeout + \"ms exceeded\" : \"timeout exceeded\";\n      const y = t.transitional || rw;\n      t.timeoutErrorMessage && (m = t.timeoutErrorMessage), r(new je(\n        m,\n        y.clarifyTimeoutError ? je.ETIMEDOUT : je.ECONNABORTED,\n        t,\n        d\n      )), d = null;\n    }, Ar.hasStandardBrowserEnv && (a && V.isFunction(a) && (a = a(t)), a || a !== !1 && KA(f))) {\n      const O = t.xsrfHeaderName && t.xsrfCookieName && HA.read(t.xsrfCookieName);\n      O && s.set(t.xsrfHeaderName, O);\n    }\n    i === void 0 && s.setContentType(null), \"setRequestHeader\" in d && V.forEach(s.toJSON(), function(m, y) {\n      d.setRequestHeader(y, m);\n    }), V.isUndefined(t.withCredentials) || (d.withCredentials = !!t.withCredentials), o && o !== \"json\" && (d.responseType = t.responseType), typeof t.onDownloadProgress == \"function\" && d.addEventListener(\"progress\", mb(t.onDownloadProgress, !0)), typeof t.onUploadProgress == \"function\" && d.upload && d.upload.addEventListener(\"progress\", mb(t.onUploadProgress)), (t.cancelToken || t.signal) && (l = (O) => {\n      d && (r(!O || O.type ? new Ul(null, t, d) : O), d.abort(), d = null);\n    }, t.cancelToken && t.cancelToken.subscribe(l), t.signal && (t.signal.aborted ? l() : t.signal.addEventListener(\"abort\", l)));\n    const p = JA(f);\n    if (p && Ar.protocols.indexOf(p) === -1) {\n      r(new je(\"Unsupported protocol \" + p + \":\", je.ERR_BAD_REQUEST, t));\n      return;\n    }\n    d.send(i || null);\n  });\n}, Vh = {\n  http: TA,\n  xhr: n2\n};\nV.forEach(Vh, (t, e) => {\n  if (t) {\n    try {\n      Object.defineProperty(t, \"name\", { value: e });\n    } catch {\n    }\n    Object.defineProperty(t, \"adapterName\", { value: e });\n  }\n});\nconst bb = (t) => `- ${t}`, r2 = (t) => V.isFunction(t) || t === null || t === !1, lw = {\n  getAdapter: (t) => {\n    t = V.isArray(t) ? t : [t];\n    const { length: e } = t;\n    let n, r;\n    const i = {};\n    for (let s = 0; s < e; s++) {\n      n = t[s];\n      let o;\n      if (r = n, !r2(n) && (r = Vh[(o = String(n)).toLowerCase()], r === void 0))\n        throw new je(`Unknown adapter '${o}'`);\n      if (r)\n        break;\n      i[o || \"#\" + s] = r;\n    }\n    if (!r) {\n      const s = Object.entries(i).map(\n        ([a, l]) => `adapter ${a} ` + (l === !1 ? \"is not supported by the environment\" : \"is not available in the build\")\n      );\n      let o = e ? s.length > 1 ? `since :\n` + s.map(bb).join(`\n`) : \" \" + bb(s[0]) : \"as no adapter specified\";\n      throw new je(\n        \"There is no suitable adapter to dispatch the request \" + o,\n        \"ERR_NOT_SUPPORT\"\n      );\n    }\n    return r;\n  },\n  adapters: Vh\n};\nfunction Sf(t) {\n  if (t.cancelToken && t.cancelToken.throwIfRequested(), t.signal && t.signal.aborted)\n    throw new Ul(null, t);\n}\nfunction vb(t) {\n  return Sf(t), t.headers = ri.from(t.headers), t.data = yf.call(\n    t,\n    t.transformRequest\n  ), [\"post\", \"put\", \"patch\"].indexOf(t.method) !== -1 && t.headers.setContentType(\"application/x-www-form-urlencoded\", !1), lw.getAdapter(t.adapter || qO.adapter)(t).then(function(r) {\n    return Sf(t), r.data = yf.call(\n      t,\n      t.transformResponse,\n      r\n    ), r.headers = ri.from(r.headers), r;\n  }, function(r) {\n    return ow(r) || (Sf(t), r && r.response && (r.response.data = yf.call(\n      t,\n      t.transformResponse,\n      r.response\n    ), r.response.headers = ri.from(r.response.headers))), Promise.reject(r);\n  });\n}\nconst yb = (t) => t instanceof ri ? { ...t } : t;\nfunction Io(t, e) {\n  e = e || {};\n  const n = {};\n  function r(c, u, d) {\n    return V.isPlainObject(c) && V.isPlainObject(u) ? V.merge.call({ caseless: d }, c, u) : V.isPlainObject(u) ? V.merge({}, u) : V.isArray(u) ? u.slice() : u;\n  }\n  function i(c, u, d) {\n    if (V.isUndefined(u)) {\n      if (!V.isUndefined(c))\n        return r(void 0, c, d);\n    } else\n      return r(c, u, d);\n  }\n  function s(c, u) {\n    if (!V.isUndefined(u))\n      return r(void 0, u);\n  }\n  function o(c, u) {\n    if (V.isUndefined(u)) {\n      if (!V.isUndefined(c))\n        return r(void 0, c);\n    } else\n      return r(void 0, u);\n  }\n  function a(c, u, d) {\n    if (d in e)\n      return r(c, u);\n    if (d in t)\n      return r(void 0, c);\n  }\n  const l = {\n    url: s,\n    method: s,\n    data: s,\n    baseURL: o,\n    transformRequest: o,\n    transformResponse: o,\n    paramsSerializer: o,\n    timeout: o,\n    timeoutMessage: o,\n    withCredentials: o,\n    withXSRFToken: o,\n    adapter: o,\n    responseType: o,\n    xsrfCookieName: o,\n    xsrfHeaderName: o,\n    onUploadProgress: o,\n    onDownloadProgress: o,\n    decompress: o,\n    maxContentLength: o,\n    maxBodyLength: o,\n    beforeRedirect: o,\n    transport: o,\n    httpAgent: o,\n    httpsAgent: o,\n    cancelToken: o,\n    socketPath: o,\n    responseEncoding: o,\n    validateStatus: a,\n    headers: (c, u) => i(yb(c), yb(u), !0)\n  };\n  return V.forEach(Object.keys(Object.assign({}, t, e)), function(u) {\n    const d = l[u] || i, f = d(t[u], e[u], u);\n    V.isUndefined(f) && d !== a || (n[u] = f);\n  }), n;\n}\nconst cw = \"1.6.8\", YO = {};\n[\"object\", \"boolean\", \"number\", \"function\", \"string\", \"symbol\"].forEach((t, e) => {\n  YO[t] = function(r) {\n    return typeof r === t || \"a\" + (e < 1 ? \"n \" : \" \") + t;\n  };\n});\nconst Sb = {};\nYO.transitional = function(e, n, r) {\n  function i(s, o) {\n    return \"[Axios v\" + cw + \"] Transitional option '\" + s + \"'\" + o + (r ? \". \" + r : \"\");\n  }\n  return (s, o, a) => {\n    if (e === !1)\n      throw new je(\n        i(o, \" has been removed\" + (n ? \" in \" + n : \"\")),\n        je.ERR_DEPRECATED\n      );\n    return n && !Sb[o] && (Sb[o] = !0, console.warn(\n      i(\n        o,\n        \" has been deprecated since v\" + n + \" and will be removed in the near future\"\n      )\n    )), e ? e(s, o, a) : !0;\n  };\n};\nfunction i2(t, e, n) {\n  if (typeof t != \"object\")\n    throw new je(\"options must be an object\", je.ERR_BAD_OPTION_VALUE);\n  const r = Object.keys(t);\n  let i = r.length;\n  for (; i-- > 0; ) {\n    const s = r[i], o = e[s];\n    if (o) {\n      const a = t[s], l = a === void 0 || o(a, s, t);\n      if (l !== !0)\n        throw new je(\"option \" + s + \" must be \" + l, je.ERR_BAD_OPTION_VALUE);\n      continue;\n    }\n    if (n !== !0)\n      throw new je(\"Unknown option \" + s, je.ERR_BAD_OPTION);\n  }\n}\nconst Ih = {\n  assertOptions: i2,\n  validators: YO\n}, ki = Ih.validators;\nclass Qu {\n  constructor(e) {\n    this.defaults = e, this.interceptors = {\n      request: new Ob(),\n      response: new Ob()\n    };\n  }\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(e, n) {\n    try {\n      return await this._request(e, n);\n    } catch (r) {\n      if (r instanceof Error) {\n        let i;\n        Error.captureStackTrace ? Error.captureStackTrace(i = {}) : i = new Error();\n        const s = i.stack ? i.stack.replace(/^.+\\n/, \"\") : \"\";\n        r.stack ? s && !String(r.stack).endsWith(s.replace(/^.+\\n.+\\n/, \"\")) && (r.stack += `\n` + s) : r.stack = s;\n      }\n      throw r;\n    }\n  }\n  _request(e, n) {\n    typeof e == \"string\" ? (n = n || {}, n.url = e) : n = e || {}, n = Io(this.defaults, n);\n    const { transitional: r, paramsSerializer: i, headers: s } = n;\n    r !== void 0 && Ih.assertOptions(r, {\n      silentJSONParsing: ki.transitional(ki.boolean),\n      forcedJSONParsing: ki.transitional(ki.boolean),\n      clarifyTimeoutError: ki.transitional(ki.boolean)\n    }, !1), i != null && (V.isFunction(i) ? n.paramsSerializer = {\n      serialize: i\n    } : Ih.assertOptions(i, {\n      encode: ki.function,\n      serialize: ki.function\n    }, !0)), n.method = (n.method || this.defaults.method || \"get\").toLowerCase();\n    let o = s && V.merge(\n      s.common,\n      s[n.method]\n    );\n    s && V.forEach(\n      [\"delete\", \"get\", \"head\", \"post\", \"put\", \"patch\", \"common\"],\n      (p) => {\n        delete s[p];\n      }\n    ), n.headers = ri.concat(o, s);\n    const a = [];\n    let l = !0;\n    this.interceptors.request.forEach(function(O) {\n      typeof O.runWhen == \"function\" && O.runWhen(n) === !1 || (l = l && O.synchronous, a.unshift(O.fulfilled, O.rejected));\n    });\n    const c = [];\n    this.interceptors.response.forEach(function(O) {\n      c.push(O.fulfilled, O.rejected);\n    });\n    let u, d = 0, f;\n    if (!l) {\n      const p = [vb.bind(this), void 0];\n      for (p.unshift.apply(p, a), p.push.apply(p, c), f = p.length, u = Promise.resolve(n); d < f; )\n        u = u.then(p[d++], p[d++]);\n      return u;\n    }\n    f = a.length;\n    let h = n;\n    for (d = 0; d < f; ) {\n      const p = a[d++], O = a[d++];\n      try {\n        h = p(h);\n      } catch (m) {\n        O.call(this, m);\n        break;\n      }\n    }\n    try {\n      u = vb.call(this, h);\n    } catch (p) {\n      return Promise.reject(p);\n    }\n    for (d = 0, f = c.length; d < f; )\n      u = u.then(c[d++], c[d++]);\n    return u;\n  }\n  getUri(e) {\n    e = Io(this.defaults, e);\n    const n = aw(e.baseURL, e.url);\n    return nw(n, e.params, e.paramsSerializer);\n  }\n}\nV.forEach([\"delete\", \"get\", \"head\", \"options\"], function(e) {\n  Qu.prototype[e] = function(n, r) {\n    return this.request(Io(r || {}, {\n      method: e,\n      url: n,\n      data: (r || {}).data\n    }));\n  };\n});\nV.forEach([\"post\", \"put\", \"patch\"], function(e) {\n  function n(r) {\n    return function(s, o, a) {\n      return this.request(Io(a || {}, {\n        method: e,\n        headers: r ? {\n          \"Content-Type\": \"multipart/form-data\"\n        } : {},\n        url: s,\n        data: o\n      }));\n    };\n  }\n  Qu.prototype[e] = n(), Qu.prototype[e + \"Form\"] = n(!0);\n});\nconst eu = Qu;\nclass zO {\n  constructor(e) {\n    if (typeof e != \"function\")\n      throw new TypeError(\"executor must be a function.\");\n    let n;\n    this.promise = new Promise(function(s) {\n      n = s;\n    });\n    const r = this;\n    this.promise.then((i) => {\n      if (!r._listeners)\n        return;\n      let s = r._listeners.length;\n      for (; s-- > 0; )\n        r._listeners[s](i);\n      r._listeners = null;\n    }), this.promise.then = (i) => {\n      let s;\n      const o = new Promise((a) => {\n        r.subscribe(a), s = a;\n      }).then(i);\n      return o.cancel = function() {\n        r.unsubscribe(s);\n      }, o;\n    }, e(function(s, o, a) {\n      r.reason || (r.reason = new Ul(s, o, a), n(r.reason));\n    });\n  }\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason)\n      throw this.reason;\n  }\n  /**\n   * Subscribe to the cancel signal\n   */\n  subscribe(e) {\n    if (this.reason) {\n      e(this.reason);\n      return;\n    }\n    this._listeners ? this._listeners.push(e) : this._listeners = [e];\n  }\n  /**\n   * Unsubscribe from the cancel signal\n   */\n  unsubscribe(e) {\n    if (!this._listeners)\n      return;\n    const n = this._listeners.indexOf(e);\n    n !== -1 && this._listeners.splice(n, 1);\n  }\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let e;\n    return {\n      token: new zO(function(i) {\n        e = i;\n      }),\n      cancel: e\n    };\n  }\n}\nconst s2 = zO;\nfunction o2(t) {\n  return function(n) {\n    return t.apply(null, n);\n  };\n}\nfunction a2(t) {\n  return V.isObject(t) && t.isAxiosError === !0;\n}\nconst Wh = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511\n};\nObject.entries(Wh).forEach(([t, e]) => {\n  Wh[e] = t;\n});\nconst l2 = Wh;\nfunction uw(t) {\n  const e = new eu(t), n = LS(eu.prototype.request, e);\n  return V.extend(n, eu.prototype, e, { allOwnKeys: !0 }), V.extend(n, e, null, { allOwnKeys: !0 }), n.create = function(i) {\n    return uw(Io(t, i));\n  }, n;\n}\nconst At = uw(qO);\nAt.Axios = eu;\nAt.CanceledError = Ul;\nAt.CancelToken = s2;\nAt.isCancel = ow;\nAt.VERSION = cw;\nAt.toFormData = Zd;\nAt.AxiosError = je;\nAt.Cancel = At.CanceledError;\nAt.all = function(e) {\n  return Promise.all(e);\n};\nAt.spread = o2;\nAt.isAxiosError = a2;\nAt.mergeConfig = Io;\nAt.AxiosHeaders = ri;\nAt.formToJSON = (t) => sw(V.isHTMLForm(t) ? new FormData(t) : t);\nAt.getAdapter = lw.getAdapter;\nAt.HttpStatusCode = l2;\nAt.default = At;\nconst c2 = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nlet u2 = (t = 21) => {\n  let e = \"\", n = crypto.getRandomValues(new Uint8Array(t));\n  for (; t--; )\n    e += c2[n[t] & 63];\n  return e;\n};\nconst d2 = [\n  \"B\",\n  \"kB\",\n  \"MB\",\n  \"GB\",\n  \"TB\",\n  \"PB\",\n  \"EB\",\n  \"ZB\",\n  \"YB\"\n], f2 = [\n  \"B\",\n  \"KiB\",\n  \"MiB\",\n  \"GiB\",\n  \"TiB\",\n  \"PiB\",\n  \"EiB\",\n  \"ZiB\",\n  \"YiB\"\n], h2 = [\n  \"b\",\n  \"kbit\",\n  \"Mbit\",\n  \"Gbit\",\n  \"Tbit\",\n  \"Pbit\",\n  \"Ebit\",\n  \"Zbit\",\n  \"Ybit\"\n], p2 = [\n  \"b\",\n  \"kibit\",\n  \"Mibit\",\n  \"Gibit\",\n  \"Tibit\",\n  \"Pibit\",\n  \"Eibit\",\n  \"Zibit\",\n  \"Yibit\"\n], wb = (t, e, n) => {\n  let r = t;\n  return typeof e == \"string\" || Array.isArray(e) ? r = t.toLocaleString(e, n) : (e === !0 || n !== void 0) && (r = t.toLocaleString(void 0, n)), r;\n};\nfunction Cu(t, e) {\n  if (!Number.isFinite(t))\n    throw new TypeError(`Expected a finite number, got ${typeof t}: ${t}`);\n  e = {\n    bits: !1,\n    binary: !1,\n    space: !0,\n    ...e\n  };\n  const n = e.bits ? e.binary ? p2 : h2 : e.binary ? f2 : d2, r = e.space ? \" \" : \"\";\n  if (e.signed && t === 0)\n    return ` 0${r}${n[0]}`;\n  const i = t < 0, s = i ? \"-\" : e.signed ? \"+\" : \"\";\n  i && (t = -t);\n  let o;\n  if (e.minimumFractionDigits !== void 0 && (o = { minimumFractionDigits: e.minimumFractionDigits }), e.maximumFractionDigits !== void 0 && (o = { maximumFractionDigits: e.maximumFractionDigits, ...o }), t < 1) {\n    const u = wb(t, e.locale, o);\n    return s + u + r + n[0];\n  }\n  const a = Math.min(Math.floor(e.binary ? Math.log(t) / Math.log(1024) : Math.log10(t) / 3), n.length - 1);\n  t /= (e.binary ? 1024 : 1e3) ** a, o || (t = t.toPrecision(3));\n  const l = wb(Number(t), e.locale, o), c = n[a];\n  return s + l + r + c;\n}\nfunction O2(t) {\n  if (typeof t != \"number\")\n    throw new TypeError(\"Expected a number\");\n  const e = t > 0 ? Math.floor : Math.ceil;\n  return {\n    days: e(t / 864e5),\n    hours: e(t / 36e5) % 24,\n    minutes: e(t / 6e4) % 60,\n    seconds: e(t / 1e3) % 60,\n    milliseconds: e(t) % 1e3,\n    microseconds: e(t * 1e3) % 1e3,\n    nanoseconds: e(t * 1e6) % 1e3\n  };\n}\nconst g2 = (t, e) => e === 1 ? t : `${t}s`, m2 = 1e-7;\nfunction dw(t, e = {}) {\n  if (!Number.isFinite(t))\n    throw new TypeError(\"Expected a finite number\");\n  e.colonNotation && (e.compact = !1, e.formatSubMilliseconds = !1, e.separateMilliseconds = !1, e.verbose = !1), e.compact && (e.secondsDecimalDigits = 0, e.millisecondsDecimalDigits = 0);\n  const n = [], r = (o, a) => {\n    const l = Math.floor(o * 10 ** a + m2);\n    return (Math.round(l) / 10 ** a).toFixed(a);\n  }, i = (o, a, l, c) => {\n    if ((n.length === 0 || !e.colonNotation) && o === 0 && !(e.colonNotation && l === \"m\"))\n      return;\n    c = (c || o || \"0\").toString();\n    let u, d;\n    if (e.colonNotation) {\n      u = n.length > 0 ? \":\" : \"\", d = \"\";\n      const f = c.includes(\".\") ? c.split(\".\")[0].length : c.length, h = n.length > 0 ? 2 : 1;\n      c = \"0\".repeat(Math.max(0, h - f)) + c;\n    } else\n      u = \"\", d = e.verbose ? \" \" + g2(a, o) : l;\n    n.push(u + c + d);\n  }, s = O2(t);\n  if (i(Math.trunc(s.days / 365), \"year\", \"y\"), i(s.days % 365, \"day\", \"d\"), i(s.hours, \"hour\", \"h\"), i(s.minutes, \"minute\", \"m\"), e.separateMilliseconds || e.formatSubMilliseconds || !e.colonNotation && t < 1e3)\n    if (i(s.seconds, \"second\", \"s\"), e.formatSubMilliseconds)\n      i(s.milliseconds, \"millisecond\", \"ms\"), i(s.microseconds, \"microsecond\", \"µs\"), i(s.nanoseconds, \"nanosecond\", \"ns\");\n    else {\n      const o = s.milliseconds + s.microseconds / 1e3 + s.nanoseconds / 1e6, a = typeof e.millisecondsDecimalDigits == \"number\" ? e.millisecondsDecimalDigits : 0, l = o >= 1 ? Math.round(o) : Math.ceil(o), c = a ? o.toFixed(a) : l;\n      i(\n        Number.parseFloat(c),\n        \"millisecond\",\n        \"ms\",\n        c\n      );\n    }\n  else {\n    const o = t / 1e3 % 60, a = typeof e.secondsDecimalDigits == \"number\" ? e.secondsDecimalDigits : 1, l = r(o, a), c = e.keepDecimalsOnWholeSeconds ? l : l.replace(/\\.0+$/, \"\");\n    i(Number.parseFloat(c), \"second\", \"s\", c);\n  }\n  if (n.length === 0)\n    return \"0\" + (e.verbose ? \" milliseconds\" : \"ms\");\n  if (e.compact)\n    return n[0];\n  if (typeof e.unitCount == \"number\") {\n    const o = e.colonNotation ? \"\" : \" \";\n    return n.slice(0, Math.max(e.unitCount, 1)).join(o);\n  }\n  return e.colonNotation ? n.join(\"\") : n.join(\" \");\n}\nconst Au = Math.min, Is = Math.max, Ru = Math.round, wc = Math.floor, is = (t) => ({\n  x: t,\n  y: t\n}), b2 = {\n  left: \"right\",\n  right: \"left\",\n  bottom: \"top\",\n  top: \"bottom\"\n}, v2 = {\n  start: \"end\",\n  end: \"start\"\n};\nfunction kb(t, e, n) {\n  return Is(t, Au(e, n));\n}\nfunction Id(t, e) {\n  return typeof t == \"function\" ? t(e) : t;\n}\nfunction Ls(t) {\n  return t.split(\"-\")[0];\n}\nfunction Wd(t) {\n  return t.split(\"-\")[1];\n}\nfunction fw(t) {\n  return t === \"x\" ? \"y\" : \"x\";\n}\nfunction hw(t) {\n  return t === \"y\" ? \"height\" : \"width\";\n}\nfunction Md(t) {\n  return [\"top\", \"bottom\"].includes(Ls(t)) ? \"y\" : \"x\";\n}\nfunction pw(t) {\n  return fw(Md(t));\n}\nfunction y2(t, e, n) {\n  n === void 0 && (n = !1);\n  const r = Wd(t), i = pw(t), s = hw(i);\n  let o = i === \"x\" ? r === (n ? \"end\" : \"start\") ? \"right\" : \"left\" : r === \"start\" ? \"bottom\" : \"top\";\n  return e.reference[s] > e.floating[s] && (o = Nu(o)), [o, Nu(o)];\n}\nfunction S2(t) {\n  const e = Nu(t);\n  return [Mh(t), e, Mh(e)];\n}\nfunction Mh(t) {\n  return t.replace(/start|end/g, (e) => v2[e]);\n}\nfunction w2(t, e, n) {\n  const r = [\"left\", \"right\"], i = [\"right\", \"left\"], s = [\"top\", \"bottom\"], o = [\"bottom\", \"top\"];\n  switch (t) {\n    case \"top\":\n    case \"bottom\":\n      return n ? e ? i : r : e ? r : i;\n    case \"left\":\n    case \"right\":\n      return e ? s : o;\n    default:\n      return [];\n  }\n}\nfunction k2(t, e, n, r) {\n  const i = Wd(t);\n  let s = w2(Ls(t), n === \"start\", r);\n  return i && (s = s.map((o) => o + \"-\" + i), e && (s = s.concat(s.map(Mh)))), s;\n}\nfunction Nu(t) {\n  return t.replace(/left|right|bottom|top/g, (e) => b2[e]);\n}\nfunction x2(t) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...t\n  };\n}\nfunction P2(t) {\n  return typeof t != \"number\" ? x2(t) : {\n    top: t,\n    right: t,\n    bottom: t,\n    left: t\n  };\n}\nfunction Du(t) {\n  const {\n    x: e,\n    y: n,\n    width: r,\n    height: i\n  } = t;\n  return {\n    width: r,\n    height: i,\n    top: n,\n    left: e,\n    right: e + r,\n    bottom: n + i,\n    x: e,\n    y: n\n  };\n}\nfunction xb(t, e, n) {\n  let {\n    reference: r,\n    floating: i\n  } = t;\n  const s = Md(e), o = pw(e), a = hw(o), l = Ls(e), c = s === \"y\", u = r.x + r.width / 2 - i.width / 2, d = r.y + r.height / 2 - i.height / 2, f = r[a] / 2 - i[a] / 2;\n  let h;\n  switch (l) {\n    case \"top\":\n      h = {\n        x: u,\n        y: r.y - i.height\n      };\n      break;\n    case \"bottom\":\n      h = {\n        x: u,\n        y: r.y + r.height\n      };\n      break;\n    case \"right\":\n      h = {\n        x: r.x + r.width,\n        y: d\n      };\n      break;\n    case \"left\":\n      h = {\n        x: r.x - i.width,\n        y: d\n      };\n      break;\n    default:\n      h = {\n        x: r.x,\n        y: r.y\n      };\n  }\n  switch (Wd(e)) {\n    case \"start\":\n      h[o] -= f * (n && c ? -1 : 1);\n      break;\n    case \"end\":\n      h[o] += f * (n && c ? -1 : 1);\n      break;\n  }\n  return h;\n}\nconst _2 = async (t, e, n) => {\n  const {\n    placement: r = \"bottom\",\n    strategy: i = \"absolute\",\n    middleware: s = [],\n    platform: o\n  } = n, a = s.filter(Boolean), l = await (o.isRTL == null ? void 0 : o.isRTL(e));\n  let c = await o.getElementRects({\n    reference: t,\n    floating: e,\n    strategy: i\n  }), {\n    x: u,\n    y: d\n  } = xb(c, r, l), f = r, h = {}, p = 0;\n  for (let O = 0; O < a.length; O++) {\n    const {\n      name: m,\n      fn: y\n    } = a[O], {\n      x: b,\n      y: g,\n      data: v,\n      reset: S\n    } = await y({\n      x: u,\n      y: d,\n      initialPlacement: r,\n      placement: f,\n      strategy: i,\n      middlewareData: h,\n      rects: c,\n      platform: o,\n      elements: {\n        reference: t,\n        floating: e\n      }\n    });\n    u = b ?? u, d = g ?? d, h = {\n      ...h,\n      [m]: {\n        ...h[m],\n        ...v\n      }\n    }, S && p <= 50 && (p++, typeof S == \"object\" && (S.placement && (f = S.placement), S.rects && (c = S.rects === !0 ? await o.getElementRects({\n      reference: t,\n      floating: e,\n      strategy: i\n    }) : S.rects), {\n      x: u,\n      y: d\n    } = xb(c, f, l)), O = -1);\n  }\n  return {\n    x: u,\n    y: d,\n    placement: f,\n    strategy: i,\n    middlewareData: h\n  };\n};\nasync function Ow(t, e) {\n  var n;\n  e === void 0 && (e = {});\n  const {\n    x: r,\n    y: i,\n    platform: s,\n    rects: o,\n    elements: a,\n    strategy: l\n  } = t, {\n    boundary: c = \"clippingAncestors\",\n    rootBoundary: u = \"viewport\",\n    elementContext: d = \"floating\",\n    altBoundary: f = !1,\n    padding: h = 0\n  } = Id(e, t), p = P2(h), m = a[f ? d === \"floating\" ? \"reference\" : \"floating\" : d], y = Du(await s.getClippingRect({\n    element: (n = await (s.isElement == null ? void 0 : s.isElement(m))) == null || n ? m : m.contextElement || await (s.getDocumentElement == null ? void 0 : s.getDocumentElement(a.floating)),\n    boundary: c,\n    rootBoundary: u,\n    strategy: l\n  })), b = d === \"floating\" ? {\n    ...o.floating,\n    x: r,\n    y: i\n  } : o.reference, g = await (s.getOffsetParent == null ? void 0 : s.getOffsetParent(a.floating)), v = await (s.isElement == null ? void 0 : s.isElement(g)) ? await (s.getScale == null ? void 0 : s.getScale(g)) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  }, S = Du(s.convertOffsetParentRelativeRectToViewportRelativeRect ? await s.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements: a,\n    rect: b,\n    offsetParent: g,\n    strategy: l\n  }) : b);\n  return {\n    top: (y.top - S.top + p.top) / v.y,\n    bottom: (S.bottom - y.bottom + p.bottom) / v.y,\n    left: (y.left - S.left + p.left) / v.x,\n    right: (S.right - y.right + p.right) / v.x\n  };\n}\nconst T2 = function(t) {\n  return t === void 0 && (t = {}), {\n    name: \"flip\",\n    options: t,\n    async fn(e) {\n      var n, r;\n      const {\n        placement: i,\n        middlewareData: s,\n        rects: o,\n        initialPlacement: a,\n        platform: l,\n        elements: c\n      } = e, {\n        mainAxis: u = !0,\n        crossAxis: d = !0,\n        fallbackPlacements: f,\n        fallbackStrategy: h = \"bestFit\",\n        fallbackAxisSideDirection: p = \"none\",\n        flipAlignment: O = !0,\n        ...m\n      } = Id(t, e);\n      if ((n = s.arrow) != null && n.alignmentOffset)\n        return {};\n      const y = Ls(i), b = Ls(a) === a, g = await (l.isRTL == null ? void 0 : l.isRTL(c.floating)), v = f || (b || !O ? [Nu(a)] : S2(a));\n      !f && p !== \"none\" && v.push(...k2(a, O, p, g));\n      const S = [a, ...v], w = await Ow(e, m), k = [];\n      let _ = ((r = s.flip) == null ? void 0 : r.overflows) || [];\n      if (u && k.push(w[y]), d) {\n        const Q = y2(i, o, g);\n        k.push(w[Q[0]], w[Q[1]]);\n      }\n      if (_ = [..._, {\n        placement: i,\n        overflows: k\n      }], !k.every((Q) => Q <= 0)) {\n        var T, C;\n        const Q = (((T = s.flip) == null ? void 0 : T.index) || 0) + 1, W = S[Q];\n        if (W)\n          return {\n            data: {\n              index: Q,\n              overflows: _\n            },\n            reset: {\n              placement: W\n            }\n          };\n        let L = (C = _.filter((re) => re.overflows[0] <= 0).sort((re, Y) => re.overflows[1] - Y.overflows[1])[0]) == null ? void 0 : C.placement;\n        if (!L)\n          switch (h) {\n            case \"bestFit\": {\n              var A;\n              const re = (A = _.map((Y) => [Y.placement, Y.overflows.filter((K) => K > 0).reduce((K, B) => K + B, 0)]).sort((Y, K) => Y[1] - K[1])[0]) == null ? void 0 : A[0];\n              re && (L = re);\n              break;\n            }\n            case \"initialPlacement\":\n              L = a;\n              break;\n          }\n        if (i !== L)\n          return {\n            reset: {\n              placement: L\n            }\n          };\n      }\n      return {};\n    }\n  };\n};\nasync function E2(t, e) {\n  const {\n    placement: n,\n    platform: r,\n    elements: i\n  } = t, s = await (r.isRTL == null ? void 0 : r.isRTL(i.floating)), o = Ls(n), a = Wd(n), l = Md(n) === \"y\", c = [\"left\", \"top\"].includes(o) ? -1 : 1, u = s && l ? -1 : 1, d = Id(e, t);\n  let {\n    mainAxis: f,\n    crossAxis: h,\n    alignmentAxis: p\n  } = typeof d == \"number\" ? {\n    mainAxis: d,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...d\n  };\n  return a && typeof p == \"number\" && (h = a === \"end\" ? p * -1 : p), l ? {\n    x: h * u,\n    y: f * c\n  } : {\n    x: f * c,\n    y: h * u\n  };\n}\nconst $2 = function(t) {\n  return t === void 0 && (t = 0), {\n    name: \"offset\",\n    options: t,\n    async fn(e) {\n      var n, r;\n      const {\n        x: i,\n        y: s,\n        placement: o,\n        middlewareData: a\n      } = e, l = await E2(e, t);\n      return o === ((n = a.offset) == null ? void 0 : n.placement) && (r = a.arrow) != null && r.alignmentOffset ? {} : {\n        x: i + l.x,\n        y: s + l.y,\n        data: {\n          ...l,\n          placement: o\n        }\n      };\n    }\n  };\n}, Q2 = function(t) {\n  return t === void 0 && (t = {}), {\n    name: \"shift\",\n    options: t,\n    async fn(e) {\n      const {\n        x: n,\n        y: r,\n        placement: i\n      } = e, {\n        mainAxis: s = !0,\n        crossAxis: o = !1,\n        limiter: a = {\n          fn: (m) => {\n            let {\n              x: y,\n              y: b\n            } = m;\n            return {\n              x: y,\n              y: b\n            };\n          }\n        },\n        ...l\n      } = Id(t, e), c = {\n        x: n,\n        y: r\n      }, u = await Ow(e, l), d = Md(Ls(i)), f = fw(d);\n      let h = c[f], p = c[d];\n      if (s) {\n        const m = f === \"y\" ? \"top\" : \"left\", y = f === \"y\" ? \"bottom\" : \"right\", b = h + u[m], g = h - u[y];\n        h = kb(b, h, g);\n      }\n      if (o) {\n        const m = d === \"y\" ? \"top\" : \"left\", y = d === \"y\" ? \"bottom\" : \"right\", b = p + u[m], g = p - u[y];\n        p = kb(b, p, g);\n      }\n      const O = a.fn({\n        ...e,\n        [f]: h,\n        [d]: p\n      });\n      return {\n        ...O,\n        data: {\n          x: O.x - n,\n          y: O.y - r\n        }\n      };\n    }\n  };\n};\nfunction ui(t) {\n  return HO(t) ? (t.nodeName || \"\").toLowerCase() : \"#document\";\n}\nfunction Mn(t) {\n  var e;\n  return (t == null || (e = t.ownerDocument) == null ? void 0 : e.defaultView) || window;\n}\nfunction mi(t) {\n  var e;\n  return (e = (HO(t) ? t.ownerDocument : t.document) || window.document) == null ? void 0 : e.documentElement;\n}\nfunction HO(t) {\n  return t instanceof Node || t instanceof Mn(t).Node;\n}\nfunction di(t) {\n  return t instanceof Element || t instanceof Mn(t).Element;\n}\nfunction jr(t) {\n  return t instanceof HTMLElement || t instanceof Mn(t).HTMLElement;\n}\nfunction Pb(t) {\n  return typeof ShadowRoot > \"u\" ? !1 : t instanceof ShadowRoot || t instanceof Mn(t).ShadowRoot;\n}\nfunction ql(t) {\n  const {\n    overflow: e,\n    overflowX: n,\n    overflowY: r,\n    display: i\n  } = nr(t);\n  return /auto|scroll|overlay|hidden|clip/.test(e + r + n) && ![\"inline\", \"contents\"].includes(i);\n}\nfunction C2(t) {\n  return [\"table\", \"td\", \"th\"].includes(ui(t));\n}\nfunction FO(t) {\n  const e = GO(), n = nr(t);\n  return n.transform !== \"none\" || n.perspective !== \"none\" || (n.containerType ? n.containerType !== \"normal\" : !1) || !e && (n.backdropFilter ? n.backdropFilter !== \"none\" : !1) || !e && (n.filter ? n.filter !== \"none\" : !1) || [\"transform\", \"perspective\", \"filter\"].some((r) => (n.willChange || \"\").includes(r)) || [\"paint\", \"layout\", \"strict\", \"content\"].some((r) => (n.contain || \"\").includes(r));\n}\nfunction A2(t) {\n  let e = Wo(t);\n  for (; jr(e) && !Xd(e); ) {\n    if (FO(e))\n      return e;\n    e = Wo(e);\n  }\n  return null;\n}\nfunction GO() {\n  return typeof CSS > \"u\" || !CSS.supports ? !1 : CSS.supports(\"-webkit-backdrop-filter\", \"none\");\n}\nfunction Xd(t) {\n  return [\"html\", \"body\", \"#document\"].includes(ui(t));\n}\nfunction nr(t) {\n  return Mn(t).getComputedStyle(t);\n}\nfunction jd(t) {\n  return di(t) ? {\n    scrollLeft: t.scrollLeft,\n    scrollTop: t.scrollTop\n  } : {\n    scrollLeft: t.pageXOffset,\n    scrollTop: t.pageYOffset\n  };\n}\nfunction Wo(t) {\n  if (ui(t) === \"html\")\n    return t;\n  const e = (\n    // Step into the shadow DOM of the parent of a slotted node.\n    t.assignedSlot || // DOM Element detected.\n    t.parentNode || // ShadowRoot detected.\n    Pb(t) && t.host || // Fallback.\n    mi(t)\n  );\n  return Pb(e) ? e.host : e;\n}\nfunction gw(t) {\n  const e = Wo(t);\n  return Xd(e) ? t.ownerDocument ? t.ownerDocument.body : t.body : jr(e) && ql(e) ? e : gw(e);\n}\nfunction ul(t, e, n) {\n  var r;\n  e === void 0 && (e = []), n === void 0 && (n = !0);\n  const i = gw(t), s = i === ((r = t.ownerDocument) == null ? void 0 : r.body), o = Mn(i);\n  return s ? e.concat(o, o.visualViewport || [], ql(i) ? i : [], o.frameElement && n ? ul(o.frameElement) : []) : e.concat(i, ul(i, [], n));\n}\nfunction mw(t) {\n  const e = nr(t);\n  let n = parseFloat(e.width) || 0, r = parseFloat(e.height) || 0;\n  const i = jr(t), s = i ? t.offsetWidth : n, o = i ? t.offsetHeight : r, a = Ru(n) !== s || Ru(r) !== o;\n  return a && (n = s, r = o), {\n    width: n,\n    height: r,\n    $: a\n  };\n}\nfunction KO(t) {\n  return di(t) ? t : t.contextElement;\n}\nfunction xo(t) {\n  const e = KO(t);\n  if (!jr(e))\n    return is(1);\n  const n = e.getBoundingClientRect(), {\n    width: r,\n    height: i,\n    $: s\n  } = mw(e);\n  let o = (s ? Ru(n.width) : n.width) / r, a = (s ? Ru(n.height) : n.height) / i;\n  return (!o || !Number.isFinite(o)) && (o = 1), (!a || !Number.isFinite(a)) && (a = 1), {\n    x: o,\n    y: a\n  };\n}\nconst R2 = /* @__PURE__ */ is(0);\nfunction bw(t) {\n  const e = Mn(t);\n  return !GO() || !e.visualViewport ? R2 : {\n    x: e.visualViewport.offsetLeft,\n    y: e.visualViewport.offsetTop\n  };\n}\nfunction N2(t, e, n) {\n  return e === void 0 && (e = !1), !n || e && n !== Mn(t) ? !1 : e;\n}\nfunction Us(t, e, n, r) {\n  e === void 0 && (e = !1), n === void 0 && (n = !1);\n  const i = t.getBoundingClientRect(), s = KO(t);\n  let o = is(1);\n  e && (r ? di(r) && (o = xo(r)) : o = xo(t));\n  const a = N2(s, n, r) ? bw(s) : is(0);\n  let l = (i.left + a.x) / o.x, c = (i.top + a.y) / o.y, u = i.width / o.x, d = i.height / o.y;\n  if (s) {\n    const f = Mn(s), h = r && di(r) ? Mn(r) : r;\n    let p = f, O = p.frameElement;\n    for (; O && r && h !== p; ) {\n      const m = xo(O), y = O.getBoundingClientRect(), b = nr(O), g = y.left + (O.clientLeft + parseFloat(b.paddingLeft)) * m.x, v = y.top + (O.clientTop + parseFloat(b.paddingTop)) * m.y;\n      l *= m.x, c *= m.y, u *= m.x, d *= m.y, l += g, c += v, p = Mn(O), O = p.frameElement;\n    }\n  }\n  return Du({\n    width: u,\n    height: d,\n    x: l,\n    y: c\n  });\n}\nconst D2 = [\":popover-open\", \":modal\"];\nfunction vw(t) {\n  return D2.some((e) => {\n    try {\n      return t.matches(e);\n    } catch {\n      return !1;\n    }\n  });\n}\nfunction Z2(t) {\n  let {\n    elements: e,\n    rect: n,\n    offsetParent: r,\n    strategy: i\n  } = t;\n  const s = i === \"fixed\", o = mi(r), a = e ? vw(e.floating) : !1;\n  if (r === o || a && s)\n    return n;\n  let l = {\n    scrollLeft: 0,\n    scrollTop: 0\n  }, c = is(1);\n  const u = is(0), d = jr(r);\n  if ((d || !d && !s) && ((ui(r) !== \"body\" || ql(o)) && (l = jd(r)), jr(r))) {\n    const f = Us(r);\n    c = xo(r), u.x = f.x + r.clientLeft, u.y = f.y + r.clientTop;\n  }\n  return {\n    width: n.width * c.x,\n    height: n.height * c.y,\n    x: n.x * c.x - l.scrollLeft * c.x + u.x,\n    y: n.y * c.y - l.scrollTop * c.y + u.y\n  };\n}\nfunction V2(t) {\n  return Array.from(t.getClientRects());\n}\nfunction yw(t) {\n  return Us(mi(t)).left + jd(t).scrollLeft;\n}\nfunction I2(t) {\n  const e = mi(t), n = jd(t), r = t.ownerDocument.body, i = Is(e.scrollWidth, e.clientWidth, r.scrollWidth, r.clientWidth), s = Is(e.scrollHeight, e.clientHeight, r.scrollHeight, r.clientHeight);\n  let o = -n.scrollLeft + yw(t);\n  const a = -n.scrollTop;\n  return nr(r).direction === \"rtl\" && (o += Is(e.clientWidth, r.clientWidth) - i), {\n    width: i,\n    height: s,\n    x: o,\n    y: a\n  };\n}\nfunction W2(t, e) {\n  const n = Mn(t), r = mi(t), i = n.visualViewport;\n  let s = r.clientWidth, o = r.clientHeight, a = 0, l = 0;\n  if (i) {\n    s = i.width, o = i.height;\n    const c = GO();\n    (!c || c && e === \"fixed\") && (a = i.offsetLeft, l = i.offsetTop);\n  }\n  return {\n    width: s,\n    height: o,\n    x: a,\n    y: l\n  };\n}\nfunction M2(t, e) {\n  const n = Us(t, !0, e === \"fixed\"), r = n.top + t.clientTop, i = n.left + t.clientLeft, s = jr(t) ? xo(t) : is(1), o = t.clientWidth * s.x, a = t.clientHeight * s.y, l = i * s.x, c = r * s.y;\n  return {\n    width: o,\n    height: a,\n    x: l,\n    y: c\n  };\n}\nfunction _b(t, e, n) {\n  let r;\n  if (e === \"viewport\")\n    r = W2(t, n);\n  else if (e === \"document\")\n    r = I2(mi(t));\n  else if (di(e))\n    r = M2(e, n);\n  else {\n    const i = bw(t);\n    r = {\n      ...e,\n      x: e.x - i.x,\n      y: e.y - i.y\n    };\n  }\n  return Du(r);\n}\nfunction Sw(t, e) {\n  const n = Wo(t);\n  return n === e || !di(n) || Xd(n) ? !1 : nr(n).position === \"fixed\" || Sw(n, e);\n}\nfunction X2(t, e) {\n  const n = e.get(t);\n  if (n)\n    return n;\n  let r = ul(t, [], !1).filter((a) => di(a) && ui(a) !== \"body\"), i = null;\n  const s = nr(t).position === \"fixed\";\n  let o = s ? Wo(t) : t;\n  for (; di(o) && !Xd(o); ) {\n    const a = nr(o), l = FO(o);\n    !l && a.position === \"fixed\" && (i = null), (s ? !l && !i : !l && a.position === \"static\" && !!i && [\"absolute\", \"fixed\"].includes(i.position) || ql(o) && !l && Sw(t, o)) ? r = r.filter((u) => u !== o) : i = a, o = Wo(o);\n  }\n  return e.set(t, r), r;\n}\nfunction j2(t) {\n  let {\n    element: e,\n    boundary: n,\n    rootBoundary: r,\n    strategy: i\n  } = t;\n  const o = [...n === \"clippingAncestors\" ? X2(e, this._c) : [].concat(n), r], a = o[0], l = o.reduce((c, u) => {\n    const d = _b(e, u, i);\n    return c.top = Is(d.top, c.top), c.right = Au(d.right, c.right), c.bottom = Au(d.bottom, c.bottom), c.left = Is(d.left, c.left), c;\n  }, _b(e, a, i));\n  return {\n    width: l.right - l.left,\n    height: l.bottom - l.top,\n    x: l.left,\n    y: l.top\n  };\n}\nfunction B2(t) {\n  const {\n    width: e,\n    height: n\n  } = mw(t);\n  return {\n    width: e,\n    height: n\n  };\n}\nfunction L2(t, e, n) {\n  const r = jr(e), i = mi(e), s = n === \"fixed\", o = Us(t, !0, s, e);\n  let a = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const l = is(0);\n  if (r || !r && !s)\n    if ((ui(e) !== \"body\" || ql(i)) && (a = jd(e)), r) {\n      const d = Us(e, !0, s, e);\n      l.x = d.x + e.clientLeft, l.y = d.y + e.clientTop;\n    } else\n      i && (l.x = yw(i));\n  const c = o.left + a.scrollLeft - l.x, u = o.top + a.scrollTop - l.y;\n  return {\n    x: c,\n    y: u,\n    width: o.width,\n    height: o.height\n  };\n}\nfunction Tb(t, e) {\n  return !jr(t) || nr(t).position === \"fixed\" ? null : e ? e(t) : t.offsetParent;\n}\nfunction ww(t, e) {\n  const n = Mn(t);\n  if (!jr(t) || vw(t))\n    return n;\n  let r = Tb(t, e);\n  for (; r && C2(r) && nr(r).position === \"static\"; )\n    r = Tb(r, e);\n  return r && (ui(r) === \"html\" || ui(r) === \"body\" && nr(r).position === \"static\" && !FO(r)) ? n : r || A2(t) || n;\n}\nconst U2 = async function(t) {\n  const e = this.getOffsetParent || ww, n = this.getDimensions;\n  return {\n    reference: L2(t.reference, await e(t.floating), t.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...await n(t.floating)\n    }\n  };\n};\nfunction q2(t) {\n  return nr(t).direction === \"rtl\";\n}\nconst Y2 = {\n  convertOffsetParentRelativeRectToViewportRelativeRect: Z2,\n  getDocumentElement: mi,\n  getClippingRect: j2,\n  getOffsetParent: ww,\n  getElementRects: U2,\n  getClientRects: V2,\n  getDimensions: B2,\n  getScale: xo,\n  isElement: di,\n  isRTL: q2\n};\nfunction z2(t, e) {\n  let n = null, r;\n  const i = mi(t);\n  function s() {\n    var a;\n    clearTimeout(r), (a = n) == null || a.disconnect(), n = null;\n  }\n  function o(a, l) {\n    a === void 0 && (a = !1), l === void 0 && (l = 1), s();\n    const {\n      left: c,\n      top: u,\n      width: d,\n      height: f\n    } = t.getBoundingClientRect();\n    if (a || e(), !d || !f)\n      return;\n    const h = wc(u), p = wc(i.clientWidth - (c + d)), O = wc(i.clientHeight - (u + f)), m = wc(c), b = {\n      rootMargin: -h + \"px \" + -p + \"px \" + -O + \"px \" + -m + \"px\",\n      threshold: Is(0, Au(1, l)) || 1\n    };\n    let g = !0;\n    function v(S) {\n      const w = S[0].intersectionRatio;\n      if (w !== l) {\n        if (!g)\n          return o();\n        w ? o(!1, w) : r = setTimeout(() => {\n          o(!1, 1e-7);\n        }, 100);\n      }\n      g = !1;\n    }\n    try {\n      n = new IntersectionObserver(v, {\n        ...b,\n        // Handle <iframe>s\n        root: i.ownerDocument\n      });\n    } catch {\n      n = new IntersectionObserver(v, b);\n    }\n    n.observe(t);\n  }\n  return o(!0), s;\n}\nfunction H2(t, e, n, r) {\n  r === void 0 && (r = {});\n  const {\n    ancestorScroll: i = !0,\n    ancestorResize: s = !0,\n    elementResize: o = typeof ResizeObserver == \"function\",\n    layoutShift: a = typeof IntersectionObserver == \"function\",\n    animationFrame: l = !1\n  } = r, c = KO(t), u = i || s ? [...c ? ul(c) : [], ...ul(e)] : [];\n  u.forEach((y) => {\n    i && y.addEventListener(\"scroll\", n, {\n      passive: !0\n    }), s && y.addEventListener(\"resize\", n);\n  });\n  const d = c && a ? z2(c, n) : null;\n  let f = -1, h = null;\n  o && (h = new ResizeObserver((y) => {\n    let [b] = y;\n    b && b.target === c && h && (h.unobserve(e), cancelAnimationFrame(f), f = requestAnimationFrame(() => {\n      var g;\n      (g = h) == null || g.observe(e);\n    })), n();\n  }), c && !l && h.observe(c), h.observe(e));\n  let p, O = l ? Us(t) : null;\n  l && m();\n  function m() {\n    const y = Us(t);\n    O && (y.x !== O.x || y.y !== O.y || y.width !== O.width || y.height !== O.height) && n(), O = y, p = requestAnimationFrame(m);\n  }\n  return n(), () => {\n    var y;\n    u.forEach((b) => {\n      i && b.removeEventListener(\"scroll\", n), s && b.removeEventListener(\"resize\", n);\n    }), d == null || d(), (y = h) == null || y.disconnect(), h = null, l && cancelAnimationFrame(p);\n  };\n}\nconst F2 = Q2, G2 = T2, K2 = (t, e, n) => {\n  const r = /* @__PURE__ */ new Map(), i = {\n    platform: Y2,\n    ...n\n  }, s = {\n    ...i.platform,\n    _c: r\n  };\n  return _2(t, e, {\n    ...i,\n    platform: s\n  });\n};\nfunction J2(t) {\n  return t != null && typeof t == \"object\" && \"$el\" in t;\n}\nfunction Eb(t) {\n  if (J2(t)) {\n    const e = t.$el;\n    return HO(e) && ui(e) === \"#comment\" ? null : e;\n  }\n  return t;\n}\nfunction kw(t) {\n  return typeof window > \"u\" ? 1 : (t.ownerDocument.defaultView || window).devicePixelRatio || 1;\n}\nfunction $b(t, e) {\n  const n = kw(t);\n  return Math.round(e * n) / n;\n}\nfunction eR(t, e, n) {\n  n === void 0 && (n = {});\n  const r = n.whileElementsMounted, i = j(() => {\n    var k;\n    return (k = R(n.open)) != null ? k : !0;\n  }), s = j(() => R(n.middleware)), o = j(() => {\n    var k;\n    return (k = R(n.placement)) != null ? k : \"bottom\";\n  }), a = j(() => {\n    var k;\n    return (k = R(n.strategy)) != null ? k : \"absolute\";\n  }), l = j(() => {\n    var k;\n    return (k = R(n.transform)) != null ? k : !0;\n  }), c = j(() => Eb(t.value)), u = j(() => Eb(e.value)), d = G(0), f = G(0), h = G(a.value), p = G(o.value), O = cO({}), m = G(!1), y = j(() => {\n    const k = {\n      position: h.value,\n      left: \"0\",\n      top: \"0\"\n    };\n    if (!u.value)\n      return k;\n    const _ = $b(u.value, d.value), T = $b(u.value, f.value);\n    return l.value ? {\n      ...k,\n      transform: \"translate(\" + _ + \"px, \" + T + \"px)\",\n      ...kw(u.value) >= 1.5 && {\n        willChange: \"transform\"\n      }\n    } : {\n      position: h.value,\n      left: _ + \"px\",\n      top: T + \"px\"\n    };\n  });\n  let b;\n  function g() {\n    c.value == null || u.value == null || K2(c.value, u.value, {\n      middleware: s.value,\n      placement: o.value,\n      strategy: a.value\n    }).then((k) => {\n      d.value = k.x, f.value = k.y, h.value = k.strategy, p.value = k.placement, O.value = k.middlewareData, m.value = !0;\n    });\n  }\n  function v() {\n    typeof b == \"function\" && (b(), b = void 0);\n  }\n  function S() {\n    if (v(), r === void 0) {\n      g();\n      return;\n    }\n    if (c.value != null && u.value != null) {\n      b = r(c.value, u.value, g);\n      return;\n    }\n  }\n  function w() {\n    i.value || (m.value = !1);\n  }\n  return ht([s, o, a], g, {\n    flush: \"sync\"\n  }), ht([c, u], S, {\n    flush: \"sync\"\n  }), ht(i, w, {\n    flush: \"sync\"\n  }), Rl() && tO(v), {\n    x: Dn(d),\n    y: Dn(f),\n    strategy: Dn(h),\n    placement: Dn(p),\n    middlewareData: Dn(O),\n    isPositioned: Dn(m),\n    floatingStyles: y,\n    update: g\n  };\n}\nvar JO = {};\n/*!\n * content-type\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\nvar Qb = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g, tR = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/, xw = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/, nR = /\\\\([\\u000b\\u0020-\\u00ff])/g, rR = /([\\\\\"])/g, Pw = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;\nJO.format = iR;\nJO.parse = sR;\nfunction iR(t) {\n  if (!t || typeof t != \"object\")\n    throw new TypeError(\"argument obj is required\");\n  var e = t.parameters, n = t.type;\n  if (!n || !Pw.test(n))\n    throw new TypeError(\"invalid type\");\n  var r = n;\n  if (e && typeof e == \"object\")\n    for (var i, s = Object.keys(e).sort(), o = 0; o < s.length; o++) {\n      if (i = s[o], !xw.test(i))\n        throw new TypeError(\"invalid parameter name\");\n      r += \"; \" + i + \"=\" + aR(e[i]);\n    }\n  return r;\n}\nfunction sR(t) {\n  if (!t)\n    throw new TypeError(\"argument string is required\");\n  var e = typeof t == \"object\" ? oR(t) : t;\n  if (typeof e != \"string\")\n    throw new TypeError(\"argument string is required to be a string\");\n  var n = e.indexOf(\";\"), r = n !== -1 ? e.slice(0, n).trim() : e.trim();\n  if (!Pw.test(r))\n    throw new TypeError(\"invalid media type\");\n  var i = new lR(r.toLowerCase());\n  if (n !== -1) {\n    var s, o, a;\n    for (Qb.lastIndex = n; o = Qb.exec(e); ) {\n      if (o.index !== n)\n        throw new TypeError(\"invalid parameter format\");\n      n += o[0].length, s = o[1].toLowerCase(), a = o[2], a.charCodeAt(0) === 34 && (a = a.slice(1, -1), a.indexOf(\"\\\\\") !== -1 && (a = a.replace(nR, \"$1\"))), i.parameters[s] = a;\n    }\n    if (n !== e.length)\n      throw new TypeError(\"invalid parameter format\");\n  }\n  return i;\n}\nfunction oR(t) {\n  var e;\n  if (typeof t.getHeader == \"function\" ? e = t.getHeader(\"content-type\") : typeof t.headers == \"object\" && (e = t.headers && t.headers[\"content-type\"]), typeof e != \"string\")\n    throw new TypeError(\"content-type header is missing from object\");\n  return e;\n}\nfunction aR(t) {\n  var e = String(t);\n  if (xw.test(e))\n    return e;\n  if (e.length > 0 && !tR.test(e))\n    throw new TypeError(\"invalid parameter value\");\n  return '\"' + e.replace(rR, \"\\\\$1\") + '\"';\n}\nfunction lR(t) {\n  this.parameters = /* @__PURE__ */ Object.create(null), this.type = t;\n}\nvar cR = Object.defineProperty, uR = (t, e, n) => e in t ? cR(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n, _w = (t, e, n) => (uR(t, typeof e != \"symbol\" ? e + \"\" : e, n), n);\nconst dR = `/* basic theme */\n:root {\n  --scalar-text-decoration: underline;\n  --scalar-text-decoration-hover: underline;\n}\n.light-mode,\n.light-mode .dark-mode {\n  --scalar-background-1: #f9f9f9;\n  --scalar-background-2: #f1f1f1;\n  --scalar-background-3: #e7e7e7;\n  --scalar-background-card: #fff;\n\n  --scalar-color-1: #2a2f45;\n  --scalar-color-2: #757575;\n  --scalar-color-3: #8e8e8e;\n\n  --scalar-color-accent: var(--scalar-color-1);\n  --scalar-background-accent: var(--scalar-background-3);\n\n  --scalar-border-color: rgba(0, 0, 0, 0.1);\n  --scalar-code-languages-background-supersede: var(--scalar-background-1);\n  --scalar-code-language-color-supersede: var(--scalar-color-1);\n}\n.dark-mode {\n  --scalar-background-1: #131313;\n  --scalar-background-2: #1d1d1d;\n  --scalar-background-3: #272727;\n  --scalar-background-card: #1d1d1d;\n\n  --scalar-color-1: rgba(255, 255, 255, 0.9);\n  --scalar-color-2: rgba(255, 255, 255, 0.62);\n  --scalar-color-3: rgba(255, 255, 255, 0.44);\n\n  --scalar-color-accent: var(--scalar-color-1);\n  --scalar-background-accent: var(--scalar-background-3);\n\n  --scalar-border-color: rgba(255, 255, 255, 0.1);\n  --scalar-code-languages-background-supersede: var(--scalar-background-3);\n  --scalar-code-language-color-supersede: var(--scalar-color-3);\n}\n/* Document Sidebar */\n.light-mode .t-doc__sidebar,\n.dark-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n  --scalar-sidebar-item-hover-color: currentColor;\n\n  --scalar-sidebar-item-active-background: var(--scalar-background-accent);\n  --scalar-sidebar-color-active: var(--scalar-color-accent);\n\n  --scalar-sidebar-search-background: transparent;\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n  --scalar-sidebar-search-border-color: var(--scalar-border-color);\n\n  --scalar-sidebar-indent-border: var(--scalar-sidebar-border-color);\n  --scalar-sidebar-indent-border-hover: var(--scalar-sidebar-border-color);\n  --scalar-sidebar-indent-border-active: var(--scalar-sidebar-border-color);\n}\n/* advanced */\n.light-mode .dark-mode,\n.light-mode {\n  --scalar-color-green: #069061;\n  --scalar-color-red: #ef0006;\n  --scalar-color-yellow: #edbe20;\n  --scalar-color-blue: #0082d0;\n  --scalar-color-orange: #fb892c;\n  --scalar-color-purple: #5203d1;\n\n  --scalar-button-1: rgba(0, 0, 0, 1);\n  --scalar-button-1-hover: rgba(0, 0, 0, 0.8);\n  --scalar-button-1-color: rgba(255, 255, 255, 0.9);\n}\n.dark-mode {\n  --scalar-color-green: #00b648;\n  --scalar-color-red: #dd2f2c;\n  --scalar-color-yellow: #ffc90d;\n  --scalar-color-blue: #4eb3ec;\n  --scalar-color-orange: #ff8d4d;\n  --scalar-color-purple: #b191f9;\n\n  --scalar-button-1: rgba(255, 255, 255, 1);\n  --scalar-button-1-hover: rgba(255, 255, 255, 0.9);\n  --scalar-button-1-color: black;\n}\n\n.code-languages-background:before {\n  box-shadow: inset 0 0 0 1px var(--scalar-border-color) !important;\n}\n.scalar-api-client__item,\n.scalar-card,\n.dark-mode .dark-mode.scalar-card {\n  --scalar-background-1: var(--scalar-background-card);\n  --scalar-background-2: var(--scalar-background-1);\n  --scalar-background-3: var(--scalar-background-1);\n}\n.dark-mode .dark-mode.scalar-card {\n  --scalar-background-3: var(--scalar-background-3);\n}\n.t-doc__sidebar {\n  --scalar-color-green: var(--scalar-color-1);\n  --scalar-color-red: var(--scalar-color-1);\n  --scalar-color-yellow: var(--scalar-color-1);\n  --scalar-color-blue: var(--scalar-color-1);\n  --scalar-color-orange: var(--scalar-color-1);\n  --scalar-color-purple: var(--scalar-color-1);\n}\n`, fR = `/* basic theme */\n:root {\n  --scalar-text-decoration: underline;\n  --scalar-text-decoration-hover: underline;\n}\n.light-mode {\n  --scalar-background-1: #f0f2f5;\n  --scalar-background-2: #eaecf0;\n  --scalar-background-3: #e0e2e6;\n  --scalar-border-color: rgb(228, 228, 231);\n\n  --scalar-color-1: rgb(9, 9, 11);\n  --scalar-color-2: rgb(113, 113, 122);\n  --scalar-color-3: rgba(25, 25, 28, 0.5);\n\n  --scalar-color-accent: var(--scalar-color-1);\n  --scalar-background-accent: #8ab4f81f;\n\n  --scalar-code-language-color-supersede: var(--scalar-color-1);\n}\n.light-mode .scalar-card.dark-mode,\n.dark-mode {\n  --scalar-background-1: #000e23;\n  --scalar-background-2: #01132e;\n  --scalar-background-3: #03193b;\n  --scalar-border-color: rgba(255, 255, 255, 0.12);\n\n  --scalar-color-1: #fafafa;\n  --scalar-color-2: rgb(161, 161, 170);\n  --scalar-color-3: rgba(255, 255, 255, 0.533);\n\n  --scalar-color-accent: var(--scalar-color-1);\n  --scalar-background-accent: #8ab4f81f;\n\n  --scalar-code-language-color-supersede: var(--scalar-color-1);\n}\n/* Document Sidebar */\n.light-mode .t-doc__sidebar,\n.dark-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n  --scalar-sidebar-item-hover-color: currentColor;\n\n  --scalar-sidebar-item-active-background: var(--scalar-background-3);\n  --scalar-sidebar-color-active: var(--scalar-color-accent);\n\n  --scalar-sidebar-search-background: rgba(255, 255, 255, 0.1);\n  --scalar-sidebar-search-border-color: var(--scalar-border-color);\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n  z-index: 1;\n}\n.light-mode .t-doc__sidebar {\n  --scalar-sidebar-search-background: white;\n}\n/* advanced */\n.light-mode {\n  --scalar-color-green: #069061;\n  --scalar-color-red: #ef0006;\n  --scalar-color-yellow: #edbe20;\n  --scalar-color-blue: #0082d0;\n  --scalar-color-orange: #fb892c;\n  --scalar-color-purple: #5203d1;\n\n  --scalar-button-1: rgba(0, 0, 0, 1);\n  --scalar-button-1-hover: rgba(0, 0, 0, 0.8);\n  --scalar-button-1-color: rgba(255, 255, 255, 0.9);\n}\n.dark-mode {\n  --scalar-color-green: rgba(69, 255, 165, 0.823);\n  --scalar-color-red: #ff8589;\n  --scalar-color-yellow: #ffcc4d;\n  --scalar-color-blue: #6bc1fe;\n  --scalar-color-orange: #f98943;\n  --scalar-color-purple: #b191f9;\n\n  --scalar-button-1: rgba(255, 255, 255, 1);\n  --scalar-button-1-hover: rgba(255, 255, 255, 0.9);\n  --scalar-button-1-color: black;\n}\n/* Custom theme */\n/* Document header */\n@keyframes headerbackground {\n  from {\n    background: transparent;\n    backdrop-filter: none;\n  }\n  to {\n    background: var(--header-background-1);\n    backdrop-filter: blur(12px);\n  }\n}\n.dark-mode h2.t-editor__heading,\n.dark-mode .t-editor__page-title h1,\n.dark-mode h1.section-header,\n.dark-mode .markdown h1,\n.dark-mode .markdown h2,\n.dark-mode .markdown h3,\n.dark-mode .markdown h4,\n.dark-mode .markdown h5,\n.dark-mode .markdown h6 {\n  -webkit-text-fill-color: transparent;\n  background-image: linear-gradient(\n    to right bottom,\n    rgb(255, 255, 255) 30%,\n    rgba(255, 255, 255, 0.38)\n  );\n  -webkit-background-clip: text;\n  background-clip: text;\n}\n.code-languages-background {\n  background: var(--scalar-background-1) !important;\n}\n.code-languages-background:before {\n  box-shadow: inset 0 0 0 2px var(--scalar-border-color);\n  background: linear-gradient(\n    to right top,\n    rgb(211 225 249 / 12%),\n    rgb(209 223 247 / 11%),\n    rgb(223 233 251 / 29%)\n  ) !important;\n}\n.light-mode .code-languages-background:before {\n  background: linear-gradient(\n    to right top,\n    rgb(0 0 0 / 8%),\n    rgb(0 0 0 / 7%),\n    rgb(0 0 0 / 19%)\n  ) !important;\n}\n.code-languages__active .code-languages-background:before {\n  background: var(--scalar-background-1) !important;\n}\n.code-languages span {\n  margin-top: 5px !important;\n}\n/* Hero Section Flare */\n.section-flare-item:nth-of-type(1) {\n  --c1: #ffffff;\n  --c2: #babfd8;\n  --c3: #2e8bb2;\n  --c4: #1a8593;\n  --c5: #0a143e;\n  --c6: #0a0f52;\n  --c7: #2341b8;\n\n  --solid: var(--c1), var(--c2), var(--c3), var(--c4), var(--c5), var(--c6),\n    var(--c7);\n  --solid-wrap: var(--solid), var(--c1);\n  --trans: var(--c1), transparent, var(--c2), transparent, var(--c3),\n    transparent, var(--c4), transparent, var(--c5), transparent, var(--c6),\n    transparent, var(--c7);\n  --trans-wrap: var(--trans), transparent, var(--c1);\n\n  background: radial-gradient(circle, var(--trans)),\n    conic-gradient(from 180deg, var(--trans-wrap)),\n    radial-gradient(circle, var(--trans)), conic-gradient(var(--solid-wrap));\n  width: 70vw;\n  height: 700px;\n  border-radius: 50%;\n  filter: blur(100px);\n  z-index: 0;\n  right: 0;\n  position: absolute;\n  transform: rotate(-45deg);\n  top: -300px;\n  opacity: 0.3;\n}\n.section-flare-item:nth-of-type(3) {\n  --star-color: #6b9acc;\n  --star-color2: #446b8d;\n  --star-color3: #3e5879;\n  background-image: radial-gradient(\n      2px 2px at 20px 30px,\n      var(--star-color2),\n      rgba(0, 0, 0, 0)\n    ),\n    radial-gradient(2px 2px at 40px 70px, var(--star-color), rgba(0, 0, 0, 0)),\n    radial-gradient(2px 2px at 50px 160px, var(--star-color3), rgba(0, 0, 0, 0)),\n    radial-gradient(2px 2px at 90px 40px, var(--star-color), rgba(0, 0, 0, 0)),\n    radial-gradient(2px 2px at 130px 80px, var(--star-color), rgba(0, 0, 0, 0)),\n    radial-gradient(\n      2px 2px at 160px 120px,\n      var(--star-color3),\n      rgba(0, 0, 0, 0)\n    );\n  background-repeat: repeat;\n  background-size: 200px 200px;\n  width: 100%;\n  height: 100%;\n  mask-image: radial-gradient(ellipse at 100% 0%, black 40%, transparent 70%);\n}\n.section-flare {\n  top: -150px !important;\n  height: 100vh;\n  background: linear-gradient(#000, var(--scalar-background-1));\n  width: 100vw;\n}\n.light-mode .section-flare {\n  display: none;\n}\n.light-mode .scalar-card {\n  --scalar-background-1: #fff;\n  --scalar-background-2: #fff;\n  --scalar-background-3: #fff;\n}\n`, hR = `/* basic theme */\n:root {\n  --scalar-text-decoration: underline;\n  --scalar-text-decoration-hover: underline;\n}\n.light-mode {\n  --scalar-color-1: rgb(9, 9, 11);\n  --scalar-color-2: rgb(113, 113, 122);\n  --scalar-color-3: rgba(25, 25, 28, 0.5);\n  --scalar-color-accent: var(--scalar-color-1);\n\n  --scalar-background-1: #fff;\n  --scalar-background-2: #f4f4f5;\n  --scalar-background-3: #e3e3e6;\n  --scalar-background-accent: #8ab4f81f;\n\n  --scalar-border-color: rgb(228, 228, 231);\n  --scalar-code-language-color-supersede: var(--scalar-color-1);\n}\n.dark-mode {\n  --scalar-color-1: #fafafa;\n  --scalar-color-2: rgb(161, 161, 170);\n  --scalar-color-3: rgba(255, 255, 255, 0.533);\n  --scalar-color-accent: var(--scalar-color-1);\n\n  --scalar-background-1: #09090b;\n  --scalar-background-2: #18181b;\n  --scalar-background-3: #2c2c30;\n  --scalar-background-accent: #8ab4f81f;\n\n  --scalar-border-color: rgba(255, 255, 255, 0.12);\n  --scalar-code-language-color-supersede: var(--scalar-color-1);\n}\n\n/* Document Sidebar */\n.light-mode .t-doc__sidebar,\n.dark-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n\n  --scalar-sidebar-item-hover-color: currentColor;\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n\n  --scalar-sidebar-item-active-background: var(--scalar-background-3);\n  --scalar-sidebar-color-active: var(--scalar-color-accent);\n\n  --scalar-sidebar-search-background: transparent;\n  --scalar-sidebar-search-border-color: var(--scalar-border-color);\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n}\n.light-mode .t-doc__sidebar {\n  --scalar-sidebar-item-active-background: #09090b;\n  --scalar-sidebar-color-active: var(--scalar-sidebar-background-1);\n}\n/* advanced */\n.light-mode {\n  --scalar-color-green: #069061;\n  --scalar-color-red: #ef0006;\n  --scalar-color-yellow: #edbe20;\n  --scalar-color-blue: #0082d0;\n  --scalar-color-orange: #fb892c;\n  --scalar-color-purple: #5203d1;\n\n  --scalar-button-1: rgba(0, 0, 0, 1);\n  --scalar-button-1-hover: rgba(0, 0, 0, 0.8);\n  --scalar-button-1-color: rgba(255, 255, 255, 0.9);\n}\n.dark-mode {\n  --scalar-color-green: rgba(69, 255, 165, 0.823);\n  --scalar-color-red: #ff8589;\n  --scalar-color-yellow: #ffcc4d;\n  --scalar-color-blue: #6bc1fe;\n  --scalar-color-orange: #f98943;\n  --scalar-color-purple: #b191f9;\n\n  --scalar-button-1: rgba(255, 255, 255, 1);\n  --scalar-button-1-hover: rgba(255, 255, 255, 0.9);\n  --scalar-button-1-color: black;\n}\n/* Custom theme */\n.dark-mode h2.t-editor__heading,\n.dark-mode .t-editor__page-title h1,\n.dark-mode h1.section-header,\n.dark-mode .markdown h1,\n.dark-mode .markdown h2,\n.dark-mode .markdown h3,\n.dark-mode .markdown h4,\n.dark-mode .markdown h5,\n.dark-mode .markdown h6 {\n  -webkit-text-fill-color: transparent;\n  background-image: linear-gradient(\n    to right bottom,\n    rgb(255, 255, 255) 30%,\n    rgba(255, 255, 255, 0.38)\n  );\n  -webkit-background-clip: text;\n  background-clip: text;\n}\n.examples .scalar-card-footer {\n  --scalar-background-3: transparent;\n  padding-top: 0;\n}\n.code-languages-background {\n  background: var(--scalar-background-1) !important;\n}\n.code-languages-background:before {\n  box-shadow: inset 0 0 0 2px var(--scalar-border-color);\n  background: linear-gradient(\n    to right top,\n    rgb(211 225 249 / 12%),\n    rgb(209 223 247 / 11%),\n    rgb(223 233 251 / 29%)\n  ) !important;\n}\n.light-mode .code-languages-background:before {\n  background: linear-gradient(\n    to right top,\n    rgb(0 0 0 / 8%),\n    rgb(0 0 0 / 7%),\n    rgb(0 0 0 / 19%)\n  ) !important;\n}\n.code-languages__active .code-languages-background:before {\n  background: var(--scalar-background-1) !important;\n}\n.code-languages span {\n  margin-top: 5px !important;\n}\n/* Hero section flare */\n.section-flare {\n  width: 100vw;\n  height: 550px;\n  position: relative;\n}\n.section-flare-item:nth-of-type(1) {\n  position: absolute;\n  width: 100vw;\n  height: 550px;\n  --stripesDark: repeating-linear-gradient(\n    100deg,\n    #000 0%,\n    #000 7%,\n    transparent 10%,\n    transparent 12%,\n    #000 16%\n  );\n  --rainbow: repeating-linear-gradient(\n    100deg,\n    #fff 10%,\n    #fff 16%,\n    #fff 22%,\n    #fff 30%\n  );\n  background-image: var(--stripesDark), var(--rainbow);\n  background-size: 300%, 200%;\n  background-position:\n    50% 50%,\n    50% 50%;\n  filter: invert(100%);\n  -webkit-mask-image: radial-gradient(\n    ellipse at 100% 0%,\n    black 40%,\n    transparent 70%\n  );\n  mask-image: radial-gradient(ellipse at 100% 0%, black 40%, transparent 70%);\n  pointer-events: none;\n  opacity: 0.07;\n}\n.dark-mode .section-flare-item:nth-of-type(1) {\n  background-image: var(--stripesDark), var(--rainbow);\n  filter: opacity(50%) saturate(200%);\n  opacity: 0.25;\n  height: 350px;\n}\n.section-flare-item:nth-of-type(1):after {\n  content: '';\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-image: var(--stripesDark), var(--rainbow);\n  background-size: 200%, 100%;\n  background-attachment: fixed;\n  mix-blend-mode: difference;\n}\n.dark-mode .section-flare:after {\n  background-image: var(--stripesDark), var(--rainbow);\n}\n.section-flare-item:nth-of-type(2) {\n  --star-color: #fff;\n  --star-color2: #fff;\n  --star-color3: #fff;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-image: radial-gradient(\n      2px 2px at 20px 30px,\n      var(--star-color2),\n      rgba(0, 0, 0, 0)\n    ),\n    radial-gradient(2px 2px at 40px 70px, var(--star-color), rgba(0, 0, 0, 0)),\n    radial-gradient(2px 2px at 50px 160px, var(--star-color3), rgba(0, 0, 0, 0)),\n    radial-gradient(2px 2px at 90px 40px, var(--star-color), rgba(0, 0, 0, 0)),\n    radial-gradient(2px 2px at 130px 80px, var(--star-color), rgba(0, 0, 0, 0)),\n    radial-gradient(\n      2px 2px at 160px 120px,\n      var(--star-color3),\n      rgba(0, 0, 0, 0)\n    );\n  background-repeat: repeat;\n  background-size: 200px 200px;\n  mask-image: radial-gradient(ellipse at 100% 0%, black 40%, transparent 70%);\n  opacity: 0.2;\n}\n`, Tw = `/* basic theme */\n.light-mode {\n  --scalar-background-1: #fff;\n  --scalar-background-2: #f6f6f6;\n  --scalar-background-3: #e7e7e7;\n  --scalar-background-accent: #8ab4f81f;\n\n  --scalar-color-1: #2a2f45;\n  --scalar-color-2: #757575;\n  --scalar-color-3: #8e8e8e;\n\n  --scalar-color-accent: #0099ff;\n  --scalar-border-color: rgba(0, 0, 0, 0.1);\n}\n.dark-mode {\n  --scalar-background-1: #0f0f0f;\n  --scalar-background-2: #1a1a1a;\n  --scalar-background-3: #272727;\n\n  --scalar-color-1: rgba(255, 255, 255, 0.9);\n  --scalar-color-2: rgba(255, 255, 255, 0.62);\n  --scalar-color-3: rgba(255, 255, 255, 0.44);\n\n  --scalar-color-accent: #3ea6ff;\n  --scalar-background-accent: #3ea6ff1f;\n\n  --scalar-border-color: rgba(255, 255, 255, 0.1);\n}\n/* Document Sidebar */\n.light-mode .t-doc__sidebar,\n.dark-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n  --scalar-sidebar-item-hover-color: currentColor;\n\n  --scalar-sidebar-item-active-background: var(--scalar-background-2);\n  --scalar-sidebar-color-active: var(--scalar-color-1);\n\n  --scalar-sidebar-search-background: transparent;\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n  --scalar-sidebar-search-border-color: var(--scalar-border-color);\n}\n\n/* advanced */\n.light-mode {\n  --scalar-color-green: #069061;\n  --scalar-color-red: #ef0006;\n  --scalar-color-yellow: #edbe20;\n  --scalar-color-blue: #0082d0;\n  --scalar-color-orange: #fb892c;\n  --scalar-color-purple: #5203d1;\n\n  --scalar-button-1: rgba(0, 0, 0, 1);\n  --scalar-button-1-hover: rgba(0, 0, 0, 0.8);\n  --scalar-button-1-color: rgba(255, 255, 255, 0.9);\n}\n.dark-mode {\n  --scalar-color-green: #00b648;\n  --scalar-color-red: #dc1b19;\n  --scalar-color-yellow: #ffc90d;\n  --scalar-color-blue: #4eb3ec;\n  --scalar-color-orange: #ff8d4d;\n  --scalar-color-purple: #b191f9;\n\n  --scalar-button-1: rgba(255, 255, 255, 1);\n  --scalar-button-1-hover: rgba(255, 255, 255, 0.9);\n  --scalar-button-1-color: black;\n}\n`, pR = `/* basic theme */\n.light-mode {\n  --scalar-color-1: #2a2f45;\n  --scalar-color-2: #757575;\n  --scalar-color-3: #8e8e8e;\n  --scalar-color-accent: #7070ff;\n\n  --scalar-background-1: #fff;\n  --scalar-background-2: #f6f6f6;\n  --scalar-background-3: #e7e7e7;\n  --scalar-background-accent: #7070ff1f;\n\n  --scalar-border-color: rgba(0, 0, 0, 0.1);\n\n  --scalar-code-language-color-supersede: var(--scalar-color-3);\n}\n.dark-mode {\n  --scalar-color-1: #f7f8f8;\n  --scalar-color-2: rgb(180, 188, 208);\n  --scalar-color-3: #b4bcd099;\n  --scalar-color-accent: #828fff;\n\n  --scalar-background-1: #000212;\n  --scalar-background-2: rgba(255, 255, 255, 0.05);\n  --scalar-background-3: rgba(255, 255, 255, 0.09);\n  --scalar-background-accent: #8ab4f81f;\n\n  --scalar-border-color: #242537;\n  --scalar-code-language-color-supersede: var(--scalar-color-3);\n}\n/* Document Sidebar */\n.light-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-item-hover-color: currentColor;\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n  --scalar-sidebar-item-active-background: var(--scalar-background-accent);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-color-active: var(--scalar-color-accent);\n  --scalar-sidebar-search-background: rgba(0, 0, 0, 0.05);\n  --scalar-sidebar-search-border-color: 1px solid rgba(0, 0, 0, 0.05);\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n  --scalar-background-2: rgba(0, 0, 0, 0.03);\n}\n.dark-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-item-hover-color: currentColor;\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n  --scalar-sidebar-item-active-background: rgba(255, 255, 255, 0.1);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-color-active: var(--scalar-color-accent);\n  --scalar-sidebar-search-background: rgba(255, 255, 255, 0.1);\n  --scalar-sidebar-search-border-color: 1px solid rgba(255, 255, 255, 0.05);\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n}\n/* advanced */\n.light-mode {\n  --scalar-color-green: #069061;\n  --scalar-color-red: #ef0006;\n  --scalar-color-yellow: #edbe20;\n  --scalar-color-blue: #0082d0;\n  --scalar-color-orange: #fb892c;\n  --scalar-color-purple: #5203d1;\n\n  --scalar-button-1: rgba(0, 0, 0, 1);\n  --scalar-button-1-hover: rgba(0, 0, 0, 0.8);\n  --scalar-button-1-color: rgba(255, 255, 255, 0.9);\n}\n.dark-mode {\n  --scalar-color-green: #00b648;\n  --scalar-color-red: #dc1b19;\n  --scalar-color-yellow: #ffc90d;\n  --scalar-color-blue: #4eb3ec;\n  --scalar-color-orange: #ff8d4d;\n  --scalar-color-purple: #b191f9;\n\n  --scalar-button-1: rgba(255, 255, 255, 1);\n  --scalar-button-1-hover: rgba(255, 255, 255, 0.9);\n  --scalar-button-1-color: black;\n}\n/* Custom Theme */\n.dark-mode h2.t-editor__heading,\n.dark-mode .t-editor__page-title h1,\n.dark-mode h1.section-header,\n.dark-mode .markdown h1,\n.dark-mode .markdown h2,\n.dark-mode .markdown h3,\n.dark-mode .markdown h4,\n.dark-mode .markdown h5,\n.dark-mode .markdown h6 {\n  -webkit-text-fill-color: transparent;\n  background-image: linear-gradient(\n    to right bottom,\n    rgb(255, 255, 255) 30%,\n    rgba(255, 255, 255, 0.38)\n  );\n  -webkit-background-clip: text;\n  background-clip: text;\n}\n.sidebar-search {\n  backdrop-filter: blur(12px);\n}\n@keyframes headerbackground {\n  from {\n    background: transparent;\n    backdrop-filter: none;\n  }\n  to {\n    background: var(--header-background-1);\n    backdrop-filter: blur(12px);\n  }\n}\n.dark-mode .scalar-card {\n  background: rgba(255, 255, 255, 0.05) !important;\n}\n.dark-mode .scalar-card * {\n  --scalar-background-2: transparent !important;\n  --scalar-background-1: transparent !important;\n}\n.light-mode .dark-mode.scalar-card *,\n.light-mode .dark-mode.scalar-card {\n  --scalar-background-1: #0d0f1e !important;\n  --scalar-background-2: #0d0f1e !important;\n  --scalar-background-3: #191b29 !important;\n}\n.light-mode .dark-mode.scalar-card {\n  background: #191b29 !important;\n}\n.badge {\n  box-shadow: 0 0 0 1px var(--scalar-border-color);\n  margin-right: 6px;\n}\n\n.table-row.required-parameter .table-row-item:nth-of-type(2):after {\n  background: transparent;\n  box-shadow: none;\n}\n.code-languages__active {\n  --scalar-code-language-color-supersede: var(--scalar-color-1);\n}\n.code-languages-background {\n  background: linear-gradient(\n    rgba(255, 255, 255, 0) 0%,\n    rgba(255, 255, 255, 0.05) 100%\n  ) !important;\n  box-shadow: inset 0 0 0 1px var(--scalar-border-color) !important;\n}\n/* Hero Section Flare */\n.section-flare {\n  width: 100vw;\n  background: radial-gradient(\n    ellipse 80% 50% at 50% -20%,\n    rgba(120, 119, 198, 0.3),\n    transparent\n  );\n  height: 100vh;\n}\n`, OR = `/* basic theme */\n:root {\n  --scalar-text-decoration: underline;\n  --scalar-text-decoration-hover: underline;\n}\n.light-mode {\n  --scalar-background-1: #f9f6f0;\n  --scalar-background-2: #f2efe8;\n  --scalar-background-3: #e9e7e2;\n  --scalar-border-color: rgba(203, 165, 156, 0.6);\n\n  --scalar-color-1: #c75549;\n  --scalar-color-2: #c75549;\n  --scalar-color-3: #c75549;\n\n  --scalar-color-accent: #c75549;\n  --scalar-background-accent: #dcbfa81f;\n\n  --scalar-code-language-color-supersede: var(--scalar-color-1);\n}\n.dark-mode {\n  --scalar-background-1: #140507;\n  --scalar-background-2: #20090c;\n  --scalar-background-3: #321116;\n  --scalar-border-color: rgba(255, 255, 255, 0.1);\n\n  --scalar-color-1: rgba(255, 255, 255, 0.9);\n  --scalar-color-2: rgba(255, 255, 255, 0.62);\n  --scalar-color-3: rgba(255, 255, 255, 0.44);\n\n  --scalar-color-accent: rgba(255, 255, 255, 0.9);\n  --scalar-background-accent: #441313;\n\n  --scalar-code-language-color-supersede: var(--scalar-color-1);\n}\n\n/* Document Sidebar */\n.light-mode .t-doc__sidebar,\n.dark-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n\n  --scalar-sidebar-item-hover-color: currentColor;\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n\n  --scalar-sidebar-item-active-background: var(--scalar-background-3);\n  --scalar-sidebar-color-active: var(--scalar-color-accent);\n\n  --scalar-sidebar-search-background: rgba(255, 255, 255, 0.1);\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n  --scalar-sidebar-search-border-color: var(--scalar-border-color);\n  z-index: 1;\n}\n/* advanced */\n.light-mode {\n  --scalar-color-green: #09533a;\n  --scalar-color-red: #aa181d;\n  --scalar-color-yellow: #ab8d2b;\n  --scalar-color-blue: #19689a;\n  --scalar-color-orange: #b26c34;\n  --scalar-color-purple: #4c2191;\n\n  --scalar-button-1: rgba(0, 0, 0, 1);\n  --scalar-button-1-hover: rgba(0, 0, 0, 0.8);\n  --scalar-button-1-color: rgba(255, 255, 255, 0.9);\n}\n.dark-mode {\n  --scalar-color-green: rgba(69, 255, 165, 0.823);\n  --scalar-color-red: #ff8589;\n  --scalar-color-yellow: #ffcc4d;\n  --scalar-color-blue: #6bc1fe;\n  --scalar-color-orange: #f98943;\n  --scalar-color-purple: #b191f9;\n\n  --scalar-button-1: rgba(255, 255, 255, 1);\n  --scalar-button-1-hover: rgba(255, 255, 255, 0.9);\n  --scalar-button-1-color: black;\n}\n/* Custom Theme */\n.dark-mode h2.t-editor__heading,\n.dark-mode .t-editor__page-title h1,\n.dark-mode h1.section-header,\n.dark-mode .markdown h1,\n.dark-mode .markdown h2,\n.dark-mode .markdown h3,\n.dark-mode .markdown h4,\n.dark-mode .markdown h5,\n.dark-mode .markdown h6 {\n  -webkit-text-fill-color: transparent;\n  background-image: linear-gradient(\n    to right bottom,\n    rgb(255, 255, 255) 30%,\n    rgba(255, 255, 255, 0.38)\n  );\n  -webkit-background-clip: text;\n  background-clip: text;\n}\n.light-mode .t-doc__sidebar {\n  --scalar-sidebar-search-background: white;\n}\n.examples .scalar-card-footer {\n  --scalar-background-3: transparent;\n  padding-top: 0;\n}\n.code-languages-background {\n  background: var(--scalar-background-1) !important;\n}\n.code-languages-background:before {\n  box-shadow: inset 0 0 0 2px var(--scalar-border-color);\n  background: linear-gradient(\n    to right top,\n    rgb(211 225 249 / 12%),\n    rgb(209 223 247 / 11%),\n    rgb(223 233 251 / 29%)\n  ) !important;\n}\n.light-mode .code-languages-background:before {\n  background: linear-gradient(\n    to right top,\n    rgb(0 0 0 / 8%),\n    rgb(0 0 0 / 7%),\n    rgb(0 0 0 / 19%)\n  ) !important;\n}\n.code-languages__active .code-languages-background:before {\n  background: var(--scalar-background-1) !important;\n}\n\n.code-languages span {\n  margin-top: 5px !important;\n}\n/* Hero section flare */\n.section-flare-item:nth-of-type(1) {\n  background: #d25019;\n  width: 80vw;\n  height: 500px;\n  margin-top: -150px;\n  border-radius: 50%;\n  filter: blur(100px);\n  z-index: 0;\n}\n.light-mode .section-flare {\n  display: none;\n}\n.section-flare {\n  top: -150px !important;\n  height: 100vh;\n  right: -400px !important;\n  left: initial;\n}\n`, gR = `.light-mode {\n  color-scheme: light;\n  --scalar-color-1: #000000;\n  --scalar-color-2: #000000;\n  --scalar-color-3: #000000;\n  --scalar-color-accent: #645b0f;\n  --scalar-background-1: #ccc9b3;\n  --scalar-background-2: #c2bfaa;\n  --scalar-background-3: #b8b5a1;\n  --scalar-background-accent: #000000;\n\n  --scalar-border-color: rgba(0, 0, 0, 0.2);\n  --scalar-scrollbar-color: rgba(0, 0, 0, 0.18);\n  --scalar-scrollbar-color-active: rgba(0, 0, 0, 0.36);\n  --scalar-lifted-brightness: 1;\n  --scalar-backdrop-brightness: 1;\n\n  --scalar-shadow-1: 0 1px 3px 0 rgba(0, 0, 0, 0.11);\n  --scalar-shadow-2: rgba(0, 0, 0, 0.08) 0px 13px 20px 0px,\n    rgba(0, 0, 0, 0.08) 0px 3px 8px 0px, var(--scalar-border-color) 0px 0 0 1px;\n\n  --scalar-button-1: rgb(49 53 56);\n  --scalar-button-1-color: #fff;\n  --scalar-button-1-hover: rgb(28 31 33);\n\n  --scalar-color-red: #b91c1c;\n  --scalar-color-orange: #a16207;\n  --scalar-color-green: #047857;\n  --scalar-color-blue: #1d4ed8;\n  --scalar-color-orange: #c2410c;\n  --scalar-color-purple: #6d28d9;\n\n  --scalar-code-languages-background-supersede: var(--scalar-background-3);\n  --scalar-code-language-color-supersede: var(--scalar-color-1);\n}\n\n.dark-mode {\n  color-scheme: dark;\n  --scalar-color-1: #fffef3;\n  --scalar-color-2: #fffef3;\n  --scalar-color-3: #fffef3;\n  --scalar-color-accent: #c3b531;\n  --scalar-background-1: #313332;\n  --scalar-background-2: #393b3a;\n  --scalar-background-3: #414342;\n  --scalar-background-accent: #fffef3;\n\n  --scalar-border-color: rgba(255, 255, 255, 0.1);\n  --scalar-scrollbar-color: rgba(255, 255, 255, 0.24);\n  --scalar-scrollbar-color-active: rgba(255, 255, 255, 0.48);\n  --scalar-lifted-brightness: 1.45;\n  --scalar-backdrop-brightness: 0.5;\n\n  --scalar-shadow-1: 0 1px 3px 0 rgba(0, 0, 0, 0.11);\n  --scalar-shadow-2: rgba(15, 15, 15, 0.2) 0px 3px 6px,\n    rgba(15, 15, 15, 0.4) 0px 9px 24px, 0 0 0 1px rgba(255, 255, 255, 0.1);\n\n  --scalar-button-1: #f6f6f6;\n  --scalar-button-1-color: #000;\n  --scalar-button-1-hover: #e7e7e7;\n\n  --scalar-color-green: #00b648;\n  --scalar-color-red: #dc1b19;\n  --scalar-color-yellow: #ffc90d;\n  --scalar-color-blue: #4eb3ec;\n  --scalar-color-orange: #ff8d4d;\n  --scalar-color-purple: #b191f9;\n\n  --scalar-code-languages-background-supersede: var(--scalar-background-3);\n  --scalar-code-language-color-supersede: var(--scalar-color-1);\n}\n\n/* Sidebar */\n.light-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-item-hover-color: currentColor;\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n  --scalar-sidebar-item-active-background: var(--scalar-background-accent);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-color-active: var(--scalar-sidebar-background-1);\n  --scalar-sidebar-search-background: var(--scalar-background-3);\n  --scalar-sidebar-search-border-color: var(--scalar-sidebar-search-background);\n  --scalar-sidebar-search--color: var(--scalar-color-3);\n}\n\n.dark-mode .sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-item-hover-color: currentColor;\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n  --scalar-sidebar-item-active-background: var(--scalar-background-accent);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-color-active: var(--scalar-sidebar-background-1);\n  --scalar-sidebar-search-background: var(--scalar-background-3);\n  --scalar-sidebar-search-border-color: var(--scalar-sidebar-search-background);\n  --scalar-sidebar-search--color: var(--scalar-color-3);\n}\n`, mR = `/* basic theme */\n.light-mode {\n  --scalar-background-1: #fff;\n  --scalar-background-2: #f5f6f8;\n  --scalar-background-3: #eceef1;\n\n  --scalar-color-1: #2a2f45;\n  --scalar-color-2: #757575;\n  --scalar-color-3: #8e8e8e;\n\n  --scalar-color-accent: #5469d4;\n  --scalar-background-accent: #5469d41f;\n\n  --scalar-border-color: rgba(215, 215, 206, 0.5);\n}\n.dark-mode {\n  --scalar-background-1: #15171c;\n  --scalar-background-2: #1c1e24;\n  --scalar-background-3: #22252b;\n\n  --scalar-color-1: #fafafa;\n  --scalar-color-2: #c9ced8;\n  --scalar-color-3: #8c99ad;\n\n  --scalar-color-accent: #5469d4;\n  --scalar-background-accent: #5469d41f;\n\n  --scalar-border-color: rgba(255, 255, 255, 0.12);\n}\n/* Document Sidebar */\n.light-mode .t-doc__sidebar,\n.dark-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n\n  --scalar-sidebar-item-hover-color: currentColor;\n  --scalar-sidebar-item-hover-background: var(--scalar-background-3);\n\n  --scalar-sidebar-item-active-background: var(--scalar-background-accent);\n  --scalar-sidebar-color-active: var(--scalar-color-accent);\n\n  --scalar-sidebar-search-background: var(--scalar-background-1);\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n  --scalar-sidebar-search-border-color: var(--scalar-border-color);\n}\n\n/* advanced */\n.light-mode {\n  --scalar-color-green: #17803d;\n  --scalar-color-red: #e10909;\n  --scalar-color-yellow: #edbe20;\n  --scalar-color-blue: #1763a6;\n  --scalar-color-orange: #e25b09;\n  --scalar-color-purple: #5c3993;\n\n  --scalar-button-1: rgba(0, 0, 0, 1);\n  --scalar-button-1-hover: rgba(0, 0, 0, 0.8);\n  --scalar-button-1-color: rgba(255, 255, 255, 0.9);\n}\n.dark-mode {\n  --scalar-color-green: #30a159;\n  --scalar-color-red: #dc1b19;\n  --scalar-color-yellow: #eec644;\n  --scalar-color-blue: #2b7abf;\n  --scalar-color-orange: #f07528;\n  --scalar-color-purple: #7a59b1;\n\n  --scalar-button-1: rgba(255, 255, 255, 1);\n  --scalar-button-1-hover: rgba(255, 255, 255, 0.9);\n  --scalar-button-1-color: black;\n}\n`, bR = `/* basic theme */\n.light-mode {\n  --scalar-background-1: #f3f3ee;\n  --scalar-background-2: #e8e8e3;\n  --scalar-background-3: #e4e4df;\n  --scalar-border-color: rgba(215, 215, 206, 0.5);\n\n  --scalar-color-1: #2a2f45;\n  --scalar-color-2: #757575;\n  --scalar-color-3: #8e8e8e;\n\n  --scalar-color-accent: #1763a6;\n  --scalar-background-accent: #1f648e1f;\n\n  --scalar-code-language-color-supersede: var(--scalar-color-1);\n  --scalar-code-languages-background-supersede: var(--scalar-background-2);\n}\n.dark-mode {\n  --scalar-background-1: #09090b;\n  --scalar-background-2: #18181b;\n  --scalar-background-3: #2c2c30;\n  --scalar-border-color: rgba(255, 255, 255, 0.12);\n\n  --scalar-color-1: #fafafa;\n  --scalar-color-2: rgb(161, 161, 170);\n  --scalar-color-3: rgba(255, 255, 255, 0.533);\n\n  --scalar-color-accent: #4eb3ec;\n  --scalar-background-accent: #8ab4f81f;\n\n  --scalar-code-language-color-supersede: var(--scalar-color-1);\n  --scalar-code-languages-background-supersede: var(--scalar-background-2);\n}\n/* Document Sidebar */\n.light-mode .t-doc__sidebar,\n.dark-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n  --scalar-sidebar-item-hover-color: currentColor;\n\n  --scalar-sidebar-item-active-background: var(--scalar-background-3);\n  --scalar-sidebar-color-active: var(--scalar-color-1);\n\n  --scalar-sidebar-search-background: var(--scalar-background-1);\n  --scalar-sidebar-search-border-color: var(--scalar-border-color);\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n}\n\n/* advanced */\n.light-mode {\n  --scalar-color-green: #17803d;\n  --scalar-color-red: #e10909;\n  --scalar-color-yellow: #edbe20;\n  --scalar-color-blue: #1763a6;\n  --scalar-color-orange: #e25b09;\n  --scalar-color-purple: #5c3993;\n\n  --scalar-button-1: rgba(0, 0, 0, 1);\n  --scalar-button-1-hover: rgba(0, 0, 0, 0.8);\n  --scalar-button-1-color: rgba(255, 255, 255, 0.9);\n}\n.dark-mode {\n  --scalar-color-green: #30a159;\n  --scalar-color-red: #dc1b19;\n  --scalar-color-yellow: #eec644;\n  --scalar-color-blue: #2b7abf;\n  --scalar-color-orange: #f07528;\n  --scalar-color-purple: #7a59b1;\n\n  --scalar-button-1: rgba(255, 255, 255, 1);\n  --scalar-button-1-hover: rgba(255, 255, 255, 0.9);\n  --scalar-button-1-color: black;\n}\n.dark-mode h2.t-editor__heading,\n.dark-mode .t-editor__page-title h1,\n.dark-mode h1.section-header,\n.dark-mode .markdown h1,\n.dark-mode .markdown h2,\n.dark-mode .markdown h3,\n.dark-mode .markdown h4,\n.dark-mode .markdown h5,\n.dark-mode .markdown h6 {\n  -webkit-text-fill-color: transparent;\n  background-image: linear-gradient(\n    to right bottom,\n    rgb(255, 255, 255) 30%,\n    rgba(255, 255, 255, 0.38)\n  );\n  -webkit-background-clip: text;\n  background-clip: text;\n}\n`, vR = `.light-mode {\n  color-scheme: light;\n  --scalar-color-1: #584c27;\n  --scalar-color-2: #616161;\n  --scalar-color-3: #a89f84;\n  --scalar-color-accent: #b58900;\n  --scalar-background-1: #fdf6e3;\n  --scalar-background-2: #eee8d5;\n  --scalar-background-3: #ddd6c1;\n  --scalar-background-accent: #b589001f;\n\n  --scalar-border-color: #ded8c8;\n  --scalar-scrollbar-color: rgba(0, 0, 0, 0.18);\n  --scalar-scrollbar-color-active: rgba(0, 0, 0, 0.36);\n  --scalar-lifted-brightness: 1;\n  --scalar-backdrop-brightness: 1;\n\n  --scalar-shadow-1: 0 1px 3px 0 rgba(0, 0, 0, 0.11);\n  --scalar-shadow-2: rgba(0, 0, 0, 0.08) 0px 13px 20px 0px,\n    rgba(0, 0, 0, 0.08) 0px 3px 8px 0px, #eeeeed 0px 0 0 1px;\n\n  --scalar-button-1: rgb(49 53 56);\n  --scalar-button-1-color: #fff;\n  --scalar-button-1-hover: rgb(28 31 33);\n\n  --scalar-color-red: #b91c1c;\n  --scalar-color-orange: #a16207;\n  --scalar-color-green: #047857;\n  --scalar-color-blue: #1d4ed8;\n  --scalar-color-orange: #c2410c;\n  --scalar-color-purple: #6d28d9;\n}\n\n.dark-mode {\n  color-scheme: dark;\n  --scalar-color-1: #fff;\n  --scalar-color-2: #cccccc;\n  --scalar-color-3: #6d8890;\n  --scalar-color-accent: #007acc;\n  --scalar-background-1: #00212b;\n  --scalar-background-2: #012b36;\n  --scalar-background-3: #004052;\n  --scalar-background-accent: #015a6f;\n\n  --scalar-border-color: rgba(255, 255, 255, 0.1);\n  --scalar-scrollbar-color: rgba(255, 255, 255, 0.24);\n  --scalar-scrollbar-color-active: rgba(255, 255, 255, 0.48);\n  --scalar-lifted-brightness: 1.45;\n  --scalar-backdrop-brightness: 0.5;\n\n  --scalar-shadow-1: 0 1px 3px 0 rgb(0, 0, 0, 0.1);\n  --scalar-shadow-2: rgba(15, 15, 15, 0.2) 0px 3px 6px,\n    rgba(15, 15, 15, 0.4) 0px 9px 24px, 0 0 0 1px rgba(255, 255, 255, 0.1);\n\n  --scalar-button-1: #f6f6f6;\n  --scalar-button-1-color: #000;\n  --scalar-button-1-hover: #e7e7e7;\n\n  --scalar-color-green: #00b648;\n  --scalar-color-red: #dc1b19;\n  --scalar-color-yellow: #ffc90d;\n  --scalar-color-blue: #4eb3ec;\n  --scalar-color-orange: #ff8d4d;\n  --scalar-color-purple: #b191f9;\n}\n\n/* Sidebar */\n.light-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-item-hover-color: currentColor;\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n  --scalar-sidebar-item-active-background: var(--scalar-background-accent);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-color-active: var(--scalar-color-accent);\n  --scalar-sidebar-search-background: var(--scalar-background-2);\n  --scalar-sidebar-search-border-color: var(--scalar-sidebar-search-background);\n  --scalar-sidebar-search--color: var(--scalar-color-3);\n}\n\n.dark-mode .sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-item-hover-color: currentColor;\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n  --scalar-sidebar-item-active-background: var(--scalar-background-accent);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-color-active: var(--scalar-sidebar-color-1);\n  --scalar-sidebar-search-background: var(--scalar-background-2);\n  --scalar-sidebar-search-border-color: var(--scalar-sidebar-search-background);\n  --scalar-sidebar-search--color: var(--scalar-color-3);\n}\n`, yR = `\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900');\n@import url('https://fonts.googleapis.com/css?family=JetBrains%20Mono');\n/* Inter (--scalar-font) */\n/* JetBrains Mono (--scalar-font-code) */\n`, SR = /* @__PURE__ */ le({\n  __name: \"DefaultFonts\",\n  setup(t) {\n    return (e, n) => (Z(), ke(Zl(\"style\"), { innerHTML: R(yR) }, null, 8, [\"innerHTML\"]));\n  }\n}), wR = /* @__PURE__ */ le({\n  __name: \"ThemeStyles\",\n  props: {\n    id: {},\n    withDefaultFonts: { type: Boolean, default: !0 }\n  },\n  setup(t) {\n    return (e, n) => (Z(), ne(Pe, null, [\n      e.withDefaultFonts ? (Z(), ke(SR, { key: 0 })) : st(\"\", !0),\n      e.id !== \"none\" ? (Z(), ke(Zl(\"style\"), { key: 1 }, {\n        default: ce(() => [\n          He(De(R(QR)(e.id, { layer: \"scalar-theme\" })), 1)\n        ]),\n        _: 1\n      })) : st(\"\", !0)\n    ], 64));\n  }\n});\nfunction kR(t, e) {\n  et(() => {\n    if (!document.body)\n      return;\n    const n = document.querySelector(t);\n    n == null || n.classList.add(e);\n  });\n}\nconst xR = /* @__PURE__ */ le({\n  __name: \"ResetStyles\",\n  setup(t) {\n    const { reset: e } = J1();\n    return kR(\"#headlessui-portal-root\", e), (n, r) => pt(n.$slots, \"default\", { styles: R(e) });\n  }\n}), PR = \"_reset_12vhc_3\", _R = {\n  reset: PR\n}, ct = (t, e) => {\n  const n = t.__vccOpts || t;\n  for (const [r, i] of e)\n    n[r] = i;\n  return n;\n}, TR = {\n  $style: _R\n}, ER = /* @__PURE__ */ ct(xR, [[\"__cssModules\", TR]]), $R = {\n  alternate: dR,\n  default: Tw,\n  moon: gR,\n  purple: mR,\n  solarized: vR,\n  bluePlanet: fR,\n  deepSpace: hR,\n  saturn: bR,\n  kepler: pR,\n  mars: OR\n}, QR = (t, e) => {\n  if (t === \"none\")\n    return \"\";\n  const n = $R[t || \"default\"] ?? Tw;\n  return e != null && e.layer ? `@layer ${e.layer} {\n${n}}` : n;\n};\nfunction CR() {\n  return {\n    showApiClient: !1,\n    activeApiClientEndpointId: \"\",\n    activeItem: {},\n    snippetType: \"javascript\"\n  };\n}\nXn(CR());\nconst AR = (t) => {\n  let e = 0, n = 0, r = 0;\n  if (!(t != null && t.length))\n    return n;\n  for (r = 0; r < t.length; r++)\n    e = t.charCodeAt(r), n = (n << 5) - n + e, n |= 0;\n  return n;\n};\nlet Cb;\ntry {\n  Cb = new RegExp(`(^|(?<!\n))\n+(?!\n|$)`, \"g\");\n} catch {\n  Cb = /\\n+(?!\\n|$)/g;\n}\nconst Ew = {\n  /** Parse and throw if the return value is not an object */\n  parse: (t) => {\n    const e = JSON.parse(t);\n    if (typeof e != \"object\")\n      throw Error(\"Invalid JSON object\");\n    return e;\n  },\n  /** Parse and return a fallback on failure */\n  parseSafe(t, e) {\n    try {\n      return Ew.parse(t);\n    } catch (n) {\n      return typeof e == \"function\" ? e(n) : e;\n    }\n  },\n  stringify: (t) => JSON.stringify(t)\n}, Xh = (t) => typeof t != \"string\" ? !1 : !!Ew.parseSafe(t, !1), RR = {\n  100: {\n    name: \"Continue\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/100\"\n  },\n  101: {\n    name: \"Switching Protocols\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/101\"\n  },\n  102: {\n    name: \"Processing\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/102\"\n  },\n  103: {\n    name: \"Early Hints\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/103\"\n  },\n  200: {\n    name: \"OK\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200\"\n  },\n  201: {\n    name: \"Created\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201\"\n  },\n  202: {\n    name: \"Accepted\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/202\"\n  },\n  203: {\n    name: \"Non-Authoritative Information\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/203\"\n  },\n  204: {\n    name: \"No Content\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204\"\n  },\n  205: {\n    name: \"Reset Content\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/205\"\n  },\n  206: {\n    name: \"Partial Content\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206\"\n  },\n  207: {\n    name: \"Multi-Status\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/207\"\n  },\n  208: {\n    name: \"Already Reported\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/208\"\n  },\n  226: {\n    name: \"IM Used\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/226\"\n  },\n  300: {\n    name: \"Multiple Choices\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/300\"\n  },\n  301: {\n    name: \"Moved Permanently\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301\"\n  },\n  302: {\n    name: \"Found\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302\"\n  },\n  303: {\n    name: \"See Other\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/303\"\n  },\n  304: {\n    name: \"Not Modified\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/304\"\n  },\n  305: {\n    name: \"Use Proxy\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/305\"\n  },\n  306: {\n    name: \"(Unused)\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/306\"\n  },\n  307: {\n    name: \"Temporary Redirect\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307\"\n  },\n  308: {\n    name: \"Permanent Redirect\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308\"\n  },\n  400: {\n    name: \"Bad Request\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400\"\n  },\n  401: {\n    name: \"Unauthorized\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401\"\n  },\n  402: {\n    name: \"Payment Required\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/402\"\n  },\n  403: {\n    name: \"Forbidden\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\"\n  },\n  404: {\n    name: \"Not Found\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\"\n  },\n  405: {\n    name: \"Method Not Allowed\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405\"\n  },\n  406: {\n    name: \"Not Acceptable\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/406\"\n  },\n  407: {\n    name: \"Proxy Authentication Required\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/407\"\n  },\n  408: {\n    name: \"Request Timeout\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408\"\n  },\n  409: {\n    name: \"Conflict\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409\"\n  },\n  410: {\n    name: \"Gone\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/410\"\n  },\n  411: {\n    name: \"Length Required\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/411\"\n  },\n  412: {\n    name: \"Precondition Failed\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/412\"\n  },\n  413: {\n    name: \"Content Too Large\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413\"\n  },\n  414: {\n    name: \"URI Too Long\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/414\"\n  },\n  415: {\n    name: \"Unsupported Media Type\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/415\"\n  },\n  416: {\n    name: \"Range Not Satisfiable\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/416\"\n  },\n  417: {\n    name: \"Expectation Failed\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/417\"\n  },\n  421: {\n    name: \"Misdirected Request\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/421\"\n  },\n  422: {\n    name: \"Unprocessable Content\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422\"\n  },\n  423: {\n    name: \"Locked\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/423\"\n  },\n  424: {\n    name: \"Failed Dependency\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/424\"\n  },\n  425: {\n    name: \"Too Early\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/425\"\n  },\n  426: {\n    name: \"Upgrade Required\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/426\"\n  },\n  428: {\n    name: \"Precondition Required\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/428\"\n  },\n  429: {\n    name: \"Too Many Requests\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429\"\n  },\n  431: {\n    name: \"Request Header Fields Too Large\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/431\"\n  },\n  451: {\n    name: \"Unavailable For Legal Reasons\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/451\"\n  },\n  500: {\n    name: \"Internal Server Error\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\"\n  },\n  501: {\n    name: \"Not Implemented\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/501\"\n  },\n  502: {\n    name: \"Bad Gateway\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502\"\n  },\n  503: {\n    name: \"Service Unavailable\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503\"\n  },\n  504: {\n    name: \"Gateway Timeout\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504\"\n  },\n  505: {\n    name: \"HTTP Version Not Supported\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/505\"\n  },\n  506: {\n    name: \"Variant Also Negotiates\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/506\"\n  },\n  507: {\n    name: \"Insufficient Storage\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/507\"\n  },\n  508: {\n    name: \"Loop Detected\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/508\"\n  },\n  510: {\n    name: \"Not Extended\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/510\"\n  },\n  511: {\n    name: \"Network Authentication Required\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/511\"\n  }\n}, Ab = () => ({}), $w = typeof window < \"u\" ? window.__SCALAR__ ?? Ab() : Ab(), NR = () => ({\n  preferredSecurityScheme: null,\n  // In case the spec has no security and the user would like to add some\n  customSecurity: !1,\n  http: {\n    basic: {\n      username: \"\",\n      password: \"\"\n    },\n    bearer: {\n      token: \"\"\n    }\n  },\n  apiKey: {\n    token: \"\"\n  },\n  oAuth2: {\n    clientId: \"\",\n    scopes: [],\n    accessToken: \"\",\n    state: \"\"\n  }\n}), Qw = Xn(\n  $w[\"useGlobalStore-authentication\"] ?? NR()\n), DR = (t) => Object.assign(Qw, t), Yl = () => ({\n  authentication: Qw,\n  setAuthentication: DR\n}), ZR = () => ({\n  // @ts-ignore\n  operation: {},\n  globalSecurity: []\n}), dl = Xn(ZR()), VR = (t) => {\n  Object.assign(dl, {\n    ...dl,\n    operation: t\n  });\n}, IR = (t) => {\n  Object.assign(dl, {\n    ...dl,\n    globalSecurity: t\n  });\n}, Cw = () => ({\n  openApi: dl,\n  setOperation: VR,\n  setGlobalSecurity: IR\n}), WR = () => ({\n  name: \"\",\n  url: \"\",\n  type: \"GET\",\n  path: \"\",\n  variables: [],\n  headers: [],\n  query: [],\n  body: \"\",\n  formData: []\n}), Bd = Xn({}), Aw = G([]), Mo = G(\"\"), eg = Xn(WR()), MR = (t) => {\n  Bd[t.responseId] = t, Mo.value = t.responseId, Aw.value.unshift(t.responseId);\n}, XR = (t) => {\n  Mo.value = t;\n  const { request: e } = Bd[t], n = JSON.parse(JSON.stringify(e));\n  n.body = JSON.stringify(e.body, null, 2), Object.assign(eg, n);\n}, jR = j(\n  () => Mo.value ? Bd[Mo.value].response : null\n), BR = (t) => {\n  Object.assign(eg, t);\n}, LR = () => {\n  Mo.value = \"\";\n}, UR = G(!0), sr = () => ({\n  readOnly: UR,\n  activeRequest: eg,\n  activeResponse: jR,\n  requestHistory: Bd,\n  requestHistoryOrder: Aw,\n  activeRequestId: Mo,\n  setActiveResponse: XR,\n  resetActiveResponse: LR,\n  addRequestToHistory: MR,\n  setActiveRequest: BR\n}), qR = [\n  {\n    name: \"Accept\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept\"\n  },\n  {\n    name: \"Accept-CH\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-CH\"\n  },\n  {\n    name: \"Accept-CH-Lifetime\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-CH-Lifetime\"\n  },\n  {\n    name: \"Accept-Charset\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Charset\"\n  },\n  {\n    name: \"Accept-Encoding\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\"\n  },\n  {\n    name: \"Accept-Language\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language\"\n  },\n  {\n    name: \"Accept-Patch\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Patch\"\n  },\n  {\n    name: \"Accept-Post\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Post\"\n  },\n  {\n    name: \"Accept-Ranges\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Ranges\"\n  },\n  {\n    name: \"Access-Control-Allow-Credentials\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials\"\n  },\n  {\n    name: \"Access-Control-Allow-Headers\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers\"\n  },\n  {\n    name: \"Access-Control-Allow-Methods\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods\"\n  },\n  {\n    name: \"Access-Control-Allow-Origin\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\"\n  },\n  {\n    name: \"Access-Control-Expose-Headers\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers\"\n  },\n  {\n    name: \"Access-Control-Max-Age\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age\"\n  },\n  {\n    name: \"Access-Control-Request-Headers\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Request-Headers\"\n  },\n  {\n    name: \"Access-Control-Request-Method\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Request-Method\"\n  },\n  {\n    name: \"Age\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Age\"\n  },\n  {\n    name: \"Allow\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Allow\"\n  },\n  {\n    name: \"Alt-Svc\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Alt-Svc\"\n  },\n  {\n    name: \"Alt-Used\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Alt-Used\"\n  },\n  {\n    name: \"Authorization\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization\"\n  },\n  {\n    name: \"Cache-Control\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\"\n  },\n  {\n    name: \"Clear-Site-Data\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Clear-Site-Data\"\n  },\n  {\n    name: \"Connection\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Connection\"\n  },\n  {\n    name: \"Content-Disposition\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition\"\n  },\n  {\n    name: \"Content-DPR\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-DPR\"\n  },\n  {\n    name: \"Content-Encoding\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\"\n  },\n  {\n    name: \"Content-Language\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Language\"\n  },\n  {\n    name: \"Content-Length\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length\"\n  },\n  {\n    name: \"Content-Location\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Location\"\n  },\n  {\n    name: \"Content-Range\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range\"\n  },\n  {\n    name: \"Content-Security-Policy\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\"\n  },\n  {\n    name: \"Content-Security-Policy-Report-Only\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only\"\n  },\n  {\n    name: \"Content-Type\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\"\n  },\n  {\n    name: \"Cookie\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cookie\"\n  },\n  {\n    name: \"Critical-CH\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Critical-CH\"\n  },\n  {\n    name: \"Cross-Origin-Embedder-Policy\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\"\n  },\n  {\n    name: \"Cross-Origin-Opener-Policy\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\"\n  },\n  {\n    name: \"Cross-Origin-Resource-Policy\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy\"\n  },\n  {\n    name: \"Date\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date\"\n  },\n  {\n    name: \"Device-Memory\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Device-Memory\"\n  },\n  {\n    name: \"Digest\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Digest\"\n  },\n  {\n    name: \"DNT\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/DNT\"\n  },\n  {\n    name: \"Downlink\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Downlink\"\n  },\n  {\n    name: \"DPR\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/DPR\"\n  },\n  {\n    name: \"Early-Data\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Early-Data\"\n  },\n  {\n    name: \"ECT\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ECT\"\n  },\n  {\n    name: \"ETag\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag\"\n  },\n  {\n    name: \"Expect\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect\"\n  },\n  {\n    name: \"Expect-CT\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT\"\n  },\n  {\n    name: \"Expires\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires\"\n  },\n  {\n    name: \"Forwarded\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Forwarded\"\n  },\n  {\n    name: \"From\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/From\"\n  },\n  {\n    name: \"Host\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host\"\n  },\n  {\n    name: \"If-Match\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match\"\n  },\n  {\n    name: \"If-Modified-Since\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since\"\n  },\n  {\n    name: \"If-None-Match\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match\"\n  },\n  {\n    name: \"If-Range\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Range\"\n  },\n  {\n    name: \"If-Unmodified-Since\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Unmodified-Since\"\n  },\n  {\n    name: \"Keep-Alive\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Keep-Alive\"\n  },\n  {\n    name: \"Large-Allocation\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Large-Allocation\"\n  },\n  {\n    name: \"Last-Modified\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified\"\n  },\n  {\n    name: \"Link\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link\"\n  },\n  {\n    name: \"Location\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Location\"\n  },\n  {\n    name: \"Max-Forwards\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Max-Forwards\"\n  },\n  {\n    name: \"NEL\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/NEL\"\n  },\n  {\n    name: \"Origin\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\"\n  },\n  {\n    name: \"Permissions-Policy\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\"\n  },\n  {\n    name: \"Pragma\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Pragma\"\n  },\n  {\n    name: \"Proxy-Authenticate\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Proxy-Authenticate\"\n  },\n  {\n    name: \"Proxy-Authorization\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Proxy-Authorization\"\n  },\n  {\n    name: \"Range\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range\"\n  },\n  {\n    name: \"Referer\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer\"\n  },\n  {\n    name: \"Referrer-Policy\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\"\n  },\n  {\n    name: \"Retry-After\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\"\n  },\n  {\n    name: \"RTT\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/RTT\"\n  },\n  {\n    name: \"Save-Data\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Save-Data\"\n  },\n  {\n    name: \"Sec-CH-Prefers-Reduced-Motion\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-Prefers-Reduced-Motion\"\n  },\n  {\n    name: \"Sec-CH-Prefers-Reduced-Transparency\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-Prefers-Reduced-Transparency\"\n  },\n  {\n    name: \"Sec-CH-UA\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA\"\n  },\n  {\n    name: \"Sec-CH-UA-Arch\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Arch\"\n  },\n  {\n    name: \"Sec-CH-UA-Bitness\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Bitness\"\n  },\n  {\n    name: \"Sec-CH-UA-Full-Version\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Full-Version\"\n  },\n  {\n    name: \"Sec-CH-UA-Full-Version-List\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Full-Version-List\"\n  },\n  {\n    name: \"Sec-CH-UA-Mobile\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Mobile\"\n  },\n  {\n    name: \"Sec-CH-UA-Model\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Model\"\n  },\n  {\n    name: \"Sec-CH-UA-Platform\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Platform\"\n  },\n  {\n    name: \"Sec-CH-UA-Platform-Version\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Platform-Version\"\n  },\n  {\n    name: \"Sec-Fetch-Dest\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Dest\"\n  },\n  {\n    name: \"Sec-Fetch-Mode\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Mode\"\n  },\n  {\n    name: \"Sec-Fetch-Site\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Site\"\n  },\n  {\n    name: \"Sec-Fetch-User\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-User\"\n  },\n  {\n    name: \"Sec-GPC\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-GPC\"\n  },\n  {\n    name: \"Sec-Purpose\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Purpose\"\n  },\n  {\n    name: \"Sec-WebSocket-Accept\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-WebSocket-Accept\"\n  },\n  {\n    name: \"Server\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server\"\n  },\n  {\n    name: \"Server-Timing\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server-Timing\"\n  },\n  {\n    name: \"Service-Worker-Navigation-Preload\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Service-Worker-Navigation-Preload\"\n  },\n  {\n    name: \"Set-Cookie\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie\"\n  },\n  {\n    name: \"SourceMap\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/SourceMap\"\n  },\n  {\n    name: \"Strict-Transport-Security\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\"\n  },\n  {\n    name: \"TE\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/TE\"\n  },\n  {\n    name: \"Timing-Allow-Origin\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Timing-Allow-Origin\"\n  },\n  {\n    name: \"Tk\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Tk\"\n  },\n  {\n    name: \"Trailer\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Trailer\"\n  },\n  {\n    name: \"Transfer-Encoding\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding\"\n  },\n  {\n    name: \"Upgrade\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade\"\n  },\n  {\n    name: \"Upgrade-Insecure-Requests\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade-Insecure-Requests\"\n  },\n  {\n    name: \"User-Agent\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent\"\n  },\n  {\n    name: \"Vary\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary\"\n  },\n  {\n    name: \"Via\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Via\"\n  },\n  {\n    name: \"Viewport-Width\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Viewport-Width\"\n  },\n  {\n    name: \"Want-Digest\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Want-Digest\"\n  },\n  {\n    name: \"Warning\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Warning\"\n  },\n  {\n    name: \"Width\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Width\"\n  },\n  {\n    name: \"WWW-Authenticate\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate\"\n  },\n  {\n    name: \"X-Content-Type-Options\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\"\n  },\n  {\n    name: \"X-DNS-Prefetch-Control\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control\"\n  },\n  {\n    name: \"Non-standard\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Non-standard\"\n  },\n  {\n    name: \"X-Forwarded-For\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For\"\n  },\n  {\n    name: \"Non-standard\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Non-standard\"\n  },\n  {\n    name: \"X-Forwarded-Host\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host\"\n  },\n  {\n    name: \"Non-standard\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Non-standard\"\n  },\n  {\n    name: \"X-Forwarded-Proto\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Proto\"\n  },\n  {\n    name: \"Non-standard\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Non-standard\"\n  },\n  {\n    name: \"X-Frame-Options\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\"\n  },\n  {\n    name: \"X-XSS-Protection\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\"\n  },\n  {\n    name: \"Cf-Cache-Status\",\n    url: \"https://developers.cloudflare.com/cache/concepts/default-cache-behavior/#cloudflare-cache-responses\"\n  },\n  {\n    name: \"Cf-Ray\",\n    url: \"https://developers.cloudflare.com/fundamentals/get-started/reference/http-request-headers/#cf-ray\"\n  },\n  {\n    name: \"Report-To\",\n    url: \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to\"\n  }\n], YR = [\n  \"GET\",\n  \"POST\",\n  \"PUT\",\n  \"HEAD\",\n  \"DELETE\",\n  \"PATCH\",\n  \"OPTIONS\",\n  \"CONNECT\",\n  \"TRACE\"\n];\nfunction jh(t) {\n  return YR.includes(t);\n}\nconst zR = {\n  POST: \"var(--scalar-color-green)\",\n  DELETE: \"var(--scalar-color-red)\",\n  PATCH: \"var(--scalar-color-yellow)\",\n  GET: \"var(--scalar-color-blue)\",\n  PUT: \"var(--scalar-color-orange)\",\n  OPTIONS: \"var(--scalar-color-purple)\",\n  HEAD: \"var(--scalar-color-2)\",\n  CONNECT: \"var(--scalar-color-2)\",\n  TRACE: \"var(--scalar-color-2)\"\n}, HR = {\n  POST: \"POST\",\n  DELETE: \"DEL\",\n  PATCH: \"PATCH\",\n  GET: \"GET\",\n  PUT: \"PUT\",\n  OPTIONS: \"OPTS\",\n  HEAD: \"HEAD\",\n  CONNECT: \"CONN\",\n  TRACE: \"TRACE\"\n}, FR = /* @__PURE__ */ le({\n  __name: \"HttpMethod\",\n  props: {\n    as: {},\n    property: {},\n    short: { type: Boolean },\n    method: {}\n  },\n  setup(t) {\n    const e = t, n = j(() => e.method.trim().toUpperCase()), r = j(() => jh(n.value) ? HR[n.value] : n.value.slice(0, 4)), i = j(() => jh(n.value) ? zR[n.value] : \"var(--scalar-color-ghost)\");\n    return (s, o) => (Z(), ke(Zl(s.as ?? \"span\"), {\n      style: Br({ [s.property || \"color\"]: i.value })\n    }, {\n      default: ce(() => [\n        pt(s.$slots, \"default\", my(EO({ normalized: n.value, abbreviated: r.value, color: i.value })), () => [\n          He(De(s.short ? r.value : n.value), 1)\n        ])\n      ]),\n      _: 3\n    }, 8, [\"style\"]));\n  }\n});\nclass Fe {\n  /**\n  Get the line description around the given position.\n  */\n  lineAt(e) {\n    if (e < 0 || e > this.length)\n      throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);\n    return this.lineInner(e, !1, 1, 0);\n  }\n  /**\n  Get the description for the given (1-based) line number.\n  */\n  line(e) {\n    if (e < 1 || e > this.lines)\n      throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);\n    return this.lineInner(e, !0, 1, 0);\n  }\n  /**\n  Replace a range of the text with the given content.\n  */\n  replace(e, n, r) {\n    [e, n] = Xo(this, e, n);\n    let i = [];\n    return this.decompose(\n      0,\n      e,\n      i,\n      2\n      /* Open.To */\n    ), r.length && r.decompose(\n      0,\n      r.length,\n      i,\n      3\n      /* Open.To */\n    ), this.decompose(\n      n,\n      this.length,\n      i,\n      1\n      /* Open.From */\n    ), Qr.from(i, this.length - (n - e) + r.length);\n  }\n  /**\n  Append another document to this one.\n  */\n  append(e) {\n    return this.replace(this.length, this.length, e);\n  }\n  /**\n  Retrieve the text between the given points.\n  */\n  slice(e, n = this.length) {\n    [e, n] = Xo(this, e, n);\n    let r = [];\n    return this.decompose(e, n, r, 0), Qr.from(r, n - e);\n  }\n  /**\n  Test whether this text is equal to another instance.\n  */\n  eq(e) {\n    if (e == this)\n      return !0;\n    if (e.length != this.length || e.lines != this.lines)\n      return !1;\n    let n = this.scanIdentical(e, 1), r = this.length - this.scanIdentical(e, -1), i = new qa(this), s = new qa(e);\n    for (let o = n, a = n; ; ) {\n      if (i.next(o), s.next(o), o = 0, i.lineBreak != s.lineBreak || i.done != s.done || i.value != s.value)\n        return !1;\n      if (a += i.value.length, i.done || a >= r)\n        return !0;\n    }\n  }\n  /**\n  Iterate over the text. When `dir` is `-1`, iteration happens\n  from end to start. This will return lines and the breaks between\n  them as separate strings.\n  */\n  iter(e = 1) {\n    return new qa(this, e);\n  }\n  /**\n  Iterate over a range of the text. When `from` > `to`, the\n  iterator will run in reverse.\n  */\n  iterRange(e, n = this.length) {\n    return new Rw(this, e, n);\n  }\n  /**\n  Return a cursor that iterates over the given range of lines,\n  _without_ returning the line breaks between, and yielding empty\n  strings for empty lines.\n  \n  When `from` and `to` are given, they should be 1-based line numbers.\n  */\n  iterLines(e, n) {\n    let r;\n    if (e == null)\n      r = this.iter();\n    else {\n      n == null && (n = this.lines + 1);\n      let i = this.line(e).from;\n      r = this.iterRange(i, Math.max(i, n == this.lines + 1 ? this.length : n <= 1 ? 0 : this.line(n - 1).to));\n    }\n    return new Nw(r);\n  }\n  /**\n  Return the document as a string, using newline characters to\n  separate lines.\n  */\n  toString() {\n    return this.sliceString(0);\n  }\n  /**\n  Convert the document to an array of lines (which can be\n  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).\n  */\n  toJSON() {\n    let e = [];\n    return this.flatten(e), e;\n  }\n  /**\n  @internal\n  */\n  constructor() {\n  }\n  /**\n  Create a `Text` instance for the given array of lines.\n  */\n  static of(e) {\n    if (e.length == 0)\n      throw new RangeError(\"A document must have at least one line\");\n    return e.length == 1 && !e[0] ? Fe.empty : e.length <= 32 ? new wt(e) : Qr.from(wt.split(e, []));\n  }\n}\nclass wt extends Fe {\n  constructor(e, n = GR(e)) {\n    super(), this.text = e, this.length = n;\n  }\n  get lines() {\n    return this.text.length;\n  }\n  get children() {\n    return null;\n  }\n  lineInner(e, n, r, i) {\n    for (let s = 0; ; s++) {\n      let o = this.text[s], a = i + o.length;\n      if ((n ? r : a) >= e)\n        return new KR(i, a, r, o);\n      i = a + 1, r++;\n    }\n  }\n  decompose(e, n, r, i) {\n    let s = e <= 0 && n >= this.length ? this : new wt(Rb(this.text, e, n), Math.min(n, this.length) - Math.max(0, e));\n    if (i & 1) {\n      let o = r.pop(), a = tu(s.text, o.text.slice(), 0, s.length);\n      if (a.length <= 32)\n        r.push(new wt(a, o.length + s.length));\n      else {\n        let l = a.length >> 1;\n        r.push(new wt(a.slice(0, l)), new wt(a.slice(l)));\n      }\n    } else\n      r.push(s);\n  }\n  replace(e, n, r) {\n    if (!(r instanceof wt))\n      return super.replace(e, n, r);\n    [e, n] = Xo(this, e, n);\n    let i = tu(this.text, tu(r.text, Rb(this.text, 0, e)), n), s = this.length + r.length - (n - e);\n    return i.length <= 32 ? new wt(i, s) : Qr.from(wt.split(i, []), s);\n  }\n  sliceString(e, n = this.length, r = `\n`) {\n    [e, n] = Xo(this, e, n);\n    let i = \"\";\n    for (let s = 0, o = 0; s <= n && o < this.text.length; o++) {\n      let a = this.text[o], l = s + a.length;\n      s > e && o && (i += r), e < l && n > s && (i += a.slice(Math.max(0, e - s), n - s)), s = l + 1;\n    }\n    return i;\n  }\n  flatten(e) {\n    for (let n of this.text)\n      e.push(n);\n  }\n  scanIdentical() {\n    return 0;\n  }\n  static split(e, n) {\n    let r = [], i = -1;\n    for (let s of e)\n      r.push(s), i += s.length + 1, r.length == 32 && (n.push(new wt(r, i)), r = [], i = -1);\n    return i > -1 && n.push(new wt(r, i)), n;\n  }\n}\nclass Qr extends Fe {\n  constructor(e, n) {\n    super(), this.children = e, this.length = n, this.lines = 0;\n    for (let r of e)\n      this.lines += r.lines;\n  }\n  lineInner(e, n, r, i) {\n    for (let s = 0; ; s++) {\n      let o = this.children[s], a = i + o.length, l = r + o.lines - 1;\n      if ((n ? l : a) >= e)\n        return o.lineInner(e, n, r, i);\n      i = a + 1, r = l + 1;\n    }\n  }\n  decompose(e, n, r, i) {\n    for (let s = 0, o = 0; o <= n && s < this.children.length; s++) {\n      let a = this.children[s], l = o + a.length;\n      if (e <= l && n >= o) {\n        let c = i & ((o <= e ? 1 : 0) | (l >= n ? 2 : 0));\n        o >= e && l <= n && !c ? r.push(a) : a.decompose(e - o, n - o, r, c);\n      }\n      o = l + 1;\n    }\n  }\n  replace(e, n, r) {\n    if ([e, n] = Xo(this, e, n), r.lines < this.lines)\n      for (let i = 0, s = 0; i < this.children.length; i++) {\n        let o = this.children[i], a = s + o.length;\n        if (e >= s && n <= a) {\n          let l = o.replace(e - s, n - s, r), c = this.lines - o.lines + l.lines;\n          if (l.lines < c >> 4 && l.lines > c >> 6) {\n            let u = this.children.slice();\n            return u[i] = l, new Qr(u, this.length - (n - e) + r.length);\n          }\n          return super.replace(s, a, l);\n        }\n        s = a + 1;\n      }\n    return super.replace(e, n, r);\n  }\n  sliceString(e, n = this.length, r = `\n`) {\n    [e, n] = Xo(this, e, n);\n    let i = \"\";\n    for (let s = 0, o = 0; s < this.children.length && o <= n; s++) {\n      let a = this.children[s], l = o + a.length;\n      o > e && s && (i += r), e < l && n > o && (i += a.sliceString(e - o, n - o, r)), o = l + 1;\n    }\n    return i;\n  }\n  flatten(e) {\n    for (let n of this.children)\n      n.flatten(e);\n  }\n  scanIdentical(e, n) {\n    if (!(e instanceof Qr))\n      return 0;\n    let r = 0, [i, s, o, a] = n > 0 ? [0, 0, this.children.length, e.children.length] : [this.children.length - 1, e.children.length - 1, -1, -1];\n    for (; ; i += n, s += n) {\n      if (i == o || s == a)\n        return r;\n      let l = this.children[i], c = e.children[s];\n      if (l != c)\n        return r + l.scanIdentical(c, n);\n      r += l.length + 1;\n    }\n  }\n  static from(e, n = e.reduce((r, i) => r + i.length + 1, -1)) {\n    let r = 0;\n    for (let h of e)\n      r += h.lines;\n    if (r < 32) {\n      let h = [];\n      for (let p of e)\n        p.flatten(h);\n      return new wt(h, n);\n    }\n    let i = Math.max(\n      32,\n      r >> 5\n      /* Tree.BranchShift */\n    ), s = i << 1, o = i >> 1, a = [], l = 0, c = -1, u = [];\n    function d(h) {\n      let p;\n      if (h.lines > s && h instanceof Qr)\n        for (let O of h.children)\n          d(O);\n      else\n        h.lines > o && (l > o || !l) ? (f(), a.push(h)) : h instanceof wt && l && (p = u[u.length - 1]) instanceof wt && h.lines + p.lines <= 32 ? (l += h.lines, c += h.length + 1, u[u.length - 1] = new wt(p.text.concat(h.text), p.length + 1 + h.length)) : (l + h.lines > i && f(), l += h.lines, c += h.length + 1, u.push(h));\n    }\n    function f() {\n      l != 0 && (a.push(u.length == 1 ? u[0] : Qr.from(u, c)), c = -1, l = u.length = 0);\n    }\n    for (let h of e)\n      d(h);\n    return f(), a.length == 1 ? a[0] : new Qr(a, n);\n  }\n}\nFe.empty = /* @__PURE__ */ new wt([\"\"], 0);\nfunction GR(t) {\n  let e = -1;\n  for (let n of t)\n    e += n.length + 1;\n  return e;\n}\nfunction tu(t, e, n = 0, r = 1e9) {\n  for (let i = 0, s = 0, o = !0; s < t.length && i <= r; s++) {\n    let a = t[s], l = i + a.length;\n    l >= n && (l > r && (a = a.slice(0, r - i)), i < n && (a = a.slice(n - i)), o ? (e[e.length - 1] += a, o = !1) : e.push(a)), i = l + 1;\n  }\n  return e;\n}\nfunction Rb(t, e, n) {\n  return tu(t, [\"\"], e, n);\n}\nclass qa {\n  constructor(e, n = 1) {\n    this.dir = n, this.done = !1, this.lineBreak = !1, this.value = \"\", this.nodes = [e], this.offsets = [n > 0 ? 1 : (e instanceof wt ? e.text.length : e.children.length) << 1];\n  }\n  nextInner(e, n) {\n    for (this.done = this.lineBreak = !1; ; ) {\n      let r = this.nodes.length - 1, i = this.nodes[r], s = this.offsets[r], o = s >> 1, a = i instanceof wt ? i.text.length : i.children.length;\n      if (o == (n > 0 ? a : 0)) {\n        if (r == 0)\n          return this.done = !0, this.value = \"\", this;\n        n > 0 && this.offsets[r - 1]++, this.nodes.pop(), this.offsets.pop();\n      } else if ((s & 1) == (n > 0 ? 0 : 1)) {\n        if (this.offsets[r] += n, e == 0)\n          return this.lineBreak = !0, this.value = `\n`, this;\n        e--;\n      } else if (i instanceof wt) {\n        let l = i.text[o + (n < 0 ? -1 : 0)];\n        if (this.offsets[r] += n, l.length > Math.max(0, e))\n          return this.value = e == 0 ? l : n > 0 ? l.slice(e) : l.slice(0, l.length - e), this;\n        e -= l.length;\n      } else {\n        let l = i.children[o + (n < 0 ? -1 : 0)];\n        e > l.length ? (e -= l.length, this.offsets[r] += n) : (n < 0 && this.offsets[r]--, this.nodes.push(l), this.offsets.push(n > 0 ? 1 : (l instanceof wt ? l.text.length : l.children.length) << 1));\n      }\n    }\n  }\n  next(e = 0) {\n    return e < 0 && (this.nextInner(-e, -this.dir), e = this.value.length), this.nextInner(e, this.dir);\n  }\n}\nclass Rw {\n  constructor(e, n, r) {\n    this.value = \"\", this.done = !1, this.cursor = new qa(e, n > r ? -1 : 1), this.pos = n > r ? e.length : 0, this.from = Math.min(n, r), this.to = Math.max(n, r);\n  }\n  nextInner(e, n) {\n    if (n < 0 ? this.pos <= this.from : this.pos >= this.to)\n      return this.value = \"\", this.done = !0, this;\n    e += Math.max(0, n < 0 ? this.pos - this.to : this.from - this.pos);\n    let r = n < 0 ? this.pos - this.from : this.to - this.pos;\n    e > r && (e = r), r -= e;\n    let { value: i } = this.cursor.next(e);\n    return this.pos += (i.length + e) * n, this.value = i.length <= r ? i : n < 0 ? i.slice(i.length - r) : i.slice(0, r), this.done = !this.value, this;\n  }\n  next(e = 0) {\n    return e < 0 ? e = Math.max(e, this.from - this.pos) : e > 0 && (e = Math.min(e, this.to - this.pos)), this.nextInner(e, this.cursor.dir);\n  }\n  get lineBreak() {\n    return this.cursor.lineBreak && this.value != \"\";\n  }\n}\nclass Nw {\n  constructor(e) {\n    this.inner = e, this.afterBreak = !0, this.value = \"\", this.done = !1;\n  }\n  next(e = 0) {\n    let { done: n, lineBreak: r, value: i } = this.inner.next(e);\n    return n && this.afterBreak ? (this.value = \"\", this.afterBreak = !1) : n ? (this.done = !0, this.value = \"\") : r ? this.afterBreak ? this.value = \"\" : (this.afterBreak = !0, this.next()) : (this.value = i, this.afterBreak = !1), this;\n  }\n  get lineBreak() {\n    return !1;\n  }\n}\ntypeof Symbol < \"u\" && (Fe.prototype[Symbol.iterator] = function() {\n  return this.iter();\n}, qa.prototype[Symbol.iterator] = Rw.prototype[Symbol.iterator] = Nw.prototype[Symbol.iterator] = function() {\n  return this;\n});\nclass KR {\n  /**\n  @internal\n  */\n  constructor(e, n, r, i) {\n    this.from = e, this.to = n, this.number = r, this.text = i;\n  }\n  /**\n  The length of the line (not including any line break after it).\n  */\n  get length() {\n    return this.to - this.from;\n  }\n}\nfunction Xo(t, e, n) {\n  return e = Math.max(0, Math.min(t.length, e)), [e, Math.max(e, Math.min(t.length, n))];\n}\nlet Po = /* @__PURE__ */ \"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o\".split(\",\").map((t) => t ? parseInt(t, 36) : 1);\nfor (let t = 1; t < Po.length; t++)\n  Po[t] += Po[t - 1];\nfunction JR(t) {\n  for (let e = 1; e < Po.length; e += 2)\n    if (Po[e] > t)\n      return Po[e - 1] <= t;\n  return !1;\n}\nfunction Nb(t) {\n  return t >= 127462 && t <= 127487;\n}\nconst Db = 8205;\nfunction Rr(t, e, n = !0, r = !0) {\n  return (n ? Dw : eN)(t, e, r);\n}\nfunction Dw(t, e, n) {\n  if (e == t.length)\n    return e;\n  e && Zw(t.charCodeAt(e)) && Vw(t.charCodeAt(e - 1)) && e--;\n  let r = nn(t, e);\n  for (e += cr(r); e < t.length; ) {\n    let i = nn(t, e);\n    if (r == Db || i == Db || n && JR(i))\n      e += cr(i), r = i;\n    else if (Nb(i)) {\n      let s = 0, o = e - 2;\n      for (; o >= 0 && Nb(nn(t, o)); )\n        s++, o -= 2;\n      if (s % 2 == 0)\n        break;\n      e += 2;\n    } else\n      break;\n  }\n  return e;\n}\nfunction eN(t, e, n) {\n  for (; e > 0; ) {\n    let r = Dw(t, e - 2, n);\n    if (r < e)\n      return r;\n    e--;\n  }\n  return 0;\n}\nfunction Zw(t) {\n  return t >= 56320 && t < 57344;\n}\nfunction Vw(t) {\n  return t >= 55296 && t < 56320;\n}\nfunction nn(t, e) {\n  let n = t.charCodeAt(e);\n  if (!Vw(n) || e + 1 == t.length)\n    return n;\n  let r = t.charCodeAt(e + 1);\n  return Zw(r) ? (n - 55296 << 10) + (r - 56320) + 65536 : n;\n}\nfunction Iw(t) {\n  return t <= 65535 ? String.fromCharCode(t) : (t -= 65536, String.fromCharCode((t >> 10) + 55296, (t & 1023) + 56320));\n}\nfunction cr(t) {\n  return t < 65536 ? 1 : 2;\n}\nconst Bh = /\\r\\n?|\\n/;\nvar on = /* @__PURE__ */ function(t) {\n  return t[t.Simple = 0] = \"Simple\", t[t.TrackDel = 1] = \"TrackDel\", t[t.TrackBefore = 2] = \"TrackBefore\", t[t.TrackAfter = 3] = \"TrackAfter\", t;\n}(on || (on = {}));\nclass ii {\n  // Sections are encoded as pairs of integers. The first is the\n  // length in the current document, and the second is -1 for\n  // unaffected sections, and the length of the replacement content\n  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,\n  // 0), and a replacement two positive numbers.\n  /**\n  @internal\n  */\n  constructor(e) {\n    this.sections = e;\n  }\n  /**\n  The length of the document before the change.\n  */\n  get length() {\n    let e = 0;\n    for (let n = 0; n < this.sections.length; n += 2)\n      e += this.sections[n];\n    return e;\n  }\n  /**\n  The length of the document after the change.\n  */\n  get newLength() {\n    let e = 0;\n    for (let n = 0; n < this.sections.length; n += 2) {\n      let r = this.sections[n + 1];\n      e += r < 0 ? this.sections[n] : r;\n    }\n    return e;\n  }\n  /**\n  False when there are actual changes in this set.\n  */\n  get empty() {\n    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;\n  }\n  /**\n  Iterate over the unchanged parts left by these changes. `posA`\n  provides the position of the range in the old document, `posB`\n  the new position in the changed document.\n  */\n  iterGaps(e) {\n    for (let n = 0, r = 0, i = 0; n < this.sections.length; ) {\n      let s = this.sections[n++], o = this.sections[n++];\n      o < 0 ? (e(r, i, s), i += s) : i += o, r += s;\n    }\n  }\n  /**\n  Iterate over the ranges changed by these changes. (See\n  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a\n  variant that also provides you with the inserted text.)\n  `fromA`/`toA` provides the extent of the change in the starting\n  document, `fromB`/`toB` the extent of the replacement in the\n  changed document.\n  \n  When `individual` is true, adjacent changes (which are kept\n  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are\n  reported separately.\n  */\n  iterChangedRanges(e, n = !1) {\n    Lh(this, e, n);\n  }\n  /**\n  Get a description of the inverted form of these changes.\n  */\n  get invertedDesc() {\n    let e = [];\n    for (let n = 0; n < this.sections.length; ) {\n      let r = this.sections[n++], i = this.sections[n++];\n      i < 0 ? e.push(r, i) : e.push(i, r);\n    }\n    return new ii(e);\n  }\n  /**\n  Compute the combined effect of applying another set of changes\n  after this one. The length of the document after this set should\n  match the length before `other`.\n  */\n  composeDesc(e) {\n    return this.empty ? e : e.empty ? this : Ww(this, e);\n  }\n  /**\n  Map this description, which should start with the same document\n  as `other`, over another set of changes, so that it can be\n  applied after it. When `before` is true, map as if the changes\n  in `other` happened before the ones in `this`.\n  */\n  mapDesc(e, n = !1) {\n    return e.empty ? this : Uh(this, e, n);\n  }\n  mapPos(e, n = -1, r = on.Simple) {\n    let i = 0, s = 0;\n    for (let o = 0; o < this.sections.length; ) {\n      let a = this.sections[o++], l = this.sections[o++], c = i + a;\n      if (l < 0) {\n        if (c > e)\n          return s + (e - i);\n        s += a;\n      } else {\n        if (r != on.Simple && c >= e && (r == on.TrackDel && i < e && c > e || r == on.TrackBefore && i < e || r == on.TrackAfter && c > e))\n          return null;\n        if (c > e || c == e && n < 0 && !a)\n          return e == i || n < 0 ? s : s + l;\n        s += l;\n      }\n      i = c;\n    }\n    if (e > i)\n      throw new RangeError(`Position ${e} is out of range for changeset of length ${i}`);\n    return s;\n  }\n  /**\n  Check whether these changes touch a given range. When one of the\n  changes entirely covers the range, the string `\"cover\"` is\n  returned.\n  */\n  touchesRange(e, n = e) {\n    for (let r = 0, i = 0; r < this.sections.length && i <= n; ) {\n      let s = this.sections[r++], o = this.sections[r++], a = i + s;\n      if (o >= 0 && i <= n && a >= e)\n        return i < e && a > n ? \"cover\" : !0;\n      i = a;\n    }\n    return !1;\n  }\n  /**\n  @internal\n  */\n  toString() {\n    let e = \"\";\n    for (let n = 0; n < this.sections.length; ) {\n      let r = this.sections[n++], i = this.sections[n++];\n      e += (e ? \" \" : \"\") + r + (i >= 0 ? \":\" + i : \"\");\n    }\n    return e;\n  }\n  /**\n  Serialize this change desc to a JSON-representable value.\n  */\n  toJSON() {\n    return this.sections;\n  }\n  /**\n  Create a change desc from its JSON representation (as produced\n  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).\n  */\n  static fromJSON(e) {\n    if (!Array.isArray(e) || e.length % 2 || e.some((n) => typeof n != \"number\"))\n      throw new RangeError(\"Invalid JSON representation of ChangeDesc\");\n    return new ii(e);\n  }\n  /**\n  @internal\n  */\n  static create(e) {\n    return new ii(e);\n  }\n}\nclass Mt extends ii {\n  constructor(e, n) {\n    super(e), this.inserted = n;\n  }\n  /**\n  Apply the changes to a document, returning the modified\n  document.\n  */\n  apply(e) {\n    if (this.length != e.length)\n      throw new RangeError(\"Applying change set to a document with the wrong length\");\n    return Lh(this, (n, r, i, s, o) => e = e.replace(i, i + (r - n), o), !1), e;\n  }\n  mapDesc(e, n = !1) {\n    return Uh(this, e, n, !0);\n  }\n  /**\n  Given the document as it existed _before_ the changes, return a\n  change set that represents the inverse of this set, which could\n  be used to go from the document created by the changes back to\n  the document as it existed before the changes.\n  */\n  invert(e) {\n    let n = this.sections.slice(), r = [];\n    for (let i = 0, s = 0; i < n.length; i += 2) {\n      let o = n[i], a = n[i + 1];\n      if (a >= 0) {\n        n[i] = a, n[i + 1] = o;\n        let l = i >> 1;\n        for (; r.length < l; )\n          r.push(Fe.empty);\n        r.push(o ? e.slice(s, s + o) : Fe.empty);\n      }\n      s += o;\n    }\n    return new Mt(n, r);\n  }\n  /**\n  Combine two subsequent change sets into a single set. `other`\n  must start in the document produced by `this`. If `this` goes\n  `docA` → `docB` and `other` represents `docB` → `docC`, the\n  returned value will represent the change `docA` → `docC`.\n  */\n  compose(e) {\n    return this.empty ? e : e.empty ? this : Ww(this, e, !0);\n  }\n  /**\n  Given another change set starting in the same document, maps this\n  change set over the other, producing a new change set that can be\n  applied to the document produced by applying `other`. When\n  `before` is `true`, order changes as if `this` comes before\n  `other`, otherwise (the default) treat `other` as coming first.\n  \n  Given two changes `A` and `B`, `A.compose(B.map(A))` and\n  `B.compose(A.map(B, true))` will produce the same document. This\n  provides a basic form of [operational\n  transformation](https://en.wikipedia.org/wiki/Operational_transformation),\n  and can be used for collaborative editing.\n  */\n  map(e, n = !1) {\n    return e.empty ? this : Uh(this, e, n, !0);\n  }\n  /**\n  Iterate over the changed ranges in the document, calling `f` for\n  each, with the range in the original document (`fromA`-`toA`)\n  and the range that replaces it in the new document\n  (`fromB`-`toB`).\n  \n  When `individual` is true, adjacent changes are reported\n  separately.\n  */\n  iterChanges(e, n = !1) {\n    Lh(this, e, n);\n  }\n  /**\n  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change\n  set.\n  */\n  get desc() {\n    return ii.create(this.sections);\n  }\n  /**\n  @internal\n  */\n  filter(e) {\n    let n = [], r = [], i = [], s = new fl(this);\n    e:\n      for (let o = 0, a = 0; ; ) {\n        let l = o == e.length ? 1e9 : e[o++];\n        for (; a < l || a == l && s.len == 0; ) {\n          if (s.done)\n            break e;\n          let u = Math.min(s.len, l - a);\n          tn(i, u, -1);\n          let d = s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0;\n          tn(n, u, d), d > 0 && ji(r, n, s.text), s.forward(u), a += u;\n        }\n        let c = e[o++];\n        for (; a < c; ) {\n          if (s.done)\n            break e;\n          let u = Math.min(s.len, c - a);\n          tn(n, u, -1), tn(i, u, s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0), s.forward(u), a += u;\n        }\n      }\n    return {\n      changes: new Mt(n, r),\n      filtered: ii.create(i)\n    };\n  }\n  /**\n  Serialize this change set to a JSON-representable value.\n  */\n  toJSON() {\n    let e = [];\n    for (let n = 0; n < this.sections.length; n += 2) {\n      let r = this.sections[n], i = this.sections[n + 1];\n      i < 0 ? e.push(r) : i == 0 ? e.push([r]) : e.push([r].concat(this.inserted[n >> 1].toJSON()));\n    }\n    return e;\n  }\n  /**\n  Create a change set for the given changes, for a document of the\n  given length, using `lineSep` as line separator.\n  */\n  static of(e, n, r) {\n    let i = [], s = [], o = 0, a = null;\n    function l(u = !1) {\n      if (!u && !i.length)\n        return;\n      o < n && tn(i, n - o, -1);\n      let d = new Mt(i, s);\n      a = a ? a.compose(d.map(a)) : d, i = [], s = [], o = 0;\n    }\n    function c(u) {\n      if (Array.isArray(u))\n        for (let d of u)\n          c(d);\n      else if (u instanceof Mt) {\n        if (u.length != n)\n          throw new RangeError(`Mismatched change set length (got ${u.length}, expected ${n})`);\n        l(), a = a ? a.compose(u.map(a)) : u;\n      } else {\n        let { from: d, to: f = d, insert: h } = u;\n        if (d > f || d < 0 || f > n)\n          throw new RangeError(`Invalid change range ${d} to ${f} (in doc of length ${n})`);\n        let p = h ? typeof h == \"string\" ? Fe.of(h.split(r || Bh)) : h : Fe.empty, O = p.length;\n        if (d == f && O == 0)\n          return;\n        d < o && l(), d > o && tn(i, d - o, -1), tn(i, f - d, O), ji(s, i, p), o = f;\n      }\n    }\n    return c(e), l(!a), a;\n  }\n  /**\n  Create an empty changeset of the given length.\n  */\n  static empty(e) {\n    return new Mt(e ? [e, -1] : [], []);\n  }\n  /**\n  Create a changeset from its JSON representation (as produced by\n  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).\n  */\n  static fromJSON(e) {\n    if (!Array.isArray(e))\n      throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n    let n = [], r = [];\n    for (let i = 0; i < e.length; i++) {\n      let s = e[i];\n      if (typeof s == \"number\")\n        n.push(s, -1);\n      else {\n        if (!Array.isArray(s) || typeof s[0] != \"number\" || s.some((o, a) => a && typeof o != \"string\"))\n          throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n        if (s.length == 1)\n          n.push(s[0], 0);\n        else {\n          for (; r.length < i; )\n            r.push(Fe.empty);\n          r[i] = Fe.of(s.slice(1)), n.push(s[0], r[i].length);\n        }\n      }\n    }\n    return new Mt(n, r);\n  }\n  /**\n  @internal\n  */\n  static createSet(e, n) {\n    return new Mt(e, n);\n  }\n}\nfunction tn(t, e, n, r = !1) {\n  if (e == 0 && n <= 0)\n    return;\n  let i = t.length - 2;\n  i >= 0 && n <= 0 && n == t[i + 1] ? t[i] += e : e == 0 && t[i] == 0 ? t[i + 1] += n : r ? (t[i] += e, t[i + 1] += n) : t.push(e, n);\n}\nfunction ji(t, e, n) {\n  if (n.length == 0)\n    return;\n  let r = e.length - 2 >> 1;\n  if (r < t.length)\n    t[t.length - 1] = t[t.length - 1].append(n);\n  else {\n    for (; t.length < r; )\n      t.push(Fe.empty);\n    t.push(n);\n  }\n}\nfunction Lh(t, e, n) {\n  let r = t.inserted;\n  for (let i = 0, s = 0, o = 0; o < t.sections.length; ) {\n    let a = t.sections[o++], l = t.sections[o++];\n    if (l < 0)\n      i += a, s += a;\n    else {\n      let c = i, u = s, d = Fe.empty;\n      for (; c += a, u += l, l && r && (d = d.append(r[o - 2 >> 1])), !(n || o == t.sections.length || t.sections[o + 1] < 0); )\n        a = t.sections[o++], l = t.sections[o++];\n      e(i, c, s, u, d), i = c, s = u;\n    }\n  }\n}\nfunction Uh(t, e, n, r = !1) {\n  let i = [], s = r ? [] : null, o = new fl(t), a = new fl(e);\n  for (let l = -1; ; )\n    if (o.ins == -1 && a.ins == -1) {\n      let c = Math.min(o.len, a.len);\n      tn(i, c, -1), o.forward(c), a.forward(c);\n    } else if (a.ins >= 0 && (o.ins < 0 || l == o.i || o.off == 0 && (a.len < o.len || a.len == o.len && !n))) {\n      let c = a.len;\n      for (tn(i, a.ins, -1); c; ) {\n        let u = Math.min(o.len, c);\n        o.ins >= 0 && l < o.i && o.len <= u && (tn(i, 0, o.ins), s && ji(s, i, o.text), l = o.i), o.forward(u), c -= u;\n      }\n      a.next();\n    } else if (o.ins >= 0) {\n      let c = 0, u = o.len;\n      for (; u; )\n        if (a.ins == -1) {\n          let d = Math.min(u, a.len);\n          c += d, u -= d, a.forward(d);\n        } else if (a.ins == 0 && a.len < u)\n          u -= a.len, a.next();\n        else\n          break;\n      tn(i, c, l < o.i ? o.ins : 0), s && l < o.i && ji(s, i, o.text), l = o.i, o.forward(o.len - u);\n    } else {\n      if (o.done && a.done)\n        return s ? Mt.createSet(i, s) : ii.create(i);\n      throw new Error(\"Mismatched change set lengths\");\n    }\n}\nfunction Ww(t, e, n = !1) {\n  let r = [], i = n ? [] : null, s = new fl(t), o = new fl(e);\n  for (let a = !1; ; ) {\n    if (s.done && o.done)\n      return i ? Mt.createSet(r, i) : ii.create(r);\n    if (s.ins == 0)\n      tn(r, s.len, 0, a), s.next();\n    else if (o.len == 0 && !o.done)\n      tn(r, 0, o.ins, a), i && ji(i, r, o.text), o.next();\n    else {\n      if (s.done || o.done)\n        throw new Error(\"Mismatched change set lengths\");\n      {\n        let l = Math.min(s.len2, o.len), c = r.length;\n        if (s.ins == -1) {\n          let u = o.ins == -1 ? -1 : o.off ? 0 : o.ins;\n          tn(r, l, u, a), i && u && ji(i, r, o.text);\n        } else\n          o.ins == -1 ? (tn(r, s.off ? 0 : s.len, l, a), i && ji(i, r, s.textBit(l))) : (tn(r, s.off ? 0 : s.len, o.off ? 0 : o.ins, a), i && !o.off && ji(i, r, o.text));\n        a = (s.ins > l || o.ins >= 0 && o.len > l) && (a || r.length > c), s.forward2(l), o.forward(l);\n      }\n    }\n  }\n}\nclass fl {\n  constructor(e) {\n    this.set = e, this.i = 0, this.next();\n  }\n  next() {\n    let { sections: e } = this.set;\n    this.i < e.length ? (this.len = e[this.i++], this.ins = e[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;\n  }\n  get done() {\n    return this.ins == -2;\n  }\n  get len2() {\n    return this.ins < 0 ? this.len : this.ins;\n  }\n  get text() {\n    let { inserted: e } = this.set, n = this.i - 2 >> 1;\n    return n >= e.length ? Fe.empty : e[n];\n  }\n  textBit(e) {\n    let { inserted: n } = this.set, r = this.i - 2 >> 1;\n    return r >= n.length && !e ? Fe.empty : n[r].slice(this.off, e == null ? void 0 : this.off + e);\n  }\n  forward(e) {\n    e == this.len ? this.next() : (this.len -= e, this.off += e);\n  }\n  forward2(e) {\n    this.ins == -1 ? this.forward(e) : e == this.ins ? this.next() : (this.ins -= e, this.off += e);\n  }\n}\nclass xs {\n  constructor(e, n, r) {\n    this.from = e, this.to = n, this.flags = r;\n  }\n  /**\n  The anchor of the range—the side that doesn't move when you\n  extend it.\n  */\n  get anchor() {\n    return this.flags & 32 ? this.to : this.from;\n  }\n  /**\n  The head of the range, which is moved when the range is\n  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).\n  */\n  get head() {\n    return this.flags & 32 ? this.from : this.to;\n  }\n  /**\n  True when `anchor` and `head` are at the same position.\n  */\n  get empty() {\n    return this.from == this.to;\n  }\n  /**\n  If this is a cursor that is explicitly associated with the\n  character on one of its sides, this returns the side. -1 means\n  the character before its position, 1 the character after, and 0\n  means no association.\n  */\n  get assoc() {\n    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;\n  }\n  /**\n  The bidirectional text level associated with this cursor, if\n  any.\n  */\n  get bidiLevel() {\n    let e = this.flags & 7;\n    return e == 7 ? null : e;\n  }\n  /**\n  The goal column (stored vertical offset) associated with a\n  cursor. This is used to preserve the vertical position when\n  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across\n  lines of different length.\n  */\n  get goalColumn() {\n    let e = this.flags >> 6;\n    return e == 16777215 ? void 0 : e;\n  }\n  /**\n  Map this range through a change, producing a valid range in the\n  updated document.\n  */\n  map(e, n = -1) {\n    let r, i;\n    return this.empty ? r = i = e.mapPos(this.from, n) : (r = e.mapPos(this.from, 1), i = e.mapPos(this.to, -1)), r == this.from && i == this.to ? this : new xs(r, i, this.flags);\n  }\n  /**\n  Extend this range to cover at least `from` to `to`.\n  */\n  extend(e, n = e) {\n    if (e <= this.anchor && n >= this.anchor)\n      return ae.range(e, n);\n    let r = Math.abs(e - this.anchor) > Math.abs(n - this.anchor) ? e : n;\n    return ae.range(this.anchor, r);\n  }\n  /**\n  Compare this range to another range.\n  */\n  eq(e, n = !1) {\n    return this.anchor == e.anchor && this.head == e.head && (!n || !this.empty || this.assoc == e.assoc);\n  }\n  /**\n  Return a JSON-serializable object representing the range.\n  */\n  toJSON() {\n    return { anchor: this.anchor, head: this.head };\n  }\n  /**\n  Convert a JSON representation of a range to a `SelectionRange`\n  instance.\n  */\n  static fromJSON(e) {\n    if (!e || typeof e.anchor != \"number\" || typeof e.head != \"number\")\n      throw new RangeError(\"Invalid JSON representation for SelectionRange\");\n    return ae.range(e.anchor, e.head);\n  }\n  /**\n  @internal\n  */\n  static create(e, n, r) {\n    return new xs(e, n, r);\n  }\n}\nclass ae {\n  constructor(e, n) {\n    this.ranges = e, this.mainIndex = n;\n  }\n  /**\n  Map a selection through a change. Used to adjust the selection\n  position for changes.\n  */\n  map(e, n = -1) {\n    return e.empty ? this : ae.create(this.ranges.map((r) => r.map(e, n)), this.mainIndex);\n  }\n  /**\n  Compare this selection to another selection. By default, ranges\n  are compared only by position. When `includeAssoc` is true,\n  cursor ranges must also have the same\n  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.\n  */\n  eq(e, n = !1) {\n    if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex)\n      return !1;\n    for (let r = 0; r < this.ranges.length; r++)\n      if (!this.ranges[r].eq(e.ranges[r], n))\n        return !1;\n    return !0;\n  }\n  /**\n  Get the primary selection range. Usually, you should make sure\n  your code applies to _all_ ranges, by using methods like\n  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).\n  */\n  get main() {\n    return this.ranges[this.mainIndex];\n  }\n  /**\n  Make sure the selection only has one range. Returns a selection\n  holding only the main range from this selection.\n  */\n  asSingle() {\n    return this.ranges.length == 1 ? this : new ae([this.main], 0);\n  }\n  /**\n  Extend this selection with an extra range.\n  */\n  addRange(e, n = !0) {\n    return ae.create([e].concat(this.ranges), n ? 0 : this.mainIndex + 1);\n  }\n  /**\n  Replace a given range with another range, and then normalize the\n  selection to merge and sort ranges if necessary.\n  */\n  replaceRange(e, n = this.mainIndex) {\n    let r = this.ranges.slice();\n    return r[n] = e, ae.create(r, this.mainIndex);\n  }\n  /**\n  Convert this selection to an object that can be serialized to\n  JSON.\n  */\n  toJSON() {\n    return { ranges: this.ranges.map((e) => e.toJSON()), main: this.mainIndex };\n  }\n  /**\n  Create a selection from a JSON representation.\n  */\n  static fromJSON(e) {\n    if (!e || !Array.isArray(e.ranges) || typeof e.main != \"number\" || e.main >= e.ranges.length)\n      throw new RangeError(\"Invalid JSON representation for EditorSelection\");\n    return new ae(e.ranges.map((n) => xs.fromJSON(n)), e.main);\n  }\n  /**\n  Create a selection holding a single range.\n  */\n  static single(e, n = e) {\n    return new ae([ae.range(e, n)], 0);\n  }\n  /**\n  Sort and merge the given set of ranges, creating a valid\n  selection.\n  */\n  static create(e, n = 0) {\n    if (e.length == 0)\n      throw new RangeError(\"A selection needs at least one range\");\n    for (let r = 0, i = 0; i < e.length; i++) {\n      let s = e[i];\n      if (s.empty ? s.from <= r : s.from < r)\n        return ae.normalized(e.slice(), n);\n      r = s.to;\n    }\n    return new ae(e, n);\n  }\n  /**\n  Create a cursor selection range at the given position. You can\n  safely ignore the optional arguments in most situations.\n  */\n  static cursor(e, n = 0, r, i) {\n    return xs.create(e, e, (n == 0 ? 0 : n < 0 ? 8 : 16) | (r == null ? 7 : Math.min(6, r)) | (i ?? 16777215) << 6);\n  }\n  /**\n  Create a selection range.\n  */\n  static range(e, n, r, i) {\n    let s = (r ?? 16777215) << 6 | (i == null ? 7 : Math.min(6, i));\n    return n < e ? xs.create(n, e, 48 | s) : xs.create(e, n, (n > e ? 8 : 0) | s);\n  }\n  /**\n  @internal\n  */\n  static normalized(e, n = 0) {\n    let r = e[n];\n    e.sort((i, s) => i.from - s.from), n = e.indexOf(r);\n    for (let i = 1; i < e.length; i++) {\n      let s = e[i], o = e[i - 1];\n      if (s.empty ? s.from <= o.to : s.from < o.to) {\n        let a = o.from, l = Math.max(s.to, o.to);\n        i <= n && n--, e.splice(--i, 2, s.anchor > s.head ? ae.range(l, a) : ae.range(a, l));\n      }\n    }\n    return new ae(e, n);\n  }\n}\nfunction Mw(t, e) {\n  for (let n of t.ranges)\n    if (n.to > e)\n      throw new RangeError(\"Selection points outside of document\");\n}\nlet tg = 0;\nclass ve {\n  constructor(e, n, r, i, s) {\n    this.combine = e, this.compareInput = n, this.compare = r, this.isStatic = i, this.id = tg++, this.default = e([]), this.extensions = typeof s == \"function\" ? s(this) : s;\n  }\n  /**\n  Returns a facet reader for this facet, which can be used to\n  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.\n  */\n  get reader() {\n    return this;\n  }\n  /**\n  Define a new facet.\n  */\n  static define(e = {}) {\n    return new ve(e.combine || ((n) => n), e.compareInput || ((n, r) => n === r), e.compare || (e.combine ? (n, r) => n === r : ng), !!e.static, e.enables);\n  }\n  /**\n  Returns an extension that adds the given value to this facet.\n  */\n  of(e) {\n    return new nu([], this, 0, e);\n  }\n  /**\n  Create an extension that computes a value for the facet from a\n  state. You must take care to declare the parts of the state that\n  this value depends on, since your function is only called again\n  for a new state when one of those parts changed.\n  \n  In cases where your value depends only on a single field, you'll\n  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.\n  */\n  compute(e, n) {\n    if (this.isStatic)\n      throw new Error(\"Can't compute a static facet\");\n    return new nu(e, this, 1, n);\n  }\n  /**\n  Create an extension that computes zero or more values for this\n  facet from a state.\n  */\n  computeN(e, n) {\n    if (this.isStatic)\n      throw new Error(\"Can't compute a static facet\");\n    return new nu(e, this, 2, n);\n  }\n  from(e, n) {\n    return n || (n = (r) => r), this.compute([e], (r) => n(r.field(e)));\n  }\n}\nfunction ng(t, e) {\n  return t == e || t.length == e.length && t.every((n, r) => n === e[r]);\n}\nclass nu {\n  constructor(e, n, r, i) {\n    this.dependencies = e, this.facet = n, this.type = r, this.value = i, this.id = tg++;\n  }\n  dynamicSlot(e) {\n    var n;\n    let r = this.value, i = this.facet.compareInput, s = this.id, o = e[s] >> 1, a = this.type == 2, l = !1, c = !1, u = [];\n    for (let d of this.dependencies)\n      d == \"doc\" ? l = !0 : d == \"selection\" ? c = !0 : ((n = e[d.id]) !== null && n !== void 0 ? n : 1) & 1 || u.push(e[d.id]);\n    return {\n      create(d) {\n        return d.values[o] = r(d), 1;\n      },\n      update(d, f) {\n        if (l && f.docChanged || c && (f.docChanged || f.selection) || qh(d, u)) {\n          let h = r(d);\n          if (a ? !Zb(h, d.values[o], i) : !i(h, d.values[o]))\n            return d.values[o] = h, 1;\n        }\n        return 0;\n      },\n      reconfigure: (d, f) => {\n        let h, p = f.config.address[s];\n        if (p != null) {\n          let O = Vu(f, p);\n          if (this.dependencies.every((m) => m instanceof ve ? f.facet(m) === d.facet(m) : m instanceof yr ? f.field(m, !1) == d.field(m, !1) : !0) || (a ? Zb(h = r(d), O, i) : i(h = r(d), O)))\n            return d.values[o] = O, 0;\n        } else\n          h = r(d);\n        return d.values[o] = h, 1;\n      }\n    };\n  }\n}\nfunction Zb(t, e, n) {\n  if (t.length != e.length)\n    return !1;\n  for (let r = 0; r < t.length; r++)\n    if (!n(t[r], e[r]))\n      return !1;\n  return !0;\n}\nfunction qh(t, e) {\n  let n = !1;\n  for (let r of e)\n    Ya(t, r) & 1 && (n = !0);\n  return n;\n}\nfunction tN(t, e, n) {\n  let r = n.map((l) => t[l.id]), i = n.map((l) => l.type), s = r.filter((l) => !(l & 1)), o = t[e.id] >> 1;\n  function a(l) {\n    let c = [];\n    for (let u = 0; u < r.length; u++) {\n      let d = Vu(l, r[u]);\n      if (i[u] == 2)\n        for (let f of d)\n          c.push(f);\n      else\n        c.push(d);\n    }\n    return e.combine(c);\n  }\n  return {\n    create(l) {\n      for (let c of r)\n        Ya(l, c);\n      return l.values[o] = a(l), 1;\n    },\n    update(l, c) {\n      if (!qh(l, s))\n        return 0;\n      let u = a(l);\n      return e.compare(u, l.values[o]) ? 0 : (l.values[o] = u, 1);\n    },\n    reconfigure(l, c) {\n      let u = qh(l, r), d = c.config.facets[e.id], f = c.facet(e);\n      if (d && !u && ng(n, d))\n        return l.values[o] = f, 0;\n      let h = a(l);\n      return e.compare(h, f) ? (l.values[o] = f, 0) : (l.values[o] = h, 1);\n    }\n  };\n}\nconst Vb = /* @__PURE__ */ ve.define({ static: !0 });\nclass yr {\n  constructor(e, n, r, i, s) {\n    this.id = e, this.createF = n, this.updateF = r, this.compareF = i, this.spec = s, this.provides = void 0;\n  }\n  /**\n  Define a state field.\n  */\n  static define(e) {\n    let n = new yr(tg++, e.create, e.update, e.compare || ((r, i) => r === i), e);\n    return e.provide && (n.provides = e.provide(n)), n;\n  }\n  create(e) {\n    let n = e.facet(Vb).find((r) => r.field == this);\n    return ((n == null ? void 0 : n.create) || this.createF)(e);\n  }\n  /**\n  @internal\n  */\n  slot(e) {\n    let n = e[this.id] >> 1;\n    return {\n      create: (r) => (r.values[n] = this.create(r), 1),\n      update: (r, i) => {\n        let s = r.values[n], o = this.updateF(s, i);\n        return this.compareF(s, o) ? 0 : (r.values[n] = o, 1);\n      },\n      reconfigure: (r, i) => i.config.address[this.id] != null ? (r.values[n] = i.field(this), 0) : (r.values[n] = this.create(r), 1)\n    };\n  }\n  /**\n  Returns an extension that enables this field and overrides the\n  way it is initialized. Can be useful when you need to provide a\n  non-default starting value for the field.\n  */\n  init(e) {\n    return [this, Vb.of({ field: this, create: e })];\n  }\n  /**\n  State field instances can be used as\n  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a\n  given state.\n  */\n  get extension() {\n    return this;\n  }\n}\nconst Ss = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };\nfunction ba(t) {\n  return (e) => new Xw(e, t);\n}\nconst zl = {\n  /**\n  The highest precedence level, for extensions that should end up\n  near the start of the precedence ordering.\n  */\n  highest: /* @__PURE__ */ ba(Ss.highest),\n  /**\n  A higher-than-default precedence, for extensions that should\n  come before those with default precedence.\n  */\n  high: /* @__PURE__ */ ba(Ss.high),\n  /**\n  The default precedence, which is also used for extensions\n  without an explicit precedence.\n  */\n  default: /* @__PURE__ */ ba(Ss.default),\n  /**\n  A lower-than-default precedence.\n  */\n  low: /* @__PURE__ */ ba(Ss.low),\n  /**\n  The lowest precedence level. Meant for things that should end up\n  near the end of the extension order.\n  */\n  lowest: /* @__PURE__ */ ba(Ss.lowest)\n};\nclass Xw {\n  constructor(e, n) {\n    this.inner = e, this.prec = n;\n  }\n}\nclass Ld {\n  /**\n  Create an instance of this compartment to add to your [state\n  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).\n  */\n  of(e) {\n    return new Yh(this, e);\n  }\n  /**\n  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that\n  reconfigures this compartment.\n  */\n  reconfigure(e) {\n    return Ld.reconfigure.of({ compartment: this, extension: e });\n  }\n  /**\n  Get the current content of the compartment in the state, or\n  `undefined` if it isn't present.\n  */\n  get(e) {\n    return e.config.compartments.get(this);\n  }\n}\nclass Yh {\n  constructor(e, n) {\n    this.compartment = e, this.inner = n;\n  }\n}\nclass Zu {\n  constructor(e, n, r, i, s, o) {\n    for (this.base = e, this.compartments = n, this.dynamicSlots = r, this.address = i, this.staticValues = s, this.facets = o, this.statusTemplate = []; this.statusTemplate.length < r.length; )\n      this.statusTemplate.push(\n        0\n        /* SlotStatus.Unresolved */\n      );\n  }\n  staticFacet(e) {\n    let n = this.address[e.id];\n    return n == null ? e.default : this.staticValues[n >> 1];\n  }\n  static resolve(e, n, r) {\n    let i = [], s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ new Map();\n    for (let f of nN(e, n, o))\n      f instanceof yr ? i.push(f) : (s[f.facet.id] || (s[f.facet.id] = [])).push(f);\n    let a = /* @__PURE__ */ Object.create(null), l = [], c = [];\n    for (let f of i)\n      a[f.id] = c.length << 1, c.push((h) => f.slot(h));\n    let u = r == null ? void 0 : r.config.facets;\n    for (let f in s) {\n      let h = s[f], p = h[0].facet, O = u && u[f] || [];\n      if (h.every(\n        (m) => m.type == 0\n        /* Provider.Static */\n      ))\n        if (a[p.id] = l.length << 1 | 1, ng(O, h))\n          l.push(r.facet(p));\n        else {\n          let m = p.combine(h.map((y) => y.value));\n          l.push(r && p.compare(m, r.facet(p)) ? r.facet(p) : m);\n        }\n      else {\n        for (let m of h)\n          m.type == 0 ? (a[m.id] = l.length << 1 | 1, l.push(m.value)) : (a[m.id] = c.length << 1, c.push((y) => m.dynamicSlot(y)));\n        a[p.id] = c.length << 1, c.push((m) => tN(m, p, h));\n      }\n    }\n    let d = c.map((f) => f(a));\n    return new Zu(e, o, d, a, l, s);\n  }\n}\nfunction nN(t, e, n) {\n  let r = [[], [], [], [], []], i = /* @__PURE__ */ new Map();\n  function s(o, a) {\n    let l = i.get(o);\n    if (l != null) {\n      if (l <= a)\n        return;\n      let c = r[l].indexOf(o);\n      c > -1 && r[l].splice(c, 1), o instanceof Yh && n.delete(o.compartment);\n    }\n    if (i.set(o, a), Array.isArray(o))\n      for (let c of o)\n        s(c, a);\n    else if (o instanceof Yh) {\n      if (n.has(o.compartment))\n        throw new RangeError(\"Duplicate use of compartment in extensions\");\n      let c = e.get(o.compartment) || o.inner;\n      n.set(o.compartment, c), s(c, a);\n    } else if (o instanceof Xw)\n      s(o.inner, o.prec);\n    else if (o instanceof yr)\n      r[a].push(o), o.provides && s(o.provides, a);\n    else if (o instanceof nu)\n      r[a].push(o), o.facet.extensions && s(o.facet.extensions, Ss.default);\n    else {\n      let c = o.extension;\n      if (!c)\n        throw new Error(`Unrecognized extension value in extension set (${o}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);\n      s(c, a);\n    }\n  }\n  return s(t, Ss.default), r.reduce((o, a) => o.concat(a));\n}\nfunction Ya(t, e) {\n  if (e & 1)\n    return 2;\n  let n = e >> 1, r = t.status[n];\n  if (r == 4)\n    throw new Error(\"Cyclic dependency between fields and/or facets\");\n  if (r & 2)\n    return r;\n  t.status[n] = 4;\n  let i = t.computeSlot(t, t.config.dynamicSlots[n]);\n  return t.status[n] = 2 | i;\n}\nfunction Vu(t, e) {\n  return e & 1 ? t.config.staticValues[e >> 1] : t.values[e >> 1];\n}\nconst jw = /* @__PURE__ */ ve.define(), zh = /* @__PURE__ */ ve.define({\n  combine: (t) => t.some((e) => e),\n  static: !0\n}), Bw = /* @__PURE__ */ ve.define({\n  combine: (t) => t.length ? t[0] : void 0,\n  static: !0\n}), Lw = /* @__PURE__ */ ve.define(), Uw = /* @__PURE__ */ ve.define(), qw = /* @__PURE__ */ ve.define(), Yw = /* @__PURE__ */ ve.define({\n  combine: (t) => t.length ? t[0] : !1\n});\nclass no {\n  /**\n  @internal\n  */\n  constructor(e, n) {\n    this.type = e, this.value = n;\n  }\n  /**\n  Define a new type of annotation.\n  */\n  static define() {\n    return new rN();\n  }\n}\nclass rN {\n  /**\n  Create an instance of this annotation.\n  */\n  of(e) {\n    return new no(this, e);\n  }\n}\nclass iN {\n  /**\n  @internal\n  */\n  constructor(e) {\n    this.map = e;\n  }\n  /**\n  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this\n  type.\n  */\n  of(e) {\n    return new ot(this, e);\n  }\n}\nclass ot {\n  /**\n  @internal\n  */\n  constructor(e, n) {\n    this.type = e, this.value = n;\n  }\n  /**\n  Map this effect through a position mapping. Will return\n  `undefined` when that ends up deleting the effect.\n  */\n  map(e) {\n    let n = this.type.map(this.value, e);\n    return n === void 0 ? void 0 : n == this.value ? this : new ot(this.type, n);\n  }\n  /**\n  Tells you whether this effect object is of a given\n  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).\n  */\n  is(e) {\n    return this.type == e;\n  }\n  /**\n  Define a new effect type. The type parameter indicates the type\n  of values that his effect holds. It should be a type that\n  doesn't include `undefined`, since that is used in\n  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is\n  removed.\n  */\n  static define(e = {}) {\n    return new iN(e.map || ((n) => n));\n  }\n  /**\n  Map an array of effects through a change set.\n  */\n  static mapEffects(e, n) {\n    if (!e.length)\n      return e;\n    let r = [];\n    for (let i of e) {\n      let s = i.map(n);\n      s && r.push(s);\n    }\n    return r;\n  }\n}\not.reconfigure = /* @__PURE__ */ ot.define();\not.appendConfig = /* @__PURE__ */ ot.define();\nclass Gt {\n  constructor(e, n, r, i, s, o) {\n    this.startState = e, this.changes = n, this.selection = r, this.effects = i, this.annotations = s, this.scrollIntoView = o, this._doc = null, this._state = null, r && Mw(r, n.newLength), s.some((a) => a.type == Gt.time) || (this.annotations = s.concat(Gt.time.of(Date.now())));\n  }\n  /**\n  @internal\n  */\n  static create(e, n, r, i, s, o) {\n    return new Gt(e, n, r, i, s, o);\n  }\n  /**\n  The new document produced by the transaction. Contrary to\n  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't\n  force the entire new state to be computed right away, so it is\n  recommended that [transaction\n  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter\n  when they need to look at the new document.\n  */\n  get newDoc() {\n    return this._doc || (this._doc = this.changes.apply(this.startState.doc));\n  }\n  /**\n  The new selection produced by the transaction. If\n  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,\n  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's\n  current selection through the changes made by the transaction.\n  */\n  get newSelection() {\n    return this.selection || this.startState.selection.map(this.changes);\n  }\n  /**\n  The new state created by the transaction. Computed on demand\n  (but retained for subsequent access), so it is recommended not to\n  access it in [transaction\n  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.\n  */\n  get state() {\n    return this._state || this.startState.applyTransaction(this), this._state;\n  }\n  /**\n  Get the value of the given annotation type, if any.\n  */\n  annotation(e) {\n    for (let n of this.annotations)\n      if (n.type == e)\n        return n.value;\n  }\n  /**\n  Indicates whether the transaction changed the document.\n  */\n  get docChanged() {\n    return !this.changes.empty;\n  }\n  /**\n  Indicates whether this transaction reconfigures the state\n  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or\n  with a top-level configuration\n  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).\n  */\n  get reconfigured() {\n    return this.startState.config != this.state.config;\n  }\n  /**\n  Returns true if the transaction has a [user\n  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to\n  or more specific than `event`. For example, if the transaction\n  has `\"select.pointer\"` as user event, `\"select\"` and\n  `\"select.pointer\"` will match it.\n  */\n  isUserEvent(e) {\n    let n = this.annotation(Gt.userEvent);\n    return !!(n && (n == e || n.length > e.length && n.slice(0, e.length) == e && n[e.length] == \".\"));\n  }\n}\nGt.time = /* @__PURE__ */ no.define();\nGt.userEvent = /* @__PURE__ */ no.define();\nGt.addToHistory = /* @__PURE__ */ no.define();\nGt.remote = /* @__PURE__ */ no.define();\nfunction sN(t, e) {\n  let n = [];\n  for (let r = 0, i = 0; ; ) {\n    let s, o;\n    if (r < t.length && (i == e.length || e[i] >= t[r]))\n      s = t[r++], o = t[r++];\n    else if (i < e.length)\n      s = e[i++], o = e[i++];\n    else\n      return n;\n    !n.length || n[n.length - 1] < s ? n.push(s, o) : n[n.length - 1] < o && (n[n.length - 1] = o);\n  }\n}\nfunction zw(t, e, n) {\n  var r;\n  let i, s, o;\n  return n ? (i = e.changes, s = Mt.empty(e.changes.length), o = t.changes.compose(e.changes)) : (i = e.changes.map(t.changes), s = t.changes.mapDesc(e.changes, !0), o = t.changes.compose(i)), {\n    changes: o,\n    selection: e.selection ? e.selection.map(s) : (r = t.selection) === null || r === void 0 ? void 0 : r.map(i),\n    effects: ot.mapEffects(t.effects, i).concat(ot.mapEffects(e.effects, s)),\n    annotations: t.annotations.length ? t.annotations.concat(e.annotations) : e.annotations,\n    scrollIntoView: t.scrollIntoView || e.scrollIntoView\n  };\n}\nfunction Hh(t, e, n) {\n  let r = e.selection, i = _o(e.annotations);\n  return e.userEvent && (i = i.concat(Gt.userEvent.of(e.userEvent))), {\n    changes: e.changes instanceof Mt ? e.changes : Mt.of(e.changes || [], n, t.facet(Bw)),\n    selection: r && (r instanceof ae ? r : ae.single(r.anchor, r.head)),\n    effects: _o(e.effects),\n    annotations: i,\n    scrollIntoView: !!e.scrollIntoView\n  };\n}\nfunction Hw(t, e, n) {\n  let r = Hh(t, e.length ? e[0] : {}, t.doc.length);\n  e.length && e[0].filter === !1 && (n = !1);\n  for (let s = 1; s < e.length; s++) {\n    e[s].filter === !1 && (n = !1);\n    let o = !!e[s].sequential;\n    r = zw(r, Hh(t, e[s], o ? r.changes.newLength : t.doc.length), o);\n  }\n  let i = Gt.create(t, r.changes, r.selection, r.effects, r.annotations, r.scrollIntoView);\n  return aN(n ? oN(i) : i);\n}\nfunction oN(t) {\n  let e = t.startState, n = !0;\n  for (let i of e.facet(Lw)) {\n    let s = i(t);\n    if (s === !1) {\n      n = !1;\n      break;\n    }\n    Array.isArray(s) && (n = n === !0 ? s : sN(n, s));\n  }\n  if (n !== !0) {\n    let i, s;\n    if (n === !1)\n      s = t.changes.invertedDesc, i = Mt.empty(e.doc.length);\n    else {\n      let o = t.changes.filter(n);\n      i = o.changes, s = o.filtered.mapDesc(o.changes).invertedDesc;\n    }\n    t = Gt.create(e, i, t.selection && t.selection.map(s), ot.mapEffects(t.effects, s), t.annotations, t.scrollIntoView);\n  }\n  let r = e.facet(Uw);\n  for (let i = r.length - 1; i >= 0; i--) {\n    let s = r[i](t);\n    s instanceof Gt ? t = s : Array.isArray(s) && s.length == 1 && s[0] instanceof Gt ? t = s[0] : t = Hw(e, _o(s), !1);\n  }\n  return t;\n}\nfunction aN(t) {\n  let e = t.startState, n = e.facet(qw), r = t;\n  for (let i = n.length - 1; i >= 0; i--) {\n    let s = n[i](t);\n    s && Object.keys(s).length && (r = zw(r, Hh(e, s, t.changes.newLength), !0));\n  }\n  return r == t ? t : Gt.create(e, t.changes, t.selection, r.effects, r.annotations, r.scrollIntoView);\n}\nconst lN = [];\nfunction _o(t) {\n  return t == null ? lN : Array.isArray(t) ? t : [t];\n}\nvar Hn = /* @__PURE__ */ function(t) {\n  return t[t.Word = 0] = \"Word\", t[t.Space = 1] = \"Space\", t[t.Other = 2] = \"Other\", t;\n}(Hn || (Hn = {}));\nconst cN = /[\\u00df\\u0587\\u0590-\\u05f4\\u0600-\\u06ff\\u3040-\\u309f\\u30a0-\\u30ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\uac00-\\ud7af]/;\nlet Fh;\ntry {\n  Fh = /* @__PURE__ */ new RegExp(\"[\\\\p{Alphabetic}\\\\p{Number}_]\", \"u\");\n} catch {\n}\nfunction uN(t) {\n  if (Fh)\n    return Fh.test(t);\n  for (let e = 0; e < t.length; e++) {\n    let n = t[e];\n    if (/\\w/.test(n) || n > \"\" && (n.toUpperCase() != n.toLowerCase() || cN.test(n)))\n      return !0;\n  }\n  return !1;\n}\nfunction dN(t) {\n  return (e) => {\n    if (!/\\S/.test(e))\n      return Hn.Space;\n    if (uN(e))\n      return Hn.Word;\n    for (let n = 0; n < t.length; n++)\n      if (e.indexOf(t[n]) > -1)\n        return Hn.Word;\n    return Hn.Other;\n  };\n}\nclass Ye {\n  constructor(e, n, r, i, s, o) {\n    this.config = e, this.doc = n, this.selection = r, this.values = i, this.status = e.statusTemplate.slice(), this.computeSlot = s, o && (o._state = this);\n    for (let a = 0; a < this.config.dynamicSlots.length; a++)\n      Ya(this, a << 1);\n    this.computeSlot = null;\n  }\n  field(e, n = !0) {\n    let r = this.config.address[e.id];\n    if (r == null) {\n      if (n)\n        throw new RangeError(\"Field is not present in this state\");\n      return;\n    }\n    return Ya(this, r), Vu(this, r);\n  }\n  /**\n  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this\n  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)\n  can be passed. Unless\n  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the\n  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec\n  are assumed to start in the _current_ document (not the document\n  produced by previous specs), and its\n  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and\n  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer\n  to the document created by its _own_ changes. The resulting\n  transaction contains the combined effect of all the different\n  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later\n  specs take precedence over earlier ones.\n  */\n  update(...e) {\n    return Hw(this, e, !0);\n  }\n  /**\n  @internal\n  */\n  applyTransaction(e) {\n    let n = this.config, { base: r, compartments: i } = n;\n    for (let a of e.effects)\n      a.is(Ld.reconfigure) ? (n && (i = /* @__PURE__ */ new Map(), n.compartments.forEach((l, c) => i.set(c, l)), n = null), i.set(a.value.compartment, a.value.extension)) : a.is(ot.reconfigure) ? (n = null, r = a.value) : a.is(ot.appendConfig) && (n = null, r = _o(r).concat(a.value));\n    let s;\n    n ? s = e.startState.values.slice() : (n = Zu.resolve(r, i, this), s = new Ye(n, this.doc, this.selection, n.dynamicSlots.map(() => null), (l, c) => c.reconfigure(l, this), null).values);\n    let o = e.startState.facet(zh) ? e.newSelection : e.newSelection.asSingle();\n    new Ye(n, e.newDoc, o, s, (a, l) => l.update(a, e), e);\n  }\n  /**\n  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that\n  replaces every selection range with the given content.\n  */\n  replaceSelection(e) {\n    return typeof e == \"string\" && (e = this.toText(e)), this.changeByRange((n) => ({\n      changes: { from: n.from, to: n.to, insert: e },\n      range: ae.cursor(n.from + e.length)\n    }));\n  }\n  /**\n  Create a set of changes and a new selection by running the given\n  function for each range in the active selection. The function\n  can return an optional set of changes (in the coordinate space\n  of the start document), plus an updated range (in the coordinate\n  space of the document produced by the call's own changes). This\n  method will merge all the changes and ranges into a single\n  changeset and selection, and return it as a [transaction\n  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to\n  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).\n  */\n  changeByRange(e) {\n    let n = this.selection, r = e(n.ranges[0]), i = this.changes(r.changes), s = [r.range], o = _o(r.effects);\n    for (let a = 1; a < n.ranges.length; a++) {\n      let l = e(n.ranges[a]), c = this.changes(l.changes), u = c.map(i);\n      for (let f = 0; f < a; f++)\n        s[f] = s[f].map(u);\n      let d = i.mapDesc(c, !0);\n      s.push(l.range.map(d)), i = i.compose(u), o = ot.mapEffects(o, u).concat(ot.mapEffects(_o(l.effects), d));\n    }\n    return {\n      changes: i,\n      selection: ae.create(s, n.mainIndex),\n      effects: o\n    };\n  }\n  /**\n  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change\n  description, taking the state's document length and line\n  separator into account.\n  */\n  changes(e = []) {\n    return e instanceof Mt ? e : Mt.of(e, this.doc.length, this.facet(Ye.lineSeparator));\n  }\n  /**\n  Using the state's [line\n  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a\n  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.\n  */\n  toText(e) {\n    return Fe.of(e.split(this.facet(Ye.lineSeparator) || Bh));\n  }\n  /**\n  Return the given range of the document as a string.\n  */\n  sliceDoc(e = 0, n = this.doc.length) {\n    return this.doc.sliceString(e, n, this.lineBreak);\n  }\n  /**\n  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).\n  */\n  facet(e) {\n    let n = this.config.address[e.id];\n    return n == null ? e.default : (Ya(this, n), Vu(this, n));\n  }\n  /**\n  Convert this state to a JSON-serializable object. When custom\n  fields should be serialized, you can pass them in as an object\n  mapping property names (in the resulting object, which should\n  not use `doc` or `selection`) to fields.\n  */\n  toJSON(e) {\n    let n = {\n      doc: this.sliceDoc(),\n      selection: this.selection.toJSON()\n    };\n    if (e)\n      for (let r in e) {\n        let i = e[r];\n        i instanceof yr && this.config.address[i.id] != null && (n[r] = i.spec.toJSON(this.field(e[r]), this));\n      }\n    return n;\n  }\n  /**\n  Deserialize a state from its JSON representation. When custom\n  fields should be deserialized, pass the same object you passed\n  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as\n  third argument.\n  */\n  static fromJSON(e, n = {}, r) {\n    if (!e || typeof e.doc != \"string\")\n      throw new RangeError(\"Invalid JSON representation for EditorState\");\n    let i = [];\n    if (r) {\n      for (let s in r)\n        if (Object.prototype.hasOwnProperty.call(e, s)) {\n          let o = r[s], a = e[s];\n          i.push(o.init((l) => o.spec.fromJSON(a, l)));\n        }\n    }\n    return Ye.create({\n      doc: e.doc,\n      selection: ae.fromJSON(e.selection),\n      extensions: n.extensions ? i.concat([n.extensions]) : i\n    });\n  }\n  /**\n  Create a new state. You'll usually only need this when\n  initializing an editor—updated states are created by applying\n  transactions.\n  */\n  static create(e = {}) {\n    let n = Zu.resolve(e.extensions || [], /* @__PURE__ */ new Map()), r = e.doc instanceof Fe ? e.doc : Fe.of((e.doc || \"\").split(n.staticFacet(Ye.lineSeparator) || Bh)), i = e.selection ? e.selection instanceof ae ? e.selection : ae.single(e.selection.anchor, e.selection.head) : ae.single(0);\n    return Mw(i, r.length), n.staticFacet(zh) || (i = i.asSingle()), new Ye(n, r, i, n.dynamicSlots.map(() => null), (s, o) => o.create(s), null);\n  }\n  /**\n  The size (in columns) of a tab in the document, determined by\n  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.\n  */\n  get tabSize() {\n    return this.facet(Ye.tabSize);\n  }\n  /**\n  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)\n  string for this state.\n  */\n  get lineBreak() {\n    return this.facet(Ye.lineSeparator) || `\n`;\n  }\n  /**\n  Returns true when the editor is\n  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.\n  */\n  get readOnly() {\n    return this.facet(Yw);\n  }\n  /**\n  Look up a translation for the given phrase (via the\n  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the\n  original string if no translation is found.\n  \n  If additional arguments are passed, they will be inserted in\n  place of markers like `$1` (for the first value) and `$2`, etc.\n  A single `$` is equivalent to `$1`, and `$$` will produce a\n  literal dollar sign.\n  */\n  phrase(e, ...n) {\n    for (let r of this.facet(Ye.phrases))\n      if (Object.prototype.hasOwnProperty.call(r, e)) {\n        e = r[e];\n        break;\n      }\n    return n.length && (e = e.replace(/\\$(\\$|\\d*)/g, (r, i) => {\n      if (i == \"$\")\n        return \"$\";\n      let s = +(i || 1);\n      return !s || s > n.length ? r : n[s - 1];\n    })), e;\n  }\n  /**\n  Find the values for a given language data field, provided by the\n  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.\n  \n  Examples of language data fields are...\n  \n  - [`\"commentTokens\"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying\n    comment syntax.\n  - [`\"autocomplete\"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)\n    for providing language-specific completion sources.\n  - [`\"wordChars\"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding\n    characters that should be considered part of words in this\n    language.\n  - [`\"closeBrackets\"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls\n    bracket closing behavior.\n  */\n  languageDataAt(e, n, r = -1) {\n    let i = [];\n    for (let s of this.facet(jw))\n      for (let o of s(this, n, r))\n        Object.prototype.hasOwnProperty.call(o, e) && i.push(o[e]);\n    return i;\n  }\n  /**\n  Return a function that can categorize strings (expected to\n  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))\n  into one of:\n  \n   - Word (contains an alphanumeric character or a character\n     explicitly listed in the local language's `\"wordChars\"`\n     language data, which should be a string)\n   - Space (contains only whitespace)\n   - Other (anything else)\n  */\n  charCategorizer(e) {\n    return dN(this.languageDataAt(\"wordChars\", e).join(\"\"));\n  }\n  /**\n  Find the word at the given position, meaning the range\n  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters\n  around it. If no word characters are adjacent to the position,\n  this returns null.\n  */\n  wordAt(e) {\n    let { text: n, from: r, length: i } = this.doc.lineAt(e), s = this.charCategorizer(e), o = e - r, a = e - r;\n    for (; o > 0; ) {\n      let l = Rr(n, o, !1);\n      if (s(n.slice(l, o)) != Hn.Word)\n        break;\n      o = l;\n    }\n    for (; a < i; ) {\n      let l = Rr(n, a);\n      if (s(n.slice(a, l)) != Hn.Word)\n        break;\n      a = l;\n    }\n    return o == a ? null : ae.range(o + r, a + r);\n  }\n}\nYe.allowMultipleSelections = zh;\nYe.tabSize = /* @__PURE__ */ ve.define({\n  combine: (t) => t.length ? t[0] : 4\n});\nYe.lineSeparator = Bw;\nYe.readOnly = Yw;\nYe.phrases = /* @__PURE__ */ ve.define({\n  compare(t, e) {\n    let n = Object.keys(t), r = Object.keys(e);\n    return n.length == r.length && n.every((i) => t[i] == e[i]);\n  }\n});\nYe.languageData = jw;\nYe.changeFilter = Lw;\nYe.transactionFilter = Uw;\nYe.transactionExtender = qw;\nLd.reconfigure = /* @__PURE__ */ ot.define();\nfunction Ud(t, e, n = {}) {\n  let r = {};\n  for (let i of t)\n    for (let s of Object.keys(i)) {\n      let o = i[s], a = r[s];\n      if (a === void 0)\n        r[s] = o;\n      else if (!(a === o || o === void 0))\n        if (Object.hasOwnProperty.call(n, s))\n          r[s] = n[s](a, o);\n        else\n          throw new Error(\"Config merge conflict for field \" + s);\n    }\n  for (let i in e)\n    r[i] === void 0 && (r[i] = e[i]);\n  return r;\n}\nclass qs {\n  /**\n  Compare this value with another value. Used when comparing\n  rangesets. The default implementation compares by identity.\n  Unless you are only creating a fixed number of unique instances\n  of your value type, it is a good idea to implement this\n  properly.\n  */\n  eq(e) {\n    return this == e;\n  }\n  /**\n  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.\n  */\n  range(e, n = e) {\n    return Gh.create(e, n, this);\n  }\n}\nqs.prototype.startSide = qs.prototype.endSide = 0;\nqs.prototype.point = !1;\nqs.prototype.mapMode = on.TrackDel;\nlet Gh = class Fw {\n  constructor(e, n, r) {\n    this.from = e, this.to = n, this.value = r;\n  }\n  /**\n  @internal\n  */\n  static create(e, n, r) {\n    return new Fw(e, n, r);\n  }\n};\nfunction Kh(t, e) {\n  return t.from - e.from || t.value.startSide - e.value.startSide;\n}\nclass rg {\n  constructor(e, n, r, i) {\n    this.from = e, this.to = n, this.value = r, this.maxPoint = i;\n  }\n  get length() {\n    return this.to[this.to.length - 1];\n  }\n  // Find the index of the given position and side. Use the ranges'\n  // `from` pos when `end == false`, `to` when `end == true`.\n  findIndex(e, n, r, i = 0) {\n    let s = r ? this.to : this.from;\n    for (let o = i, a = s.length; ; ) {\n      if (o == a)\n        return o;\n      let l = o + a >> 1, c = s[l] - e || (r ? this.value[l].endSide : this.value[l].startSide) - n;\n      if (l == o)\n        return c >= 0 ? o : a;\n      c >= 0 ? a = l : o = l + 1;\n    }\n  }\n  between(e, n, r, i) {\n    for (let s = this.findIndex(n, -1e9, !0), o = this.findIndex(r, 1e9, !1, s); s < o; s++)\n      if (i(this.from[s] + e, this.to[s] + e, this.value[s]) === !1)\n        return !1;\n  }\n  map(e, n) {\n    let r = [], i = [], s = [], o = -1, a = -1;\n    for (let l = 0; l < this.value.length; l++) {\n      let c = this.value[l], u = this.from[l] + e, d = this.to[l] + e, f, h;\n      if (u == d) {\n        let p = n.mapPos(u, c.startSide, c.mapMode);\n        if (p == null || (f = h = p, c.startSide != c.endSide && (h = n.mapPos(u, c.endSide), h < f)))\n          continue;\n      } else if (f = n.mapPos(u, c.startSide), h = n.mapPos(d, c.endSide), f > h || f == h && c.startSide > 0 && c.endSide <= 0)\n        continue;\n      (h - f || c.endSide - c.startSide) < 0 || (o < 0 && (o = f), c.point && (a = Math.max(a, h - f)), r.push(c), i.push(f - o), s.push(h - o));\n    }\n    return { mapped: r.length ? new rg(i, s, r, a) : null, pos: o };\n  }\n}\nclass ze {\n  constructor(e, n, r, i) {\n    this.chunkPos = e, this.chunk = n, this.nextLayer = r, this.maxPoint = i;\n  }\n  /**\n  @internal\n  */\n  static create(e, n, r, i) {\n    return new ze(e, n, r, i);\n  }\n  /**\n  @internal\n  */\n  get length() {\n    let e = this.chunk.length - 1;\n    return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length);\n  }\n  /**\n  The number of ranges in the set.\n  */\n  get size() {\n    if (this.isEmpty)\n      return 0;\n    let e = this.nextLayer.size;\n    for (let n of this.chunk)\n      e += n.value.length;\n    return e;\n  }\n  /**\n  @internal\n  */\n  chunkEnd(e) {\n    return this.chunkPos[e] + this.chunk[e].length;\n  }\n  /**\n  Update the range set, optionally adding new ranges or filtering\n  out existing ones.\n  \n  (Note: The type parameter is just there as a kludge to work\n  around TypeScript variance issues that prevented `RangeSet<X>`\n  from being a subtype of `RangeSet<Y>` when `X` is a subtype of\n  `Y`.)\n  */\n  update(e) {\n    let { add: n = [], sort: r = !1, filterFrom: i = 0, filterTo: s = this.length } = e, o = e.filter;\n    if (n.length == 0 && !o)\n      return this;\n    if (r && (n = n.slice().sort(Kh)), this.isEmpty)\n      return n.length ? ze.of(n) : this;\n    let a = new Gw(this, null, -1).goto(0), l = 0, c = [], u = new jo();\n    for (; a.value || l < n.length; )\n      if (l < n.length && (a.from - n[l].from || a.startSide - n[l].value.startSide) >= 0) {\n        let d = n[l++];\n        u.addInner(d.from, d.to, d.value) || c.push(d);\n      } else\n        a.rangeIndex == 1 && a.chunkIndex < this.chunk.length && (l == n.length || this.chunkEnd(a.chunkIndex) < n[l].from) && (!o || i > this.chunkEnd(a.chunkIndex) || s < this.chunkPos[a.chunkIndex]) && u.addChunk(this.chunkPos[a.chunkIndex], this.chunk[a.chunkIndex]) ? a.nextChunk() : ((!o || i > a.to || s < a.from || o(a.from, a.to, a.value)) && (u.addInner(a.from, a.to, a.value) || c.push(Gh.create(a.from, a.to, a.value))), a.next());\n    return u.finishInner(this.nextLayer.isEmpty && !c.length ? ze.empty : this.nextLayer.update({ add: c, filter: o, filterFrom: i, filterTo: s }));\n  }\n  /**\n  Map this range set through a set of changes, return the new set.\n  */\n  map(e) {\n    if (e.empty || this.isEmpty)\n      return this;\n    let n = [], r = [], i = -1;\n    for (let o = 0; o < this.chunk.length; o++) {\n      let a = this.chunkPos[o], l = this.chunk[o], c = e.touchesRange(a, a + l.length);\n      if (c === !1)\n        i = Math.max(i, l.maxPoint), n.push(l), r.push(e.mapPos(a));\n      else if (c === !0) {\n        let { mapped: u, pos: d } = l.map(a, e);\n        u && (i = Math.max(i, u.maxPoint), n.push(u), r.push(d));\n      }\n    }\n    let s = this.nextLayer.map(e);\n    return n.length == 0 ? s : new ze(r, n, s || ze.empty, i);\n  }\n  /**\n  Iterate over the ranges that touch the region `from` to `to`,\n  calling `f` for each. There is no guarantee that the ranges will\n  be reported in any specific order. When the callback returns\n  `false`, iteration stops.\n  */\n  between(e, n, r) {\n    if (!this.isEmpty) {\n      for (let i = 0; i < this.chunk.length; i++) {\n        let s = this.chunkPos[i], o = this.chunk[i];\n        if (n >= s && e <= s + o.length && o.between(s, e - s, n - s, r) === !1)\n          return;\n      }\n      this.nextLayer.between(e, n, r);\n    }\n  }\n  /**\n  Iterate over the ranges in this set, in order, including all\n  ranges that end at or after `from`.\n  */\n  iter(e = 0) {\n    return hl.from([this]).goto(e);\n  }\n  /**\n  @internal\n  */\n  get isEmpty() {\n    return this.nextLayer == this;\n  }\n  /**\n  Iterate over the ranges in a collection of sets, in order,\n  starting from `from`.\n  */\n  static iter(e, n = 0) {\n    return hl.from(e).goto(n);\n  }\n  /**\n  Iterate over two groups of sets, calling methods on `comparator`\n  to notify it of possible differences.\n  */\n  static compare(e, n, r, i, s = -1) {\n    let o = e.filter((d) => d.maxPoint > 0 || !d.isEmpty && d.maxPoint >= s), a = n.filter((d) => d.maxPoint > 0 || !d.isEmpty && d.maxPoint >= s), l = Ib(o, a, r), c = new va(o, l, s), u = new va(a, l, s);\n    r.iterGaps((d, f, h) => Wb(c, d, u, f, h, i)), r.empty && r.length == 0 && Wb(c, 0, u, 0, 0, i);\n  }\n  /**\n  Compare the contents of two groups of range sets, returning true\n  if they are equivalent in the given range.\n  */\n  static eq(e, n, r = 0, i) {\n    i == null && (i = 999999999);\n    let s = e.filter((u) => !u.isEmpty && n.indexOf(u) < 0), o = n.filter((u) => !u.isEmpty && e.indexOf(u) < 0);\n    if (s.length != o.length)\n      return !1;\n    if (!s.length)\n      return !0;\n    let a = Ib(s, o), l = new va(s, a, 0).goto(r), c = new va(o, a, 0).goto(r);\n    for (; ; ) {\n      if (l.to != c.to || !Jh(l.active, c.active) || l.point && (!c.point || !l.point.eq(c.point)))\n        return !1;\n      if (l.to > i)\n        return !0;\n      l.next(), c.next();\n    }\n  }\n  /**\n  Iterate over a group of range sets at the same time, notifying\n  the iterator about the ranges covering every given piece of\n  content. Returns the open count (see\n  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end\n  of the iteration.\n  */\n  static spans(e, n, r, i, s = -1) {\n    let o = new va(e, null, s).goto(n), a = n, l = o.openStart;\n    for (; ; ) {\n      let c = Math.min(o.to, r);\n      if (o.point) {\n        let u = o.activeForPoint(o.to), d = o.pointFrom < n ? u.length + 1 : o.point.startSide < 0 ? u.length : Math.min(u.length, l);\n        i.point(a, c, o.point, u, d, o.pointRank), l = Math.min(o.openEnd(c), u.length);\n      } else\n        c > a && (i.span(a, c, o.active, l), l = o.openEnd(c));\n      if (o.to > r)\n        return l + (o.point && o.to > r ? 1 : 0);\n      a = o.to, o.next();\n    }\n  }\n  /**\n  Create a range set for the given range or array of ranges. By\n  default, this expects the ranges to be _sorted_ (by start\n  position and, if two start at the same position,\n  `value.startSide`). You can pass `true` as second argument to\n  cause the method to sort them.\n  */\n  static of(e, n = !1) {\n    let r = new jo();\n    for (let i of e instanceof Gh ? [e] : n ? fN(e) : e)\n      r.add(i.from, i.to, i.value);\n    return r.finish();\n  }\n  /**\n  Join an array of range sets into a single set.\n  */\n  static join(e) {\n    if (!e.length)\n      return ze.empty;\n    let n = e[e.length - 1];\n    for (let r = e.length - 2; r >= 0; r--)\n      for (let i = e[r]; i != ze.empty; i = i.nextLayer)\n        n = new ze(i.chunkPos, i.chunk, n, Math.max(i.maxPoint, n.maxPoint));\n    return n;\n  }\n}\nze.empty = /* @__PURE__ */ new ze([], [], null, -1);\nfunction fN(t) {\n  if (t.length > 1)\n    for (let e = t[0], n = 1; n < t.length; n++) {\n      let r = t[n];\n      if (Kh(e, r) > 0)\n        return t.slice().sort(Kh);\n      e = r;\n    }\n  return t;\n}\nze.empty.nextLayer = ze.empty;\nclass jo {\n  finishChunk(e) {\n    this.chunks.push(new rg(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, e && (this.from = [], this.to = [], this.value = []);\n  }\n  /**\n  Create an empty builder.\n  */\n  constructor() {\n    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;\n  }\n  /**\n  Add a range. Ranges should be added in sorted (by `from` and\n  `value.startSide`) order.\n  */\n  add(e, n, r) {\n    this.addInner(e, n, r) || (this.nextLayer || (this.nextLayer = new jo())).add(e, n, r);\n  }\n  /**\n  @internal\n  */\n  addInner(e, n, r) {\n    let i = e - this.lastTo || r.startSide - this.last.endSide;\n    if (i <= 0 && (e - this.lastFrom || r.startSide - this.last.startSide) < 0)\n      throw new Error(\"Ranges must be added sorted by `from` position and `startSide`\");\n    return i < 0 ? !1 : (this.from.length == 250 && this.finishChunk(!0), this.chunkStart < 0 && (this.chunkStart = e), this.from.push(e - this.chunkStart), this.to.push(n - this.chunkStart), this.last = r, this.lastFrom = e, this.lastTo = n, this.value.push(r), r.point && (this.maxPoint = Math.max(this.maxPoint, n - e)), !0);\n  }\n  /**\n  @internal\n  */\n  addChunk(e, n) {\n    if ((e - this.lastTo || n.value[0].startSide - this.last.endSide) < 0)\n      return !1;\n    this.from.length && this.finishChunk(!0), this.setMaxPoint = Math.max(this.setMaxPoint, n.maxPoint), this.chunks.push(n), this.chunkPos.push(e);\n    let r = n.value.length - 1;\n    return this.last = n.value[r], this.lastFrom = n.from[r] + e, this.lastTo = n.to[r] + e, !0;\n  }\n  /**\n  Finish the range set. Returns the new set. The builder can't be\n  used anymore after this has been called.\n  */\n  finish() {\n    return this.finishInner(ze.empty);\n  }\n  /**\n  @internal\n  */\n  finishInner(e) {\n    if (this.from.length && this.finishChunk(!1), this.chunks.length == 0)\n      return e;\n    let n = ze.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(e) : e, this.setMaxPoint);\n    return this.from = null, n;\n  }\n}\nfunction Ib(t, e, n) {\n  let r = /* @__PURE__ */ new Map();\n  for (let s of t)\n    for (let o = 0; o < s.chunk.length; o++)\n      s.chunk[o].maxPoint <= 0 && r.set(s.chunk[o], s.chunkPos[o]);\n  let i = /* @__PURE__ */ new Set();\n  for (let s of e)\n    for (let o = 0; o < s.chunk.length; o++) {\n      let a = r.get(s.chunk[o]);\n      a != null && (n ? n.mapPos(a) : a) == s.chunkPos[o] && !(n != null && n.touchesRange(a, a + s.chunk[o].length)) && i.add(s.chunk[o]);\n    }\n  return i;\n}\nclass Gw {\n  constructor(e, n, r, i = 0) {\n    this.layer = e, this.skip = n, this.minPoint = r, this.rank = i;\n  }\n  get startSide() {\n    return this.value ? this.value.startSide : 0;\n  }\n  get endSide() {\n    return this.value ? this.value.endSide : 0;\n  }\n  goto(e, n = -1e9) {\n    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(e, n, !1), this;\n  }\n  gotoInner(e, n, r) {\n    for (; this.chunkIndex < this.layer.chunk.length; ) {\n      let i = this.layer.chunk[this.chunkIndex];\n      if (!(this.skip && this.skip.has(i) || this.layer.chunkEnd(this.chunkIndex) < e || i.maxPoint < this.minPoint))\n        break;\n      this.chunkIndex++, r = !1;\n    }\n    if (this.chunkIndex < this.layer.chunk.length) {\n      let i = this.layer.chunk[this.chunkIndex].findIndex(e - this.layer.chunkPos[this.chunkIndex], n, !0);\n      (!r || this.rangeIndex < i) && this.setRangeIndex(i);\n    }\n    this.next();\n  }\n  forward(e, n) {\n    (this.to - e || this.endSide - n) < 0 && this.gotoInner(e, n, !0);\n  }\n  next() {\n    for (; ; )\n      if (this.chunkIndex == this.layer.chunk.length) {\n        this.from = this.to = 1e9, this.value = null;\n        break;\n      } else {\n        let e = this.layer.chunkPos[this.chunkIndex], n = this.layer.chunk[this.chunkIndex], r = e + n.from[this.rangeIndex];\n        if (this.from = r, this.to = e + n.to[this.rangeIndex], this.value = n.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)\n          break;\n      }\n  }\n  setRangeIndex(e) {\n    if (e == this.layer.chunk[this.chunkIndex].value.length) {\n      if (this.chunkIndex++, this.skip)\n        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); )\n          this.chunkIndex++;\n      this.rangeIndex = 0;\n    } else\n      this.rangeIndex = e;\n  }\n  nextChunk() {\n    this.chunkIndex++, this.rangeIndex = 0, this.next();\n  }\n  compare(e) {\n    return this.from - e.from || this.startSide - e.startSide || this.rank - e.rank || this.to - e.to || this.endSide - e.endSide;\n  }\n}\nclass hl {\n  constructor(e) {\n    this.heap = e;\n  }\n  static from(e, n = null, r = -1) {\n    let i = [];\n    for (let s = 0; s < e.length; s++)\n      for (let o = e[s]; !o.isEmpty; o = o.nextLayer)\n        o.maxPoint >= r && i.push(new Gw(o, n, r, s));\n    return i.length == 1 ? i[0] : new hl(i);\n  }\n  get startSide() {\n    return this.value ? this.value.startSide : 0;\n  }\n  goto(e, n = -1e9) {\n    for (let r of this.heap)\n      r.goto(e, n);\n    for (let r = this.heap.length >> 1; r >= 0; r--)\n      wf(this.heap, r);\n    return this.next(), this;\n  }\n  forward(e, n) {\n    for (let r of this.heap)\n      r.forward(e, n);\n    for (let r = this.heap.length >> 1; r >= 0; r--)\n      wf(this.heap, r);\n    (this.to - e || this.value.endSide - n) < 0 && this.next();\n  }\n  next() {\n    if (this.heap.length == 0)\n      this.from = this.to = 1e9, this.value = null, this.rank = -1;\n    else {\n      let e = this.heap[0];\n      this.from = e.from, this.to = e.to, this.value = e.value, this.rank = e.rank, e.value && e.next(), wf(this.heap, 0);\n    }\n  }\n}\nfunction wf(t, e) {\n  for (let n = t[e]; ; ) {\n    let r = (e << 1) + 1;\n    if (r >= t.length)\n      break;\n    let i = t[r];\n    if (r + 1 < t.length && i.compare(t[r + 1]) >= 0 && (i = t[r + 1], r++), n.compare(i) < 0)\n      break;\n    t[r] = n, t[e] = i, e = r;\n  }\n}\nclass va {\n  constructor(e, n, r) {\n    this.minPoint = r, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = hl.from(e, n, r);\n  }\n  goto(e, n = -1e9) {\n    return this.cursor.goto(e, n), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = e, this.endSide = n, this.openStart = -1, this.next(), this;\n  }\n  forward(e, n) {\n    for (; this.minActive > -1 && (this.activeTo[this.minActive] - e || this.active[this.minActive].endSide - n) < 0; )\n      this.removeActive(this.minActive);\n    this.cursor.forward(e, n);\n  }\n  removeActive(e) {\n    kc(this.active, e), kc(this.activeTo, e), kc(this.activeRank, e), this.minActive = Mb(this.active, this.activeTo);\n  }\n  addActive(e) {\n    let n = 0, { value: r, to: i, rank: s } = this.cursor;\n    for (; n < this.activeRank.length && (s - this.activeRank[n] || i - this.activeTo[n]) > 0; )\n      n++;\n    xc(this.active, n, r), xc(this.activeTo, n, i), xc(this.activeRank, n, s), e && xc(e, n, this.cursor.from), this.minActive = Mb(this.active, this.activeTo);\n  }\n  // After calling this, if `this.point` != null, the next range is a\n  // point. Otherwise, it's a regular range, covered by `this.active`.\n  next() {\n    let e = this.to, n = this.point;\n    this.point = null;\n    let r = this.openStart < 0 ? [] : null;\n    for (; ; ) {\n      let i = this.minActive;\n      if (i > -1 && (this.activeTo[i] - this.cursor.from || this.active[i].endSide - this.cursor.startSide) < 0) {\n        if (this.activeTo[i] > e) {\n          this.to = this.activeTo[i], this.endSide = this.active[i].endSide;\n          break;\n        }\n        this.removeActive(i), r && kc(r, i);\n      } else if (this.cursor.value)\n        if (this.cursor.from > e) {\n          this.to = this.cursor.from, this.endSide = this.cursor.startSide;\n          break;\n        } else {\n          let s = this.cursor.value;\n          if (!s.point)\n            this.addActive(r), this.cursor.next();\n          else if (n && this.cursor.to == this.to && this.cursor.from < this.cursor.to)\n            this.cursor.next();\n          else {\n            this.point = s, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = s.endSide, this.cursor.next(), this.forward(this.to, this.endSide);\n            break;\n          }\n        }\n      else {\n        this.to = this.endSide = 1e9;\n        break;\n      }\n    }\n    if (r) {\n      this.openStart = 0;\n      for (let i = r.length - 1; i >= 0 && r[i] < e; i--)\n        this.openStart++;\n    }\n  }\n  activeForPoint(e) {\n    if (!this.active.length)\n      return this.active;\n    let n = [];\n    for (let r = this.active.length - 1; r >= 0 && !(this.activeRank[r] < this.pointRank); r--)\n      (this.activeTo[r] > e || this.activeTo[r] == e && this.active[r].endSide >= this.point.endSide) && n.push(this.active[r]);\n    return n.reverse();\n  }\n  openEnd(e) {\n    let n = 0;\n    for (let r = this.activeTo.length - 1; r >= 0 && this.activeTo[r] > e; r--)\n      n++;\n    return n;\n  }\n}\nfunction Wb(t, e, n, r, i, s) {\n  t.goto(e), n.goto(r);\n  let o = r + i, a = r, l = r - e;\n  for (; ; ) {\n    let c = t.to + l - n.to || t.endSide - n.endSide, u = c < 0 ? t.to + l : n.to, d = Math.min(u, o);\n    if (t.point || n.point ? t.point && n.point && (t.point == n.point || t.point.eq(n.point)) && Jh(t.activeForPoint(t.to), n.activeForPoint(n.to)) || s.comparePoint(a, d, t.point, n.point) : d > a && !Jh(t.active, n.active) && s.compareRange(a, d, t.active, n.active), u > o)\n      break;\n    a = u, c <= 0 && t.next(), c >= 0 && n.next();\n  }\n}\nfunction Jh(t, e) {\n  if (t.length != e.length)\n    return !1;\n  for (let n = 0; n < t.length; n++)\n    if (t[n] != e[n] && !t[n].eq(e[n]))\n      return !1;\n  return !0;\n}\nfunction kc(t, e) {\n  for (let n = e, r = t.length - 1; n < r; n++)\n    t[n] = t[n + 1];\n  t.pop();\n}\nfunction xc(t, e, n) {\n  for (let r = t.length - 1; r >= e; r--)\n    t[r + 1] = t[r];\n  t[e] = n;\n}\nfunction Mb(t, e) {\n  let n = -1, r = 1e9;\n  for (let i = 0; i < e.length; i++)\n    (e[i] - r || t[i].endSide - t[n].endSide) < 0 && (n = i, r = e[i]);\n  return n;\n}\nfunction ig(t, e, n = t.length) {\n  let r = 0;\n  for (let i = 0; i < n; )\n    t.charCodeAt(i) == 9 ? (r += e - r % e, i++) : (r++, i = Rr(t, i));\n  return r;\n}\nfunction hN(t, e, n, r) {\n  for (let i = 0, s = 0; ; ) {\n    if (s >= e)\n      return i;\n    if (i == t.length)\n      break;\n    s += t.charCodeAt(i) == 9 ? n - s % n : 1, i = Rr(t, i);\n  }\n  return r === !0 ? -1 : t.length;\n}\nconst ep = \"ͼ\", Xb = typeof Symbol > \"u\" ? \"__\" + ep : Symbol.for(ep), tp = typeof Symbol > \"u\" ? \"__styleSet\" + Math.floor(Math.random() * 1e8) : Symbol(\"styleSet\"), jb = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : {};\nclass ss {\n  // :: (Object<Style>, ?{finish: ?(string) → string})\n  // Create a style module from the given spec.\n  //\n  // When `finish` is given, it is called on regular (non-`@`)\n  // selectors (after `&` expansion) to compute the final selector.\n  constructor(e, n) {\n    this.rules = [];\n    let { finish: r } = n || {};\n    function i(o) {\n      return /^@/.test(o) ? [o] : o.split(/,\\s*/);\n    }\n    function s(o, a, l, c) {\n      let u = [], d = /^@(\\w+)\\b/.exec(o[0]), f = d && d[1] == \"keyframes\";\n      if (d && a == null)\n        return l.push(o[0] + \";\");\n      for (let h in a) {\n        let p = a[h];\n        if (/&/.test(h))\n          s(\n            h.split(/,\\s*/).map((O) => o.map((m) => O.replace(/&/, m))).reduce((O, m) => O.concat(m)),\n            p,\n            l\n          );\n        else if (p && typeof p == \"object\") {\n          if (!d)\n            throw new RangeError(\"The value of a property (\" + h + \") should be a primitive value.\");\n          s(i(h), p, u, f);\n        } else\n          p != null && u.push(h.replace(/_.*/, \"\").replace(/[A-Z]/g, (O) => \"-\" + O.toLowerCase()) + \": \" + p + \";\");\n      }\n      (u.length || f) && l.push((r && !d && !c ? o.map(r) : o).join(\", \") + \" {\" + u.join(\" \") + \"}\");\n    }\n    for (let o in e)\n      s(i(o), e[o], this.rules);\n  }\n  // :: () → string\n  // Returns a string containing the module's CSS rules.\n  getRules() {\n    return this.rules.join(`\n`);\n  }\n  // :: () → string\n  // Generate a new unique CSS class name.\n  static newName() {\n    let e = jb[Xb] || 1;\n    return jb[Xb] = e + 1, ep + e.toString(36);\n  }\n  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})\n  //\n  // Mount the given set of modules in the given DOM root, which ensures\n  // that the CSS rules defined by the module are available in that\n  // context.\n  //\n  // Rules are only added to the document once per root.\n  //\n  // Rule order will follow the order of the modules, so that rules from\n  // modules later in the array take precedence of those from earlier\n  // modules. If you call this function multiple times for the same root\n  // in a way that changes the order of already mounted modules, the old\n  // order will be changed.\n  //\n  // If a Content Security Policy nonce is provided, it is added to\n  // the `<style>` tag generated by the library.\n  static mount(e, n, r) {\n    let i = e[tp], s = r && r.nonce;\n    i ? s && i.setNonce(s) : i = new pN(e, s), i.mount(Array.isArray(n) ? n : [n]);\n  }\n}\nlet Bb = /* @__PURE__ */ new Map();\nclass pN {\n  constructor(e, n) {\n    this.root = e;\n    let r = e.ownerDocument || e, i = r.defaultView;\n    if (!e.head && e.adoptedStyleSheets && i.CSSStyleSheet) {\n      let s = Bb.get(r);\n      if (s)\n        return e[tp] = s;\n      this.sheet = new i.CSSStyleSheet(), Bb.set(r, this);\n    } else\n      this.styleTag = r.createElement(\"style\"), n && this.styleTag.setAttribute(\"nonce\", n);\n    this.modules = [], e[tp] = this;\n  }\n  mount(e) {\n    let n = this.sheet, r = 0, i = 0;\n    for (let s = 0; s < e.length; s++) {\n      let o = e[s], a = this.modules.indexOf(o);\n      if (a < i && a > -1 && (this.modules.splice(a, 1), i--, a = -1), a == -1) {\n        if (this.modules.splice(i++, 0, o), n)\n          for (let l = 0; l < o.rules.length; l++)\n            n.insertRule(o.rules[l], r++);\n      } else {\n        for (; i < a; )\n          r += this.modules[i++].rules.length;\n        r += o.rules.length, i++;\n      }\n    }\n    if (n)\n      this.root.adoptedStyleSheets.indexOf(this.sheet) < 0 && (this.root.adoptedStyleSheets = [this.sheet, ...this.root.adoptedStyleSheets]);\n    else {\n      let s = \"\";\n      for (let a = 0; a < this.modules.length; a++)\n        s += this.modules[a].getRules() + `\n`;\n      this.styleTag.textContent = s;\n      let o = this.root.head || this.root;\n      this.styleTag.parentNode != o && o.insertBefore(this.styleTag, o.firstChild);\n    }\n  }\n  setNonce(e) {\n    this.styleTag && this.styleTag.getAttribute(\"nonce\") != e && this.styleTag.setAttribute(\"nonce\", e);\n  }\n}\nvar os = {\n  8: \"Backspace\",\n  9: \"Tab\",\n  10: \"Enter\",\n  12: \"NumLock\",\n  13: \"Enter\",\n  16: \"Shift\",\n  17: \"Control\",\n  18: \"Alt\",\n  20: \"CapsLock\",\n  27: \"Escape\",\n  32: \" \",\n  33: \"PageUp\",\n  34: \"PageDown\",\n  35: \"End\",\n  36: \"Home\",\n  37: \"ArrowLeft\",\n  38: \"ArrowUp\",\n  39: \"ArrowRight\",\n  40: \"ArrowDown\",\n  44: \"PrintScreen\",\n  45: \"Insert\",\n  46: \"Delete\",\n  59: \";\",\n  61: \"=\",\n  91: \"Meta\",\n  92: \"Meta\",\n  106: \"*\",\n  107: \"+\",\n  108: \",\",\n  109: \"-\",\n  110: \".\",\n  111: \"/\",\n  144: \"NumLock\",\n  145: \"ScrollLock\",\n  160: \"Shift\",\n  161: \"Shift\",\n  162: \"Control\",\n  163: \"Control\",\n  164: \"Alt\",\n  165: \"Alt\",\n  173: \"-\",\n  186: \";\",\n  187: \"=\",\n  188: \",\",\n  189: \"-\",\n  190: \".\",\n  191: \"/\",\n  192: \"`\",\n  219: \"[\",\n  220: \"\\\\\",\n  221: \"]\",\n  222: \"'\"\n}, pl = {\n  48: \")\",\n  49: \"!\",\n  50: \"@\",\n  51: \"#\",\n  52: \"$\",\n  53: \"%\",\n  54: \"^\",\n  55: \"&\",\n  56: \"*\",\n  57: \"(\",\n  59: \":\",\n  61: \"+\",\n  173: \"_\",\n  186: \":\",\n  187: \"+\",\n  188: \"<\",\n  189: \"_\",\n  190: \">\",\n  191: \"?\",\n  192: \"~\",\n  219: \"{\",\n  220: \"|\",\n  221: \"}\",\n  222: '\"'\n}, ON = typeof navigator < \"u\" && /Mac/.test(navigator.platform), gN = typeof navigator < \"u\" && /MSIE \\d|Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent);\nfor (var Ht = 0; Ht < 10; Ht++)\n  os[48 + Ht] = os[96 + Ht] = String(Ht);\nfor (var Ht = 1; Ht <= 24; Ht++)\n  os[Ht + 111] = \"F\" + Ht;\nfor (var Ht = 65; Ht <= 90; Ht++)\n  os[Ht] = String.fromCharCode(Ht + 32), pl[Ht] = String.fromCharCode(Ht);\nfor (var kf in os)\n  pl.hasOwnProperty(kf) || (pl[kf] = os[kf]);\nfunction mN(t) {\n  var e = ON && t.metaKey && t.shiftKey && !t.ctrlKey && !t.altKey || gN && t.shiftKey && t.key && t.key.length == 1 || t.key == \"Unidentified\", n = !e && t.key || (t.shiftKey ? pl : os)[t.keyCode] || t.key || \"Unidentified\";\n  return n == \"Esc\" && (n = \"Escape\"), n == \"Del\" && (n = \"Delete\"), n == \"Left\" && (n = \"ArrowLeft\"), n == \"Up\" && (n = \"ArrowUp\"), n == \"Right\" && (n = \"ArrowRight\"), n == \"Down\" && (n = \"ArrowDown\"), n;\n}\nfunction Iu(t) {\n  let e;\n  return t.nodeType == 11 ? e = t.getSelection ? t : t.ownerDocument : e = t, e.getSelection();\n}\nfunction np(t, e) {\n  return e ? t == e || t.contains(e.nodeType != 1 ? e.parentNode : e) : !1;\n}\nfunction bN(t) {\n  let e = t.activeElement;\n  for (; e && e.shadowRoot; )\n    e = e.shadowRoot.activeElement;\n  return e;\n}\nfunction ru(t, e) {\n  if (!e.anchorNode)\n    return !1;\n  try {\n    return np(t, e.anchorNode);\n  } catch {\n    return !1;\n  }\n}\nfunction Ol(t) {\n  return t.nodeType == 3 ? Ys(t, 0, t.nodeValue.length).getClientRects() : t.nodeType == 1 ? t.getClientRects() : [];\n}\nfunction za(t, e, n, r) {\n  return n ? Lb(t, e, n, r, -1) || Lb(t, e, n, r, 1) : !1;\n}\nfunction gl(t) {\n  for (var e = 0; ; e++)\n    if (t = t.previousSibling, !t)\n      return e;\n}\nfunction Lb(t, e, n, r, i) {\n  for (; ; ) {\n    if (t == n && e == r)\n      return !0;\n    if (e == (i < 0 ? 0 : fi(t))) {\n      if (t.nodeName == \"DIV\")\n        return !1;\n      let s = t.parentNode;\n      if (!s || s.nodeType != 1)\n        return !1;\n      e = gl(t) + (i < 0 ? 0 : 1), t = s;\n    } else if (t.nodeType == 1) {\n      if (t = t.childNodes[e + (i < 0 ? -1 : 0)], t.nodeType == 1 && t.contentEditable == \"false\")\n        return !1;\n      e = i < 0 ? fi(t) : 0;\n    } else\n      return !1;\n  }\n}\nfunction fi(t) {\n  return t.nodeType == 3 ? t.nodeValue.length : t.childNodes.length;\n}\nfunction sg(t, e) {\n  let n = e ? t.left : t.right;\n  return { left: n, right: n, top: t.top, bottom: t.bottom };\n}\nfunction vN(t) {\n  return {\n    left: 0,\n    right: t.innerWidth,\n    top: 0,\n    bottom: t.innerHeight\n  };\n}\nfunction Kw(t, e) {\n  let n = e.width / t.offsetWidth, r = e.height / t.offsetHeight;\n  return (n > 0.995 && n < 1.005 || !isFinite(n) || Math.abs(e.width - t.offsetWidth) < 1) && (n = 1), (r > 0.995 && r < 1.005 || !isFinite(r) || Math.abs(e.height - t.offsetHeight) < 1) && (r = 1), { scaleX: n, scaleY: r };\n}\nfunction yN(t, e, n, r, i, s, o, a) {\n  let l = t.ownerDocument, c = l.defaultView || window;\n  for (let u = t, d = !1; u && !d; )\n    if (u.nodeType == 1) {\n      let f, h = u == l.body, p = 1, O = 1;\n      if (h)\n        f = vN(c);\n      else {\n        if (/^(fixed|sticky)$/.test(getComputedStyle(u).position) && (d = !0), u.scrollHeight <= u.clientHeight && u.scrollWidth <= u.clientWidth) {\n          u = u.assignedSlot || u.parentNode;\n          continue;\n        }\n        let b = u.getBoundingClientRect();\n        ({ scaleX: p, scaleY: O } = Kw(u, b)), f = {\n          left: b.left,\n          right: b.left + u.clientWidth * p,\n          top: b.top,\n          bottom: b.top + u.clientHeight * O\n        };\n      }\n      let m = 0, y = 0;\n      if (i == \"nearest\")\n        e.top < f.top ? (y = -(f.top - e.top + o), n > 0 && e.bottom > f.bottom + y && (y = e.bottom - f.bottom + y + o)) : e.bottom > f.bottom && (y = e.bottom - f.bottom + o, n < 0 && e.top - y < f.top && (y = -(f.top + y - e.top + o)));\n      else {\n        let b = e.bottom - e.top, g = f.bottom - f.top;\n        y = (i == \"center\" && b <= g ? e.top + b / 2 - g / 2 : i == \"start\" || i == \"center\" && n < 0 ? e.top - o : e.bottom - g + o) - f.top;\n      }\n      if (r == \"nearest\" ? e.left < f.left ? (m = -(f.left - e.left + s), n > 0 && e.right > f.right + m && (m = e.right - f.right + m + s)) : e.right > f.right && (m = e.right - f.right + s, n < 0 && e.left < f.left + m && (m = -(f.left + m - e.left + s))) : m = (r == \"center\" ? e.left + (e.right - e.left) / 2 - (f.right - f.left) / 2 : r == \"start\" == a ? e.left - s : e.right - (f.right - f.left) + s) - f.left, m || y)\n        if (h)\n          c.scrollBy(m, y);\n        else {\n          let b = 0, g = 0;\n          if (y) {\n            let v = u.scrollTop;\n            u.scrollTop += y / O, g = (u.scrollTop - v) * O;\n          }\n          if (m) {\n            let v = u.scrollLeft;\n            u.scrollLeft += m / p, b = (u.scrollLeft - v) * p;\n          }\n          e = {\n            left: e.left - b,\n            top: e.top - g,\n            right: e.right - b,\n            bottom: e.bottom - g\n          }, b && Math.abs(b - m) < 1 && (r = \"nearest\"), g && Math.abs(g - y) < 1 && (i = \"nearest\");\n        }\n      if (h)\n        break;\n      u = u.assignedSlot || u.parentNode;\n    } else if (u.nodeType == 11)\n      u = u.host;\n    else\n      break;\n}\nfunction SN(t) {\n  let e = t.ownerDocument;\n  for (let n = t.parentNode; n && n != e.body; )\n    if (n.nodeType == 1) {\n      if (n.scrollHeight > n.clientHeight || n.scrollWidth > n.clientWidth)\n        return n;\n      n = n.assignedSlot || n.parentNode;\n    } else if (n.nodeType == 11)\n      n = n.host;\n    else\n      break;\n  return null;\n}\nclass wN {\n  constructor() {\n    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;\n  }\n  eq(e) {\n    return this.anchorNode == e.anchorNode && this.anchorOffset == e.anchorOffset && this.focusNode == e.focusNode && this.focusOffset == e.focusOffset;\n  }\n  setRange(e) {\n    let { anchorNode: n, focusNode: r } = e;\n    this.set(n, Math.min(e.anchorOffset, n ? fi(n) : 0), r, Math.min(e.focusOffset, r ? fi(r) : 0));\n  }\n  set(e, n, r, i) {\n    this.anchorNode = e, this.anchorOffset = n, this.focusNode = r, this.focusOffset = i;\n  }\n}\nlet oo = null;\nfunction Jw(t) {\n  if (t.setActive)\n    return t.setActive();\n  if (oo)\n    return t.focus(oo);\n  let e = [];\n  for (let n = t; n && (e.push(n, n.scrollTop, n.scrollLeft), n != n.ownerDocument); n = n.parentNode)\n    ;\n  if (t.focus(oo == null ? {\n    get preventScroll() {\n      return oo = { preventScroll: !0 }, !0;\n    }\n  } : void 0), !oo) {\n    oo = !1;\n    for (let n = 0; n < e.length; ) {\n      let r = e[n++], i = e[n++], s = e[n++];\n      r.scrollTop != i && (r.scrollTop = i), r.scrollLeft != s && (r.scrollLeft = s);\n    }\n  }\n}\nlet Ub;\nfunction Ys(t, e, n = e) {\n  let r = Ub || (Ub = document.createRange());\n  return r.setEnd(t, n), r.setStart(t, e), r;\n}\nfunction To(t, e, n) {\n  let r = { key: e, code: e, keyCode: n, which: n, cancelable: !0 }, i = new KeyboardEvent(\"keydown\", r);\n  i.synthetic = !0, t.dispatchEvent(i);\n  let s = new KeyboardEvent(\"keyup\", r);\n  return s.synthetic = !0, t.dispatchEvent(s), i.defaultPrevented || s.defaultPrevented;\n}\nfunction kN(t) {\n  for (; t; ) {\n    if (t && (t.nodeType == 9 || t.nodeType == 11 && t.host))\n      return t;\n    t = t.assignedSlot || t.parentNode;\n  }\n  return null;\n}\nfunction ek(t) {\n  for (; t.attributes.length; )\n    t.removeAttributeNode(t.attributes[0]);\n}\nfunction xN(t, e) {\n  let n = e.focusNode, r = e.focusOffset;\n  if (!n || e.anchorNode != n || e.anchorOffset != r)\n    return !1;\n  for (r = Math.min(r, fi(n)); ; )\n    if (r) {\n      if (n.nodeType != 1)\n        return !1;\n      let i = n.childNodes[r - 1];\n      i.contentEditable == \"false\" ? r-- : (n = i, r = fi(n));\n    } else {\n      if (n == t)\n        return !0;\n      r = gl(n), n = n.parentNode;\n    }\n}\nfunction tk(t) {\n  return t.scrollTop > Math.max(1, t.scrollHeight - t.clientHeight - 4);\n}\nclass an {\n  constructor(e, n, r = !0) {\n    this.node = e, this.offset = n, this.precise = r;\n  }\n  static before(e, n) {\n    return new an(e.parentNode, gl(e), n);\n  }\n  static after(e, n) {\n    return new an(e.parentNode, gl(e) + 1, n);\n  }\n}\nconst og = [];\nclass ft {\n  constructor() {\n    this.parent = null, this.dom = null, this.flags = 2;\n  }\n  get overrideDOMText() {\n    return null;\n  }\n  get posAtStart() {\n    return this.parent ? this.parent.posBefore(this) : 0;\n  }\n  get posAtEnd() {\n    return this.posAtStart + this.length;\n  }\n  posBefore(e) {\n    let n = this.posAtStart;\n    for (let r of this.children) {\n      if (r == e)\n        return n;\n      n += r.length + r.breakAfter;\n    }\n    throw new RangeError(\"Invalid child in posBefore\");\n  }\n  posAfter(e) {\n    return this.posBefore(e) + e.length;\n  }\n  sync(e, n) {\n    if (this.flags & 2) {\n      let r = this.dom, i = null, s;\n      for (let o of this.children) {\n        if (o.flags & 7) {\n          if (!o.dom && (s = i ? i.nextSibling : r.firstChild)) {\n            let a = ft.get(s);\n            (!a || !a.parent && a.canReuseDOM(o)) && o.reuseDOM(s);\n          }\n          o.sync(e, n), o.flags &= -8;\n        }\n        if (s = i ? i.nextSibling : r.firstChild, n && !n.written && n.node == r && s != o.dom && (n.written = !0), o.dom.parentNode == r)\n          for (; s && s != o.dom; )\n            s = qb(s);\n        else\n          r.insertBefore(o.dom, s);\n        i = o.dom;\n      }\n      for (s = i ? i.nextSibling : r.firstChild, s && n && n.node == r && (n.written = !0); s; )\n        s = qb(s);\n    } else if (this.flags & 1)\n      for (let r of this.children)\n        r.flags & 7 && (r.sync(e, n), r.flags &= -8);\n  }\n  reuseDOM(e) {\n  }\n  localPosFromDOM(e, n) {\n    let r;\n    if (e == this.dom)\n      r = this.dom.childNodes[n];\n    else {\n      let i = fi(e) == 0 ? 0 : n == 0 ? -1 : 1;\n      for (; ; ) {\n        let s = e.parentNode;\n        if (s == this.dom)\n          break;\n        i == 0 && s.firstChild != s.lastChild && (e == s.firstChild ? i = -1 : i = 1), e = s;\n      }\n      i < 0 ? r = e : r = e.nextSibling;\n    }\n    if (r == this.dom.firstChild)\n      return 0;\n    for (; r && !ft.get(r); )\n      r = r.nextSibling;\n    if (!r)\n      return this.length;\n    for (let i = 0, s = 0; ; i++) {\n      let o = this.children[i];\n      if (o.dom == r)\n        return s;\n      s += o.length + o.breakAfter;\n    }\n  }\n  domBoundsAround(e, n, r = 0) {\n    let i = -1, s = -1, o = -1, a = -1;\n    for (let l = 0, c = r, u = r; l < this.children.length; l++) {\n      let d = this.children[l], f = c + d.length;\n      if (c < e && f > n)\n        return d.domBoundsAround(e, n, c);\n      if (f >= e && i == -1 && (i = l, s = c), c > n && d.dom.parentNode == this.dom) {\n        o = l, a = u;\n        break;\n      }\n      u = f, c = f + d.breakAfter;\n    }\n    return {\n      from: s,\n      to: a < 0 ? r + this.length : a,\n      startDOM: (i ? this.children[i - 1].dom.nextSibling : null) || this.dom.firstChild,\n      endDOM: o < this.children.length && o >= 0 ? this.children[o].dom : null\n    };\n  }\n  markDirty(e = !1) {\n    this.flags |= 2, this.markParentsDirty(e);\n  }\n  markParentsDirty(e) {\n    for (let n = this.parent; n; n = n.parent) {\n      if (e && (n.flags |= 2), n.flags & 1)\n        return;\n      n.flags |= 1, e = !1;\n    }\n  }\n  setParent(e) {\n    this.parent != e && (this.parent = e, this.flags & 7 && this.markParentsDirty(!0));\n  }\n  setDOM(e) {\n    this.dom != e && (this.dom && (this.dom.cmView = null), this.dom = e, e.cmView = this);\n  }\n  get rootView() {\n    for (let e = this; ; ) {\n      let n = e.parent;\n      if (!n)\n        return e;\n      e = n;\n    }\n  }\n  replaceChildren(e, n, r = og) {\n    this.markDirty();\n    for (let i = e; i < n; i++) {\n      let s = this.children[i];\n      s.parent == this && r.indexOf(s) < 0 && s.destroy();\n    }\n    this.children.splice(e, n - e, ...r);\n    for (let i = 0; i < r.length; i++)\n      r[i].setParent(this);\n  }\n  ignoreMutation(e) {\n    return !1;\n  }\n  ignoreEvent(e) {\n    return !1;\n  }\n  childCursor(e = this.length) {\n    return new nk(this.children, e, this.children.length);\n  }\n  childPos(e, n = 1) {\n    return this.childCursor().findPos(e, n);\n  }\n  toString() {\n    let e = this.constructor.name.replace(\"View\", \"\");\n    return e + (this.children.length ? \"(\" + this.children.join() + \")\" : this.length ? \"[\" + (e == \"Text\" ? this.text : this.length) + \"]\" : \"\") + (this.breakAfter ? \"#\" : \"\");\n  }\n  static get(e) {\n    return e.cmView;\n  }\n  get isEditable() {\n    return !0;\n  }\n  get isWidget() {\n    return !1;\n  }\n  get isHidden() {\n    return !1;\n  }\n  merge(e, n, r, i, s, o) {\n    return !1;\n  }\n  become(e) {\n    return !1;\n  }\n  canReuseDOM(e) {\n    return e.constructor == this.constructor && !((this.flags | e.flags) & 8);\n  }\n  // When this is a zero-length view with a side, this should return a\n  // number <= 0 to indicate it is before its position, or a\n  // number > 0 when after its position.\n  getSide() {\n    return 0;\n  }\n  destroy() {\n    for (let e of this.children)\n      e.parent == this && e.destroy();\n    this.parent = null;\n  }\n}\nft.prototype.breakAfter = 0;\nfunction qb(t) {\n  let e = t.nextSibling;\n  return t.parentNode.removeChild(t), e;\n}\nclass nk {\n  constructor(e, n, r) {\n    this.children = e, this.pos = n, this.i = r, this.off = 0;\n  }\n  findPos(e, n = 1) {\n    for (; ; ) {\n      if (e > this.pos || e == this.pos && (n > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))\n        return this.off = e - this.pos, this;\n      let r = this.children[--this.i];\n      this.pos -= r.length + r.breakAfter;\n    }\n  }\n}\nfunction rk(t, e, n, r, i, s, o, a, l) {\n  let { children: c } = t, u = c.length ? c[e] : null, d = s.length ? s[s.length - 1] : null, f = d ? d.breakAfter : o;\n  if (!(e == r && u && !o && !f && s.length < 2 && u.merge(n, i, s.length ? d : null, n == 0, a, l))) {\n    if (r < c.length) {\n      let h = c[r];\n      h && (i < h.length || h.breakAfter && (d != null && d.breakAfter)) ? (e == r && (h = h.split(i), i = 0), !f && d && h.merge(0, i, d, !0, 0, l) ? s[s.length - 1] = h : ((i || h.children.length && !h.children[0].length) && h.merge(0, i, null, !1, 0, l), s.push(h))) : h != null && h.breakAfter && (d ? d.breakAfter = 1 : o = 1), r++;\n    }\n    for (u && (u.breakAfter = o, n > 0 && (!o && s.length && u.merge(n, u.length, s[0], !1, a, 0) ? u.breakAfter = s.shift().breakAfter : (n < u.length || u.children.length && u.children[u.children.length - 1].length == 0) && u.merge(n, u.length, null, !1, a, 0), e++)); e < r && s.length; )\n      if (c[r - 1].become(s[s.length - 1]))\n        r--, s.pop(), l = s.length ? 0 : a;\n      else if (c[e].become(s[0]))\n        e++, s.shift(), a = s.length ? 0 : l;\n      else\n        break;\n    !s.length && e && r < c.length && !c[e - 1].breakAfter && c[r].merge(0, 0, c[e - 1], !1, a, l) && e--, (e < r || s.length) && t.replaceChildren(e, r, s);\n  }\n}\nfunction ik(t, e, n, r, i, s) {\n  let o = t.childCursor(), { i: a, off: l } = o.findPos(n, 1), { i: c, off: u } = o.findPos(e, -1), d = e - n;\n  for (let f of r)\n    d += f.length;\n  t.length += d, rk(t, c, u, a, l, r, 0, i, s);\n}\nlet Vn = typeof navigator < \"u\" ? navigator : { userAgent: \"\", vendor: \"\", platform: \"\" }, rp = typeof document < \"u\" ? document : { documentElement: { style: {} } };\nconst ip = /* @__PURE__ */ /Edge\\/(\\d+)/.exec(Vn.userAgent), sk = /* @__PURE__ */ /MSIE \\d/.test(Vn.userAgent), sp = /* @__PURE__ */ /Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(Vn.userAgent), qd = !!(sk || sp || ip), Yb = !qd && /* @__PURE__ */ /gecko\\/(\\d+)/i.test(Vn.userAgent), xf = !qd && /* @__PURE__ */ /Chrome\\/(\\d+)/.exec(Vn.userAgent), zb = \"webkitFontSmoothing\" in rp.documentElement.style, ok = !qd && /* @__PURE__ */ /Apple Computer/.test(Vn.vendor), Hb = ok && (/* @__PURE__ */ /Mobile\\/\\w+/.test(Vn.userAgent) || Vn.maxTouchPoints > 2);\nvar de = {\n  mac: Hb || /* @__PURE__ */ /Mac/.test(Vn.platform),\n  windows: /* @__PURE__ */ /Win/.test(Vn.platform),\n  linux: /* @__PURE__ */ /Linux|X11/.test(Vn.platform),\n  ie: qd,\n  ie_version: sk ? rp.documentMode || 6 : sp ? +sp[1] : ip ? +ip[1] : 0,\n  gecko: Yb,\n  gecko_version: Yb ? +(/* @__PURE__ */ /Firefox\\/(\\d+)/.exec(Vn.userAgent) || [0, 0])[1] : 0,\n  chrome: !!xf,\n  chrome_version: xf ? +xf[1] : 0,\n  ios: Hb,\n  android: /* @__PURE__ */ /Android\\b/.test(Vn.userAgent),\n  webkit: zb,\n  safari: ok,\n  webkit_version: zb ? +(/* @__PURE__ */ /\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,\n  tabSize: rp.documentElement.style.tabSize != null ? \"tab-size\" : \"-moz-tab-size\"\n};\nconst PN = 256;\nclass hi extends ft {\n  constructor(e) {\n    super(), this.text = e;\n  }\n  get length() {\n    return this.text.length;\n  }\n  createDOM(e) {\n    this.setDOM(e || document.createTextNode(this.text));\n  }\n  sync(e, n) {\n    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (n && n.node == this.dom && (n.written = !0), this.dom.nodeValue = this.text);\n  }\n  reuseDOM(e) {\n    e.nodeType == 3 && this.createDOM(e);\n  }\n  merge(e, n, r) {\n    return this.flags & 8 || r && (!(r instanceof hi) || this.length - (n - e) + r.length > PN || r.flags & 8) ? !1 : (this.text = this.text.slice(0, e) + (r ? r.text : \"\") + this.text.slice(n), this.markDirty(), !0);\n  }\n  split(e) {\n    let n = new hi(this.text.slice(e));\n    return this.text = this.text.slice(0, e), this.markDirty(), n.flags |= this.flags & 8, n;\n  }\n  localPosFromDOM(e, n) {\n    return e == this.dom ? n : n ? this.text.length : 0;\n  }\n  domAtPos(e) {\n    return new an(this.dom, e);\n  }\n  domBoundsAround(e, n, r) {\n    return { from: r, to: r + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };\n  }\n  coordsAt(e, n) {\n    return _N(this.dom, e, n);\n  }\n}\nclass pi extends ft {\n  constructor(e, n = [], r = 0) {\n    super(), this.mark = e, this.children = n, this.length = r;\n    for (let i of n)\n      i.setParent(this);\n  }\n  setAttrs(e) {\n    if (ek(e), this.mark.class && (e.className = this.mark.class), this.mark.attrs)\n      for (let n in this.mark.attrs)\n        e.setAttribute(n, this.mark.attrs[n]);\n    return e;\n  }\n  canReuseDOM(e) {\n    return super.canReuseDOM(e) && !((this.flags | e.flags) & 8);\n  }\n  reuseDOM(e) {\n    e.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(e), this.flags |= 6);\n  }\n  sync(e, n) {\n    this.dom ? this.flags & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(e, n);\n  }\n  merge(e, n, r, i, s, o) {\n    return r && (!(r instanceof pi && r.mark.eq(this.mark)) || e && s <= 0 || n < this.length && o <= 0) ? !1 : (ik(this, e, n, r ? r.children.slice() : [], s - 1, o - 1), this.markDirty(), !0);\n  }\n  split(e) {\n    let n = [], r = 0, i = -1, s = 0;\n    for (let a of this.children) {\n      let l = r + a.length;\n      l > e && n.push(r < e ? a.split(e - r) : a), i < 0 && r >= e && (i = s), r = l, s++;\n    }\n    let o = this.length - e;\n    return this.length = e, i > -1 && (this.children.length = i, this.markDirty()), new pi(this.mark, n, o);\n  }\n  domAtPos(e) {\n    return ak(this, e);\n  }\n  coordsAt(e, n) {\n    return ck(this, e, n);\n  }\n}\nfunction _N(t, e, n) {\n  let r = t.nodeValue.length;\n  e > r && (e = r);\n  let i = e, s = e, o = 0;\n  e == 0 && n < 0 || e == r && n >= 0 ? de.chrome || de.gecko || (e ? (i--, o = 1) : s < r && (s++, o = -1)) : n < 0 ? i-- : s < r && s++;\n  let a = Ys(t, i, s).getClientRects();\n  if (!a.length)\n    return null;\n  let l = a[(o ? o < 0 : n >= 0) ? 0 : a.length - 1];\n  return de.safari && !o && l.width == 0 && (l = Array.prototype.find.call(a, (c) => c.width) || l), o ? sg(l, o < 0) : l || null;\n}\nclass Ps extends ft {\n  static create(e, n, r) {\n    return new Ps(e, n, r);\n  }\n  constructor(e, n, r) {\n    super(), this.widget = e, this.length = n, this.side = r, this.prevWidget = null;\n  }\n  split(e) {\n    let n = Ps.create(this.widget, this.length - e, this.side);\n    return this.length -= e, n;\n  }\n  sync(e) {\n    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = \"false\"));\n  }\n  getSide() {\n    return this.side;\n  }\n  merge(e, n, r, i, s, o) {\n    return r && (!(r instanceof Ps) || !this.widget.compare(r.widget) || e > 0 && s <= 0 || n < this.length && o <= 0) ? !1 : (this.length = e + (r ? r.length : 0) + (this.length - n), !0);\n  }\n  become(e) {\n    return e instanceof Ps && e.side == this.side && this.widget.constructor == e.widget.constructor ? (this.widget.compare(e.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, !0) : !1;\n  }\n  ignoreMutation() {\n    return !0;\n  }\n  ignoreEvent(e) {\n    return this.widget.ignoreEvent(e);\n  }\n  get overrideDOMText() {\n    if (this.length == 0)\n      return Fe.empty;\n    let e = this;\n    for (; e.parent; )\n      e = e.parent;\n    let { view: n } = e, r = n && n.state.doc, i = this.posAtStart;\n    return r ? r.slice(i, i + this.length) : Fe.empty;\n  }\n  domAtPos(e) {\n    return (this.length ? e == 0 : this.side > 0) ? an.before(this.dom) : an.after(this.dom, e == this.length);\n  }\n  domBoundsAround() {\n    return null;\n  }\n  coordsAt(e, n) {\n    let r = this.widget.coordsAt(this.dom, e, n);\n    if (r)\n      return r;\n    let i = this.dom.getClientRects(), s = null;\n    if (!i.length)\n      return null;\n    let o = this.side ? this.side < 0 : e > 0;\n    for (let a = o ? i.length - 1 : 0; s = i[a], !(e > 0 ? a == 0 : a == i.length - 1 || s.top < s.bottom); a += o ? -1 : 1)\n      ;\n    return sg(s, !o);\n  }\n  get isEditable() {\n    return !1;\n  }\n  get isWidget() {\n    return !0;\n  }\n  get isHidden() {\n    return this.widget.isHidden;\n  }\n  destroy() {\n    super.destroy(), this.dom && this.widget.destroy(this.dom);\n  }\n}\nclass Bo extends ft {\n  constructor(e) {\n    super(), this.side = e;\n  }\n  get length() {\n    return 0;\n  }\n  merge() {\n    return !1;\n  }\n  become(e) {\n    return e instanceof Bo && e.side == this.side;\n  }\n  split() {\n    return new Bo(this.side);\n  }\n  sync() {\n    if (!this.dom) {\n      let e = document.createElement(\"img\");\n      e.className = \"cm-widgetBuffer\", e.setAttribute(\"aria-hidden\", \"true\"), this.setDOM(e);\n    }\n  }\n  getSide() {\n    return this.side;\n  }\n  domAtPos(e) {\n    return this.side > 0 ? an.before(this.dom) : an.after(this.dom);\n  }\n  localPosFromDOM() {\n    return 0;\n  }\n  domBoundsAround() {\n    return null;\n  }\n  coordsAt(e) {\n    return this.dom.getBoundingClientRect();\n  }\n  get overrideDOMText() {\n    return Fe.empty;\n  }\n  get isHidden() {\n    return !0;\n  }\n}\nhi.prototype.children = Ps.prototype.children = Bo.prototype.children = og;\nfunction ak(t, e) {\n  let n = t.dom, { children: r } = t, i = 0;\n  for (let s = 0; i < r.length; i++) {\n    let o = r[i], a = s + o.length;\n    if (!(a == s && o.getSide() <= 0)) {\n      if (e > s && e < a && o.dom.parentNode == n)\n        return o.domAtPos(e - s);\n      if (e <= s)\n        break;\n      s = a;\n    }\n  }\n  for (let s = i; s > 0; s--) {\n    let o = r[s - 1];\n    if (o.dom.parentNode == n)\n      return o.domAtPos(o.length);\n  }\n  for (let s = i; s < r.length; s++) {\n    let o = r[s];\n    if (o.dom.parentNode == n)\n      return o.domAtPos(0);\n  }\n  return new an(n, 0);\n}\nfunction lk(t, e, n) {\n  let r, { children: i } = t;\n  n > 0 && e instanceof pi && i.length && (r = i[i.length - 1]) instanceof pi && r.mark.eq(e.mark) ? lk(r, e.children[0], n - 1) : (i.push(e), e.setParent(t)), t.length += e.length;\n}\nfunction ck(t, e, n) {\n  let r = null, i = -1, s = null, o = -1;\n  function a(c, u) {\n    for (let d = 0, f = 0; d < c.children.length && f <= u; d++) {\n      let h = c.children[d], p = f + h.length;\n      p >= u && (h.children.length ? a(h, u - f) : (!s || s.isHidden && n > 0) && (p > u || f == p && h.getSide() > 0) ? (s = h, o = u - f) : (f < u || f == p && h.getSide() < 0 && !h.isHidden) && (r = h, i = u - f)), f = p;\n    }\n  }\n  a(t, e);\n  let l = (n < 0 ? r : s) || r || s;\n  return l ? l.coordsAt(Math.max(0, l == r ? i : o), n) : TN(t);\n}\nfunction TN(t) {\n  let e = t.dom.lastChild;\n  if (!e)\n    return t.dom.getBoundingClientRect();\n  let n = Ol(e);\n  return n[n.length - 1] || null;\n}\nfunction op(t, e) {\n  for (let n in t)\n    n == \"class\" && e.class ? e.class += \" \" + t.class : n == \"style\" && e.style ? e.style += \";\" + t.style : e[n] = t[n];\n  return e;\n}\nconst Fb = /* @__PURE__ */ Object.create(null);\nfunction ag(t, e, n) {\n  if (t == e)\n    return !0;\n  t || (t = Fb), e || (e = Fb);\n  let r = Object.keys(t), i = Object.keys(e);\n  if (r.length - (n && r.indexOf(n) > -1 ? 1 : 0) != i.length - (n && i.indexOf(n) > -1 ? 1 : 0))\n    return !1;\n  for (let s of r)\n    if (s != n && (i.indexOf(s) == -1 || t[s] !== e[s]))\n      return !1;\n  return !0;\n}\nfunction ap(t, e, n) {\n  let r = !1;\n  if (e)\n    for (let i in e)\n      n && i in n || (r = !0, i == \"style\" ? t.style.cssText = \"\" : t.removeAttribute(i));\n  if (n)\n    for (let i in n)\n      e && e[i] == n[i] || (r = !0, i == \"style\" ? t.style.cssText = n[i] : t.setAttribute(i, n[i]));\n  return r;\n}\nfunction EN(t) {\n  let e = /* @__PURE__ */ Object.create(null);\n  for (let n = 0; n < t.attributes.length; n++) {\n    let r = t.attributes[n];\n    e[r.name] = r.value;\n  }\n  return e;\n}\nclass Nt extends ft {\n  constructor() {\n    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;\n  }\n  // Consumes source\n  merge(e, n, r, i, s, o) {\n    if (r) {\n      if (!(r instanceof Nt))\n        return !1;\n      this.dom || r.transferDOM(this);\n    }\n    return i && this.setDeco(r ? r.attrs : null), ik(this, e, n, r ? r.children.slice() : [], s, o), !0;\n  }\n  split(e) {\n    let n = new Nt();\n    if (n.breakAfter = this.breakAfter, this.length == 0)\n      return n;\n    let { i: r, off: i } = this.childPos(e);\n    i && (n.append(this.children[r].split(i), 0), this.children[r].merge(i, this.children[r].length, null, !1, 0, 0), r++);\n    for (let s = r; s < this.children.length; s++)\n      n.append(this.children[s], 0);\n    for (; r > 0 && this.children[r - 1].length == 0; )\n      this.children[--r].destroy();\n    return this.children.length = r, this.markDirty(), this.length = e, n;\n  }\n  transferDOM(e) {\n    this.dom && (this.markDirty(), e.setDOM(this.dom), e.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);\n  }\n  setDeco(e) {\n    ag(this.attrs, e) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = e);\n  }\n  append(e, n) {\n    lk(this, e, n);\n  }\n  // Only called when building a line view in ContentBuilder\n  addLineDeco(e) {\n    let n = e.spec.attributes, r = e.spec.class;\n    n && (this.attrs = op(n, this.attrs || {})), r && (this.attrs = op({ class: r }, this.attrs || {}));\n  }\n  domAtPos(e) {\n    return ak(this, e);\n  }\n  reuseDOM(e) {\n    e.nodeName == \"DIV\" && (this.setDOM(e), this.flags |= 6);\n  }\n  sync(e, n) {\n    var r;\n    this.dom ? this.flags & 4 && (ek(this.dom), this.dom.className = \"cm-line\", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement(\"div\")), this.dom.className = \"cm-line\", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (ap(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add(\"cm-line\"), this.prevAttrs = void 0), super.sync(e, n);\n    let i = this.dom.lastChild;\n    for (; i && ft.get(i) instanceof pi; )\n      i = i.lastChild;\n    if (!i || !this.length || i.nodeName != \"BR\" && ((r = ft.get(i)) === null || r === void 0 ? void 0 : r.isEditable) == !1 && (!de.ios || !this.children.some((s) => s instanceof hi))) {\n      let s = document.createElement(\"BR\");\n      s.cmIgnore = !0, this.dom.appendChild(s);\n    }\n  }\n  measureTextSize() {\n    if (this.children.length == 0 || this.length > 20)\n      return null;\n    let e = 0, n;\n    for (let r of this.children) {\n      if (!(r instanceof hi) || /[^ -~]/.test(r.text))\n        return null;\n      let i = Ol(r.dom);\n      if (i.length != 1)\n        return null;\n      e += i[0].width, n = i[0].height;\n    }\n    return e ? {\n      lineHeight: this.dom.getBoundingClientRect().height,\n      charWidth: e / this.length,\n      textHeight: n\n    } : null;\n  }\n  coordsAt(e, n) {\n    let r = ck(this, e, n);\n    if (!this.children.length && r && this.parent) {\n      let { heightOracle: i } = this.parent.view.viewState, s = r.bottom - r.top;\n      if (Math.abs(s - i.lineHeight) < 2 && i.textHeight < s) {\n        let o = (s - i.textHeight) / 2;\n        return { top: r.top + o, bottom: r.bottom - o, left: r.left, right: r.left };\n      }\n    }\n    return r;\n  }\n  become(e) {\n    return !1;\n  }\n  covers() {\n    return !0;\n  }\n  static find(e, n) {\n    for (let r = 0, i = 0; r < e.children.length; r++) {\n      let s = e.children[r], o = i + s.length;\n      if (o >= n) {\n        if (s instanceof Nt)\n          return s;\n        if (o > n)\n          break;\n      }\n      i = o + s.breakAfter;\n    }\n    return null;\n  }\n}\nclass Ki extends ft {\n  constructor(e, n, r) {\n    super(), this.widget = e, this.length = n, this.deco = r, this.breakAfter = 0, this.prevWidget = null;\n  }\n  merge(e, n, r, i, s, o) {\n    return r && (!(r instanceof Ki) || !this.widget.compare(r.widget) || e > 0 && s <= 0 || n < this.length && o <= 0) ? !1 : (this.length = e + (r ? r.length : 0) + (this.length - n), !0);\n  }\n  domAtPos(e) {\n    return e == 0 ? an.before(this.dom) : an.after(this.dom, e == this.length);\n  }\n  split(e) {\n    let n = this.length - e;\n    this.length = e;\n    let r = new Ki(this.widget, n, this.deco);\n    return r.breakAfter = this.breakAfter, r;\n  }\n  get children() {\n    return og;\n  }\n  sync(e) {\n    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = \"false\"));\n  }\n  get overrideDOMText() {\n    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Fe.empty;\n  }\n  domBoundsAround() {\n    return null;\n  }\n  become(e) {\n    return e instanceof Ki && e.widget.constructor == this.widget.constructor ? (e.widget.compare(this.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, this.deco = e.deco, this.breakAfter = e.breakAfter, !0) : !1;\n  }\n  ignoreMutation() {\n    return !0;\n  }\n  ignoreEvent(e) {\n    return this.widget.ignoreEvent(e);\n  }\n  get isEditable() {\n    return !1;\n  }\n  get isWidget() {\n    return !0;\n  }\n  coordsAt(e, n) {\n    return this.widget.coordsAt(this.dom, e, n);\n  }\n  destroy() {\n    super.destroy(), this.dom && this.widget.destroy(this.dom);\n  }\n  covers(e) {\n    let { startSide: n, endSide: r } = this.deco;\n    return n == r ? !1 : e < 0 ? n < 0 : r > 0;\n  }\n}\nclass ra {\n  /**\n  Compare this instance to another instance of the same type.\n  (TypeScript can't express this, but only instances of the same\n  specific class will be passed to this method.) This is used to\n  avoid redrawing widgets when they are replaced by a new\n  decoration of the same type. The default implementation just\n  returns `false`, which will cause new instances of the widget to\n  always be redrawn.\n  */\n  eq(e) {\n    return !1;\n  }\n  /**\n  Update a DOM element created by a widget of the same type (but\n  different, non-`eq` content) to reflect this widget. May return\n  true to indicate that it could update, false to indicate it\n  couldn't (in which case the widget will be redrawn). The default\n  implementation just returns false.\n  */\n  updateDOM(e, n) {\n    return !1;\n  }\n  /**\n  @internal\n  */\n  compare(e) {\n    return this == e || this.constructor == e.constructor && this.eq(e);\n  }\n  /**\n  The estimated height this widget will have, to be used when\n  estimating the height of content that hasn't been drawn. May\n  return -1 to indicate you don't know. The default implementation\n  returns -1.\n  */\n  get estimatedHeight() {\n    return -1;\n  }\n  /**\n  For inline widgets that are displayed inline (as opposed to\n  `inline-block`) and introduce line breaks (through `<br>` tags\n  or textual newlines), this must indicate the amount of line\n  breaks they introduce. Defaults to 0.\n  */\n  get lineBreaks() {\n    return 0;\n  }\n  /**\n  Can be used to configure which kinds of events inside the widget\n  should be ignored by the editor. The default is to ignore all\n  events.\n  */\n  ignoreEvent(e) {\n    return !0;\n  }\n  /**\n  Override the way screen coordinates for positions at/in the\n  widget are found. `pos` will be the offset into the widget, and\n  `side` the side of the position that is being queried—less than\n  zero for before, greater than zero for after, and zero for\n  directly at that position.\n  */\n  coordsAt(e, n, r) {\n    return null;\n  }\n  /**\n  @internal\n  */\n  get isHidden() {\n    return !1;\n  }\n  /**\n  @internal\n  */\n  get editable() {\n    return !1;\n  }\n  /**\n  This is called when the an instance of the widget is removed\n  from the editor view.\n  */\n  destroy(e) {\n  }\n}\nvar fr = /* @__PURE__ */ function(t) {\n  return t[t.Text = 0] = \"Text\", t[t.WidgetBefore = 1] = \"WidgetBefore\", t[t.WidgetAfter = 2] = \"WidgetAfter\", t[t.WidgetRange = 3] = \"WidgetRange\", t;\n}(fr || (fr = {}));\nclass Je extends qs {\n  constructor(e, n, r, i) {\n    super(), this.startSide = e, this.endSide = n, this.widget = r, this.spec = i;\n  }\n  /**\n  @internal\n  */\n  get heightRelevant() {\n    return !1;\n  }\n  /**\n  Create a mark decoration, which influences the styling of the\n  content in its range. Nested mark decorations will cause nested\n  DOM elements to be created. Nesting order is determined by\n  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with\n  the higher-precedence decorations creating the inner DOM nodes.\n  Such elements are split on line boundaries and on the boundaries\n  of lower-precedence decorations.\n  */\n  static mark(e) {\n    return new Hl(e);\n  }\n  /**\n  Create a widget decoration, which displays a DOM element at the\n  given position.\n  */\n  static widget(e) {\n    let n = Math.max(-1e4, Math.min(1e4, e.side || 0)), r = !!e.block;\n    return n += r && !e.inlineOrder ? n > 0 ? 3e8 : -4e8 : n > 0 ? 1e8 : -1e8, new as(e, n, n, r, e.widget || null, !1);\n  }\n  /**\n  Create a replace decoration which replaces the given range with\n  a widget, or simply hides it.\n  */\n  static replace(e) {\n    let n = !!e.block, r, i;\n    if (e.isBlockGap)\n      r = -5e8, i = 4e8;\n    else {\n      let { start: s, end: o } = uk(e, n);\n      r = (s ? n ? -3e8 : -1 : 5e8) - 1, i = (o ? n ? 2e8 : 1 : -6e8) + 1;\n    }\n    return new as(e, r, i, n, e.widget || null, !0);\n  }\n  /**\n  Create a line decoration, which can add DOM attributes to the\n  line starting at the given position.\n  */\n  static line(e) {\n    return new Fl(e);\n  }\n  /**\n  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given\n  decorated range or ranges. If the ranges aren't already sorted,\n  pass `true` for `sort` to make the library sort them for you.\n  */\n  static set(e, n = !1) {\n    return ze.of(e, n);\n  }\n  /**\n  @internal\n  */\n  hasHeight() {\n    return this.widget ? this.widget.estimatedHeight > -1 : !1;\n  }\n}\nJe.none = ze.empty;\nclass Hl extends Je {\n  constructor(e) {\n    let { start: n, end: r } = uk(e);\n    super(n ? -1 : 5e8, r ? 1 : -6e8, null, e), this.tagName = e.tagName || \"span\", this.class = e.class || \"\", this.attrs = e.attributes || null;\n  }\n  eq(e) {\n    var n, r;\n    return this == e || e instanceof Hl && this.tagName == e.tagName && (this.class || ((n = this.attrs) === null || n === void 0 ? void 0 : n.class)) == (e.class || ((r = e.attrs) === null || r === void 0 ? void 0 : r.class)) && ag(this.attrs, e.attrs, \"class\");\n  }\n  range(e, n = e) {\n    if (e >= n)\n      throw new RangeError(\"Mark decorations may not be empty\");\n    return super.range(e, n);\n  }\n}\nHl.prototype.point = !1;\nclass Fl extends Je {\n  constructor(e) {\n    super(-2e8, -2e8, null, e);\n  }\n  eq(e) {\n    return e instanceof Fl && this.spec.class == e.spec.class && ag(this.spec.attributes, e.spec.attributes);\n  }\n  range(e, n = e) {\n    if (n != e)\n      throw new RangeError(\"Line decoration ranges must be zero-length\");\n    return super.range(e, n);\n  }\n}\nFl.prototype.mapMode = on.TrackBefore;\nFl.prototype.point = !0;\nclass as extends Je {\n  constructor(e, n, r, i, s, o) {\n    super(n, r, s, e), this.block = i, this.isReplace = o, this.mapMode = i ? n <= 0 ? on.TrackBefore : on.TrackAfter : on.TrackDel;\n  }\n  // Only relevant when this.block == true\n  get type() {\n    return this.startSide != this.endSide ? fr.WidgetRange : this.startSide <= 0 ? fr.WidgetBefore : fr.WidgetAfter;\n  }\n  get heightRelevant() {\n    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);\n  }\n  eq(e) {\n    return e instanceof as && $N(this.widget, e.widget) && this.block == e.block && this.startSide == e.startSide && this.endSide == e.endSide;\n  }\n  range(e, n = e) {\n    if (this.isReplace && (e > n || e == n && this.startSide > 0 && this.endSide <= 0))\n      throw new RangeError(\"Invalid range for replacement decoration\");\n    if (!this.isReplace && n != e)\n      throw new RangeError(\"Widget decorations can only have zero-length ranges\");\n    return super.range(e, n);\n  }\n}\nas.prototype.point = !0;\nfunction uk(t, e = !1) {\n  let { inclusiveStart: n, inclusiveEnd: r } = t;\n  return n == null && (n = t.inclusive), r == null && (r = t.inclusive), { start: n ?? e, end: r ?? e };\n}\nfunction $N(t, e) {\n  return t == e || !!(t && e && t.compare(e));\n}\nfunction lp(t, e, n, r = 0) {\n  let i = n.length - 1;\n  i >= 0 && n[i] + r >= t ? n[i] = Math.max(n[i], e) : n.push(t, e);\n}\nclass Ha {\n  constructor(e, n, r, i) {\n    this.doc = e, this.pos = n, this.end = r, this.disallowBlockEffectsFor = i, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.bufferMarks = [], this.atCursorPos = !0, this.openStart = -1, this.openEnd = -1, this.text = \"\", this.textOff = 0, this.cursor = e.iter(), this.skip = n;\n  }\n  posCovered() {\n    if (this.content.length == 0)\n      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;\n    let e = this.content[this.content.length - 1];\n    return !(e.breakAfter || e instanceof Ki && e.deco.endSide < 0);\n  }\n  getLine() {\n    return this.curLine || (this.content.push(this.curLine = new Nt()), this.atCursorPos = !0), this.curLine;\n  }\n  flushBuffer(e = this.bufferMarks) {\n    this.pendingBuffer && (this.curLine.append(Pc(new Bo(-1), e), e.length), this.pendingBuffer = 0);\n  }\n  addBlockWidget(e) {\n    this.flushBuffer(), this.curLine = null, this.content.push(e);\n  }\n  finish(e) {\n    this.pendingBuffer && e <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0, !this.posCovered() && !(e && this.content.length && this.content[this.content.length - 1] instanceof Ki) && this.getLine();\n  }\n  buildText(e, n, r) {\n    for (; e > 0; ) {\n      if (this.textOff == this.text.length) {\n        let { value: s, lineBreak: o, done: a } = this.cursor.next(this.skip);\n        if (this.skip = 0, a)\n          throw new Error(\"Ran out of text content when drawing inline views\");\n        if (o) {\n          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer(), this.curLine = null, this.atCursorPos = !0, e--;\n          continue;\n        } else\n          this.text = s, this.textOff = 0;\n      }\n      let i = Math.min(\n        this.text.length - this.textOff,\n        e,\n        512\n        /* T.Chunk */\n      );\n      this.flushBuffer(n.slice(n.length - r)), this.getLine().append(Pc(new hi(this.text.slice(this.textOff, this.textOff + i)), n), r), this.atCursorPos = !0, this.textOff += i, e -= i, r = 0;\n    }\n  }\n  span(e, n, r, i) {\n    this.buildText(n - e, r, i), this.pos = n, this.openStart < 0 && (this.openStart = i);\n  }\n  point(e, n, r, i, s, o) {\n    if (this.disallowBlockEffectsFor[o] && r instanceof as) {\n      if (r.block)\n        throw new RangeError(\"Block decorations may not be specified via plugins\");\n      if (n > this.doc.lineAt(this.pos).to)\n        throw new RangeError(\"Decorations that replace line breaks may not be specified via plugins\");\n    }\n    let a = n - e;\n    if (r instanceof as)\n      if (r.block)\n        r.startSide > 0 && !this.posCovered() && this.getLine(), this.addBlockWidget(new Ki(r.widget || new Gb(\"div\"), a, r));\n      else {\n        let l = Ps.create(r.widget || new Gb(\"span\"), a, a ? 0 : r.startSide), c = this.atCursorPos && !l.isEditable && s <= i.length && (e < n || r.startSide > 0), u = !l.isEditable && (e < n || s > i.length || r.startSide <= 0), d = this.getLine();\n        this.pendingBuffer == 2 && !c && !l.isEditable && (this.pendingBuffer = 0), this.flushBuffer(i), c && (d.append(Pc(new Bo(1), i), s), s = i.length + Math.max(0, s - i.length)), d.append(Pc(l, i), s), this.atCursorPos = u, this.pendingBuffer = u ? e < n || s > i.length ? 1 : 2 : 0, this.pendingBuffer && (this.bufferMarks = i.slice());\n      }\n    else\n      this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(r);\n    a && (this.textOff + a <= this.text.length ? this.textOff += a : (this.skip += a - (this.text.length - this.textOff), this.text = \"\", this.textOff = 0), this.pos = n), this.openStart < 0 && (this.openStart = s);\n  }\n  static build(e, n, r, i, s) {\n    let o = new Ha(e, n, r, s);\n    return o.openEnd = ze.spans(i, n, r, o), o.openStart < 0 && (o.openStart = o.openEnd), o.finish(o.openEnd), o;\n  }\n}\nfunction Pc(t, e) {\n  for (let n of e)\n    t = new pi(n, [t], t.length);\n  return t;\n}\nclass Gb extends ra {\n  constructor(e) {\n    super(), this.tag = e;\n  }\n  eq(e) {\n    return e.tag == this.tag;\n  }\n  toDOM() {\n    return document.createElement(this.tag);\n  }\n  updateDOM(e) {\n    return e.nodeName.toLowerCase() == this.tag;\n  }\n  get isHidden() {\n    return !0;\n  }\n}\nvar Qt = /* @__PURE__ */ function(t) {\n  return t[t.LTR = 0] = \"LTR\", t[t.RTL = 1] = \"RTL\", t;\n}(Qt || (Qt = {}));\nconst zs = Qt.LTR, lg = Qt.RTL;\nfunction dk(t) {\n  let e = [];\n  for (let n = 0; n < t.length; n++)\n    e.push(1 << +t[n]);\n  return e;\n}\nconst QN = /* @__PURE__ */ dk(\"88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008\"), CN = /* @__PURE__ */ dk(\"4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333\"), cp = /* @__PURE__ */ Object.create(null), wr = [];\nfor (let t of [\"()\", \"[]\", \"{}\"]) {\n  let e = /* @__PURE__ */ t.charCodeAt(0), n = /* @__PURE__ */ t.charCodeAt(1);\n  cp[e] = n, cp[n] = -e;\n}\nfunction fk(t) {\n  return t <= 247 ? QN[t] : 1424 <= t && t <= 1524 ? 2 : 1536 <= t && t <= 1785 ? CN[t - 1536] : 1774 <= t && t <= 2220 ? 4 : 8192 <= t && t <= 8204 ? 256 : 64336 <= t && t <= 65023 ? 4 : 1;\n}\nconst AN = /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac\\ufb50-\\ufdff]/;\nclass Bi {\n  /**\n  The direction of this span.\n  */\n  get dir() {\n    return this.level % 2 ? lg : zs;\n  }\n  /**\n  @internal\n  */\n  constructor(e, n, r) {\n    this.from = e, this.to = n, this.level = r;\n  }\n  /**\n  @internal\n  */\n  side(e, n) {\n    return this.dir == n == e ? this.to : this.from;\n  }\n  /**\n  @internal\n  */\n  forward(e, n) {\n    return e == (this.dir == n);\n  }\n  /**\n  @internal\n  */\n  static find(e, n, r, i) {\n    let s = -1;\n    for (let o = 0; o < e.length; o++) {\n      let a = e[o];\n      if (a.from <= n && a.to >= n) {\n        if (a.level == r)\n          return o;\n        (s < 0 || (i != 0 ? i < 0 ? a.from < n : a.to > n : e[s].level > a.level)) && (s = o);\n      }\n    }\n    if (s < 0)\n      throw new RangeError(\"Index out of range\");\n    return s;\n  }\n}\nfunction hk(t, e) {\n  if (t.length != e.length)\n    return !1;\n  for (let n = 0; n < t.length; n++) {\n    let r = t[n], i = e[n];\n    if (r.from != i.from || r.to != i.to || r.direction != i.direction || !hk(r.inner, i.inner))\n      return !1;\n  }\n  return !0;\n}\nconst rt = [];\nfunction RN(t, e, n, r, i) {\n  for (let s = 0; s <= r.length; s++) {\n    let o = s ? r[s - 1].to : e, a = s < r.length ? r[s].from : n, l = s ? 256 : i;\n    for (let c = o, u = l, d = l; c < a; c++) {\n      let f = fk(t.charCodeAt(c));\n      f == 512 ? f = u : f == 8 && d == 4 && (f = 16), rt[c] = f == 4 ? 2 : f, f & 7 && (d = f), u = f;\n    }\n    for (let c = o, u = l, d = l; c < a; c++) {\n      let f = rt[c];\n      if (f == 128)\n        c < a - 1 && u == rt[c + 1] && u & 24 ? f = rt[c] = u : rt[c] = 256;\n      else if (f == 64) {\n        let h = c + 1;\n        for (; h < a && rt[h] == 64; )\n          h++;\n        let p = c && u == 8 || h < n && rt[h] == 8 ? d == 1 ? 1 : 8 : 256;\n        for (let O = c; O < h; O++)\n          rt[O] = p;\n        c = h - 1;\n      } else\n        f == 8 && d == 1 && (rt[c] = 1);\n      u = f, f & 7 && (d = f);\n    }\n  }\n}\nfunction NN(t, e, n, r, i) {\n  let s = i == 1 ? 2 : 1;\n  for (let o = 0, a = 0, l = 0; o <= r.length; o++) {\n    let c = o ? r[o - 1].to : e, u = o < r.length ? r[o].from : n;\n    for (let d = c, f, h, p; d < u; d++)\n      if (h = cp[f = t.charCodeAt(d)])\n        if (h < 0) {\n          for (let O = a - 3; O >= 0; O -= 3)\n            if (wr[O + 1] == -h) {\n              let m = wr[O + 2], y = m & 2 ? i : m & 4 ? m & 1 ? s : i : 0;\n              y && (rt[d] = rt[wr[O]] = y), a = O;\n              break;\n            }\n        } else {\n          if (wr.length == 189)\n            break;\n          wr[a++] = d, wr[a++] = f, wr[a++] = l;\n        }\n      else if ((p = rt[d]) == 2 || p == 1) {\n        let O = p == i;\n        l = O ? 0 : 1;\n        for (let m = a - 3; m >= 0; m -= 3) {\n          let y = wr[m + 2];\n          if (y & 2)\n            break;\n          if (O)\n            wr[m + 2] |= 2;\n          else {\n            if (y & 4)\n              break;\n            wr[m + 2] |= 4;\n          }\n        }\n      }\n  }\n}\nfunction DN(t, e, n, r) {\n  for (let i = 0, s = r; i <= n.length; i++) {\n    let o = i ? n[i - 1].to : t, a = i < n.length ? n[i].from : e;\n    for (let l = o; l < a; ) {\n      let c = rt[l];\n      if (c == 256) {\n        let u = l + 1;\n        for (; ; )\n          if (u == a) {\n            if (i == n.length)\n              break;\n            u = n[i++].to, a = i < n.length ? n[i].from : e;\n          } else if (rt[u] == 256)\n            u++;\n          else\n            break;\n        let d = s == 1, f = (u < e ? rt[u] : r) == 1, h = d == f ? d ? 1 : 2 : r;\n        for (let p = u, O = i, m = O ? n[O - 1].to : t; p > l; )\n          p == m && (p = n[--O].from, m = O ? n[O - 1].to : t), rt[--p] = h;\n        l = u;\n      } else\n        s = c, l++;\n    }\n  }\n}\nfunction up(t, e, n, r, i, s, o) {\n  let a = r % 2 ? 2 : 1;\n  if (r % 2 == i % 2)\n    for (let l = e, c = 0; l < n; ) {\n      let u = !0, d = !1;\n      if (c == s.length || l < s[c].from) {\n        let O = rt[l];\n        O != a && (u = !1, d = O == 16);\n      }\n      let f = !u && a == 1 ? [] : null, h = u ? r : r + 1, p = l;\n      e:\n        for (; ; )\n          if (c < s.length && p == s[c].from) {\n            if (d)\n              break e;\n            let O = s[c];\n            if (!u)\n              for (let m = O.to, y = c + 1; ; ) {\n                if (m == n)\n                  break e;\n                if (y < s.length && s[y].from == m)\n                  m = s[y++].to;\n                else {\n                  if (rt[m] == a)\n                    break e;\n                  break;\n                }\n              }\n            if (c++, f)\n              f.push(O);\n            else {\n              O.from > l && o.push(new Bi(l, O.from, h));\n              let m = O.direction == zs != !(h % 2);\n              dp(t, m ? r + 1 : r, i, O.inner, O.from, O.to, o), l = O.to;\n            }\n            p = O.to;\n          } else {\n            if (p == n || (u ? rt[p] != a : rt[p] == a))\n              break;\n            p++;\n          }\n      f ? up(t, l, p, r + 1, i, f, o) : l < p && o.push(new Bi(l, p, h)), l = p;\n    }\n  else\n    for (let l = n, c = s.length; l > e; ) {\n      let u = !0, d = !1;\n      if (!c || l > s[c - 1].to) {\n        let O = rt[l - 1];\n        O != a && (u = !1, d = O == 16);\n      }\n      let f = !u && a == 1 ? [] : null, h = u ? r : r + 1, p = l;\n      e:\n        for (; ; )\n          if (c && p == s[c - 1].to) {\n            if (d)\n              break e;\n            let O = s[--c];\n            if (!u)\n              for (let m = O.from, y = c; ; ) {\n                if (m == e)\n                  break e;\n                if (y && s[y - 1].to == m)\n                  m = s[--y].from;\n                else {\n                  if (rt[m - 1] == a)\n                    break e;\n                  break;\n                }\n              }\n            if (f)\n              f.push(O);\n            else {\n              O.to < l && o.push(new Bi(O.to, l, h));\n              let m = O.direction == zs != !(h % 2);\n              dp(t, m ? r + 1 : r, i, O.inner, O.from, O.to, o), l = O.from;\n            }\n            p = O.from;\n          } else {\n            if (p == e || (u ? rt[p - 1] != a : rt[p - 1] == a))\n              break;\n            p--;\n          }\n      f ? up(t, p, l, r + 1, i, f, o) : p < l && o.push(new Bi(p, l, h)), l = p;\n    }\n}\nfunction dp(t, e, n, r, i, s, o) {\n  let a = e % 2 ? 2 : 1;\n  RN(t, i, s, r, a), NN(t, i, s, r, a), DN(i, s, r, a), up(t, i, s, e, n, r, o);\n}\nfunction ZN(t, e, n) {\n  if (!t)\n    return [new Bi(0, 0, e == lg ? 1 : 0)];\n  if (e == zs && !n.length && !AN.test(t))\n    return pk(t.length);\n  if (n.length)\n    for (; t.length > rt.length; )\n      rt[rt.length] = 256;\n  let r = [], i = e == zs ? 0 : 1;\n  return dp(t, i, i, n, 0, t.length, r), r;\n}\nfunction pk(t) {\n  return [new Bi(0, t, 0)];\n}\nlet Ok = \"\";\nfunction VN(t, e, n, r, i) {\n  var s;\n  let o = r.head - t.from, a = Bi.find(e, o, (s = r.bidiLevel) !== null && s !== void 0 ? s : -1, r.assoc), l = e[a], c = l.side(i, n);\n  if (o == c) {\n    let f = a += i ? 1 : -1;\n    if (f < 0 || f >= e.length)\n      return null;\n    l = e[a = f], o = l.side(!i, n), c = l.side(i, n);\n  }\n  let u = Rr(t.text, o, l.forward(i, n));\n  (u < l.from || u > l.to) && (u = c), Ok = t.text.slice(Math.min(o, u), Math.max(o, u));\n  let d = a == (i ? e.length - 1 : 0) ? null : e[a + (i ? 1 : -1)];\n  return d && u == c && d.level + (i ? 0 : 1) < l.level ? ae.cursor(d.side(!i, n) + t.from, d.forward(i, n) ? 1 : -1, d.level) : ae.cursor(u + t.from, l.forward(i, n) ? -1 : 1, l.level);\n}\nfunction IN(t, e, n) {\n  for (let r = e; r < n; r++) {\n    let i = fk(t.charCodeAt(r));\n    if (i == 1)\n      return zs;\n    if (i == 2 || i == 4)\n      return lg;\n  }\n  return zs;\n}\nconst gk = /* @__PURE__ */ ve.define(), mk = /* @__PURE__ */ ve.define(), bk = /* @__PURE__ */ ve.define(), vk = /* @__PURE__ */ ve.define(), fp = /* @__PURE__ */ ve.define(), yk = /* @__PURE__ */ ve.define(), Sk = /* @__PURE__ */ ve.define(), wk = /* @__PURE__ */ ve.define({\n  combine: (t) => t.some((e) => e)\n}), WN = /* @__PURE__ */ ve.define({\n  combine: (t) => t.some((e) => e)\n});\nclass Eo {\n  constructor(e, n = \"nearest\", r = \"nearest\", i = 5, s = 5, o = !1) {\n    this.range = e, this.y = n, this.x = r, this.yMargin = i, this.xMargin = s, this.isSnapshot = o;\n  }\n  map(e) {\n    return e.empty ? this : new Eo(this.range.map(e), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);\n  }\n  clip(e) {\n    return this.range.to <= e.doc.length ? this : new Eo(ae.cursor(e.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);\n  }\n}\nconst _c = /* @__PURE__ */ ot.define({ map: (t, e) => t.map(e) });\nfunction hr(t, e, n) {\n  let r = t.facet(vk);\n  r.length ? r[0](e) : window.onerror ? window.onerror(String(e), n, void 0, void 0, e) : n ? console.error(n + \":\", e) : console.error(e);\n}\nconst Yd = /* @__PURE__ */ ve.define({ combine: (t) => t.length ? t[0] : !0 });\nlet MN = 0;\nconst Ra = /* @__PURE__ */ ve.define();\nclass rr {\n  constructor(e, n, r, i, s) {\n    this.id = e, this.create = n, this.domEventHandlers = r, this.domEventObservers = i, this.extension = s(this);\n  }\n  /**\n  Define a plugin from a constructor function that creates the\n  plugin's value, given an editor view.\n  */\n  static define(e, n) {\n    const { eventHandlers: r, eventObservers: i, provide: s, decorations: o } = n || {};\n    return new rr(MN++, e, r, i, (a) => {\n      let l = [Ra.of(a)];\n      return o && l.push(ml.of((c) => {\n        let u = c.plugin(a);\n        return u ? o(u) : Je.none;\n      })), s && l.push(s(a)), l;\n    });\n  }\n  /**\n  Create a plugin for a class whose constructor takes a single\n  editor view as argument.\n  */\n  static fromClass(e, n) {\n    return rr.define((r) => new e(r), n);\n  }\n}\nclass Pf {\n  constructor(e) {\n    this.spec = e, this.mustUpdate = null, this.value = null;\n  }\n  update(e) {\n    if (this.value) {\n      if (this.mustUpdate) {\n        let n = this.mustUpdate;\n        if (this.mustUpdate = null, this.value.update)\n          try {\n            this.value.update(n);\n          } catch (r) {\n            if (hr(n.state, r, \"CodeMirror plugin crashed\"), this.value.destroy)\n              try {\n                this.value.destroy();\n              } catch {\n              }\n            this.deactivate();\n          }\n      }\n    } else if (this.spec)\n      try {\n        this.value = this.spec.create(e);\n      } catch (n) {\n        hr(e.state, n, \"CodeMirror plugin crashed\"), this.deactivate();\n      }\n    return this;\n  }\n  destroy(e) {\n    var n;\n    if (!((n = this.value) === null || n === void 0) && n.destroy)\n      try {\n        this.value.destroy();\n      } catch (r) {\n        hr(e.state, r, \"CodeMirror plugin crashed\");\n      }\n  }\n  deactivate() {\n    this.spec = this.value = null;\n  }\n}\nconst kk = /* @__PURE__ */ ve.define(), cg = /* @__PURE__ */ ve.define(), ml = /* @__PURE__ */ ve.define(), xk = /* @__PURE__ */ ve.define(), ug = /* @__PURE__ */ ve.define(), Pk = /* @__PURE__ */ ve.define();\nfunction Kb(t, e) {\n  let n = t.state.facet(Pk);\n  if (!n.length)\n    return n;\n  let r = n.map((s) => s instanceof Function ? s(t) : s), i = [];\n  return ze.spans(r, e.from, e.to, {\n    point() {\n    },\n    span(s, o, a, l) {\n      let c = s - e.from, u = o - e.from, d = i;\n      for (let f = a.length - 1; f >= 0; f--, l--) {\n        let h = a[f].spec.bidiIsolate, p;\n        if (h == null && (h = IN(e.text, c, u)), l > 0 && d.length && (p = d[d.length - 1]).to == c && p.direction == h)\n          p.to = u, d = p.inner;\n        else {\n          let O = { from: c, to: u, direction: h, inner: [] };\n          d.push(O), d = O.inner;\n        }\n      }\n    }\n  }), i;\n}\nconst _k = /* @__PURE__ */ ve.define();\nfunction Tk(t) {\n  let e = 0, n = 0, r = 0, i = 0;\n  for (let s of t.state.facet(_k)) {\n    let o = s(t);\n    o && (o.left != null && (e = Math.max(e, o.left)), o.right != null && (n = Math.max(n, o.right)), o.top != null && (r = Math.max(r, o.top)), o.bottom != null && (i = Math.max(i, o.bottom)));\n  }\n  return { left: e, right: n, top: r, bottom: i };\n}\nconst Na = /* @__PURE__ */ ve.define();\nclass tr {\n  constructor(e, n, r, i) {\n    this.fromA = e, this.toA = n, this.fromB = r, this.toB = i;\n  }\n  join(e) {\n    return new tr(Math.min(this.fromA, e.fromA), Math.max(this.toA, e.toA), Math.min(this.fromB, e.fromB), Math.max(this.toB, e.toB));\n  }\n  addToSet(e) {\n    let n = e.length, r = this;\n    for (; n > 0; n--) {\n      let i = e[n - 1];\n      if (!(i.fromA > r.toA)) {\n        if (i.toA < r.fromA)\n          break;\n        r = r.join(i), e.splice(n - 1, 1);\n      }\n    }\n    return e.splice(n, 0, r), e;\n  }\n  static extendWithRanges(e, n) {\n    if (n.length == 0)\n      return e;\n    let r = [];\n    for (let i = 0, s = 0, o = 0, a = 0; ; i++) {\n      let l = i == e.length ? null : e[i], c = o - a, u = l ? l.fromB : 1e9;\n      for (; s < n.length && n[s] < u; ) {\n        let d = n[s], f = n[s + 1], h = Math.max(a, d), p = Math.min(u, f);\n        if (h <= p && new tr(h + c, p + c, h, p).addToSet(r), f > u)\n          break;\n        s += 2;\n      }\n      if (!l)\n        return r;\n      new tr(l.fromA, l.toA, l.fromB, l.toB).addToSet(r), o = l.toA, a = l.toB;\n    }\n  }\n}\nclass Wu {\n  constructor(e, n, r) {\n    this.view = e, this.state = n, this.transactions = r, this.flags = 0, this.startState = e.state, this.changes = Mt.empty(this.startState.doc.length);\n    for (let s of r)\n      this.changes = this.changes.compose(s.changes);\n    let i = [];\n    this.changes.iterChangedRanges((s, o, a, l) => i.push(new tr(s, o, a, l))), this.changedRanges = i;\n  }\n  /**\n  @internal\n  */\n  static create(e, n, r) {\n    return new Wu(e, n, r);\n  }\n  /**\n  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or\n  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this\n  update.\n  */\n  get viewportChanged() {\n    return (this.flags & 4) > 0;\n  }\n  /**\n  Indicates whether the height of a block element in the editor\n  changed in this update.\n  */\n  get heightChanged() {\n    return (this.flags & 2) > 0;\n  }\n  /**\n  Returns true when the document was modified or the size of the\n  editor, or elements within the editor, changed.\n  */\n  get geometryChanged() {\n    return this.docChanged || (this.flags & 10) > 0;\n  }\n  /**\n  True when this update indicates a focus change.\n  */\n  get focusChanged() {\n    return (this.flags & 1) > 0;\n  }\n  /**\n  Whether the document changed in this update.\n  */\n  get docChanged() {\n    return !this.changes.empty;\n  }\n  /**\n  Whether the selection was explicitly set in this update.\n  */\n  get selectionSet() {\n    return this.transactions.some((e) => e.selection);\n  }\n  /**\n  @internal\n  */\n  get empty() {\n    return this.flags == 0 && this.transactions.length == 0;\n  }\n}\nclass Jb extends ft {\n  get length() {\n    return this.view.state.doc.length;\n  }\n  constructor(e) {\n    super(), this.view = e, this.decorations = [], this.dynamicDecorationMap = [], this.domChanged = null, this.hasComposition = null, this.markedForComposition = /* @__PURE__ */ new Set(), this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = !1, this.lastUpdate = Date.now(), this.setDOM(e.contentDOM), this.children = [new Nt()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new tr(0, 0, 0, e.state.doc.length)], 0, null);\n  }\n  // Update the document view to a given state.\n  update(e) {\n    var n;\n    let r = e.changedRanges;\n    this.minWidth > 0 && r.length && (r.every(({ fromA: c, toA: u }) => u < this.minWidthFrom || c > this.minWidthTo) ? (this.minWidthFrom = e.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = e.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0);\n    let i = -1;\n    this.view.inputState.composing >= 0 && (!((n = this.domChanged) === null || n === void 0) && n.newSel ? i = this.domChanged.newSel.head : !YN(e.changes, this.hasComposition) && !e.selectionSet && (i = e.state.selection.main.head));\n    let s = i > -1 ? jN(this.view, e.changes, i) : null;\n    if (this.domChanged = null, this.hasComposition) {\n      this.markedForComposition.clear();\n      let { from: c, to: u } = this.hasComposition;\n      r = new tr(c, u, e.changes.mapPos(c, -1), e.changes.mapPos(u, 1)).addToSet(r.slice());\n    }\n    this.hasComposition = s ? { from: s.range.fromB, to: s.range.toB } : null, (de.ie || de.chrome) && !s && e && e.state.doc.lines != e.startState.doc.lines && (this.forceSelection = !0);\n    let o = this.decorations, a = this.updateDeco(), l = UN(o, a, e.changes);\n    return r = tr.extendWithRanges(r, l), !(this.flags & 7) && r.length == 0 ? !1 : (this.updateInner(r, e.startState.doc.length, s), e.transactions.length && (this.lastUpdate = Date.now()), !0);\n  }\n  // Used by update and the constructor do perform the actual DOM\n  // update\n  updateInner(e, n, r) {\n    this.view.viewState.mustMeasureContent = !0, this.updateChildren(e, n, r);\n    let { observer: i } = this.view;\n    i.ignore(() => {\n      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + \"px\", this.dom.style.flexBasis = this.minWidth ? this.minWidth + \"px\" : \"\";\n      let o = de.chrome || de.ios ? { node: i.selectionRange.focusNode, written: !1 } : void 0;\n      this.sync(this.view, o), this.flags &= -8, o && (o.written || i.selectionRange.focusNode != o.node) && (this.forceSelection = !0), this.dom.style.height = \"\";\n    }), this.markedForComposition.forEach(\n      (o) => o.flags &= -9\n      /* ViewFlag.Composition */\n    );\n    let s = [];\n    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)\n      for (let o of this.children)\n        o instanceof Ki && o.widget instanceof ev && s.push(o.dom);\n    i.updateGaps(s);\n  }\n  updateChildren(e, n, r) {\n    let i = r ? r.range.addToSet(e.slice()) : e, s = this.childCursor(n);\n    for (let o = i.length - 1; ; o--) {\n      let a = o >= 0 ? i[o] : null;\n      if (!a)\n        break;\n      let { fromA: l, toA: c, fromB: u, toB: d } = a, f, h, p, O;\n      if (r && r.range.fromB < d && r.range.toB > u) {\n        let v = Ha.build(this.view.state.doc, u, r.range.fromB, this.decorations, this.dynamicDecorationMap), S = Ha.build(this.view.state.doc, r.range.toB, d, this.decorations, this.dynamicDecorationMap);\n        h = v.breakAtStart, p = v.openStart, O = S.openEnd;\n        let w = this.compositionView(r);\n        S.breakAtStart ? w.breakAfter = 1 : S.content.length && w.merge(w.length, w.length, S.content[0], !1, S.openStart, 0) && (w.breakAfter = S.content[0].breakAfter, S.content.shift()), v.content.length && w.merge(0, 0, v.content[v.content.length - 1], !0, 0, v.openEnd) && v.content.pop(), f = v.content.concat(w).concat(S.content);\n      } else\n        ({ content: f, breakAtStart: h, openStart: p, openEnd: O } = Ha.build(this.view.state.doc, u, d, this.decorations, this.dynamicDecorationMap));\n      let { i: m, off: y } = s.findPos(c, 1), { i: b, off: g } = s.findPos(l, -1);\n      rk(this, b, g, m, y, f, h, p, O);\n    }\n    r && this.fixCompositionDOM(r);\n  }\n  compositionView(e) {\n    let n = new hi(e.text.nodeValue);\n    n.flags |= 8;\n    for (let { deco: i } of e.marks)\n      n = new pi(i, [n], n.length);\n    let r = new Nt();\n    return r.append(n, 0), r;\n  }\n  fixCompositionDOM(e) {\n    let n = (s, o) => {\n      o.flags |= 8 | (o.children.some(\n        (l) => l.flags & 7\n        /* ViewFlag.Dirty */\n      ) ? 1 : 0), this.markedForComposition.add(o);\n      let a = ft.get(s);\n      a && a != o && (a.dom = null), o.setDOM(s);\n    }, r = this.childPos(e.range.fromB, 1), i = this.children[r.i];\n    n(e.line, i);\n    for (let s = e.marks.length - 1; s >= -1; s--)\n      r = i.childPos(r.off, 1), i = i.children[r.i], n(s >= 0 ? e.marks[s].node : e.text, i);\n  }\n  // Sync the DOM selection to this.state.selection\n  updateSelection(e = !1, n = !1) {\n    (e || !this.view.observer.selectionRange.focusNode) && this.view.observer.readSelectionRange();\n    let r = this.view.root.activeElement, i = r == this.dom, s = !i && ru(this.dom, this.view.observer.selectionRange) && !(r && this.dom.contains(r));\n    if (!(i || n || s))\n      return;\n    let o = this.forceSelection;\n    this.forceSelection = !1;\n    let a = this.view.state.selection.main, l = this.moveToLine(this.domAtPos(a.anchor)), c = a.empty ? l : this.moveToLine(this.domAtPos(a.head));\n    if (de.gecko && a.empty && !this.hasComposition && XN(l)) {\n      let d = document.createTextNode(\"\");\n      this.view.observer.ignore(() => l.node.insertBefore(d, l.node.childNodes[l.offset] || null)), l = c = new an(d, 0), o = !0;\n    }\n    let u = this.view.observer.selectionRange;\n    (o || !u.focusNode || (!za(l.node, l.offset, u.anchorNode, u.anchorOffset) || !za(c.node, c.offset, u.focusNode, u.focusOffset)) && !this.suppressWidgetCursorChange(u, a)) && (this.view.observer.ignore(() => {\n      de.android && de.chrome && this.dom.contains(u.focusNode) && qN(u.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: !0 }));\n      let d = Iu(this.view.root);\n      if (d)\n        if (a.empty) {\n          if (de.gecko) {\n            let f = BN(l.node, l.offset);\n            if (f && f != 3) {\n              let h = $k(l.node, l.offset, f == 1 ? 1 : -1);\n              h && (l = new an(h.node, h.offset));\n            }\n          }\n          d.collapse(l.node, l.offset), a.bidiLevel != null && d.caretBidiLevel !== void 0 && (d.caretBidiLevel = a.bidiLevel);\n        } else if (d.extend) {\n          d.collapse(l.node, l.offset);\n          try {\n            d.extend(c.node, c.offset);\n          } catch {\n          }\n        } else {\n          let f = document.createRange();\n          a.anchor > a.head && ([l, c] = [c, l]), f.setEnd(c.node, c.offset), f.setStart(l.node, l.offset), d.removeAllRanges(), d.addRange(f);\n        }\n      s && this.view.root.activeElement == this.dom && (this.dom.blur(), r && r.focus());\n    }), this.view.observer.setSelectionRange(l, c)), this.impreciseAnchor = l.precise ? null : new an(u.anchorNode, u.anchorOffset), this.impreciseHead = c.precise ? null : new an(u.focusNode, u.focusOffset);\n  }\n  // If a zero-length widget is inserted next to the cursor during\n  // composition, avoid moving it across it and disrupting the\n  // composition.\n  suppressWidgetCursorChange(e, n) {\n    return this.hasComposition && n.empty && za(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset) && this.posFromDOM(e.focusNode, e.focusOffset) == n.head;\n  }\n  enforceCursorAssoc() {\n    if (this.hasComposition)\n      return;\n    let { view: e } = this, n = e.state.selection.main, r = Iu(e.root), { anchorNode: i, anchorOffset: s } = e.observer.selectionRange;\n    if (!r || !n.empty || !n.assoc || !r.modify)\n      return;\n    let o = Nt.find(this, n.head);\n    if (!o)\n      return;\n    let a = o.posAtStart;\n    if (n.head == a || n.head == a + o.length)\n      return;\n    let l = this.coordsAt(n.head, -1), c = this.coordsAt(n.head, 1);\n    if (!l || !c || l.bottom > c.top)\n      return;\n    let u = this.domAtPos(n.head + n.assoc);\n    r.collapse(u.node, u.offset), r.modify(\"move\", n.assoc < 0 ? \"forward\" : \"backward\", \"lineboundary\"), e.observer.readSelectionRange();\n    let d = e.observer.selectionRange;\n    e.docView.posFromDOM(d.anchorNode, d.anchorOffset) != n.from && r.collapse(i, s);\n  }\n  // If a position is in/near a block widget, move it to a nearby text\n  // line, since we don't want the cursor inside a block widget.\n  moveToLine(e) {\n    let n = this.dom, r;\n    if (e.node != n)\n      return e;\n    for (let i = e.offset; !r && i < n.childNodes.length; i++) {\n      let s = ft.get(n.childNodes[i]);\n      s instanceof Nt && (r = s.domAtPos(0));\n    }\n    for (let i = e.offset - 1; !r && i >= 0; i--) {\n      let s = ft.get(n.childNodes[i]);\n      s instanceof Nt && (r = s.domAtPos(s.length));\n    }\n    return r ? new an(r.node, r.offset, !0) : e;\n  }\n  nearest(e) {\n    for (let n = e; n; ) {\n      let r = ft.get(n);\n      if (r && r.rootView == this)\n        return r;\n      n = n.parentNode;\n    }\n    return null;\n  }\n  posFromDOM(e, n) {\n    let r = this.nearest(e);\n    if (!r)\n      throw new RangeError(\"Trying to find position for a DOM position outside of the document\");\n    return r.localPosFromDOM(e, n) + r.posAtStart;\n  }\n  domAtPos(e) {\n    let { i: n, off: r } = this.childCursor().findPos(e, -1);\n    for (; n < this.children.length - 1; ) {\n      let i = this.children[n];\n      if (r < i.length || i instanceof Nt)\n        break;\n      n++, r = 0;\n    }\n    return this.children[n].domAtPos(r);\n  }\n  coordsAt(e, n) {\n    let r = null, i = 0;\n    for (let s = this.length, o = this.children.length - 1; o >= 0; o--) {\n      let a = this.children[o], l = s - a.breakAfter, c = l - a.length;\n      if (l < e)\n        break;\n      c <= e && (c < e || a.covers(-1)) && (l > e || a.covers(1)) && (!r || a instanceof Nt && !(r instanceof Nt && n >= 0)) && (r = a, i = c), s = c;\n    }\n    return r ? r.coordsAt(e - i, n) : null;\n  }\n  coordsForChar(e) {\n    let { i: n, off: r } = this.childPos(e, 1), i = this.children[n];\n    if (!(i instanceof Nt))\n      return null;\n    for (; i.children.length; ) {\n      let { i: a, off: l } = i.childPos(r, 1);\n      for (; ; a++) {\n        if (a == i.children.length)\n          return null;\n        if ((i = i.children[a]).length)\n          break;\n      }\n      r = l;\n    }\n    if (!(i instanceof hi))\n      return null;\n    let s = Rr(i.text, r);\n    if (s == r)\n      return null;\n    let o = Ys(i.dom, r, s).getClientRects();\n    for (let a = 0; a < o.length; a++) {\n      let l = o[a];\n      if (a == o.length - 1 || l.top < l.bottom && l.left < l.right)\n        return l;\n    }\n    return null;\n  }\n  measureVisibleLineHeights(e) {\n    let n = [], { from: r, to: i } = e, s = this.view.contentDOM.clientWidth, o = s > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, a = -1, l = this.view.textDirection == Qt.LTR;\n    for (let c = 0, u = 0; u < this.children.length; u++) {\n      let d = this.children[u], f = c + d.length;\n      if (f > i)\n        break;\n      if (c >= r) {\n        let h = d.dom.getBoundingClientRect();\n        if (n.push(h.height), o) {\n          let p = d.dom.lastChild, O = p ? Ol(p) : [];\n          if (O.length) {\n            let m = O[O.length - 1], y = l ? m.right - h.left : h.right - m.left;\n            y > a && (a = y, this.minWidth = s, this.minWidthFrom = c, this.minWidthTo = f);\n          }\n        }\n      }\n      c = f + d.breakAfter;\n    }\n    return n;\n  }\n  textDirectionAt(e) {\n    let { i: n } = this.childPos(e, 1);\n    return getComputedStyle(this.children[n].dom).direction == \"rtl\" ? Qt.RTL : Qt.LTR;\n  }\n  measureTextSize() {\n    for (let s of this.children)\n      if (s instanceof Nt) {\n        let o = s.measureTextSize();\n        if (o)\n          return o;\n      }\n    let e = document.createElement(\"div\"), n, r, i;\n    return e.className = \"cm-line\", e.style.width = \"99999px\", e.style.position = \"absolute\", e.textContent = \"abc def ghi jkl mno pqr stu\", this.view.observer.ignore(() => {\n      this.dom.appendChild(e);\n      let s = Ol(e.firstChild)[0];\n      n = e.getBoundingClientRect().height, r = s ? s.width / 27 : 7, i = s ? s.height : n, e.remove();\n    }), { lineHeight: n, charWidth: r, textHeight: i };\n  }\n  childCursor(e = this.length) {\n    let n = this.children.length;\n    return n && (e -= this.children[--n].length), new nk(this.children, e, n);\n  }\n  computeBlockGapDeco() {\n    let e = [], n = this.view.viewState;\n    for (let r = 0, i = 0; ; i++) {\n      let s = i == n.viewports.length ? null : n.viewports[i], o = s ? s.from - 1 : this.length;\n      if (o > r) {\n        let a = (n.lineBlockAt(o).bottom - n.lineBlockAt(r).top) / this.view.scaleY;\n        e.push(Je.replace({\n          widget: new ev(a),\n          block: !0,\n          inclusive: !0,\n          isBlockGap: !0\n        }).range(r, o));\n      }\n      if (!s)\n        break;\n      r = s.to + 1;\n    }\n    return Je.set(e);\n  }\n  updateDeco() {\n    let e = this.view.state.facet(ml).map((i, s) => (this.dynamicDecorationMap[s] = typeof i == \"function\") ? i(this.view) : i), n = !1, r = this.view.state.facet(xk).map((i, s) => {\n      let o = typeof i == \"function\";\n      return o && (n = !0), o ? i(this.view) : i;\n    });\n    r.length && (this.dynamicDecorationMap[e.length] = n, e.push(ze.join(r)));\n    for (let i = e.length; i < e.length + 3; i++)\n      this.dynamicDecorationMap[i] = !1;\n    return this.decorations = [\n      ...e,\n      this.computeBlockGapDeco(),\n      this.view.viewState.lineGapDeco\n    ];\n  }\n  scrollIntoView(e) {\n    if (e.isSnapshot) {\n      let c = this.view.viewState.lineBlockAt(e.range.head);\n      this.view.scrollDOM.scrollTop = c.top - e.yMargin, this.view.scrollDOM.scrollLeft = e.xMargin;\n      return;\n    }\n    let { range: n } = e, r = this.coordsAt(n.head, n.empty ? n.assoc : n.head > n.anchor ? -1 : 1), i;\n    if (!r)\n      return;\n    !n.empty && (i = this.coordsAt(n.anchor, n.anchor > n.head ? -1 : 1)) && (r = {\n      left: Math.min(r.left, i.left),\n      top: Math.min(r.top, i.top),\n      right: Math.max(r.right, i.right),\n      bottom: Math.max(r.bottom, i.bottom)\n    });\n    let s = Tk(this.view), o = {\n      left: r.left - s.left,\n      top: r.top - s.top,\n      right: r.right + s.right,\n      bottom: r.bottom + s.bottom\n    }, { offsetWidth: a, offsetHeight: l } = this.view.scrollDOM;\n    yN(this.view.scrollDOM, o, n.head < n.anchor ? -1 : 1, e.x, e.y, Math.max(Math.min(e.xMargin, a), -a), Math.max(Math.min(e.yMargin, l), -l), this.view.textDirection == Qt.LTR);\n  }\n}\nfunction XN(t) {\n  return t.node.nodeType == 1 && t.node.firstChild && (t.offset == 0 || t.node.childNodes[t.offset - 1].contentEditable == \"false\") && (t.offset == t.node.childNodes.length || t.node.childNodes[t.offset].contentEditable == \"false\");\n}\nclass ev extends ra {\n  constructor(e) {\n    super(), this.height = e;\n  }\n  toDOM() {\n    let e = document.createElement(\"div\");\n    return e.className = \"cm-gap\", this.updateDOM(e), e;\n  }\n  eq(e) {\n    return e.height == this.height;\n  }\n  updateDOM(e) {\n    return e.style.height = this.height + \"px\", !0;\n  }\n  get editable() {\n    return !0;\n  }\n  get estimatedHeight() {\n    return this.height;\n  }\n  ignoreEvent() {\n    return !1;\n  }\n}\nfunction Ek(t, e) {\n  let n = t.observer.selectionRange, r = n.focusNode && $k(n.focusNode, n.focusOffset, 0);\n  if (!r)\n    return null;\n  let i = e - r.offset;\n  return { from: i, to: i + r.node.nodeValue.length, node: r.node };\n}\nfunction jN(t, e, n) {\n  let r = Ek(t, n);\n  if (!r)\n    return null;\n  let { node: i, from: s, to: o } = r, a = i.nodeValue;\n  if (/[\\n\\r]/.test(a) || t.state.doc.sliceString(r.from, r.to) != a)\n    return null;\n  let l = e.invertedDesc, c = new tr(l.mapPos(s), l.mapPos(o), s, o), u = [];\n  for (let d = i.parentNode; ; d = d.parentNode) {\n    let f = ft.get(d);\n    if (f instanceof pi)\n      u.push({ node: d, deco: f.mark });\n    else {\n      if (f instanceof Nt || d.nodeName == \"DIV\" && d.parentNode == t.contentDOM)\n        return { range: c, text: i, marks: u, line: d };\n      if (d != t.contentDOM)\n        u.push({ node: d, deco: new Hl({\n          inclusive: !0,\n          attributes: EN(d),\n          tagName: d.tagName.toLowerCase()\n        }) });\n      else\n        return null;\n    }\n  }\n}\nfunction $k(t, e, n) {\n  if (n <= 0)\n    for (let r = t, i = e; ; ) {\n      if (r.nodeType == 3)\n        return { node: r, offset: i };\n      if (r.nodeType == 1 && i > 0)\n        r = r.childNodes[i - 1], i = fi(r);\n      else\n        break;\n    }\n  if (n >= 0)\n    for (let r = t, i = e; ; ) {\n      if (r.nodeType == 3)\n        return { node: r, offset: i };\n      if (r.nodeType == 1 && i < r.childNodes.length && n >= 0)\n        r = r.childNodes[i], i = 0;\n      else\n        break;\n    }\n  return null;\n}\nfunction BN(t, e) {\n  return t.nodeType != 1 ? 0 : (e && t.childNodes[e - 1].contentEditable == \"false\" ? 1 : 0) | (e < t.childNodes.length && t.childNodes[e].contentEditable == \"false\" ? 2 : 0);\n}\nlet LN = class {\n  constructor() {\n    this.changes = [];\n  }\n  compareRange(e, n) {\n    lp(e, n, this.changes);\n  }\n  comparePoint(e, n) {\n    lp(e, n, this.changes);\n  }\n};\nfunction UN(t, e, n) {\n  let r = new LN();\n  return ze.compare(t, e, n, r), r.changes;\n}\nfunction qN(t, e) {\n  for (let n = t; n && n != e; n = n.assignedSlot || n.parentNode)\n    if (n.nodeType == 1 && n.contentEditable == \"false\")\n      return !0;\n  return !1;\n}\nfunction YN(t, e) {\n  let n = !1;\n  return e && t.iterChangedRanges((r, i) => {\n    r < e.to && i > e.from && (n = !0);\n  }), n;\n}\nfunction zN(t, e, n = 1) {\n  let r = t.charCategorizer(e), i = t.doc.lineAt(e), s = e - i.from;\n  if (i.length == 0)\n    return ae.cursor(e);\n  s == 0 ? n = 1 : s == i.length && (n = -1);\n  let o = s, a = s;\n  n < 0 ? o = Rr(i.text, s, !1) : a = Rr(i.text, s);\n  let l = r(i.text.slice(o, a));\n  for (; o > 0; ) {\n    let c = Rr(i.text, o, !1);\n    if (r(i.text.slice(c, o)) != l)\n      break;\n    o = c;\n  }\n  for (; a < i.length; ) {\n    let c = Rr(i.text, a);\n    if (r(i.text.slice(a, c)) != l)\n      break;\n    a = c;\n  }\n  return ae.range(o + i.from, a + i.from);\n}\nfunction HN(t, e) {\n  return e.left > t ? e.left - t : Math.max(0, t - e.right);\n}\nfunction FN(t, e) {\n  return e.top > t ? e.top - t : Math.max(0, t - e.bottom);\n}\nfunction _f(t, e) {\n  return t.top < e.bottom - 1 && t.bottom > e.top + 1;\n}\nfunction tv(t, e) {\n  return e < t.top ? { top: e, left: t.left, right: t.right, bottom: t.bottom } : t;\n}\nfunction nv(t, e) {\n  return e > t.bottom ? { top: t.top, left: t.left, right: t.right, bottom: e } : t;\n}\nfunction hp(t, e, n) {\n  let r, i, s, o, a = !1, l, c, u, d;\n  for (let p = t.firstChild; p; p = p.nextSibling) {\n    let O = Ol(p);\n    for (let m = 0; m < O.length; m++) {\n      let y = O[m];\n      i && _f(i, y) && (y = tv(nv(y, i.bottom), i.top));\n      let b = HN(e, y), g = FN(n, y);\n      if (b == 0 && g == 0)\n        return p.nodeType == 3 ? rv(p, e, n) : hp(p, e, n);\n      if (!r || o > g || o == g && s > b) {\n        r = p, i = y, s = b, o = g;\n        let v = g ? n < y.top ? -1 : 1 : b ? e < y.left ? -1 : 1 : 0;\n        a = !v || (v > 0 ? m < O.length - 1 : m > 0);\n      }\n      b == 0 ? n > y.bottom && (!u || u.bottom < y.bottom) ? (l = p, u = y) : n < y.top && (!d || d.top > y.top) && (c = p, d = y) : u && _f(u, y) ? u = nv(u, y.bottom) : d && _f(d, y) && (d = tv(d, y.top));\n    }\n  }\n  if (u && u.bottom >= n ? (r = l, i = u) : d && d.top <= n && (r = c, i = d), !r)\n    return { node: t, offset: 0 };\n  let f = Math.max(i.left, Math.min(i.right, e));\n  if (r.nodeType == 3)\n    return rv(r, f, n);\n  if (a && r.contentEditable != \"false\")\n    return hp(r, f, n);\n  let h = Array.prototype.indexOf.call(t.childNodes, r) + (e >= (i.left + i.right) / 2 ? 1 : 0);\n  return { node: t, offset: h };\n}\nfunction rv(t, e, n) {\n  let r = t.nodeValue.length, i = -1, s = 1e9, o = 0;\n  for (let a = 0; a < r; a++) {\n    let l = Ys(t, a, a + 1).getClientRects();\n    for (let c = 0; c < l.length; c++) {\n      let u = l[c];\n      if (u.top == u.bottom)\n        continue;\n      o || (o = e - u.left);\n      let d = (u.top > n ? u.top - n : n - u.bottom) - 1;\n      if (u.left - 1 <= e && u.right + 1 >= e && d < s) {\n        let f = e >= (u.left + u.right) / 2, h = f;\n        if ((de.chrome || de.gecko) && Ys(t, a).getBoundingClientRect().left == u.right && (h = !f), d <= 0)\n          return { node: t, offset: a + (h ? 1 : 0) };\n        i = a + (h ? 1 : 0), s = d;\n      }\n    }\n  }\n  return { node: t, offset: i > -1 ? i : o > 0 ? t.nodeValue.length : 0 };\n}\nfunction Qk(t, e, n, r = -1) {\n  var i, s;\n  let o = t.contentDOM.getBoundingClientRect(), a = o.top + t.viewState.paddingTop, l, { docHeight: c } = t.viewState, { x: u, y: d } = e, f = d - a;\n  if (f < 0)\n    return 0;\n  if (f > c)\n    return t.state.doc.length;\n  for (let v = t.viewState.heightOracle.textHeight / 2, S = !1; l = t.elementAtHeight(f), l.type != fr.Text; )\n    for (; f = r > 0 ? l.bottom + v : l.top - v, !(f >= 0 && f <= c); ) {\n      if (S)\n        return n ? null : 0;\n      S = !0, r = -r;\n    }\n  d = a + f;\n  let h = l.from;\n  if (h < t.viewport.from)\n    return t.viewport.from == 0 ? 0 : n ? null : iv(t, o, l, u, d);\n  if (h > t.viewport.to)\n    return t.viewport.to == t.state.doc.length ? t.state.doc.length : n ? null : iv(t, o, l, u, d);\n  let p = t.dom.ownerDocument, O = t.root.elementFromPoint ? t.root : p, m = O.elementFromPoint(u, d);\n  m && !t.contentDOM.contains(m) && (m = null), m || (u = Math.max(o.left + 1, Math.min(o.right - 1, u)), m = O.elementFromPoint(u, d), m && !t.contentDOM.contains(m) && (m = null));\n  let y, b = -1;\n  if (m && ((i = t.docView.nearest(m)) === null || i === void 0 ? void 0 : i.isEditable) != !1) {\n    if (p.caretPositionFromPoint) {\n      let v = p.caretPositionFromPoint(u, d);\n      v && ({ offsetNode: y, offset: b } = v);\n    } else if (p.caretRangeFromPoint) {\n      let v = p.caretRangeFromPoint(u, d);\n      v && ({ startContainer: y, startOffset: b } = v, (!t.contentDOM.contains(y) || de.safari && GN(y, b, u) || de.chrome && KN(y, b, u)) && (y = void 0));\n    }\n  }\n  if (!y || !t.docView.dom.contains(y)) {\n    let v = Nt.find(t.docView, h);\n    if (!v)\n      return f > l.top + l.height / 2 ? l.to : l.from;\n    ({ node: y, offset: b } = hp(v.dom, u, d));\n  }\n  let g = t.docView.nearest(y);\n  if (!g)\n    return null;\n  if (g.isWidget && ((s = g.dom) === null || s === void 0 ? void 0 : s.nodeType) == 1) {\n    let v = g.dom.getBoundingClientRect();\n    return e.y < v.top || e.y <= v.bottom && e.x <= (v.left + v.right) / 2 ? g.posAtStart : g.posAtEnd;\n  } else\n    return g.localPosFromDOM(y, b) + g.posAtStart;\n}\nfunction iv(t, e, n, r, i) {\n  let s = Math.round((r - e.left) * t.defaultCharacterWidth);\n  if (t.lineWrapping && n.height > t.defaultLineHeight * 1.5) {\n    let a = t.viewState.heightOracle.textHeight, l = Math.floor((i - n.top - (t.defaultLineHeight - a) * 0.5) / a);\n    s += l * t.viewState.heightOracle.lineLength;\n  }\n  let o = t.state.sliceDoc(n.from, n.to);\n  return n.from + hN(o, s, t.state.tabSize);\n}\nfunction GN(t, e, n) {\n  let r;\n  if (t.nodeType != 3 || e != (r = t.nodeValue.length))\n    return !1;\n  for (let i = t.nextSibling; i; i = i.nextSibling)\n    if (i.nodeType != 1 || i.nodeName != \"BR\")\n      return !1;\n  return Ys(t, r - 1, r).getBoundingClientRect().left > n;\n}\nfunction KN(t, e, n) {\n  if (e != 0)\n    return !1;\n  for (let i = t; ; ) {\n    let s = i.parentNode;\n    if (!s || s.nodeType != 1 || s.firstChild != i)\n      return !1;\n    if (s.classList.contains(\"cm-line\"))\n      break;\n    i = s;\n  }\n  let r = t.nodeType == 1 ? t.getBoundingClientRect() : Ys(t, 0, Math.max(t.nodeValue.length, 1)).getBoundingClientRect();\n  return n - r.left > 5;\n}\nfunction JN(t, e) {\n  let n = t.lineBlockAt(e);\n  if (Array.isArray(n.type)) {\n    for (let r of n.type)\n      if (r.to > e || r.to == e && (r.to == n.to || r.type == fr.Text))\n        return r;\n  }\n  return n;\n}\nfunction e5(t, e, n, r) {\n  let i = JN(t, e.head), s = !r || i.type != fr.Text || !(t.lineWrapping || i.widgetLineBreaks) ? null : t.coordsAtPos(e.assoc < 0 && e.head > i.from ? e.head - 1 : e.head);\n  if (s) {\n    let o = t.dom.getBoundingClientRect(), a = t.textDirectionAt(i.from), l = t.posAtCoords({\n      x: n == (a == Qt.LTR) ? o.right - 1 : o.left + 1,\n      y: (s.top + s.bottom) / 2\n    });\n    if (l != null)\n      return ae.cursor(l, n ? -1 : 1);\n  }\n  return ae.cursor(n ? i.to : i.from, n ? -1 : 1);\n}\nfunction sv(t, e, n, r) {\n  let i = t.state.doc.lineAt(e.head), s = t.bidiSpans(i), o = t.textDirectionAt(i.from);\n  for (let a = e, l = null; ; ) {\n    let c = VN(i, s, o, a, n), u = Ok;\n    if (!c) {\n      if (i.number == (n ? t.state.doc.lines : 1))\n        return a;\n      u = `\n`, i = t.state.doc.line(i.number + (n ? 1 : -1)), s = t.bidiSpans(i), c = t.visualLineSide(i, !n);\n    }\n    if (l) {\n      if (!l(u))\n        return a;\n    } else {\n      if (!r)\n        return c;\n      l = r(u);\n    }\n    a = c;\n  }\n}\nfunction t5(t, e, n) {\n  let r = t.state.charCategorizer(e), i = r(n);\n  return (s) => {\n    let o = r(s);\n    return i == Hn.Space && (i = o), i == o;\n  };\n}\nfunction n5(t, e, n, r) {\n  let i = e.head, s = n ? 1 : -1;\n  if (i == (n ? t.state.doc.length : 0))\n    return ae.cursor(i, e.assoc);\n  let o = e.goalColumn, a, l = t.contentDOM.getBoundingClientRect(), c = t.coordsAtPos(i, e.assoc || -1), u = t.documentTop;\n  if (c)\n    o == null && (o = c.left - l.left), a = s < 0 ? c.top : c.bottom;\n  else {\n    let h = t.viewState.lineBlockAt(i);\n    o == null && (o = Math.min(l.right - l.left, t.defaultCharacterWidth * (i - h.from))), a = (s < 0 ? h.top : h.bottom) + u;\n  }\n  let d = l.left + o, f = r ?? t.viewState.heightOracle.textHeight >> 1;\n  for (let h = 0; ; h += 10) {\n    let p = a + (f + h) * s, O = Qk(t, { x: d, y: p }, !1, s);\n    if (p < l.top || p > l.bottom || (s < 0 ? O < i : O > i)) {\n      let m = t.docView.coordsForChar(O), y = !m || p < m.top ? -1 : 1;\n      return ae.cursor(O, y, void 0, o);\n    }\n  }\n}\nfunction iu(t, e, n) {\n  for (; ; ) {\n    let r = 0;\n    for (let i of t)\n      i.between(e - 1, e + 1, (s, o, a) => {\n        if (e > s && e < o) {\n          let l = r || n || (e - s < o - e ? -1 : 1);\n          e = l < 0 ? s : o, r = l;\n        }\n      });\n    if (!r)\n      return e;\n  }\n}\nfunction Tf(t, e, n) {\n  let r = iu(t.state.facet(ug).map((i) => i(t)), n.from, e.head > n.from ? -1 : 1);\n  return r == n.from ? n : ae.cursor(r, r < n.from ? 1 : -1);\n}\nclass r5 {\n  setSelectionOrigin(e) {\n    this.lastSelectionOrigin = e, this.lastSelectionTime = Date.now();\n  }\n  constructor(e) {\n    this.view = e, this.lastKeyCode = 0, this.lastKeyTime = 0, this.lastTouchTime = 0, this.lastFocusTime = 0, this.lastScrollTop = 0, this.lastScrollLeft = 0, this.pendingIOSKey = void 0, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastEscPress = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.handlers = /* @__PURE__ */ Object.create(null), this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.compositionPendingKey = !1, this.compositionPendingChange = !1, this.mouseSelection = null, this.draggedContent = null, this.handleEvent = this.handleEvent.bind(this), this.notifiedFocused = e.hasFocus, de.safari && e.contentDOM.addEventListener(\"input\", () => null), de.gecko && v5(e.contentDOM.ownerDocument);\n  }\n  handleEvent(e) {\n    !d5(this.view, e) || this.ignoreDuringComposition(e) || e.type == \"keydown\" && this.keydown(e) || this.runHandlers(e.type, e);\n  }\n  runHandlers(e, n) {\n    let r = this.handlers[e];\n    if (r) {\n      for (let i of r.observers)\n        i(this.view, n);\n      for (let i of r.handlers) {\n        if (n.defaultPrevented)\n          break;\n        if (i(this.view, n)) {\n          n.preventDefault();\n          break;\n        }\n      }\n    }\n  }\n  ensureHandlers(e) {\n    let n = i5(e), r = this.handlers, i = this.view.contentDOM;\n    for (let s in n)\n      if (s != \"scroll\") {\n        let o = !n[s].handlers.length, a = r[s];\n        a && o != !a.handlers.length && (i.removeEventListener(s, this.handleEvent), a = null), a || i.addEventListener(s, this.handleEvent, { passive: o });\n      }\n    for (let s in r)\n      s != \"scroll\" && !n[s] && i.removeEventListener(s, this.handleEvent);\n    this.handlers = n;\n  }\n  keydown(e) {\n    if (this.lastKeyCode = e.keyCode, this.lastKeyTime = Date.now(), e.keyCode == 9 && Date.now() < this.lastEscPress + 2e3)\n      return !0;\n    if (e.keyCode != 27 && Ak.indexOf(e.keyCode) < 0 && (this.view.inputState.lastEscPress = 0), de.android && de.chrome && !e.synthetic && (e.keyCode == 13 || e.keyCode == 8))\n      return this.view.observer.delayAndroidKey(e.key, e.keyCode), !0;\n    let n;\n    return de.ios && !e.synthetic && !e.altKey && !e.metaKey && ((n = Ck.find((r) => r.keyCode == e.keyCode)) && !e.ctrlKey || s5.indexOf(e.key) > -1 && e.ctrlKey && !e.shiftKey) ? (this.pendingIOSKey = n || e, setTimeout(() => this.flushIOSKey(), 250), !0) : (e.keyCode != 229 && this.view.observer.forceFlush(), !1);\n  }\n  flushIOSKey() {\n    let e = this.pendingIOSKey;\n    return e ? (this.pendingIOSKey = void 0, To(this.view.contentDOM, e.key, e.keyCode)) : !1;\n  }\n  ignoreDuringComposition(e) {\n    return /^key/.test(e.type) ? this.composing > 0 ? !0 : de.safari && !de.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100 ? (this.compositionPendingKey = !1, !0) : !1 : !1;\n  }\n  startMouseSelection(e) {\n    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = e;\n  }\n  update(e) {\n    this.mouseSelection && this.mouseSelection.update(e), this.draggedContent && e.docChanged && (this.draggedContent = this.draggedContent.map(e.changes)), e.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);\n  }\n  destroy() {\n    this.mouseSelection && this.mouseSelection.destroy();\n  }\n}\nfunction ov(t, e) {\n  return (n, r) => {\n    try {\n      return e.call(t, r, n);\n    } catch (i) {\n      hr(n.state, i);\n    }\n  };\n}\nfunction i5(t) {\n  let e = /* @__PURE__ */ Object.create(null);\n  function n(r) {\n    return e[r] || (e[r] = { observers: [], handlers: [] });\n  }\n  for (let r of t) {\n    let i = r.spec;\n    if (i && i.domEventHandlers)\n      for (let s in i.domEventHandlers) {\n        let o = i.domEventHandlers[s];\n        o && n(s).handlers.push(ov(r.value, o));\n      }\n    if (i && i.domEventObservers)\n      for (let s in i.domEventObservers) {\n        let o = i.domEventObservers[s];\n        o && n(s).observers.push(ov(r.value, o));\n      }\n  }\n  for (let r in br)\n    n(r).handlers.push(br[r]);\n  for (let r in vr)\n    n(r).observers.push(vr[r]);\n  return e;\n}\nconst Ck = [\n  { key: \"Backspace\", keyCode: 8, inputType: \"deleteContentBackward\" },\n  { key: \"Enter\", keyCode: 13, inputType: \"insertParagraph\" },\n  { key: \"Enter\", keyCode: 13, inputType: \"insertLineBreak\" },\n  { key: \"Delete\", keyCode: 46, inputType: \"deleteContentForward\" }\n], s5 = \"dthko\", Ak = [16, 17, 18, 20, 91, 92, 224, 225], Tc = 6;\nfunction Ec(t) {\n  return Math.max(0, t) * 0.7 + 8;\n}\nfunction o5(t, e) {\n  return Math.max(Math.abs(t.clientX - e.clientX), Math.abs(t.clientY - e.clientY));\n}\nclass a5 {\n  constructor(e, n, r, i) {\n    this.view = e, this.startEvent = n, this.style = r, this.mustSelect = i, this.scrollSpeed = { x: 0, y: 0 }, this.scrolling = -1, this.lastEvent = n, this.scrollParent = SN(e.contentDOM), this.atoms = e.state.facet(ug).map((o) => o(e));\n    let s = e.contentDOM.ownerDocument;\n    s.addEventListener(\"mousemove\", this.move = this.move.bind(this)), s.addEventListener(\"mouseup\", this.up = this.up.bind(this)), this.extend = n.shiftKey, this.multiple = e.state.facet(Ye.allowMultipleSelections) && l5(e, n), this.dragging = u5(e, n) && Zk(n) == 1 ? null : !1;\n  }\n  start(e) {\n    this.dragging === !1 && this.select(e);\n  }\n  move(e) {\n    var n;\n    if (e.buttons == 0)\n      return this.destroy();\n    if (this.dragging || this.dragging == null && o5(this.startEvent, e) < 10)\n      return;\n    this.select(this.lastEvent = e);\n    let r = 0, i = 0, s = ((n = this.scrollParent) === null || n === void 0 ? void 0 : n.getBoundingClientRect()) || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight }, o = Tk(this.view);\n    e.clientX - o.left <= s.left + Tc ? r = -Ec(s.left - e.clientX) : e.clientX + o.right >= s.right - Tc && (r = Ec(e.clientX - s.right)), e.clientY - o.top <= s.top + Tc ? i = -Ec(s.top - e.clientY) : e.clientY + o.bottom >= s.bottom - Tc && (i = Ec(e.clientY - s.bottom)), this.setScrollSpeed(r, i);\n  }\n  up(e) {\n    this.dragging == null && this.select(this.lastEvent), this.dragging || e.preventDefault(), this.destroy();\n  }\n  destroy() {\n    this.setScrollSpeed(0, 0);\n    let e = this.view.contentDOM.ownerDocument;\n    e.removeEventListener(\"mousemove\", this.move), e.removeEventListener(\"mouseup\", this.up), this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;\n  }\n  setScrollSpeed(e, n) {\n    this.scrollSpeed = { x: e, y: n }, e || n ? this.scrolling < 0 && (this.scrolling = setInterval(() => this.scroll(), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling), this.scrolling = -1);\n  }\n  scroll() {\n    this.scrollParent ? (this.scrollParent.scrollLeft += this.scrollSpeed.x, this.scrollParent.scrollTop += this.scrollSpeed.y) : this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y), this.dragging === !1 && this.select(this.lastEvent);\n  }\n  skipAtoms(e) {\n    let n = null;\n    for (let r = 0; r < e.ranges.length; r++) {\n      let i = e.ranges[r], s = null;\n      if (i.empty) {\n        let o = iu(this.atoms, i.from, 0);\n        o != i.from && (s = ae.cursor(o, -1));\n      } else {\n        let o = iu(this.atoms, i.from, -1), a = iu(this.atoms, i.to, 1);\n        (o != i.from || a != i.to) && (s = ae.range(i.from == i.anchor ? o : a, i.from == i.head ? o : a));\n      }\n      s && (n || (n = e.ranges.slice()), n[r] = s);\n    }\n    return n ? ae.create(n, e.mainIndex) : e;\n  }\n  select(e) {\n    let { view: n } = this, r = this.skipAtoms(this.style.get(e, this.extend, this.multiple));\n    (this.mustSelect || !r.eq(n.state.selection, this.dragging === !1)) && this.view.dispatch({\n      selection: r,\n      userEvent: \"select.pointer\"\n    }), this.mustSelect = !1;\n  }\n  update(e) {\n    this.style.update(e) && setTimeout(() => this.select(this.lastEvent), 20);\n  }\n}\nfunction l5(t, e) {\n  let n = t.state.facet(gk);\n  return n.length ? n[0](e) : de.mac ? e.metaKey : e.ctrlKey;\n}\nfunction c5(t, e) {\n  let n = t.state.facet(mk);\n  return n.length ? n[0](e) : de.mac ? !e.altKey : !e.ctrlKey;\n}\nfunction u5(t, e) {\n  let { main: n } = t.state.selection;\n  if (n.empty)\n    return !1;\n  let r = Iu(t.root);\n  if (!r || r.rangeCount == 0)\n    return !0;\n  let i = r.getRangeAt(0).getClientRects();\n  for (let s = 0; s < i.length; s++) {\n    let o = i[s];\n    if (o.left <= e.clientX && o.right >= e.clientX && o.top <= e.clientY && o.bottom >= e.clientY)\n      return !0;\n  }\n  return !1;\n}\nfunction d5(t, e) {\n  if (!e.bubbles)\n    return !0;\n  if (e.defaultPrevented)\n    return !1;\n  for (let n = e.target, r; n != t.contentDOM; n = n.parentNode)\n    if (!n || n.nodeType == 11 || (r = ft.get(n)) && r.ignoreEvent(e))\n      return !1;\n  return !0;\n}\nconst br = /* @__PURE__ */ Object.create(null), vr = /* @__PURE__ */ Object.create(null), Rk = de.ie && de.ie_version < 15 || de.ios && de.webkit_version < 604;\nfunction f5(t) {\n  let e = t.dom.parentNode;\n  if (!e)\n    return;\n  let n = e.appendChild(document.createElement(\"textarea\"));\n  n.style.cssText = \"position: fixed; left: -10000px; top: 10px\", n.focus(), setTimeout(() => {\n    t.focus(), n.remove(), Nk(t, n.value);\n  }, 50);\n}\nfunction Nk(t, e) {\n  let { state: n } = t, r, i = 1, s = n.toText(e), o = s.lines == n.selection.ranges.length;\n  if (pp != null && n.selection.ranges.every((l) => l.empty) && pp == s.toString()) {\n    let l = -1;\n    r = n.changeByRange((c) => {\n      let u = n.doc.lineAt(c.from);\n      if (u.from == l)\n        return { range: c };\n      l = u.from;\n      let d = n.toText((o ? s.line(i++).text : e) + n.lineBreak);\n      return {\n        changes: { from: u.from, insert: d },\n        range: ae.cursor(c.from + d.length)\n      };\n    });\n  } else\n    o ? r = n.changeByRange((l) => {\n      let c = s.line(i++);\n      return {\n        changes: { from: l.from, to: l.to, insert: c.text },\n        range: ae.cursor(l.from + c.length)\n      };\n    }) : r = n.replaceSelection(s);\n  t.dispatch(r, {\n    userEvent: \"input.paste\",\n    scrollIntoView: !0\n  });\n}\nvr.scroll = (t) => {\n  t.inputState.lastScrollTop = t.scrollDOM.scrollTop, t.inputState.lastScrollLeft = t.scrollDOM.scrollLeft;\n};\nbr.keydown = (t, e) => (t.inputState.setSelectionOrigin(\"select\"), e.keyCode == 27 && (t.inputState.lastEscPress = Date.now()), !1);\nvr.touchstart = (t, e) => {\n  t.inputState.lastTouchTime = Date.now(), t.inputState.setSelectionOrigin(\"select.pointer\");\n};\nvr.touchmove = (t) => {\n  t.inputState.setSelectionOrigin(\"select.pointer\");\n};\nbr.mousedown = (t, e) => {\n  if (t.observer.flush(), t.inputState.lastTouchTime > Date.now() - 2e3)\n    return !1;\n  let n = null;\n  for (let r of t.state.facet(bk))\n    if (n = r(t, e), n)\n      break;\n  if (!n && e.button == 0 && (n = O5(t, e)), n) {\n    let r = !t.hasFocus;\n    t.inputState.startMouseSelection(new a5(t, e, n, r)), r && t.observer.ignore(() => Jw(t.contentDOM));\n    let i = t.inputState.mouseSelection;\n    if (i)\n      return i.start(e), i.dragging === !1;\n  }\n  return !1;\n};\nfunction av(t, e, n, r) {\n  if (r == 1)\n    return ae.cursor(e, n);\n  if (r == 2)\n    return zN(t.state, e, n);\n  {\n    let i = Nt.find(t.docView, e), s = t.state.doc.lineAt(i ? i.posAtEnd : e), o = i ? i.posAtStart : s.from, a = i ? i.posAtEnd : s.to;\n    return a < t.state.doc.length && a == s.to && a++, ae.range(o, a);\n  }\n}\nlet Dk = (t, e) => t >= e.top && t <= e.bottom, lv = (t, e, n) => Dk(e, n) && t >= n.left && t <= n.right;\nfunction h5(t, e, n, r) {\n  let i = Nt.find(t.docView, e);\n  if (!i)\n    return 1;\n  let s = e - i.posAtStart;\n  if (s == 0)\n    return 1;\n  if (s == i.length)\n    return -1;\n  let o = i.coordsAt(s, -1);\n  if (o && lv(n, r, o))\n    return -1;\n  let a = i.coordsAt(s, 1);\n  return a && lv(n, r, a) ? 1 : o && Dk(r, o) ? -1 : 1;\n}\nfunction cv(t, e) {\n  let n = t.posAtCoords({ x: e.clientX, y: e.clientY }, !1);\n  return { pos: n, bias: h5(t, n, e.clientX, e.clientY) };\n}\nconst p5 = de.ie && de.ie_version <= 11;\nlet uv = null, dv = 0, fv = 0;\nfunction Zk(t) {\n  if (!p5)\n    return t.detail;\n  let e = uv, n = fv;\n  return uv = t, fv = Date.now(), dv = !e || n > Date.now() - 400 && Math.abs(e.clientX - t.clientX) < 2 && Math.abs(e.clientY - t.clientY) < 2 ? (dv + 1) % 3 : 1;\n}\nfunction O5(t, e) {\n  let n = cv(t, e), r = Zk(e), i = t.state.selection;\n  return {\n    update(s) {\n      s.docChanged && (n.pos = s.changes.mapPos(n.pos), i = i.map(s.changes));\n    },\n    get(s, o, a) {\n      let l = cv(t, s), c, u = av(t, l.pos, l.bias, r);\n      if (n.pos != l.pos && !o) {\n        let d = av(t, n.pos, n.bias, r), f = Math.min(d.from, u.from), h = Math.max(d.to, u.to);\n        u = f < u.from ? ae.range(f, h) : ae.range(h, f);\n      }\n      return o ? i.replaceRange(i.main.extend(u.from, u.to)) : a && r == 1 && i.ranges.length > 1 && (c = g5(i, l.pos)) ? c : a ? i.addRange(u) : ae.create([u]);\n    }\n  };\n}\nfunction g5(t, e) {\n  for (let n = 0; n < t.ranges.length; n++) {\n    let { from: r, to: i } = t.ranges[n];\n    if (r <= e && i >= e)\n      return ae.create(t.ranges.slice(0, n).concat(t.ranges.slice(n + 1)), t.mainIndex == n ? 0 : t.mainIndex - (t.mainIndex > n ? 1 : 0));\n  }\n  return null;\n}\nbr.dragstart = (t, e) => {\n  let { selection: { main: n } } = t.state;\n  if (e.target.draggable) {\n    let i = t.docView.nearest(e.target);\n    if (i && i.isWidget) {\n      let s = i.posAtStart, o = s + i.length;\n      (s >= n.to || o <= n.from) && (n = ae.range(s, o));\n    }\n  }\n  let { inputState: r } = t;\n  return r.mouseSelection && (r.mouseSelection.dragging = !0), r.draggedContent = n, e.dataTransfer && (e.dataTransfer.setData(\"Text\", t.state.sliceDoc(n.from, n.to)), e.dataTransfer.effectAllowed = \"copyMove\"), !1;\n};\nbr.dragend = (t) => (t.inputState.draggedContent = null, !1);\nfunction hv(t, e, n, r) {\n  if (!n)\n    return;\n  let i = t.posAtCoords({ x: e.clientX, y: e.clientY }, !1), { draggedContent: s } = t.inputState, o = r && s && c5(t, e) ? { from: s.from, to: s.to } : null, a = { from: i, insert: n }, l = t.state.changes(o ? [o, a] : a);\n  t.focus(), t.dispatch({\n    changes: l,\n    selection: { anchor: l.mapPos(i, -1), head: l.mapPos(i, 1) },\n    userEvent: o ? \"move.drop\" : \"input.drop\"\n  }), t.inputState.draggedContent = null;\n}\nbr.drop = (t, e) => {\n  if (!e.dataTransfer)\n    return !1;\n  if (t.state.readOnly)\n    return !0;\n  let n = e.dataTransfer.files;\n  if (n && n.length) {\n    let r = Array(n.length), i = 0, s = () => {\n      ++i == n.length && hv(t, e, r.filter((o) => o != null).join(t.state.lineBreak), !1);\n    };\n    for (let o = 0; o < n.length; o++) {\n      let a = new FileReader();\n      a.onerror = s, a.onload = () => {\n        /[\\x00-\\x08\\x0e-\\x1f]{2}/.test(a.result) || (r[o] = a.result), s();\n      }, a.readAsText(n[o]);\n    }\n    return !0;\n  } else {\n    let r = e.dataTransfer.getData(\"Text\");\n    if (r)\n      return hv(t, e, r, !0), !0;\n  }\n  return !1;\n};\nbr.paste = (t, e) => {\n  if (t.state.readOnly)\n    return !0;\n  t.observer.flush();\n  let n = Rk ? null : e.clipboardData;\n  return n ? (Nk(t, n.getData(\"text/plain\") || n.getData(\"text/uri-text\")), !0) : (f5(t), !1);\n};\nfunction m5(t, e) {\n  let n = t.dom.parentNode;\n  if (!n)\n    return;\n  let r = n.appendChild(document.createElement(\"textarea\"));\n  r.style.cssText = \"position: fixed; left: -10000px; top: 10px\", r.value = e, r.focus(), r.selectionEnd = e.length, r.selectionStart = 0, setTimeout(() => {\n    r.remove(), t.focus();\n  }, 50);\n}\nfunction b5(t) {\n  let e = [], n = [], r = !1;\n  for (let i of t.selection.ranges)\n    i.empty || (e.push(t.sliceDoc(i.from, i.to)), n.push(i));\n  if (!e.length) {\n    let i = -1;\n    for (let { from: s } of t.selection.ranges) {\n      let o = t.doc.lineAt(s);\n      o.number > i && (e.push(o.text), n.push({ from: o.from, to: Math.min(t.doc.length, o.to + 1) })), i = o.number;\n    }\n    r = !0;\n  }\n  return { text: e.join(t.lineBreak), ranges: n, linewise: r };\n}\nlet pp = null;\nbr.copy = br.cut = (t, e) => {\n  let { text: n, ranges: r, linewise: i } = b5(t.state);\n  if (!n && !i)\n    return !1;\n  pp = i ? n : null, e.type == \"cut\" && !t.state.readOnly && t.dispatch({\n    changes: r,\n    scrollIntoView: !0,\n    userEvent: \"delete.cut\"\n  });\n  let s = Rk ? null : e.clipboardData;\n  return s ? (s.clearData(), s.setData(\"text/plain\", n), !0) : (m5(t, n), !1);\n};\nconst Vk = /* @__PURE__ */ no.define();\nfunction Ik(t, e) {\n  let n = [];\n  for (let r of t.facet(Sk)) {\n    let i = r(t, e);\n    i && n.push(i);\n  }\n  return n ? t.update({ effects: n, annotations: Vk.of(!0) }) : null;\n}\nfunction Wk(t) {\n  setTimeout(() => {\n    let e = t.hasFocus;\n    if (e != t.inputState.notifiedFocused) {\n      let n = Ik(t.state, e);\n      n ? t.dispatch(n) : t.update([]);\n    }\n  }, 10);\n}\nvr.focus = (t) => {\n  t.inputState.lastFocusTime = Date.now(), !t.scrollDOM.scrollTop && (t.inputState.lastScrollTop || t.inputState.lastScrollLeft) && (t.scrollDOM.scrollTop = t.inputState.lastScrollTop, t.scrollDOM.scrollLeft = t.inputState.lastScrollLeft), Wk(t);\n};\nvr.blur = (t) => {\n  t.observer.clearSelectionRange(), Wk(t);\n};\nvr.compositionstart = vr.compositionupdate = (t) => {\n  t.inputState.compositionFirstChange == null && (t.inputState.compositionFirstChange = !0), t.inputState.composing < 0 && (t.inputState.composing = 0);\n};\nvr.compositionend = (t) => {\n  t.inputState.composing = -1, t.inputState.compositionEndedAt = Date.now(), t.inputState.compositionPendingKey = !0, t.inputState.compositionPendingChange = t.observer.pendingRecords().length > 0, t.inputState.compositionFirstChange = null, de.chrome && de.android ? t.observer.flushSoon() : t.inputState.compositionPendingChange ? Promise.resolve().then(() => t.observer.flush()) : setTimeout(() => {\n    t.inputState.composing < 0 && t.docView.hasComposition && t.update([]);\n  }, 50);\n};\nvr.contextmenu = (t) => {\n  t.inputState.lastContextMenu = Date.now();\n};\nbr.beforeinput = (t, e) => {\n  var n;\n  let r;\n  if (de.chrome && de.android && (r = Ck.find((i) => i.inputType == e.inputType)) && (t.observer.delayAndroidKey(r.key, r.keyCode), r.key == \"Backspace\" || r.key == \"Delete\")) {\n    let i = ((n = window.visualViewport) === null || n === void 0 ? void 0 : n.height) || 0;\n    setTimeout(() => {\n      var s;\n      (((s = window.visualViewport) === null || s === void 0 ? void 0 : s.height) || 0) > i + 10 && t.hasFocus && (t.contentDOM.blur(), t.focus());\n    }, 100);\n  }\n  return !1;\n};\nconst pv = /* @__PURE__ */ new Set();\nfunction v5(t) {\n  pv.has(t) || (pv.add(t), t.addEventListener(\"copy\", () => {\n  }), t.addEventListener(\"cut\", () => {\n  }));\n}\nconst Ov = [\"pre-wrap\", \"normal\", \"pre-line\", \"break-spaces\"];\nclass y5 {\n  constructor(e) {\n    this.lineWrapping = e, this.doc = Fe.empty, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.textHeight = 14, this.lineLength = 30, this.heightChanged = !1;\n  }\n  heightForGap(e, n) {\n    let r = this.doc.lineAt(n).number - this.doc.lineAt(e).number + 1;\n    return this.lineWrapping && (r += Math.max(0, Math.ceil((n - e - r * this.lineLength * 0.5) / this.lineLength))), this.lineHeight * r;\n  }\n  heightForLine(e) {\n    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((e - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;\n  }\n  setDoc(e) {\n    return this.doc = e, this;\n  }\n  mustRefreshForWrapping(e) {\n    return Ov.indexOf(e) > -1 != this.lineWrapping;\n  }\n  mustRefreshForHeights(e) {\n    let n = !1;\n    for (let r = 0; r < e.length; r++) {\n      let i = e[r];\n      i < 0 ? r++ : this.heightSamples[Math.floor(i * 10)] || (n = !0, this.heightSamples[Math.floor(i * 10)] = !0);\n    }\n    return n;\n  }\n  refresh(e, n, r, i, s, o) {\n    let a = Ov.indexOf(e) > -1, l = Math.round(n) != Math.round(this.lineHeight) || this.lineWrapping != a;\n    if (this.lineWrapping = a, this.lineHeight = n, this.charWidth = r, this.textHeight = i, this.lineLength = s, l) {\n      this.heightSamples = {};\n      for (let c = 0; c < o.length; c++) {\n        let u = o[c];\n        u < 0 ? c++ : this.heightSamples[Math.floor(u * 10)] = !0;\n      }\n    }\n    return l;\n  }\n}\nclass S5 {\n  constructor(e, n) {\n    this.from = e, this.heights = n, this.index = 0;\n  }\n  get more() {\n    return this.index < this.heights.length;\n  }\n}\nclass Cr {\n  /**\n  @internal\n  */\n  constructor(e, n, r, i, s) {\n    this.from = e, this.length = n, this.top = r, this.height = i, this._content = s;\n  }\n  /**\n  The type of element this is. When querying lines, this may be\n  an array of all the blocks that make up the line.\n  */\n  get type() {\n    return typeof this._content == \"number\" ? fr.Text : Array.isArray(this._content) ? this._content : this._content.type;\n  }\n  /**\n  The end of the element as a document position.\n  */\n  get to() {\n    return this.from + this.length;\n  }\n  /**\n  The bottom position of the element.\n  */\n  get bottom() {\n    return this.top + this.height;\n  }\n  /**\n  If this is a widget block, this will return the widget\n  associated with it.\n  */\n  get widget() {\n    return this._content instanceof as ? this._content.widget : null;\n  }\n  /**\n  If this is a textblock, this holds the number of line breaks\n  that appear in widgets inside the block.\n  */\n  get widgetLineBreaks() {\n    return typeof this._content == \"number\" ? this._content : 0;\n  }\n  /**\n  @internal\n  */\n  join(e) {\n    let n = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(e._content) ? e._content : [e]);\n    return new Cr(this.from, this.length + e.length, this.top, this.height + e.height, n);\n  }\n}\nvar dt = /* @__PURE__ */ function(t) {\n  return t[t.ByPos = 0] = \"ByPos\", t[t.ByHeight = 1] = \"ByHeight\", t[t.ByPosNoHeight = 2] = \"ByPosNoHeight\", t;\n}(dt || (dt = {}));\nconst su = 1e-3;\nclass pn {\n  constructor(e, n, r = 2) {\n    this.length = e, this.height = n, this.flags = r;\n  }\n  get outdated() {\n    return (this.flags & 2) > 0;\n  }\n  set outdated(e) {\n    this.flags = (e ? 2 : 0) | this.flags & -3;\n  }\n  setHeight(e, n) {\n    this.height != n && (Math.abs(this.height - n) > su && (e.heightChanged = !0), this.height = n);\n  }\n  // Base case is to replace a leaf node, which simply builds a tree\n  // from the new nodes and returns that (HeightMapBranch and\n  // HeightMapGap override this to actually use from/to)\n  replace(e, n, r) {\n    return pn.of(r);\n  }\n  // Again, these are base cases, and are overridden for branch and gap nodes.\n  decomposeLeft(e, n) {\n    n.push(this);\n  }\n  decomposeRight(e, n) {\n    n.push(this);\n  }\n  applyChanges(e, n, r, i) {\n    let s = this, o = r.doc;\n    for (let a = i.length - 1; a >= 0; a--) {\n      let { fromA: l, toA: c, fromB: u, toB: d } = i[a], f = s.lineAt(l, dt.ByPosNoHeight, r.setDoc(n), 0, 0), h = f.to >= c ? f : s.lineAt(c, dt.ByPosNoHeight, r, 0, 0);\n      for (d += h.to - c, c = h.to; a > 0 && f.from <= i[a - 1].toA; )\n        l = i[a - 1].fromA, u = i[a - 1].fromB, a--, l < f.from && (f = s.lineAt(l, dt.ByPosNoHeight, r, 0, 0));\n      u += f.from - l, l = f.from;\n      let p = dg.build(r.setDoc(o), e, u, d);\n      s = s.replace(l, c, p);\n    }\n    return s.updateHeight(r, 0);\n  }\n  static empty() {\n    return new Rn(0, 0);\n  }\n  // nodes uses null values to indicate the position of line breaks.\n  // There are never line breaks at the start or end of the array, or\n  // two line breaks next to each other, and the array isn't allowed\n  // to be empty (same restrictions as return value from the builder).\n  static of(e) {\n    if (e.length == 1)\n      return e[0];\n    let n = 0, r = e.length, i = 0, s = 0;\n    for (; ; )\n      if (n == r)\n        if (i > s * 2) {\n          let a = e[n - 1];\n          a.break ? e.splice(--n, 1, a.left, null, a.right) : e.splice(--n, 1, a.left, a.right), r += 1 + a.break, i -= a.size;\n        } else if (s > i * 2) {\n          let a = e[r];\n          a.break ? e.splice(r, 1, a.left, null, a.right) : e.splice(r, 1, a.left, a.right), r += 2 + a.break, s -= a.size;\n        } else\n          break;\n      else if (i < s) {\n        let a = e[n++];\n        a && (i += a.size);\n      } else {\n        let a = e[--r];\n        a && (s += a.size);\n      }\n    let o = 0;\n    return e[n - 1] == null ? (o = 1, n--) : e[n] == null && (o = 1, r++), new w5(pn.of(e.slice(0, n)), o, pn.of(e.slice(r)));\n  }\n}\npn.prototype.size = 1;\nclass Mk extends pn {\n  constructor(e, n, r) {\n    super(e, n), this.deco = r;\n  }\n  blockAt(e, n, r, i) {\n    return new Cr(i, this.length, r, this.height, this.deco || 0);\n  }\n  lineAt(e, n, r, i, s) {\n    return this.blockAt(0, r, i, s);\n  }\n  forEachLine(e, n, r, i, s, o) {\n    e <= s + this.length && n >= s && o(this.blockAt(0, r, i, s));\n  }\n  updateHeight(e, n = 0, r = !1, i) {\n    return i && i.from <= n && i.more && this.setHeight(e, i.heights[i.index++]), this.outdated = !1, this;\n  }\n  toString() {\n    return `block(${this.length})`;\n  }\n}\nclass Rn extends Mk {\n  constructor(e, n) {\n    super(e, n, null), this.collapsed = 0, this.widgetHeight = 0, this.breaks = 0;\n  }\n  blockAt(e, n, r, i) {\n    return new Cr(i, this.length, r, this.height, this.breaks);\n  }\n  replace(e, n, r) {\n    let i = r[0];\n    return r.length == 1 && (i instanceof Rn || i instanceof zt && i.flags & 4) && Math.abs(this.length - i.length) < 10 ? (i instanceof zt ? i = new Rn(i.length, this.height) : i.height = this.height, this.outdated || (i.outdated = !1), i) : pn.of(r);\n  }\n  updateHeight(e, n = 0, r = !1, i) {\n    return i && i.from <= n && i.more ? this.setHeight(e, i.heights[i.index++]) : (r || this.outdated) && this.setHeight(e, Math.max(this.widgetHeight, e.heightForLine(this.length - this.collapsed)) + this.breaks * e.lineHeight), this.outdated = !1, this;\n  }\n  toString() {\n    return `line(${this.length}${this.collapsed ? -this.collapsed : \"\"}${this.widgetHeight ? \":\" + this.widgetHeight : \"\"})`;\n  }\n}\nclass zt extends pn {\n  constructor(e) {\n    super(e, 0);\n  }\n  heightMetrics(e, n) {\n    let r = e.doc.lineAt(n).number, i = e.doc.lineAt(n + this.length).number, s = i - r + 1, o, a = 0;\n    if (e.lineWrapping) {\n      let l = Math.min(this.height, e.lineHeight * s);\n      o = l / s, this.length > s + 1 && (a = (this.height - l) / (this.length - s - 1));\n    } else\n      o = this.height / s;\n    return { firstLine: r, lastLine: i, perLine: o, perChar: a };\n  }\n  blockAt(e, n, r, i) {\n    let { firstLine: s, lastLine: o, perLine: a, perChar: l } = this.heightMetrics(n, i);\n    if (n.lineWrapping) {\n      let c = i + Math.round(Math.max(0, Math.min(1, (e - r) / this.height)) * this.length), u = n.doc.lineAt(c), d = a + u.length * l, f = Math.max(r, e - d / 2);\n      return new Cr(u.from, u.length, f, d, 0);\n    } else {\n      let c = Math.max(0, Math.min(o - s, Math.floor((e - r) / a))), { from: u, length: d } = n.doc.line(s + c);\n      return new Cr(u, d, r + a * c, a, 0);\n    }\n  }\n  lineAt(e, n, r, i, s) {\n    if (n == dt.ByHeight)\n      return this.blockAt(e, r, i, s);\n    if (n == dt.ByPosNoHeight) {\n      let { from: h, to: p } = r.doc.lineAt(e);\n      return new Cr(h, p - h, 0, 0, 0);\n    }\n    let { firstLine: o, perLine: a, perChar: l } = this.heightMetrics(r, s), c = r.doc.lineAt(e), u = a + c.length * l, d = c.number - o, f = i + a * d + l * (c.from - s - d);\n    return new Cr(c.from, c.length, Math.max(i, Math.min(f, i + this.height - u)), u, 0);\n  }\n  forEachLine(e, n, r, i, s, o) {\n    e = Math.max(e, s), n = Math.min(n, s + this.length);\n    let { firstLine: a, perLine: l, perChar: c } = this.heightMetrics(r, s);\n    for (let u = e, d = i; u <= n; ) {\n      let f = r.doc.lineAt(u);\n      if (u == e) {\n        let p = f.number - a;\n        d += l * p + c * (e - s - p);\n      }\n      let h = l + c * f.length;\n      o(new Cr(f.from, f.length, d, h, 0)), d += h, u = f.to + 1;\n    }\n  }\n  replace(e, n, r) {\n    let i = this.length - n;\n    if (i > 0) {\n      let s = r[r.length - 1];\n      s instanceof zt ? r[r.length - 1] = new zt(s.length + i) : r.push(null, new zt(i - 1));\n    }\n    if (e > 0) {\n      let s = r[0];\n      s instanceof zt ? r[0] = new zt(e + s.length) : r.unshift(new zt(e - 1), null);\n    }\n    return pn.of(r);\n  }\n  decomposeLeft(e, n) {\n    n.push(new zt(e - 1), null);\n  }\n  decomposeRight(e, n) {\n    n.push(null, new zt(this.length - e - 1));\n  }\n  updateHeight(e, n = 0, r = !1, i) {\n    let s = n + this.length;\n    if (i && i.from <= n + this.length && i.more) {\n      let o = [], a = Math.max(n, i.from), l = -1;\n      for (i.from > n && o.push(new zt(i.from - n - 1).updateHeight(e, n)); a <= s && i.more; ) {\n        let u = e.doc.lineAt(a).length;\n        o.length && o.push(null);\n        let d = i.heights[i.index++];\n        l == -1 ? l = d : Math.abs(d - l) >= su && (l = -2);\n        let f = new Rn(u, d);\n        f.outdated = !1, o.push(f), a += u + 1;\n      }\n      a <= s && o.push(null, new zt(s - a).updateHeight(e, a));\n      let c = pn.of(o);\n      return (l < 0 || Math.abs(c.height - this.height) >= su || Math.abs(l - this.heightMetrics(e, n).perLine) >= su) && (e.heightChanged = !0), c;\n    } else\n      (r || this.outdated) && (this.setHeight(e, e.heightForGap(n, n + this.length)), this.outdated = !1);\n    return this;\n  }\n  toString() {\n    return `gap(${this.length})`;\n  }\n}\nclass w5 extends pn {\n  constructor(e, n, r) {\n    super(e.length + n + r.length, e.height + r.height, n | (e.outdated || r.outdated ? 2 : 0)), this.left = e, this.right = r, this.size = e.size + r.size;\n  }\n  get break() {\n    return this.flags & 1;\n  }\n  blockAt(e, n, r, i) {\n    let s = r + this.left.height;\n    return e < s ? this.left.blockAt(e, n, r, i) : this.right.blockAt(e, n, s, i + this.left.length + this.break);\n  }\n  lineAt(e, n, r, i, s) {\n    let o = i + this.left.height, a = s + this.left.length + this.break, l = n == dt.ByHeight ? e < o : e < a, c = l ? this.left.lineAt(e, n, r, i, s) : this.right.lineAt(e, n, r, o, a);\n    if (this.break || (l ? c.to < a : c.from > a))\n      return c;\n    let u = n == dt.ByPosNoHeight ? dt.ByPosNoHeight : dt.ByPos;\n    return l ? c.join(this.right.lineAt(a, u, r, o, a)) : this.left.lineAt(a, u, r, i, s).join(c);\n  }\n  forEachLine(e, n, r, i, s, o) {\n    let a = i + this.left.height, l = s + this.left.length + this.break;\n    if (this.break)\n      e < l && this.left.forEachLine(e, n, r, i, s, o), n >= l && this.right.forEachLine(e, n, r, a, l, o);\n    else {\n      let c = this.lineAt(l, dt.ByPos, r, i, s);\n      e < c.from && this.left.forEachLine(e, c.from - 1, r, i, s, o), c.to >= e && c.from <= n && o(c), n > c.to && this.right.forEachLine(c.to + 1, n, r, a, l, o);\n    }\n  }\n  replace(e, n, r) {\n    let i = this.left.length + this.break;\n    if (n < i)\n      return this.balanced(this.left.replace(e, n, r), this.right);\n    if (e > this.left.length)\n      return this.balanced(this.left, this.right.replace(e - i, n - i, r));\n    let s = [];\n    e > 0 && this.decomposeLeft(e, s);\n    let o = s.length;\n    for (let a of r)\n      s.push(a);\n    if (e > 0 && gv(s, o - 1), n < this.length) {\n      let a = s.length;\n      this.decomposeRight(n, s), gv(s, a);\n    }\n    return pn.of(s);\n  }\n  decomposeLeft(e, n) {\n    let r = this.left.length;\n    if (e <= r)\n      return this.left.decomposeLeft(e, n);\n    n.push(this.left), this.break && (r++, e >= r && n.push(null)), e > r && this.right.decomposeLeft(e - r, n);\n  }\n  decomposeRight(e, n) {\n    let r = this.left.length, i = r + this.break;\n    if (e >= i)\n      return this.right.decomposeRight(e - i, n);\n    e < r && this.left.decomposeRight(e, n), this.break && e < i && n.push(null), n.push(this.right);\n  }\n  balanced(e, n) {\n    return e.size > 2 * n.size || n.size > 2 * e.size ? pn.of(this.break ? [e, null, n] : [e, n]) : (this.left = e, this.right = n, this.height = e.height + n.height, this.outdated = e.outdated || n.outdated, this.size = e.size + n.size, this.length = e.length + this.break + n.length, this);\n  }\n  updateHeight(e, n = 0, r = !1, i) {\n    let { left: s, right: o } = this, a = n + s.length + this.break, l = null;\n    return i && i.from <= n + s.length && i.more ? l = s = s.updateHeight(e, n, r, i) : s.updateHeight(e, n, r), i && i.from <= a + o.length && i.more ? l = o = o.updateHeight(e, a, r, i) : o.updateHeight(e, a, r), l ? this.balanced(s, o) : (this.height = this.left.height + this.right.height, this.outdated = !1, this);\n  }\n  toString() {\n    return this.left + (this.break ? \" \" : \"-\") + this.right;\n  }\n}\nfunction gv(t, e) {\n  let n, r;\n  t[e] == null && (n = t[e - 1]) instanceof zt && (r = t[e + 1]) instanceof zt && t.splice(e - 1, 3, new zt(n.length + 1 + r.length));\n}\nconst k5 = 5;\nclass dg {\n  constructor(e, n) {\n    this.pos = e, this.oracle = n, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = e;\n  }\n  get isCovered() {\n    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;\n  }\n  span(e, n) {\n    if (this.lineStart > -1) {\n      let r = Math.min(n, this.lineEnd), i = this.nodes[this.nodes.length - 1];\n      i instanceof Rn ? i.length += r - this.pos : (r > this.pos || !this.isCovered) && this.nodes.push(new Rn(r - this.pos, -1)), this.writtenTo = r, n > r && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);\n    }\n    this.pos = n;\n  }\n  point(e, n, r) {\n    if (e < n || r.heightRelevant) {\n      let i = r.widget ? r.widget.estimatedHeight : 0, s = r.widget ? r.widget.lineBreaks : 0;\n      i < 0 && (i = this.oracle.lineHeight);\n      let o = n - e;\n      r.block ? this.addBlock(new Mk(o, i, r)) : (o || s || i >= k5) && this.addLineDeco(i, s, o);\n    } else\n      n > e && this.span(e, n);\n    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);\n  }\n  enterLine() {\n    if (this.lineStart > -1)\n      return;\n    let { from: e, to: n } = this.oracle.doc.lineAt(this.pos);\n    this.lineStart = e, this.lineEnd = n, this.writtenTo < e && ((this.writtenTo < e - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, e - 1)), this.nodes.push(null)), this.pos > e && this.nodes.push(new Rn(this.pos - e, -1)), this.writtenTo = this.pos;\n  }\n  blankContent(e, n) {\n    let r = new zt(n - e);\n    return this.oracle.doc.lineAt(e).to == n && (r.flags |= 4), r;\n  }\n  ensureLine() {\n    this.enterLine();\n    let e = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;\n    if (e instanceof Rn)\n      return e;\n    let n = new Rn(0, -1);\n    return this.nodes.push(n), n;\n  }\n  addBlock(e) {\n    this.enterLine();\n    let n = e.deco;\n    n && n.startSide > 0 && !this.isCovered && this.ensureLine(), this.nodes.push(e), this.writtenTo = this.pos = this.pos + e.length, n && n.endSide > 0 && (this.covering = e);\n  }\n  addLineDeco(e, n, r) {\n    let i = this.ensureLine();\n    i.length += r, i.collapsed += r, i.widgetHeight = Math.max(i.widgetHeight, e), i.breaks += n, this.writtenTo = this.pos = this.pos + r;\n  }\n  finish(e) {\n    let n = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];\n    this.lineStart > -1 && !(n instanceof Rn) && !this.isCovered ? this.nodes.push(new Rn(0, -1)) : (this.writtenTo < this.pos || n == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));\n    let r = e;\n    for (let i of this.nodes)\n      i instanceof Rn && i.updateHeight(this.oracle, r), r += i ? i.length : 1;\n    return this.nodes;\n  }\n  // Always called with a region that on both sides either stretches\n  // to a line break or the end of the document.\n  // The returned array uses null to indicate line breaks, but never\n  // starts or ends in a line break, or has multiple line breaks next\n  // to each other.\n  static build(e, n, r, i) {\n    let s = new dg(r, e);\n    return ze.spans(n, r, i, s, 0), s.finish(r);\n  }\n}\nfunction x5(t, e, n) {\n  let r = new P5();\n  return ze.compare(t, e, n, r, 0), r.changes;\n}\nclass P5 {\n  constructor() {\n    this.changes = [];\n  }\n  compareRange() {\n  }\n  comparePoint(e, n, r, i) {\n    (e < n || r && r.heightRelevant || i && i.heightRelevant) && lp(e, n, this.changes, 5);\n  }\n}\nfunction _5(t, e) {\n  let n = t.getBoundingClientRect(), r = t.ownerDocument, i = r.defaultView || window, s = Math.max(0, n.left), o = Math.min(i.innerWidth, n.right), a = Math.max(0, n.top), l = Math.min(i.innerHeight, n.bottom);\n  for (let c = t.parentNode; c && c != r.body; )\n    if (c.nodeType == 1) {\n      let u = c, d = window.getComputedStyle(u);\n      if ((u.scrollHeight > u.clientHeight || u.scrollWidth > u.clientWidth) && d.overflow != \"visible\") {\n        let f = u.getBoundingClientRect();\n        s = Math.max(s, f.left), o = Math.min(o, f.right), a = Math.max(a, f.top), l = c == t.parentNode ? f.bottom : Math.min(l, f.bottom);\n      }\n      c = d.position == \"absolute\" || d.position == \"fixed\" ? u.offsetParent : u.parentNode;\n    } else if (c.nodeType == 11)\n      c = c.host;\n    else\n      break;\n  return {\n    left: s - n.left,\n    right: Math.max(s, o) - n.left,\n    top: a - (n.top + e),\n    bottom: Math.max(a, l) - (n.top + e)\n  };\n}\nfunction T5(t, e) {\n  let n = t.getBoundingClientRect();\n  return {\n    left: 0,\n    right: n.right - n.left,\n    top: e,\n    bottom: n.bottom - (n.top + e)\n  };\n}\nclass Ef {\n  constructor(e, n, r) {\n    this.from = e, this.to = n, this.size = r;\n  }\n  static same(e, n) {\n    if (e.length != n.length)\n      return !1;\n    for (let r = 0; r < e.length; r++) {\n      let i = e[r], s = n[r];\n      if (i.from != s.from || i.to != s.to || i.size != s.size)\n        return !1;\n    }\n    return !0;\n  }\n  draw(e, n) {\n    return Je.replace({\n      widget: new E5(this.size * (n ? e.scaleY : e.scaleX), n)\n    }).range(this.from, this.to);\n  }\n}\nclass E5 extends ra {\n  constructor(e, n) {\n    super(), this.size = e, this.vertical = n;\n  }\n  eq(e) {\n    return e.size == this.size && e.vertical == this.vertical;\n  }\n  toDOM() {\n    let e = document.createElement(\"div\");\n    return this.vertical ? e.style.height = this.size + \"px\" : (e.style.width = this.size + \"px\", e.style.height = \"2px\", e.style.display = \"inline-block\"), e;\n  }\n  get estimatedHeight() {\n    return this.vertical ? this.size : -1;\n  }\n}\nclass mv {\n  constructor(e) {\n    this.state = e, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = !0, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.scrollTop = 0, this.scrolledToBottom = !0, this.scaleX = 1, this.scaleY = 1, this.scrollAnchorPos = 0, this.scrollAnchorHeight = -1, this.scaler = bv, this.scrollTarget = null, this.printing = !1, this.mustMeasureContent = !0, this.defaultTextDirection = Qt.LTR, this.visibleRanges = [], this.mustEnforceCursorAssoc = !1;\n    let n = e.facet(cg).some((r) => typeof r != \"function\" && r.class == \"cm-lineWrapping\");\n    this.heightOracle = new y5(n), this.stateDeco = e.facet(ml).filter((r) => typeof r != \"function\"), this.heightMap = pn.empty().applyChanges(this.stateDeco, Fe.empty, this.heightOracle.setDoc(e.doc), [new tr(0, 0, 0, e.doc.length)]), this.viewport = this.getViewport(0, null), this.updateViewportLines(), this.updateForViewport(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = Je.set(this.lineGaps.map((r) => r.draw(this, !1))), this.computeVisibleRanges();\n  }\n  updateForViewport() {\n    let e = [this.viewport], { main: n } = this.state.selection;\n    for (let r = 0; r <= 1; r++) {\n      let i = r ? n.head : n.anchor;\n      if (!e.some(({ from: s, to: o }) => i >= s && i <= o)) {\n        let { from: s, to: o } = this.lineBlockAt(i);\n        e.push(new $c(s, o));\n      }\n    }\n    this.viewports = e.sort((r, i) => r.from - i.from), this.scaler = this.heightMap.height <= 7e6 ? bv : new C5(this.heightOracle, this.heightMap, this.viewports);\n  }\n  updateViewportLines() {\n    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (e) => {\n      this.viewportLines.push(this.scaler.scale == 1 ? e : Da(e, this.scaler));\n    });\n  }\n  update(e, n = null) {\n    this.state = e.state;\n    let r = this.stateDeco;\n    this.stateDeco = this.state.facet(ml).filter((u) => typeof u != \"function\");\n    let i = e.changedRanges, s = tr.extendWithRanges(i, x5(r, this.stateDeco, e ? e.changes : Mt.empty(this.state.doc.length))), o = this.heightMap.height, a = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);\n    this.heightMap = this.heightMap.applyChanges(this.stateDeco, e.startState.doc, this.heightOracle.setDoc(this.state.doc), s), this.heightMap.height != o && (e.flags |= 2), a ? (this.scrollAnchorPos = e.changes.mapPos(a.from, -1), this.scrollAnchorHeight = a.top) : (this.scrollAnchorPos = -1, this.scrollAnchorHeight = this.heightMap.height);\n    let l = s.length ? this.mapViewport(this.viewport, e.changes) : this.viewport;\n    (n && (n.range.head < l.from || n.range.head > l.to) || !this.viewportIsAppropriate(l)) && (l = this.getViewport(0, n));\n    let c = !e.changes.empty || e.flags & 2 || l.from != this.viewport.from || l.to != this.viewport.to;\n    this.viewport = l, this.updateForViewport(), c && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, e.changes))), e.flags |= this.computeVisibleRanges(), n && (this.scrollTarget = n), !this.mustEnforceCursorAssoc && e.selectionSet && e.view.lineWrapping && e.state.selection.main.empty && e.state.selection.main.assoc && !e.state.facet(WN) && (this.mustEnforceCursorAssoc = !0);\n  }\n  measure(e) {\n    let n = e.contentDOM, r = window.getComputedStyle(n), i = this.heightOracle, s = r.whiteSpace;\n    this.defaultTextDirection = r.direction == \"rtl\" ? Qt.RTL : Qt.LTR;\n    let o = this.heightOracle.mustRefreshForWrapping(s), a = n.getBoundingClientRect(), l = o || this.mustMeasureContent || this.contentDOMHeight != a.height;\n    this.contentDOMHeight = a.height, this.mustMeasureContent = !1;\n    let c = 0, u = 0;\n    if (a.width && a.height) {\n      let { scaleX: v, scaleY: S } = Kw(n, a);\n      (this.scaleX != v || this.scaleY != S) && (this.scaleX = v, this.scaleY = S, c |= 8, o = l = !0);\n    }\n    let d = (parseInt(r.paddingTop) || 0) * this.scaleY, f = (parseInt(r.paddingBottom) || 0) * this.scaleY;\n    (this.paddingTop != d || this.paddingBottom != f) && (this.paddingTop = d, this.paddingBottom = f, c |= 10), this.editorWidth != e.scrollDOM.clientWidth && (i.lineWrapping && (l = !0), this.editorWidth = e.scrollDOM.clientWidth, c |= 8);\n    let h = e.scrollDOM.scrollTop * this.scaleY;\n    this.scrollTop != h && (this.scrollAnchorHeight = -1, this.scrollTop = h), this.scrolledToBottom = tk(e.scrollDOM);\n    let p = (this.printing ? T5 : _5)(n, this.paddingTop), O = p.top - this.pixelViewport.top, m = p.bottom - this.pixelViewport.bottom;\n    this.pixelViewport = p;\n    let y = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;\n    if (y != this.inView && (this.inView = y, y && (l = !0)), !this.inView && !this.scrollTarget)\n      return 0;\n    let b = a.width;\n    if ((this.contentDOMWidth != b || this.editorHeight != e.scrollDOM.clientHeight) && (this.contentDOMWidth = a.width, this.editorHeight = e.scrollDOM.clientHeight, c |= 8), l) {\n      let v = e.docView.measureVisibleLineHeights(this.viewport);\n      if (i.mustRefreshForHeights(v) && (o = !0), o || i.lineWrapping && Math.abs(b - this.contentDOMWidth) > i.charWidth) {\n        let { lineHeight: S, charWidth: w, textHeight: k } = e.docView.measureTextSize();\n        o = S > 0 && i.refresh(s, S, w, k, b / w, v), o && (e.docView.minWidth = 0, c |= 8);\n      }\n      O > 0 && m > 0 ? u = Math.max(O, m) : O < 0 && m < 0 && (u = Math.min(O, m)), i.heightChanged = !1;\n      for (let S of this.viewports) {\n        let w = S.from == this.viewport.from ? v : e.docView.measureVisibleLineHeights(S);\n        this.heightMap = (o ? pn.empty().applyChanges(this.stateDeco, Fe.empty, this.heightOracle, [new tr(0, 0, 0, e.state.doc.length)]) : this.heightMap).updateHeight(i, 0, o, new S5(S.from, w));\n      }\n      i.heightChanged && (c |= 2);\n    }\n    let g = !this.viewportIsAppropriate(this.viewport, u) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);\n    return g && (this.viewport = this.getViewport(u, this.scrollTarget)), this.updateForViewport(), (c & 2 || g) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(o ? [] : this.lineGaps, e)), c |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = !1, e.docView.enforceCursorAssoc()), c;\n  }\n  get visibleTop() {\n    return this.scaler.fromDOM(this.pixelViewport.top);\n  }\n  get visibleBottom() {\n    return this.scaler.fromDOM(this.pixelViewport.bottom);\n  }\n  getViewport(e, n) {\n    let r = 0.5 - Math.max(-0.5, Math.min(0.5, e / 1e3 / 2)), i = this.heightMap, s = this.heightOracle, { visibleTop: o, visibleBottom: a } = this, l = new $c(i.lineAt(o - r * 1e3, dt.ByHeight, s, 0, 0).from, i.lineAt(a + (1 - r) * 1e3, dt.ByHeight, s, 0, 0).to);\n    if (n) {\n      let { head: c } = n.range;\n      if (c < l.from || c > l.to) {\n        let u = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), d = i.lineAt(c, dt.ByPos, s, 0, 0), f;\n        n.y == \"center\" ? f = (d.top + d.bottom) / 2 - u / 2 : n.y == \"start\" || n.y == \"nearest\" && c < l.from ? f = d.top : f = d.bottom - u, l = new $c(i.lineAt(f - 1e3 / 2, dt.ByHeight, s, 0, 0).from, i.lineAt(f + u + 1e3 / 2, dt.ByHeight, s, 0, 0).to);\n      }\n    }\n    return l;\n  }\n  mapViewport(e, n) {\n    let r = n.mapPos(e.from, -1), i = n.mapPos(e.to, 1);\n    return new $c(this.heightMap.lineAt(r, dt.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(i, dt.ByPos, this.heightOracle, 0, 0).to);\n  }\n  // Checks if a given viewport covers the visible part of the\n  // document and not too much beyond that.\n  viewportIsAppropriate({ from: e, to: n }, r = 0) {\n    if (!this.inView)\n      return !0;\n    let { top: i } = this.heightMap.lineAt(e, dt.ByPos, this.heightOracle, 0, 0), { bottom: s } = this.heightMap.lineAt(n, dt.ByPos, this.heightOracle, 0, 0), { visibleTop: o, visibleBottom: a } = this;\n    return (e == 0 || i <= o - Math.max(10, Math.min(\n      -r,\n      250\n      /* VP.MaxCoverMargin */\n    ))) && (n == this.state.doc.length || s >= a + Math.max(10, Math.min(\n      r,\n      250\n      /* VP.MaxCoverMargin */\n    ))) && i > o - 2 * 1e3 && s < a + 2 * 1e3;\n  }\n  mapLineGaps(e, n) {\n    if (!e.length || n.empty)\n      return e;\n    let r = [];\n    for (let i of e)\n      n.touchesRange(i.from, i.to) || r.push(new Ef(n.mapPos(i.from), n.mapPos(i.to), i.size));\n    return r;\n  }\n  // Computes positions in the viewport where the start or end of a\n  // line should be hidden, trying to reuse existing line gaps when\n  // appropriate to avoid unneccesary redraws.\n  // Uses crude character-counting for the positioning and sizing,\n  // since actual DOM coordinates aren't always available and\n  // predictable. Relies on generous margins (see LG.Margin) to hide\n  // the artifacts this might produce from the user.\n  ensureLineGaps(e, n) {\n    let r = this.heightOracle.lineWrapping, i = r ? 1e4 : 2e3, s = i >> 1, o = i << 1;\n    if (this.defaultTextDirection != Qt.LTR && !r)\n      return [];\n    let a = [], l = (c, u, d, f) => {\n      if (u - c < s)\n        return;\n      let h = this.state.selection.main, p = [h.from];\n      h.empty || p.push(h.to);\n      for (let m of p)\n        if (m > c && m < u) {\n          l(c, m - 10, d, f), l(m + 10, u, d, f);\n          return;\n        }\n      let O = Q5(e, (m) => m.from >= d.from && m.to <= d.to && Math.abs(m.from - c) < s && Math.abs(m.to - u) < s && !p.some((y) => m.from < y && m.to > y));\n      if (!O) {\n        if (u < d.to && n && r && n.visibleRanges.some((m) => m.from <= u && m.to >= u)) {\n          let m = n.moveToLineBoundary(ae.cursor(u), !1, !0).head;\n          m > c && (u = m);\n        }\n        O = new Ef(c, u, this.gapSize(d, c, u, f));\n      }\n      a.push(O);\n    };\n    for (let c of this.viewportLines) {\n      if (c.length < o)\n        continue;\n      let u = $5(c.from, c.to, this.stateDeco);\n      if (u.total < o)\n        continue;\n      let d = this.scrollTarget ? this.scrollTarget.range.head : null, f, h;\n      if (r) {\n        let p = i / this.heightOracle.lineLength * this.heightOracle.lineHeight, O, m;\n        if (d != null) {\n          let y = Cc(u, d), b = ((this.visibleBottom - this.visibleTop) / 2 + p) / c.height;\n          O = y - b, m = y + b;\n        } else\n          O = (this.visibleTop - c.top - p) / c.height, m = (this.visibleBottom - c.top + p) / c.height;\n        f = Qc(u, O), h = Qc(u, m);\n      } else {\n        let p = u.total * this.heightOracle.charWidth, O = i * this.heightOracle.charWidth, m, y;\n        if (d != null) {\n          let b = Cc(u, d), g = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + O) / p;\n          m = b - g, y = b + g;\n        } else\n          m = (this.pixelViewport.left - O) / p, y = (this.pixelViewport.right + O) / p;\n        f = Qc(u, m), h = Qc(u, y);\n      }\n      f > c.from && l(c.from, f, c, u), h < c.to && l(h, c.to, c, u);\n    }\n    return a;\n  }\n  gapSize(e, n, r, i) {\n    let s = Cc(i, r) - Cc(i, n);\n    return this.heightOracle.lineWrapping ? e.height * s : i.total * this.heightOracle.charWidth * s;\n  }\n  updateLineGaps(e) {\n    Ef.same(e, this.lineGaps) || (this.lineGaps = e, this.lineGapDeco = Je.set(e.map((n) => n.draw(this, this.heightOracle.lineWrapping))));\n  }\n  computeVisibleRanges() {\n    let e = this.stateDeco;\n    this.lineGaps.length && (e = e.concat(this.lineGapDeco));\n    let n = [];\n    ze.spans(e, this.viewport.from, this.viewport.to, {\n      span(i, s) {\n        n.push({ from: i, to: s });\n      },\n      point() {\n      }\n    }, 20);\n    let r = n.length != this.visibleRanges.length || this.visibleRanges.some((i, s) => i.from != n[s].from || i.to != n[s].to);\n    return this.visibleRanges = n, r ? 4 : 0;\n  }\n  lineBlockAt(e) {\n    return e >= this.viewport.from && e <= this.viewport.to && this.viewportLines.find((n) => n.from <= e && n.to >= e) || Da(this.heightMap.lineAt(e, dt.ByPos, this.heightOracle, 0, 0), this.scaler);\n  }\n  lineBlockAtHeight(e) {\n    return Da(this.heightMap.lineAt(this.scaler.fromDOM(e), dt.ByHeight, this.heightOracle, 0, 0), this.scaler);\n  }\n  scrollAnchorAt(e) {\n    let n = this.lineBlockAtHeight(e + 8);\n    return n.from >= this.viewport.from || this.viewportLines[0].top - e > 200 ? n : this.viewportLines[0];\n  }\n  elementAtHeight(e) {\n    return Da(this.heightMap.blockAt(this.scaler.fromDOM(e), this.heightOracle, 0, 0), this.scaler);\n  }\n  get docHeight() {\n    return this.scaler.toDOM(this.heightMap.height);\n  }\n  get contentHeight() {\n    return this.docHeight + this.paddingTop + this.paddingBottom;\n  }\n}\nclass $c {\n  constructor(e, n) {\n    this.from = e, this.to = n;\n  }\n}\nfunction $5(t, e, n) {\n  let r = [], i = t, s = 0;\n  return ze.spans(n, t, e, {\n    span() {\n    },\n    point(o, a) {\n      o > i && (r.push({ from: i, to: o }), s += o - i), i = a;\n    }\n  }, 20), i < e && (r.push({ from: i, to: e }), s += e - i), { total: s, ranges: r };\n}\nfunction Qc({ total: t, ranges: e }, n) {\n  if (n <= 0)\n    return e[0].from;\n  if (n >= 1)\n    return e[e.length - 1].to;\n  let r = Math.floor(t * n);\n  for (let i = 0; ; i++) {\n    let { from: s, to: o } = e[i], a = o - s;\n    if (r <= a)\n      return s + r;\n    r -= a;\n  }\n}\nfunction Cc(t, e) {\n  let n = 0;\n  for (let { from: r, to: i } of t.ranges) {\n    if (e <= i) {\n      n += e - r;\n      break;\n    }\n    n += i - r;\n  }\n  return n / t.total;\n}\nfunction Q5(t, e) {\n  for (let n of t)\n    if (e(n))\n      return n;\n}\nconst bv = {\n  toDOM(t) {\n    return t;\n  },\n  fromDOM(t) {\n    return t;\n  },\n  scale: 1\n};\nclass C5 {\n  constructor(e, n, r) {\n    let i = 0, s = 0, o = 0;\n    this.viewports = r.map(({ from: a, to: l }) => {\n      let c = n.lineAt(a, dt.ByPos, e, 0, 0).top, u = n.lineAt(l, dt.ByPos, e, 0, 0).bottom;\n      return i += u - c, { from: a, to: l, top: c, bottom: u, domTop: 0, domBottom: 0 };\n    }), this.scale = (7e6 - i) / (n.height - i);\n    for (let a of this.viewports)\n      a.domTop = o + (a.top - s) * this.scale, o = a.domBottom = a.domTop + (a.bottom - a.top), s = a.bottom;\n  }\n  toDOM(e) {\n    for (let n = 0, r = 0, i = 0; ; n++) {\n      let s = n < this.viewports.length ? this.viewports[n] : null;\n      if (!s || e < s.top)\n        return i + (e - r) * this.scale;\n      if (e <= s.bottom)\n        return s.domTop + (e - s.top);\n      r = s.bottom, i = s.domBottom;\n    }\n  }\n  fromDOM(e) {\n    for (let n = 0, r = 0, i = 0; ; n++) {\n      let s = n < this.viewports.length ? this.viewports[n] : null;\n      if (!s || e < s.domTop)\n        return r + (e - i) / this.scale;\n      if (e <= s.domBottom)\n        return s.top + (e - s.domTop);\n      r = s.bottom, i = s.domBottom;\n    }\n  }\n}\nfunction Da(t, e) {\n  if (e.scale == 1)\n    return t;\n  let n = e.toDOM(t.top), r = e.toDOM(t.bottom);\n  return new Cr(t.from, t.length, n, r - n, Array.isArray(t._content) ? t._content.map((i) => Da(i, e)) : t._content);\n}\nconst Ac = /* @__PURE__ */ ve.define({ combine: (t) => t.join(\" \") }), Op = /* @__PURE__ */ ve.define({ combine: (t) => t.indexOf(!0) > -1 }), gp = /* @__PURE__ */ ss.newName(), Xk = /* @__PURE__ */ ss.newName(), jk = /* @__PURE__ */ ss.newName(), Bk = { \"&light\": \".\" + Xk, \"&dark\": \".\" + jk };\nfunction mp(t, e, n) {\n  return new ss(e, {\n    finish(r) {\n      return /&/.test(r) ? r.replace(/&\\w*/, (i) => {\n        if (i == \"&\")\n          return t;\n        if (!n || !n[i])\n          throw new RangeError(`Unsupported selector: ${i}`);\n        return n[i];\n      }) : t + \" \" + r;\n    }\n  });\n}\nconst A5 = /* @__PURE__ */ mp(\".\" + gp, {\n  \"&\": {\n    position: \"relative !important\",\n    boxSizing: \"border-box\",\n    \"&.cm-focused\": {\n      // Provide a simple default outline to make sure a focused\n      // editor is visually distinct. Can't leave the default behavior\n      // because that will apply to the content element, which is\n      // inside the scrollable container and doesn't include the\n      // gutters. We also can't use an 'auto' outline, since those\n      // are, for some reason, drawn behind the element content, which\n      // will cause things like the active line background to cover\n      // the outline (#297).\n      outline: \"1px dotted #212121\"\n    },\n    display: \"flex !important\",\n    flexDirection: \"column\"\n  },\n  \".cm-scroller\": {\n    display: \"flex !important\",\n    alignItems: \"flex-start !important\",\n    fontFamily: \"monospace\",\n    lineHeight: 1.4,\n    height: \"100%\",\n    overflowX: \"auto\",\n    position: \"relative\",\n    zIndex: 0\n  },\n  \".cm-content\": {\n    margin: 0,\n    flexGrow: 2,\n    flexShrink: 0,\n    display: \"block\",\n    whiteSpace: \"pre\",\n    wordWrap: \"normal\",\n    // https://github.com/codemirror/dev/issues/456\n    boxSizing: \"border-box\",\n    minHeight: \"100%\",\n    padding: \"4px 0\",\n    outline: \"none\",\n    \"&[contenteditable=true]\": {\n      WebkitUserModify: \"read-write-plaintext-only\"\n    }\n  },\n  \".cm-lineWrapping\": {\n    whiteSpace_fallback: \"pre-wrap\",\n    // For IE\n    whiteSpace: \"break-spaces\",\n    wordBreak: \"break-word\",\n    // For Safari, which doesn't support overflow-wrap: anywhere\n    overflowWrap: \"anywhere\",\n    flexShrink: 1\n  },\n  \"&light .cm-content\": { caretColor: \"black\" },\n  \"&dark .cm-content\": { caretColor: \"white\" },\n  \".cm-line\": {\n    display: \"block\",\n    padding: \"0 2px 0 6px\"\n  },\n  \".cm-layer\": {\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    contain: \"size style\",\n    \"& > *\": {\n      position: \"absolute\"\n    }\n  },\n  \"&light .cm-selectionBackground\": {\n    background: \"#d9d9d9\"\n  },\n  \"&dark .cm-selectionBackground\": {\n    background: \"#222\"\n  },\n  \"&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground\": {\n    background: \"#d7d4f0\"\n  },\n  \"&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground\": {\n    background: \"#233\"\n  },\n  \".cm-cursorLayer\": {\n    pointerEvents: \"none\"\n  },\n  \"&.cm-focused > .cm-scroller > .cm-cursorLayer\": {\n    animation: \"steps(1) cm-blink 1.2s infinite\"\n  },\n  // Two animations defined so that we can switch between them to\n  // restart the animation without forcing another style\n  // recomputation.\n  \"@keyframes cm-blink\": { \"0%\": {}, \"50%\": { opacity: 0 }, \"100%\": {} },\n  \"@keyframes cm-blink2\": { \"0%\": {}, \"50%\": { opacity: 0 }, \"100%\": {} },\n  \".cm-cursor, .cm-dropCursor\": {\n    borderLeft: \"1.2px solid black\",\n    marginLeft: \"-0.6px\",\n    pointerEvents: \"none\"\n  },\n  \".cm-cursor\": {\n    display: \"none\"\n  },\n  \"&dark .cm-cursor\": {\n    borderLeftColor: \"#444\"\n  },\n  \".cm-dropCursor\": {\n    position: \"absolute\"\n  },\n  \"&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor\": {\n    display: \"block\"\n  },\n  \".cm-iso\": {\n    unicodeBidi: \"isolate\"\n  },\n  \".cm-announced\": {\n    position: \"fixed\",\n    top: \"-10000px\"\n  },\n  \"@media print\": {\n    \".cm-announced\": { display: \"none\" }\n  },\n  \"&light .cm-activeLine\": { backgroundColor: \"#cceeff44\" },\n  \"&dark .cm-activeLine\": { backgroundColor: \"#99eeff33\" },\n  \"&light .cm-specialChar\": { color: \"red\" },\n  \"&dark .cm-specialChar\": { color: \"#f78\" },\n  \".cm-gutters\": {\n    flexShrink: 0,\n    display: \"flex\",\n    height: \"100%\",\n    boxSizing: \"border-box\",\n    insetInlineStart: 0,\n    zIndex: 200\n  },\n  \"&light .cm-gutters\": {\n    backgroundColor: \"#f5f5f5\",\n    color: \"#6c6c6c\",\n    borderRight: \"1px solid #ddd\"\n  },\n  \"&dark .cm-gutters\": {\n    backgroundColor: \"#333338\",\n    color: \"#ccc\"\n  },\n  \".cm-gutter\": {\n    display: \"flex !important\",\n    // Necessary -- prevents margin collapsing\n    flexDirection: \"column\",\n    flexShrink: 0,\n    boxSizing: \"border-box\",\n    minHeight: \"100%\",\n    overflow: \"hidden\"\n  },\n  \".cm-gutterElement\": {\n    boxSizing: \"border-box\"\n  },\n  \".cm-lineNumbers .cm-gutterElement\": {\n    padding: \"0 3px 0 5px\",\n    minWidth: \"20px\",\n    textAlign: \"right\",\n    whiteSpace: \"nowrap\"\n  },\n  \"&light .cm-activeLineGutter\": {\n    backgroundColor: \"#e2f2ff\"\n  },\n  \"&dark .cm-activeLineGutter\": {\n    backgroundColor: \"#222227\"\n  },\n  \".cm-panels\": {\n    boxSizing: \"border-box\",\n    position: \"sticky\",\n    left: 0,\n    right: 0\n  },\n  \"&light .cm-panels\": {\n    backgroundColor: \"#f5f5f5\",\n    color: \"black\"\n  },\n  \"&light .cm-panels-top\": {\n    borderBottom: \"1px solid #ddd\"\n  },\n  \"&light .cm-panels-bottom\": {\n    borderTop: \"1px solid #ddd\"\n  },\n  \"&dark .cm-panels\": {\n    backgroundColor: \"#333338\",\n    color: \"white\"\n  },\n  \".cm-tab\": {\n    display: \"inline-block\",\n    overflow: \"hidden\",\n    verticalAlign: \"bottom\"\n  },\n  \".cm-widgetBuffer\": {\n    verticalAlign: \"text-top\",\n    height: \"1em\",\n    width: 0,\n    display: \"inline\"\n  },\n  \".cm-placeholder\": {\n    color: \"#888\",\n    display: \"inline-block\",\n    verticalAlign: \"top\"\n  },\n  \".cm-highlightSpace:before\": {\n    content: \"attr(data-display)\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    color: \"#888\"\n  },\n  \".cm-highlightTab\": {\n    backgroundImage: `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"20\"><path stroke=\"%23888\" stroke-width=\"1\" fill=\"none\" d=\"M1 10H196L190 5M190 15L196 10M197 4L197 16\"/></svg>')`,\n    backgroundSize: \"auto 100%\",\n    backgroundPosition: \"right 90%\",\n    backgroundRepeat: \"no-repeat\"\n  },\n  \".cm-trailingSpace\": {\n    backgroundColor: \"#ff332255\"\n  },\n  \".cm-button\": {\n    verticalAlign: \"middle\",\n    color: \"inherit\",\n    fontSize: \"70%\",\n    padding: \".2em 1em\",\n    borderRadius: \"1px\"\n  },\n  \"&light .cm-button\": {\n    backgroundImage: \"linear-gradient(#eff1f5, #d9d9df)\",\n    border: \"1px solid #888\",\n    \"&:active\": {\n      backgroundImage: \"linear-gradient(#b4b4b4, #d0d3d6)\"\n    }\n  },\n  \"&dark .cm-button\": {\n    backgroundImage: \"linear-gradient(#393939, #111)\",\n    border: \"1px solid #888\",\n    \"&:active\": {\n      backgroundImage: \"linear-gradient(#111, #333)\"\n    }\n  },\n  \".cm-textfield\": {\n    verticalAlign: \"middle\",\n    color: \"inherit\",\n    fontSize: \"70%\",\n    border: \"1px solid silver\",\n    padding: \".2em .5em\"\n  },\n  \"&light .cm-textfield\": {\n    backgroundColor: \"white\"\n  },\n  \"&dark .cm-textfield\": {\n    border: \"1px solid #555\",\n    backgroundColor: \"inherit\"\n  }\n}, Bk), Za = \"￿\";\nclass R5 {\n  constructor(e, n) {\n    this.points = e, this.text = \"\", this.lineSeparator = n.facet(Ye.lineSeparator);\n  }\n  append(e) {\n    this.text += e;\n  }\n  lineBreak() {\n    this.text += Za;\n  }\n  readRange(e, n) {\n    if (!e)\n      return this;\n    let r = e.parentNode;\n    for (let i = e; ; ) {\n      this.findPointBefore(r, i);\n      let s = this.text.length;\n      this.readNode(i);\n      let o = i.nextSibling;\n      if (o == n)\n        break;\n      let a = ft.get(i), l = ft.get(o);\n      (a && l ? a.breakAfter : (a ? a.breakAfter : vv(i)) || vv(o) && (i.nodeName != \"BR\" || i.cmIgnore) && this.text.length > s) && this.lineBreak(), i = o;\n    }\n    return this.findPointBefore(r, n), this;\n  }\n  readTextNode(e) {\n    let n = e.nodeValue;\n    for (let r of this.points)\n      r.node == e && (r.pos = this.text.length + Math.min(r.offset, n.length));\n    for (let r = 0, i = this.lineSeparator ? null : /\\r\\n?|\\n/g; ; ) {\n      let s = -1, o = 1, a;\n      if (this.lineSeparator ? (s = n.indexOf(this.lineSeparator, r), o = this.lineSeparator.length) : (a = i.exec(n)) && (s = a.index, o = a[0].length), this.append(n.slice(r, s < 0 ? n.length : s)), s < 0)\n        break;\n      if (this.lineBreak(), o > 1)\n        for (let l of this.points)\n          l.node == e && l.pos > this.text.length && (l.pos -= o - 1);\n      r = s + o;\n    }\n  }\n  readNode(e) {\n    if (e.cmIgnore)\n      return;\n    let n = ft.get(e), r = n && n.overrideDOMText;\n    if (r != null) {\n      this.findPointInside(e, r.length);\n      for (let i = r.iter(); !i.next().done; )\n        i.lineBreak ? this.lineBreak() : this.append(i.value);\n    } else\n      e.nodeType == 3 ? this.readTextNode(e) : e.nodeName == \"BR\" ? e.nextSibling && this.lineBreak() : e.nodeType == 1 && this.readRange(e.firstChild, null);\n  }\n  findPointBefore(e, n) {\n    for (let r of this.points)\n      r.node == e && e.childNodes[r.offset] == n && (r.pos = this.text.length);\n  }\n  findPointInside(e, n) {\n    for (let r of this.points)\n      (e.nodeType == 3 ? r.node == e : e.contains(r.node)) && (r.pos = this.text.length + (N5(e, r.node, r.offset) ? n : 0));\n  }\n}\nfunction N5(t, e, n) {\n  for (; ; ) {\n    if (!e || n < fi(e))\n      return !1;\n    if (e == t)\n      return !0;\n    n = gl(e) + 1, e = e.parentNode;\n  }\n}\nfunction vv(t) {\n  return t.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\\d|SECTION|PRE)$/.test(t.nodeName);\n}\nclass yv {\n  constructor(e, n) {\n    this.node = e, this.offset = n, this.pos = -1;\n  }\n}\nclass D5 {\n  constructor(e, n, r, i) {\n    this.typeOver = i, this.bounds = null, this.text = \"\";\n    let { impreciseHead: s, impreciseAnchor: o } = e.docView;\n    if (e.state.readOnly && n > -1)\n      this.newSel = null;\n    else if (n > -1 && (this.bounds = e.docView.domBoundsAround(n, r, 0))) {\n      let a = s || o ? [] : I5(e), l = new R5(a, e.state);\n      l.readRange(this.bounds.startDOM, this.bounds.endDOM), this.text = l.text, this.newSel = W5(a, this.bounds.from);\n    } else {\n      let a = e.observer.selectionRange, l = s && s.node == a.focusNode && s.offset == a.focusOffset || !np(e.contentDOM, a.focusNode) ? e.state.selection.main.head : e.docView.posFromDOM(a.focusNode, a.focusOffset), c = o && o.node == a.anchorNode && o.offset == a.anchorOffset || !np(e.contentDOM, a.anchorNode) ? e.state.selection.main.anchor : e.docView.posFromDOM(a.anchorNode, a.anchorOffset), u = e.viewport;\n      if ((de.ios || de.chrome) && e.state.selection.main.empty && l != c && (u.from > 0 || u.to < e.state.doc.length)) {\n        let d = Math.min(l, c), f = Math.max(l, c), h = u.from - d, p = u.to - f;\n        (h == 0 || h == 1 || d == 0) && (p == 0 || p == -1 || f == e.state.doc.length) && (l = 0, c = e.state.doc.length);\n      }\n      this.newSel = ae.single(c, l);\n    }\n  }\n}\nfunction Lk(t, e) {\n  let n, { newSel: r } = e, i = t.state.selection.main, s = t.inputState.lastKeyTime > Date.now() - 100 ? t.inputState.lastKeyCode : -1;\n  if (e.bounds) {\n    let { from: o, to: a } = e.bounds, l = i.from, c = null;\n    (s === 8 || de.android && e.text.length < a - o) && (l = i.to, c = \"end\");\n    let u = V5(t.state.doc.sliceString(o, a, Za), e.text, l - o, c);\n    u && (de.chrome && s == 13 && u.toB == u.from + 2 && e.text.slice(u.from, u.toB) == Za + Za && u.toB--, n = {\n      from: o + u.from,\n      to: o + u.toA,\n      insert: Fe.of(e.text.slice(u.from, u.toB).split(Za))\n    });\n  } else\n    r && (!t.hasFocus && t.state.facet(Yd) || r.main.eq(i)) && (r = null);\n  if (!n && !r)\n    return !1;\n  if (!n && e.typeOver && !i.empty && r && r.main.empty ? n = { from: i.from, to: i.to, insert: t.state.doc.slice(i.from, i.to) } : n && n.from >= i.from && n.to <= i.to && (n.from != i.from || n.to != i.to) && i.to - i.from - (n.to - n.from) <= 4 ? n = {\n    from: i.from,\n    to: i.to,\n    insert: t.state.doc.slice(i.from, n.from).append(n.insert).append(t.state.doc.slice(n.to, i.to))\n  } : (de.mac || de.android) && n && n.from == n.to && n.from == i.head - 1 && /^\\. ?$/.test(n.insert.toString()) && t.contentDOM.getAttribute(\"autocorrect\") == \"off\" ? (r && n.insert.length == 2 && (r = ae.single(r.main.anchor - 1, r.main.head - 1)), n = { from: i.from, to: i.to, insert: Fe.of([\" \"]) }) : de.chrome && n && n.from == n.to && n.from == i.head && n.insert.toString() == `\n ` && t.lineWrapping && (r && (r = ae.single(r.main.anchor - 1, r.main.head - 1)), n = { from: i.from, to: i.to, insert: Fe.of([\" \"]) }), n) {\n    if (de.ios && t.inputState.flushIOSKey() || de.android && (n.from == i.from && n.to == i.to && n.insert.length == 1 && n.insert.lines == 2 && To(t.contentDOM, \"Enter\", 13) || (n.from == i.from - 1 && n.to == i.to && n.insert.length == 0 || s == 8 && n.insert.length < n.to - n.from && n.to > i.head) && To(t.contentDOM, \"Backspace\", 8) || n.from == i.from && n.to == i.to + 1 && n.insert.length == 0 && To(t.contentDOM, \"Delete\", 46)))\n      return !0;\n    let o = n.insert.toString();\n    t.inputState.composing >= 0 && t.inputState.composing++;\n    let a, l = () => a || (a = Z5(t, n, r));\n    return t.state.facet(yk).some((c) => c(t, n.from, n.to, o, l)) || t.dispatch(l()), !0;\n  } else if (r && !r.main.eq(i)) {\n    let o = !1, a = \"select\";\n    return t.inputState.lastSelectionTime > Date.now() - 50 && (t.inputState.lastSelectionOrigin == \"select\" && (o = !0), a = t.inputState.lastSelectionOrigin), t.dispatch({ selection: r, scrollIntoView: o, userEvent: a }), !0;\n  } else\n    return !1;\n}\nfunction Z5(t, e, n) {\n  let r, i = t.state, s = i.selection.main;\n  if (e.from >= s.from && e.to <= s.to && e.to - e.from >= (s.to - s.from) / 3 && (!n || n.main.empty && n.main.from == e.from + e.insert.length) && t.inputState.composing < 0) {\n    let a = s.from < e.from ? i.sliceDoc(s.from, e.from) : \"\", l = s.to > e.to ? i.sliceDoc(e.to, s.to) : \"\";\n    r = i.replaceSelection(t.state.toText(a + e.insert.sliceString(0, void 0, t.state.lineBreak) + l));\n  } else {\n    let a = i.changes(e), l = n && n.main.to <= a.newLength ? n.main : void 0;\n    if (i.selection.ranges.length > 1 && t.inputState.composing >= 0 && e.to <= s.to && e.to >= s.to - 10) {\n      let c = t.state.sliceDoc(e.from, e.to), u, d = n && Ek(t, n.main.head);\n      if (d) {\n        let p = e.insert.length - (e.to - e.from);\n        u = { from: d.from, to: d.to - p };\n      } else\n        u = t.state.doc.lineAt(s.head);\n      let f = s.to - e.to, h = s.to - s.from;\n      r = i.changeByRange((p) => {\n        if (p.from == s.from && p.to == s.to)\n          return { changes: a, range: l || p.map(a) };\n        let O = p.to - f, m = O - c.length;\n        if (p.to - p.from != h || t.state.sliceDoc(m, O) != c || // Unfortunately, there's no way to make multiple\n        // changes in the same node work without aborting\n        // composition, so cursors in the composition range are\n        // ignored.\n        p.to >= u.from && p.from <= u.to)\n          return { range: p };\n        let y = i.changes({ from: m, to: O, insert: e.insert }), b = p.to - s.to;\n        return {\n          changes: y,\n          range: l ? ae.range(Math.max(0, l.anchor + b), Math.max(0, l.head + b)) : p.map(y)\n        };\n      });\n    } else\n      r = {\n        changes: a,\n        selection: l && i.selection.replaceRange(l)\n      };\n  }\n  let o = \"input.type\";\n  return (t.composing || t.inputState.compositionPendingChange && t.inputState.compositionEndedAt > Date.now() - 50) && (t.inputState.compositionPendingChange = !1, o += \".compose\", t.inputState.compositionFirstChange && (o += \".start\", t.inputState.compositionFirstChange = !1)), i.update(r, { userEvent: o, scrollIntoView: !0 });\n}\nfunction V5(t, e, n, r) {\n  let i = Math.min(t.length, e.length), s = 0;\n  for (; s < i && t.charCodeAt(s) == e.charCodeAt(s); )\n    s++;\n  if (s == i && t.length == e.length)\n    return null;\n  let o = t.length, a = e.length;\n  for (; o > 0 && a > 0 && t.charCodeAt(o - 1) == e.charCodeAt(a - 1); )\n    o--, a--;\n  if (r == \"end\") {\n    let l = Math.max(0, s - Math.min(o, a));\n    n -= o + l - s;\n  }\n  if (o < s && t.length < e.length) {\n    let l = n <= s && n >= o ? s - n : 0;\n    s -= l, a = s + (a - o), o = s;\n  } else if (a < s) {\n    let l = n <= s && n >= a ? s - n : 0;\n    s -= l, o = s + (o - a), a = s;\n  }\n  return { from: s, toA: o, toB: a };\n}\nfunction I5(t) {\n  let e = [];\n  if (t.root.activeElement != t.contentDOM)\n    return e;\n  let { anchorNode: n, anchorOffset: r, focusNode: i, focusOffset: s } = t.observer.selectionRange;\n  return n && (e.push(new yv(n, r)), (i != n || s != r) && e.push(new yv(i, s))), e;\n}\nfunction W5(t, e) {\n  if (t.length == 0)\n    return null;\n  let n = t[0].pos, r = t.length == 2 ? t[1].pos : n;\n  return n > -1 && r > -1 ? ae.single(n + e, r + e) : null;\n}\nconst M5 = {\n  childList: !0,\n  characterData: !0,\n  subtree: !0,\n  attributes: !0,\n  characterDataOldValue: !0\n}, $f = de.ie && de.ie_version <= 11;\nclass X5 {\n  constructor(e) {\n    this.view = e, this.active = !1, this.selectionRange = new wN(), this.selectionChanged = !1, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.flushingAndroidKey = -1, this.lastChange = 0, this.scrollTargets = [], this.intersection = null, this.resizeScroll = null, this.intersecting = !1, this.gapIntersection = null, this.gaps = [], this.parentCheck = -1, this.dom = e.contentDOM, this.observer = new MutationObserver((n) => {\n      for (let r of n)\n        this.queue.push(r);\n      (de.ie && de.ie_version <= 11 || de.ios && e.composing) && n.some((r) => r.type == \"childList\" && r.removedNodes.length || r.type == \"characterData\" && r.oldValue.length > r.target.nodeValue.length) ? this.flushSoon() : this.flush();\n    }), $f && (this.onCharData = (n) => {\n      this.queue.push({\n        target: n.target,\n        type: \"characterData\",\n        oldValue: n.prevValue\n      }), this.flushSoon();\n    }), this.onSelectionChange = this.onSelectionChange.bind(this), this.onResize = this.onResize.bind(this), this.onPrint = this.onPrint.bind(this), this.onScroll = this.onScroll.bind(this), typeof ResizeObserver == \"function\" && (this.resizeScroll = new ResizeObserver(() => {\n      var n;\n      ((n = this.view.docView) === null || n === void 0 ? void 0 : n.lastUpdate) < Date.now() - 75 && this.onResize();\n    }), this.resizeScroll.observe(e.scrollDOM)), this.addWindowListeners(this.win = e.win), this.start(), typeof IntersectionObserver == \"function\" && (this.intersection = new IntersectionObserver((n) => {\n      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), n.length > 0 && n[n.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent(\"Event\")));\n    }, { threshold: [0, 1e-3] }), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((n) => {\n      n.length > 0 && n[n.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent(\"Event\"));\n    }, {})), this.listenForScroll(), this.readSelectionRange();\n  }\n  onScrollChanged(e) {\n    this.view.inputState.runHandlers(\"scroll\", e), this.intersecting && this.view.measure();\n  }\n  onScroll(e) {\n    this.intersecting && this.flush(!1), this.onScrollChanged(e);\n  }\n  onResize() {\n    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {\n      this.resizeTimeout = -1, this.view.requestMeasure();\n    }, 50));\n  }\n  onPrint() {\n    this.view.viewState.printing = !0, this.view.measure(), setTimeout(() => {\n      this.view.viewState.printing = !1, this.view.requestMeasure();\n    }, 500);\n  }\n  updateGaps(e) {\n    if (this.gapIntersection && (e.length != this.gaps.length || this.gaps.some((n, r) => n != e[r]))) {\n      this.gapIntersection.disconnect();\n      for (let n of e)\n        this.gapIntersection.observe(n);\n      this.gaps = e;\n    }\n  }\n  onSelectionChange(e) {\n    let n = this.selectionChanged;\n    if (!this.readSelectionRange() || this.delayedAndroidKey)\n      return;\n    let { view: r } = this, i = this.selectionRange;\n    if (r.state.facet(Yd) ? r.root.activeElement != this.dom : !ru(r.dom, i))\n      return;\n    let s = i.anchorNode && r.docView.nearest(i.anchorNode);\n    if (s && s.ignoreEvent(e)) {\n      n || (this.selectionChanged = !1);\n      return;\n    }\n    (de.ie && de.ie_version <= 11 || de.android && de.chrome) && !r.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)\n    i.focusNode && za(i.focusNode, i.focusOffset, i.anchorNode, i.anchorOffset) ? this.flushSoon() : this.flush(!1);\n  }\n  readSelectionRange() {\n    let { view: e } = this, n = de.safari && e.root.nodeType == 11 && bN(this.dom.ownerDocument) == this.dom && j5(this.view) || Iu(e.root);\n    if (!n || this.selectionRange.eq(n))\n      return !1;\n    let r = ru(this.dom, n);\n    return r && !this.selectionChanged && e.inputState.lastFocusTime > Date.now() - 200 && e.inputState.lastTouchTime < Date.now() - 300 && xN(this.dom, n) ? (this.view.inputState.lastFocusTime = 0, e.docView.updateSelection(), !1) : (this.selectionRange.setRange(n), r && (this.selectionChanged = !0), !0);\n  }\n  setSelectionRange(e, n) {\n    this.selectionRange.set(e.node, e.offset, n.node, n.offset), this.selectionChanged = !1;\n  }\n  clearSelectionRange() {\n    this.selectionRange.set(null, 0, null, 0);\n  }\n  listenForScroll() {\n    this.parentCheck = -1;\n    let e = 0, n = null;\n    for (let r = this.dom; r; )\n      if (r.nodeType == 1)\n        !n && e < this.scrollTargets.length && this.scrollTargets[e] == r ? e++ : n || (n = this.scrollTargets.slice(0, e)), n && n.push(r), r = r.assignedSlot || r.parentNode;\n      else if (r.nodeType == 11)\n        r = r.host;\n      else\n        break;\n    if (e < this.scrollTargets.length && !n && (n = this.scrollTargets.slice(0, e)), n) {\n      for (let r of this.scrollTargets)\n        r.removeEventListener(\"scroll\", this.onScroll);\n      for (let r of this.scrollTargets = n)\n        r.addEventListener(\"scroll\", this.onScroll);\n    }\n  }\n  ignore(e) {\n    if (!this.active)\n      return e();\n    try {\n      return this.stop(), e();\n    } finally {\n      this.start(), this.clear();\n    }\n  }\n  start() {\n    this.active || (this.observer.observe(this.dom, M5), $f && this.dom.addEventListener(\"DOMCharacterDataModified\", this.onCharData), this.active = !0);\n  }\n  stop() {\n    this.active && (this.active = !1, this.observer.disconnect(), $f && this.dom.removeEventListener(\"DOMCharacterDataModified\", this.onCharData));\n  }\n  // Throw away any pending changes\n  clear() {\n    this.processRecords(), this.queue.length = 0, this.selectionChanged = !1;\n  }\n  // Chrome Android, especially in combination with GBoard, not only\n  // doesn't reliably fire regular key events, but also often\n  // surrounds the effect of enter or backspace with a bunch of\n  // composition events that, when interrupted, cause text duplication\n  // or other kinds of corruption. This hack makes the editor back off\n  // from handling DOM changes for a moment when such a key is\n  // detected (via beforeinput or keydown), and then tries to flush\n  // them or, if that has no effect, dispatches the given key.\n  delayAndroidKey(e, n) {\n    var r;\n    if (!this.delayedAndroidKey) {\n      let i = () => {\n        let s = this.delayedAndroidKey;\n        s && (this.clearDelayedAndroidKey(), this.view.inputState.lastKeyCode = s.keyCode, this.view.inputState.lastKeyTime = Date.now(), !this.flush() && s.force && To(this.dom, s.key, s.keyCode));\n      };\n      this.flushingAndroidKey = this.view.win.requestAnimationFrame(i);\n    }\n    (!this.delayedAndroidKey || e == \"Enter\") && (this.delayedAndroidKey = {\n      key: e,\n      keyCode: n,\n      // Only run the key handler when no changes are detected if\n      // this isn't coming right after another change, in which case\n      // it is probably part of a weird chain of updates, and should\n      // be ignored if it returns the DOM to its previous state.\n      force: this.lastChange < Date.now() - 50 || !!(!((r = this.delayedAndroidKey) === null || r === void 0) && r.force)\n    });\n  }\n  clearDelayedAndroidKey() {\n    this.win.cancelAnimationFrame(this.flushingAndroidKey), this.delayedAndroidKey = null, this.flushingAndroidKey = -1;\n  }\n  flushSoon() {\n    this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame(() => {\n      this.delayedFlush = -1, this.flush();\n    }));\n  }\n  forceFlush() {\n    this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush), this.delayedFlush = -1), this.flush();\n  }\n  pendingRecords() {\n    for (let e of this.observer.takeRecords())\n      this.queue.push(e);\n    return this.queue;\n  }\n  processRecords() {\n    let e = this.pendingRecords();\n    e.length && (this.queue = []);\n    let n = -1, r = -1, i = !1;\n    for (let s of e) {\n      let o = this.readMutation(s);\n      o && (o.typeOver && (i = !0), n == -1 ? { from: n, to: r } = o : (n = Math.min(o.from, n), r = Math.max(o.to, r)));\n    }\n    return { from: n, to: r, typeOver: i };\n  }\n  readChange() {\n    let { from: e, to: n, typeOver: r } = this.processRecords(), i = this.selectionChanged && ru(this.dom, this.selectionRange);\n    if (e < 0 && !i)\n      return null;\n    e > -1 && (this.lastChange = Date.now()), this.view.inputState.lastFocusTime = 0, this.selectionChanged = !1;\n    let s = new D5(this.view, e, n, r);\n    return this.view.docView.domChanged = { newSel: s.newSel ? s.newSel.main : null }, s;\n  }\n  // Apply pending changes, if any\n  flush(e = !0) {\n    if (this.delayedFlush >= 0 || this.delayedAndroidKey)\n      return !1;\n    e && this.readSelectionRange();\n    let n = this.readChange();\n    if (!n)\n      return this.view.requestMeasure(), !1;\n    let r = this.view.state, i = Lk(this.view, n);\n    return this.view.state == r && this.view.update([]), i;\n  }\n  readMutation(e) {\n    let n = this.view.docView.nearest(e.target);\n    if (!n || n.ignoreMutation(e))\n      return null;\n    if (n.markDirty(e.type == \"attributes\"), e.type == \"attributes\" && (n.flags |= 4), e.type == \"childList\") {\n      let r = Sv(n, e.previousSibling || e.target.previousSibling, -1), i = Sv(n, e.nextSibling || e.target.nextSibling, 1);\n      return {\n        from: r ? n.posAfter(r) : n.posAtStart,\n        to: i ? n.posBefore(i) : n.posAtEnd,\n        typeOver: !1\n      };\n    } else\n      return e.type == \"characterData\" ? { from: n.posAtStart, to: n.posAtEnd, typeOver: e.target.nodeValue == e.oldValue } : null;\n  }\n  setWindow(e) {\n    e != this.win && (this.removeWindowListeners(this.win), this.win = e, this.addWindowListeners(this.win));\n  }\n  addWindowListeners(e) {\n    e.addEventListener(\"resize\", this.onResize), e.addEventListener(\"beforeprint\", this.onPrint), e.addEventListener(\"scroll\", this.onScroll), e.document.addEventListener(\"selectionchange\", this.onSelectionChange);\n  }\n  removeWindowListeners(e) {\n    e.removeEventListener(\"scroll\", this.onScroll), e.removeEventListener(\"resize\", this.onResize), e.removeEventListener(\"beforeprint\", this.onPrint), e.document.removeEventListener(\"selectionchange\", this.onSelectionChange);\n  }\n  destroy() {\n    var e, n, r;\n    this.stop(), (e = this.intersection) === null || e === void 0 || e.disconnect(), (n = this.gapIntersection) === null || n === void 0 || n.disconnect(), (r = this.resizeScroll) === null || r === void 0 || r.disconnect();\n    for (let i of this.scrollTargets)\n      i.removeEventListener(\"scroll\", this.onScroll);\n    this.removeWindowListeners(this.win), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout), this.win.cancelAnimationFrame(this.delayedFlush), this.win.cancelAnimationFrame(this.flushingAndroidKey);\n  }\n}\nfunction Sv(t, e, n) {\n  for (; e; ) {\n    let r = ft.get(e);\n    if (r && r.parent == t)\n      return r;\n    let i = e.parentNode;\n    e = i != t.dom ? i : n > 0 ? e.nextSibling : e.previousSibling;\n  }\n  return null;\n}\nfunction j5(t) {\n  let e = null;\n  function n(l) {\n    l.preventDefault(), l.stopImmediatePropagation(), e = l.getTargetRanges()[0];\n  }\n  if (t.contentDOM.addEventListener(\"beforeinput\", n, !0), t.dom.ownerDocument.execCommand(\"indent\"), t.contentDOM.removeEventListener(\"beforeinput\", n, !0), !e)\n    return null;\n  let r = e.startContainer, i = e.startOffset, s = e.endContainer, o = e.endOffset, a = t.docView.domAtPos(t.state.selection.main.anchor);\n  return za(a.node, a.offset, s, o) && ([r, i, s, o] = [s, o, r, i]), { anchorNode: r, anchorOffset: i, focusNode: s, focusOffset: o };\n}\nclass Se {\n  /**\n  The current editor state.\n  */\n  get state() {\n    return this.viewState.state;\n  }\n  /**\n  To be able to display large documents without consuming too much\n  memory or overloading the browser, CodeMirror only draws the\n  code that is visible (plus a margin around it) to the DOM. This\n  property tells you the extent of the current drawn viewport, in\n  document positions.\n  */\n  get viewport() {\n    return this.viewState.viewport;\n  }\n  /**\n  When there are, for example, large collapsed ranges in the\n  viewport, its size can be a lot bigger than the actual visible\n  content. Thus, if you are doing something like styling the\n  content in the viewport, it is preferable to only do so for\n  these ranges, which are the subset of the viewport that is\n  actually drawn.\n  */\n  get visibleRanges() {\n    return this.viewState.visibleRanges;\n  }\n  /**\n  Returns false when the editor is entirely scrolled out of view\n  or otherwise hidden.\n  */\n  get inView() {\n    return this.viewState.inView;\n  }\n  /**\n  Indicates whether the user is currently composing text via\n  [IME](https://en.wikipedia.org/wiki/Input_method), and at least\n  one change has been made in the current composition.\n  */\n  get composing() {\n    return this.inputState.composing > 0;\n  }\n  /**\n  Indicates whether the user is currently in composing state. Note\n  that on some platforms, like Android, this will be the case a\n  lot, since just putting the cursor on a word starts a\n  composition there.\n  */\n  get compositionStarted() {\n    return this.inputState.composing >= 0;\n  }\n  /**\n  The document or shadow root that the view lives in.\n  */\n  get root() {\n    return this._root;\n  }\n  /**\n  @internal\n  */\n  get win() {\n    return this.dom.ownerDocument.defaultView || window;\n  }\n  /**\n  Construct a new view. You'll want to either provide a `parent`\n  option, or put `view.dom` into your document after creating a\n  view, so that the user can see the editor.\n  */\n  constructor(e = {}) {\n    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = !1, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement(\"div\"), this.scrollDOM = document.createElement(\"div\"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = \"cm-scroller\", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement(\"div\"), this.announceDOM.className = \"cm-announced\", this.announceDOM.setAttribute(\"aria-live\", \"polite\"), this.dom = document.createElement(\"div\"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), e.parent && e.parent.appendChild(this.dom);\n    let { dispatch: n } = e;\n    this.dispatchTransactions = e.dispatchTransactions || n && ((r) => r.forEach((i) => n(i, this))) || ((r) => this.update(r)), this.dispatch = this.dispatch.bind(this), this._root = e.root || kN(e.parent) || document, this.viewState = new mv(e.state || Ye.create(e)), e.scrollTo && e.scrollTo.is(_c) && (this.viewState.scrollTarget = e.scrollTo.value.clip(this.viewState.state)), this.plugins = this.state.facet(Ra).map((r) => new Pf(r));\n    for (let r of this.plugins)\n      r.update(this);\n    this.observer = new X5(this), this.inputState = new r5(this), this.inputState.ensureHandlers(this.plugins), this.docView = new Jb(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure();\n  }\n  dispatch(...e) {\n    let n = e.length == 1 && e[0] instanceof Gt ? e : e.length == 1 && Array.isArray(e[0]) ? e[0] : [this.state.update(...e)];\n    this.dispatchTransactions(n, this);\n  }\n  /**\n  Update the view for the given array of transactions. This will\n  update the visible document and selection to match the state\n  produced by the transactions, and notify view plugins of the\n  change. You should usually call\n  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this\n  as a primitive.\n  */\n  update(e) {\n    if (this.updateState != 0)\n      throw new Error(\"Calls to EditorView.update are not allowed while an update is in progress\");\n    let n = !1, r = !1, i, s = this.state;\n    for (let f of e) {\n      if (f.startState != s)\n        throw new RangeError(\"Trying to update state with a transaction that doesn't start from the previous state.\");\n      s = f.state;\n    }\n    if (this.destroyed) {\n      this.viewState.state = s;\n      return;\n    }\n    let o = this.hasFocus, a = 0, l = null;\n    e.some((f) => f.annotation(Vk)) ? (this.inputState.notifiedFocused = o, a = 1) : o != this.inputState.notifiedFocused && (this.inputState.notifiedFocused = o, l = Ik(s, o), l || (a = 1));\n    let c = this.observer.delayedAndroidKey, u = null;\n    if (c ? (this.observer.clearDelayedAndroidKey(), u = this.observer.readChange(), (u && !this.state.doc.eq(s.doc) || !this.state.selection.eq(s.selection)) && (u = null)) : this.observer.clear(), s.facet(Ye.phrases) != this.state.facet(Ye.phrases))\n      return this.setState(s);\n    i = Wu.create(this, s, e), i.flags |= a;\n    let d = this.viewState.scrollTarget;\n    try {\n      this.updateState = 2;\n      for (let f of e) {\n        if (d && (d = d.map(f.changes)), f.scrollIntoView) {\n          let { main: h } = f.state.selection;\n          d = new Eo(h.empty ? h : ae.cursor(h.head, h.head > h.anchor ? -1 : 1));\n        }\n        for (let h of f.effects)\n          h.is(_c) && (d = h.value.clip(this.state));\n      }\n      this.viewState.update(i, d), this.bidiCache = Mu.update(this.bidiCache, i.changes), i.empty || (this.updatePlugins(i), this.inputState.update(i)), n = this.docView.update(i), this.state.facet(Na) != this.styleModules && this.mountStyles(), r = this.updateAttrs(), this.showAnnouncements(e), this.docView.updateSelection(n, e.some((f) => f.isUserEvent(\"select.pointer\")));\n    } finally {\n      this.updateState = 0;\n    }\n    if (i.startState.facet(Ac) != i.state.facet(Ac) && (this.viewState.mustMeasureContent = !0), (n || r || d || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), !i.empty)\n      for (let f of this.state.facet(fp))\n        try {\n          f(i);\n        } catch (h) {\n          hr(this.state, h, \"update listener\");\n        }\n    (l || u) && Promise.resolve().then(() => {\n      l && this.state == l.startState && this.dispatch(l), u && !Lk(this, u) && c.force && To(this.contentDOM, c.key, c.keyCode);\n    });\n  }\n  /**\n  Reset the view to the given state. (This will cause the entire\n  document to be redrawn and all view plugins to be reinitialized,\n  so you should probably only use it when the new state isn't\n  derived from the old state. Otherwise, use\n  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)\n  */\n  setState(e) {\n    if (this.updateState != 0)\n      throw new Error(\"Calls to EditorView.setState are not allowed while an update is in progress\");\n    if (this.destroyed) {\n      this.viewState.state = e;\n      return;\n    }\n    this.updateState = 2;\n    let n = this.hasFocus;\n    try {\n      for (let r of this.plugins)\n        r.destroy(this);\n      this.viewState = new mv(e), this.plugins = e.facet(Ra).map((r) => new Pf(r)), this.pluginMap.clear();\n      for (let r of this.plugins)\n        r.update(this);\n      this.docView.destroy(), this.docView = new Jb(this), this.inputState.ensureHandlers(this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];\n    } finally {\n      this.updateState = 0;\n    }\n    n && this.focus(), this.requestMeasure();\n  }\n  updatePlugins(e) {\n    let n = e.startState.facet(Ra), r = e.state.facet(Ra);\n    if (n != r) {\n      let i = [];\n      for (let s of r) {\n        let o = n.indexOf(s);\n        if (o < 0)\n          i.push(new Pf(s));\n        else {\n          let a = this.plugins[o];\n          a.mustUpdate = e, i.push(a);\n        }\n      }\n      for (let s of this.plugins)\n        s.mustUpdate != e && s.destroy(this);\n      this.plugins = i, this.pluginMap.clear();\n    } else\n      for (let i of this.plugins)\n        i.mustUpdate = e;\n    for (let i = 0; i < this.plugins.length; i++)\n      this.plugins[i].update(this);\n    n != r && this.inputState.ensureHandlers(this.plugins);\n  }\n  /**\n  @internal\n  */\n  measure(e = !0) {\n    if (this.destroyed)\n      return;\n    if (this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.observer.delayedAndroidKey) {\n      this.measureScheduled = -1, this.requestMeasure();\n      return;\n    }\n    this.measureScheduled = 0, e && this.observer.forceFlush();\n    let n = null, r = this.scrollDOM, i = r.scrollTop * this.scaleY, { scrollAnchorPos: s, scrollAnchorHeight: o } = this.viewState;\n    Math.abs(i - this.viewState.scrollTop) > 1 && (o = -1), this.viewState.scrollAnchorHeight = -1;\n    try {\n      for (let a = 0; ; a++) {\n        if (o < 0)\n          if (tk(r))\n            s = -1, o = this.viewState.heightMap.height;\n          else {\n            let h = this.viewState.scrollAnchorAt(i);\n            s = h.from, o = h.top;\n          }\n        this.updateState = 1;\n        let l = this.viewState.measure(this);\n        if (!l && !this.measureRequests.length && this.viewState.scrollTarget == null)\n          break;\n        if (a > 5) {\n          console.warn(this.measureRequests.length ? \"Measure loop restarted more than 5 times\" : \"Viewport failed to stabilize\");\n          break;\n        }\n        let c = [];\n        l & 4 || ([this.measureRequests, c] = [c, this.measureRequests]);\n        let u = c.map((h) => {\n          try {\n            return h.read(this);\n          } catch (p) {\n            return hr(this.state, p), wv;\n          }\n        }), d = Wu.create(this, this.state, []), f = !1;\n        d.flags |= l, n ? n.flags |= l : n = d, this.updateState = 2, d.empty || (this.updatePlugins(d), this.inputState.update(d), this.updateAttrs(), f = this.docView.update(d));\n        for (let h = 0; h < c.length; h++)\n          if (u[h] != wv)\n            try {\n              let p = c[h];\n              p.write && p.write(u[h], this);\n            } catch (p) {\n              hr(this.state, p);\n            }\n        if (f && this.docView.updateSelection(!0), !d.viewportChanged && this.measureRequests.length == 0) {\n          if (this.viewState.editorHeight)\n            if (this.viewState.scrollTarget) {\n              this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, o = -1;\n              continue;\n            } else {\n              let p = (s < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(s).top) - o;\n              if (p > 1 || p < -1) {\n                i = i + p, r.scrollTop = i / this.scaleY, o = -1;\n                continue;\n              }\n            }\n          break;\n        }\n      }\n    } finally {\n      this.updateState = 0, this.measureScheduled = -1;\n    }\n    if (n && !n.empty)\n      for (let a of this.state.facet(fp))\n        a(n);\n  }\n  /**\n  Get the CSS classes for the currently active editor themes.\n  */\n  get themeClasses() {\n    return gp + \" \" + (this.state.facet(Op) ? jk : Xk) + \" \" + this.state.facet(Ac);\n  }\n  updateAttrs() {\n    let e = kv(this, kk, {\n      class: \"cm-editor\" + (this.hasFocus ? \" cm-focused \" : \" \") + this.themeClasses\n    }), n = {\n      spellcheck: \"false\",\n      autocorrect: \"off\",\n      autocapitalize: \"off\",\n      translate: \"no\",\n      contenteditable: this.state.facet(Yd) ? \"true\" : \"false\",\n      class: \"cm-content\",\n      style: `${de.tabSize}: ${this.state.tabSize}`,\n      role: \"textbox\",\n      \"aria-multiline\": \"true\"\n    };\n    this.state.readOnly && (n[\"aria-readonly\"] = \"true\"), kv(this, cg, n);\n    let r = this.observer.ignore(() => {\n      let i = ap(this.contentDOM, this.contentAttrs, n), s = ap(this.dom, this.editorAttrs, e);\n      return i || s;\n    });\n    return this.editorAttrs = e, this.contentAttrs = n, r;\n  }\n  showAnnouncements(e) {\n    let n = !0;\n    for (let r of e)\n      for (let i of r.effects)\n        if (i.is(Se.announce)) {\n          n && (this.announceDOM.textContent = \"\"), n = !1;\n          let s = this.announceDOM.appendChild(document.createElement(\"div\"));\n          s.textContent = i.value;\n        }\n  }\n  mountStyles() {\n    this.styleModules = this.state.facet(Na);\n    let e = this.state.facet(Se.cspNonce);\n    ss.mount(this.root, this.styleModules.concat(A5).reverse(), e ? { nonce: e } : void 0);\n  }\n  readMeasured() {\n    if (this.updateState == 2)\n      throw new Error(\"Reading the editor layout isn't allowed during an update\");\n    this.updateState == 0 && this.measureScheduled > -1 && this.measure(!1);\n  }\n  /**\n  Schedule a layout measurement, optionally providing callbacks to\n  do custom DOM measuring followed by a DOM write phase. Using\n  this is preferable reading DOM layout directly from, for\n  example, an event handler, because it'll make sure measuring and\n  drawing done by other components is synchronized, avoiding\n  unnecessary DOM layout computations.\n  */\n  requestMeasure(e) {\n    if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame(() => this.measure())), e) {\n      if (this.measureRequests.indexOf(e) > -1)\n        return;\n      if (e.key != null) {\n        for (let n = 0; n < this.measureRequests.length; n++)\n          if (this.measureRequests[n].key === e.key) {\n            this.measureRequests[n] = e;\n            return;\n          }\n      }\n      this.measureRequests.push(e);\n    }\n  }\n  /**\n  Get the value of a specific plugin, if present. Note that\n  plugins that crash can be dropped from a view, so even when you\n  know you registered a given plugin, it is recommended to check\n  the return value of this method.\n  */\n  plugin(e) {\n    let n = this.pluginMap.get(e);\n    return (n === void 0 || n && n.spec != e) && this.pluginMap.set(e, n = this.plugins.find((r) => r.spec == e) || null), n && n.update(this).value;\n  }\n  /**\n  The top position of the document, in screen coordinates. This\n  may be negative when the editor is scrolled down. Points\n  directly to the top of the first line, not above the padding.\n  */\n  get documentTop() {\n    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;\n  }\n  /**\n  Reports the padding above and below the document.\n  */\n  get documentPadding() {\n    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };\n  }\n  /**\n  If the editor is transformed with CSS, this provides the scale\n  along the X axis. Otherwise, it will just be 1. Note that\n  transforms other than translation and scaling are not supported.\n  */\n  get scaleX() {\n    return this.viewState.scaleX;\n  }\n  /**\n  Provide the CSS transformed scale along the Y axis.\n  */\n  get scaleY() {\n    return this.viewState.scaleY;\n  }\n  /**\n  Find the text line or block widget at the given vertical\n  position (which is interpreted as relative to the [top of the\n  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).\n  */\n  elementAtHeight(e) {\n    return this.readMeasured(), this.viewState.elementAtHeight(e);\n  }\n  /**\n  Find the line block (see\n  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given\n  height, again interpreted relative to the [top of the\n  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).\n  */\n  lineBlockAtHeight(e) {\n    return this.readMeasured(), this.viewState.lineBlockAtHeight(e);\n  }\n  /**\n  Get the extent and vertical position of all [line\n  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions\n  are relative to the [top of the\n  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);\n  */\n  get viewportLineBlocks() {\n    return this.viewState.viewportLines;\n  }\n  /**\n  Find the line block around the given document position. A line\n  block is a range delimited on both sides by either a\n  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the\n  start/end of the document. It will usually just hold a line of\n  text, but may be broken into multiple textblocks by block\n  widgets.\n  */\n  lineBlockAt(e) {\n    return this.viewState.lineBlockAt(e);\n  }\n  /**\n  The editor's total content height.\n  */\n  get contentHeight() {\n    return this.viewState.contentHeight;\n  }\n  /**\n  Move a cursor position by [grapheme\n  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether\n  the motion is away from the line start, or towards it. In\n  bidirectional text, the line is traversed in visual order, using\n  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).\n  When the start position was the last one on the line, the\n  returned position will be across the line break. If there is no\n  further line, the original position is returned.\n  \n  By default, this method moves over a single cluster. The\n  optional `by` argument can be used to move across more. It will\n  be called with the first cluster as argument, and should return\n  a predicate that determines, for each subsequent cluster,\n  whether it should also be moved over.\n  */\n  moveByChar(e, n, r) {\n    return Tf(this, e, sv(this, e, n, r));\n  }\n  /**\n  Move a cursor position across the next group of either\n  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter\n  non-whitespace characters.\n  */\n  moveByGroup(e, n) {\n    return Tf(this, e, sv(this, e, n, (r) => t5(this, e.head, r)));\n  }\n  /**\n  Get the cursor position visually at the start or end of a line.\n  Note that this may differ from the _logical_ position at its\n  start or end (which is simply at `line.from`/`line.to`) if text\n  at the start or end goes against the line's base text direction.\n  */\n  visualLineSide(e, n) {\n    let r = this.bidiSpans(e), i = this.textDirectionAt(e.from), s = r[n ? r.length - 1 : 0];\n    return ae.cursor(s.side(n, i) + e.from, s.forward(!n, i) ? 1 : -1);\n  }\n  /**\n  Move to the next line boundary in the given direction. If\n  `includeWrap` is true, line wrapping is on, and there is a\n  further wrap point on the current line, the wrap point will be\n  returned. Otherwise this function will return the start or end\n  of the line.\n  */\n  moveToLineBoundary(e, n, r = !0) {\n    return e5(this, e, n, r);\n  }\n  /**\n  Move a cursor position vertically. When `distance` isn't given,\n  it defaults to moving to the next line (including wrapped\n  lines). Otherwise, `distance` should provide a positive distance\n  in pixels.\n  \n  When `start` has a\n  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical\n  motion will use that as a target horizontal position. Otherwise,\n  the cursor's own horizontal position is used. The returned\n  cursor will have its goal column set to whichever column was\n  used.\n  */\n  moveVertically(e, n, r) {\n    return Tf(this, e, n5(this, e, n, r));\n  }\n  /**\n  Find the DOM parent node and offset (child offset if `node` is\n  an element, character offset when it is a text node) at the\n  given document position.\n  \n  Note that for positions that aren't currently in\n  `visibleRanges`, the resulting DOM position isn't necessarily\n  meaningful (it may just point before or after a placeholder\n  element).\n  */\n  domAtPos(e) {\n    return this.docView.domAtPos(e);\n  }\n  /**\n  Find the document position at the given DOM node. Can be useful\n  for associating positions with DOM events. Will raise an error\n  when `node` isn't part of the editor content.\n  */\n  posAtDOM(e, n = 0) {\n    return this.docView.posFromDOM(e, n);\n  }\n  posAtCoords(e, n = !0) {\n    return this.readMeasured(), Qk(this, e, n);\n  }\n  /**\n  Get the screen coordinates at the given document position.\n  `side` determines whether the coordinates are based on the\n  element before (-1) or after (1) the position (if no element is\n  available on the given side, the method will transparently use\n  another strategy to get reasonable coordinates).\n  */\n  coordsAtPos(e, n = 1) {\n    this.readMeasured();\n    let r = this.docView.coordsAt(e, n);\n    if (!r || r.left == r.right)\n      return r;\n    let i = this.state.doc.lineAt(e), s = this.bidiSpans(i), o = s[Bi.find(s, e - i.from, -1, n)];\n    return sg(r, o.dir == Qt.LTR == n > 0);\n  }\n  /**\n  Return the rectangle around a given character. If `pos` does not\n  point in front of a character that is in the viewport and\n  rendered (i.e. not replaced, not a line break), this will return\n  null. For space characters that are a line wrap point, this will\n  return the position before the line break.\n  */\n  coordsForChar(e) {\n    return this.readMeasured(), this.docView.coordsForChar(e);\n  }\n  /**\n  The default width of a character in the editor. May not\n  accurately reflect the width of all characters (given variable\n  width fonts or styling of invididual ranges).\n  */\n  get defaultCharacterWidth() {\n    return this.viewState.heightOracle.charWidth;\n  }\n  /**\n  The default height of a line in the editor. May not be accurate\n  for all lines.\n  */\n  get defaultLineHeight() {\n    return this.viewState.heightOracle.lineHeight;\n  }\n  /**\n  The text direction\n  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)\n  CSS property) of the editor's content element.\n  */\n  get textDirection() {\n    return this.viewState.defaultTextDirection;\n  }\n  /**\n  Find the text direction of the block at the given position, as\n  assigned by CSS. If\n  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)\n  isn't enabled, or the given position is outside of the viewport,\n  this will always return the same as\n  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that\n  this may trigger a DOM layout.\n  */\n  textDirectionAt(e) {\n    return !this.state.facet(wk) || e < this.viewport.from || e > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(e));\n  }\n  /**\n  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)\n  (as determined by the\n  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)\n  CSS property of its content element).\n  */\n  get lineWrapping() {\n    return this.viewState.heightOracle.lineWrapping;\n  }\n  /**\n  Returns the bidirectional text structure of the given line\n  (which should be in the current document) as an array of span\n  objects. The order of these spans matches the [text\n  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is\n  left-to-right, the leftmost spans come first, otherwise the\n  rightmost spans come first.\n  */\n  bidiSpans(e) {\n    if (e.length > B5)\n      return pk(e.length);\n    let n = this.textDirectionAt(e.from), r;\n    for (let s of this.bidiCache)\n      if (s.from == e.from && s.dir == n && (s.fresh || hk(s.isolates, r = Kb(this, e))))\n        return s.order;\n    r || (r = Kb(this, e));\n    let i = ZN(e.text, n, r);\n    return this.bidiCache.push(new Mu(e.from, e.to, n, r, !0, i)), i;\n  }\n  /**\n  Check whether the editor has focus.\n  */\n  get hasFocus() {\n    var e;\n    return (this.dom.ownerDocument.hasFocus() || de.safari && ((e = this.inputState) === null || e === void 0 ? void 0 : e.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;\n  }\n  /**\n  Put focus on the editor.\n  */\n  focus() {\n    this.observer.ignore(() => {\n      Jw(this.contentDOM), this.docView.updateSelection();\n    });\n  }\n  /**\n  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only\n  necessary when moving the editor's existing DOM to a new window or shadow root.\n  */\n  setRoot(e) {\n    this._root != e && (this._root = e, this.observer.setWindow((e.nodeType == 9 ? e : e.ownerDocument).defaultView || window), this.mountStyles());\n  }\n  /**\n  Clean up this editor view, removing its element from the\n  document, unregistering event handlers, and notifying\n  plugins. The view instance can no longer be used after\n  calling this.\n  */\n  destroy() {\n    for (let e of this.plugins)\n      e.destroy(this);\n    this.plugins = [], this.inputState.destroy(), this.docView.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.destroyed = !0;\n  }\n  /**\n  Returns an effect that can be\n  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to\n  cause it to scroll the given position or range into view.\n  */\n  static scrollIntoView(e, n = {}) {\n    return _c.of(new Eo(typeof e == \"number\" ? ae.cursor(e) : e, n.y, n.x, n.yMargin, n.xMargin));\n  }\n  /**\n  Return an effect that resets the editor to its current (at the\n  time this method was called) scroll position. Note that this\n  only affects the editor's own scrollable element, not parents.\n  See also\n  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).\n  \n  The effect should be used with a document identical to the one\n  it was created for. Failing to do so is not an error, but may\n  not scroll to the expected position. You can\n  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.\n  */\n  scrollSnapshot() {\n    let { scrollTop: e, scrollLeft: n } = this.scrollDOM, r = this.viewState.scrollAnchorAt(e);\n    return _c.of(new Eo(ae.cursor(r.from), \"start\", \"start\", r.top - e, n, !0));\n  }\n  /**\n  Returns an extension that can be used to add DOM event handlers.\n  The value should be an object mapping event names to handler\n  functions. For any given event, such functions are ordered by\n  extension precedence, and the first handler to return true will\n  be assumed to have handled that event, and no other handlers or\n  built-in behavior will be activated for it. These are registered\n  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except\n  for `scroll` handlers, which will be called any time the\n  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of\n  its parent nodes is scrolled.\n  */\n  static domEventHandlers(e) {\n    return rr.define(() => ({}), { eventHandlers: e });\n  }\n  /**\n  Create an extension that registers DOM event observers. Contrary\n  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),\n  observers can't be prevented from running by a higher-precedence\n  handler returning true. They also don't prevent other handlers\n  and observers from running when they return true, and should not\n  call `preventDefault`.\n  */\n  static domEventObservers(e) {\n    return rr.define(() => ({}), { eventObservers: e });\n  }\n  /**\n  Create a theme extension. The first argument can be a\n  [`style-mod`](https://github.com/marijnh/style-mod#documentation)\n  style spec providing the styles for the theme. These will be\n  prefixed with a generated class for the style.\n  \n  Because the selectors will be prefixed with a scope class, rule\n  that directly match the editor's [wrapper\n  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be\n  added—need to be explicitly differentiated by adding an `&` to\n  the selector for that element—for example\n  `&.cm-focused`.\n  \n  When `dark` is set to true, the theme will be marked as dark,\n  which will cause the `&dark` rules from [base\n  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to\n  `&light` when a light theme is active).\n  */\n  static theme(e, n) {\n    let r = ss.newName(), i = [Ac.of(r), Na.of(mp(`.${r}`, e))];\n    return n && n.dark && i.push(Op.of(!0)), i;\n  }\n  /**\n  Create an extension that adds styles to the base theme. Like\n  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the\n  place of the editor wrapper element when directly targeting\n  that. You can also use `&dark` or `&light` instead to only\n  target editors with a dark or light theme.\n  */\n  static baseTheme(e) {\n    return zl.lowest(Na.of(mp(\".\" + gp, e, Bk)));\n  }\n  /**\n  Retrieve an editor view instance from the view's DOM\n  representation.\n  */\n  static findFromDOM(e) {\n    var n;\n    let r = e.querySelector(\".cm-content\"), i = r && ft.get(r) || ft.get(e);\n    return ((n = i == null ? void 0 : i.rootView) === null || n === void 0 ? void 0 : n.view) || null;\n  }\n}\nSe.styleModule = Na;\nSe.inputHandler = yk;\nSe.focusChangeEffect = Sk;\nSe.perLineTextDirection = wk;\nSe.exceptionSink = vk;\nSe.updateListener = fp;\nSe.editable = Yd;\nSe.mouseSelectionStyle = bk;\nSe.dragMovesSelection = mk;\nSe.clickAddsSelectionRange = gk;\nSe.decorations = ml;\nSe.outerDecorations = xk;\nSe.atomicRanges = ug;\nSe.bidiIsolatedRanges = Pk;\nSe.scrollMargins = _k;\nSe.darkTheme = Op;\nSe.cspNonce = /* @__PURE__ */ ve.define({ combine: (t) => t.length ? t[0] : \"\" });\nSe.contentAttributes = cg;\nSe.editorAttributes = kk;\nSe.lineWrapping = /* @__PURE__ */ Se.contentAttributes.of({ class: \"cm-lineWrapping\" });\nSe.announce = /* @__PURE__ */ ot.define();\nconst B5 = 4096, wv = {};\nclass Mu {\n  constructor(e, n, r, i, s, o) {\n    this.from = e, this.to = n, this.dir = r, this.isolates = i, this.fresh = s, this.order = o;\n  }\n  static update(e, n) {\n    if (n.empty && !e.some((s) => s.fresh))\n      return e;\n    let r = [], i = e.length ? e[e.length - 1].dir : Qt.LTR;\n    for (let s = Math.max(0, e.length - 10); s < e.length; s++) {\n      let o = e[s];\n      o.dir == i && !n.touchesRange(o.from, o.to) && r.push(new Mu(n.mapPos(o.from, 1), n.mapPos(o.to, -1), o.dir, o.isolates, !1, o.order));\n    }\n    return r;\n  }\n}\nfunction kv(t, e, n) {\n  for (let r = t.state.facet(e), i = r.length - 1; i >= 0; i--) {\n    let s = r[i], o = typeof s == \"function\" ? s(t) : s;\n    o && op(o, n);\n  }\n  return n;\n}\nconst L5 = de.mac ? \"mac\" : de.windows ? \"win\" : de.linux ? \"linux\" : \"key\";\nfunction U5(t, e) {\n  const n = t.split(/-(?!$)/);\n  let r = n[n.length - 1];\n  r == \"Space\" && (r = \" \");\n  let i, s, o, a;\n  for (let l = 0; l < n.length - 1; ++l) {\n    const c = n[l];\n    if (/^(cmd|meta|m)$/i.test(c))\n      a = !0;\n    else if (/^a(lt)?$/i.test(c))\n      i = !0;\n    else if (/^(c|ctrl|control)$/i.test(c))\n      s = !0;\n    else if (/^s(hift)?$/i.test(c))\n      o = !0;\n    else if (/^mod$/i.test(c))\n      e == \"mac\" ? a = !0 : s = !0;\n    else\n      throw new Error(\"Unrecognized modifier name: \" + c);\n  }\n  return i && (r = \"Alt-\" + r), s && (r = \"Ctrl-\" + r), a && (r = \"Meta-\" + r), o && (r = \"Shift-\" + r), r;\n}\nfunction Rc(t, e, n) {\n  return e.altKey && (t = \"Alt-\" + t), e.ctrlKey && (t = \"Ctrl-\" + t), e.metaKey && (t = \"Meta-\" + t), n !== !1 && e.shiftKey && (t = \"Shift-\" + t), t;\n}\nconst q5 = /* @__PURE__ */ zl.default(/* @__PURE__ */ Se.domEventHandlers({\n  keydown(t, e) {\n    return F5(Y5(e.state), t, e, \"editor\");\n  }\n})), bl = /* @__PURE__ */ ve.define({ enables: q5 }), xv = /* @__PURE__ */ new WeakMap();\nfunction Y5(t) {\n  let e = t.facet(bl), n = xv.get(e);\n  return n || xv.set(e, n = H5(e.reduce((r, i) => r.concat(i), []))), n;\n}\nlet Mi = null;\nconst z5 = 4e3;\nfunction H5(t, e = L5) {\n  let n = /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ Object.create(null), i = (o, a) => {\n    let l = r[o];\n    if (l == null)\n      r[o] = a;\n    else if (l != a)\n      throw new Error(\"Key binding \" + o + \" is used both as a regular binding and as a multi-stroke prefix\");\n  }, s = (o, a, l, c, u) => {\n    var d, f;\n    let h = n[o] || (n[o] = /* @__PURE__ */ Object.create(null)), p = a.split(/ (?!$)/).map((y) => U5(y, e));\n    for (let y = 1; y < p.length; y++) {\n      let b = p.slice(0, y).join(\" \");\n      i(b, !0), h[b] || (h[b] = {\n        preventDefault: !0,\n        stopPropagation: !1,\n        run: [(g) => {\n          let v = Mi = { view: g, prefix: b, scope: o };\n          return setTimeout(() => {\n            Mi == v && (Mi = null);\n          }, z5), !0;\n        }]\n      });\n    }\n    let O = p.join(\" \");\n    i(O, !1);\n    let m = h[O] || (h[O] = {\n      preventDefault: !1,\n      stopPropagation: !1,\n      run: ((f = (d = h._any) === null || d === void 0 ? void 0 : d.run) === null || f === void 0 ? void 0 : f.slice()) || []\n    });\n    l && m.run.push(l), c && (m.preventDefault = !0), u && (m.stopPropagation = !0);\n  };\n  for (let o of t) {\n    let a = o.scope ? o.scope.split(\" \") : [\"editor\"];\n    if (o.any)\n      for (let c of a) {\n        let u = n[c] || (n[c] = /* @__PURE__ */ Object.create(null));\n        u._any || (u._any = { preventDefault: !1, stopPropagation: !1, run: [] });\n        for (let d in u)\n          u[d].run.push(o.any);\n      }\n    let l = o[e] || o.key;\n    if (l)\n      for (let c of a)\n        s(c, l, o.run, o.preventDefault, o.stopPropagation), o.shift && s(c, \"Shift-\" + l, o.shift, o.preventDefault, o.stopPropagation);\n  }\n  return n;\n}\nfunction F5(t, e, n, r) {\n  let i = mN(e), s = nn(i, 0), o = cr(s) == i.length && i != \" \", a = \"\", l = !1, c = !1, u = !1;\n  Mi && Mi.view == n && Mi.scope == r && (a = Mi.prefix + \" \", Ak.indexOf(e.keyCode) < 0 && (c = !0, Mi = null));\n  let d = /* @__PURE__ */ new Set(), f = (m) => {\n    if (m) {\n      for (let y of m.run)\n        if (!d.has(y) && (d.add(y), y(n, e)))\n          return m.stopPropagation && (u = !0), !0;\n      m.preventDefault && (m.stopPropagation && (u = !0), c = !0);\n    }\n    return !1;\n  }, h = t[r], p, O;\n  return h && (f(h[a + Rc(i, e, !o)]) ? l = !0 : o && (e.altKey || e.metaKey || e.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows\n  !(de.windows && e.ctrlKey && e.altKey) && (p = os[e.keyCode]) && p != i ? (f(h[a + Rc(p, e, !0)]) || e.shiftKey && (O = pl[e.keyCode]) != i && O != p && f(h[a + Rc(O, e, !1)])) && (l = !0) : o && e.shiftKey && f(h[a + Rc(i, e, !0)]) && (l = !0), !l && f(h._any) && (l = !0)), c && (l = !0), l && u && e.stopPropagation(), l;\n}\nfunction Pv(t, e, n, r, i) {\n  e.lastIndex = 0;\n  for (let s = t.iterRange(n, r), o = n, a; !s.next().done; o += s.value.length)\n    if (!s.lineBreak)\n      for (; a = e.exec(s.value); )\n        i(o + a.index, a);\n}\nfunction G5(t, e) {\n  let n = t.visibleRanges;\n  if (n.length == 1 && n[0].from == t.viewport.from && n[0].to == t.viewport.to)\n    return n;\n  let r = [];\n  for (let { from: i, to: s } of n)\n    i = Math.max(t.state.doc.lineAt(i).from, i - e), s = Math.min(t.state.doc.lineAt(s).to, s + e), r.length && r[r.length - 1].to >= i ? r[r.length - 1].to = s : r.push({ from: i, to: s });\n  return r;\n}\nclass Uk {\n  /**\n  Create a decorator.\n  */\n  constructor(e) {\n    const { regexp: n, decoration: r, decorate: i, boundary: s, maxLength: o = 1e3 } = e;\n    if (!n.global)\n      throw new RangeError(\"The regular expression given to MatchDecorator should have its 'g' flag set\");\n    if (this.regexp = n, i)\n      this.addMatch = (a, l, c, u) => i(u, c, c + a[0].length, a, l);\n    else if (typeof r == \"function\")\n      this.addMatch = (a, l, c, u) => {\n        let d = r(a, l, c);\n        d && u(c, c + a[0].length, d);\n      };\n    else if (r)\n      this.addMatch = (a, l, c, u) => u(c, c + a[0].length, r);\n    else\n      throw new RangeError(\"Either 'decorate' or 'decoration' should be provided to MatchDecorator\");\n    this.boundary = s, this.maxLength = o;\n  }\n  /**\n  Compute the full set of decorations for matches in the given\n  view's viewport. You'll want to call this when initializing your\n  plugin.\n  */\n  createDeco(e) {\n    let n = new jo(), r = n.add.bind(n);\n    for (let { from: i, to: s } of G5(e, this.maxLength))\n      Pv(e.state.doc, this.regexp, i, s, (o, a) => this.addMatch(a, e, o, r));\n    return n.finish();\n  }\n  /**\n  Update a set of decorations for a view update. `deco` _must_ be\n  the set of decorations produced by _this_ `MatchDecorator` for\n  the view state before the update.\n  */\n  updateDeco(e, n) {\n    let r = 1e9, i = -1;\n    return e.docChanged && e.changes.iterChanges((s, o, a, l) => {\n      l > e.view.viewport.from && a < e.view.viewport.to && (r = Math.min(a, r), i = Math.max(l, i));\n    }), e.viewportChanged || i - r > 1e3 ? this.createDeco(e.view) : i > -1 ? this.updateRange(e.view, n.map(e.changes), r, i) : n;\n  }\n  updateRange(e, n, r, i) {\n    for (let s of e.visibleRanges) {\n      let o = Math.max(s.from, r), a = Math.min(s.to, i);\n      if (a > o) {\n        let l = e.state.doc.lineAt(o), c = l.to < a ? e.state.doc.lineAt(a) : l, u = Math.max(s.from, l.from), d = Math.min(s.to, c.to);\n        if (this.boundary) {\n          for (; o > l.from; o--)\n            if (this.boundary.test(l.text[o - 1 - l.from])) {\n              u = o;\n              break;\n            }\n          for (; a < c.to; a++)\n            if (this.boundary.test(c.text[a - c.from])) {\n              d = a;\n              break;\n            }\n        }\n        let f = [], h, p = (O, m, y) => f.push(y.range(O, m));\n        if (l == c)\n          for (this.regexp.lastIndex = u - l.from; (h = this.regexp.exec(l.text)) && h.index < d - l.from; )\n            this.addMatch(h, e, h.index + l.from, p);\n        else\n          Pv(e.state.doc, this.regexp, u, d, (O, m) => this.addMatch(m, e, O, p));\n        n = n.update({ filterFrom: u, filterTo: d, filter: (O, m) => O < u || m > d, add: f });\n      }\n    }\n    return n;\n  }\n}\nconst bp = /x/.unicode != null ? \"gu\" : \"g\", K5 = /* @__PURE__ */ new RegExp(`[\\0-\\b\n-\u001f-­؜​‎‏\\u2028\\u2029‭‮⁦⁧⁩\\uFEFF￹-￼]`, bp), J5 = {\n  0: \"null\",\n  7: \"bell\",\n  8: \"backspace\",\n  10: \"newline\",\n  11: \"vertical tab\",\n  13: \"carriage return\",\n  27: \"escape\",\n  8203: \"zero width space\",\n  8204: \"zero width non-joiner\",\n  8205: \"zero width joiner\",\n  8206: \"left-to-right mark\",\n  8207: \"right-to-left mark\",\n  8232: \"line separator\",\n  8237: \"left-to-right override\",\n  8238: \"right-to-left override\",\n  8294: \"left-to-right isolate\",\n  8295: \"right-to-left isolate\",\n  8297: \"pop directional isolate\",\n  8233: \"paragraph separator\",\n  65279: \"zero width no-break space\",\n  65532: \"object replacement\"\n};\nlet Qf = null;\nfunction eD() {\n  var t;\n  if (Qf == null && typeof document < \"u\" && document.body) {\n    let e = document.body.style;\n    Qf = ((t = e.tabSize) !== null && t !== void 0 ? t : e.MozTabSize) != null;\n  }\n  return Qf || !1;\n}\nconst ou = /* @__PURE__ */ ve.define({\n  combine(t) {\n    let e = Ud(t, {\n      render: null,\n      specialChars: K5,\n      addSpecialChars: null\n    });\n    return (e.replaceTabs = !eD()) && (e.specialChars = new RegExp(\"\t|\" + e.specialChars.source, bp)), e.addSpecialChars && (e.specialChars = new RegExp(e.specialChars.source + \"|\" + e.addSpecialChars.source, bp)), e;\n  }\n});\nfunction tD(t = {}) {\n  return [ou.of(t), nD()];\n}\nlet _v = null;\nfunction nD() {\n  return _v || (_v = rr.fromClass(class {\n    constructor(t) {\n      this.view = t, this.decorations = Je.none, this.decorationCache = /* @__PURE__ */ Object.create(null), this.decorator = this.makeDecorator(t.state.facet(ou)), this.decorations = this.decorator.createDeco(t);\n    }\n    makeDecorator(t) {\n      return new Uk({\n        regexp: t.specialChars,\n        decoration: (e, n, r) => {\n          let { doc: i } = n.state, s = nn(e[0], 0);\n          if (s == 9) {\n            let o = i.lineAt(r), a = n.state.tabSize, l = ig(o.text, a, r - o.from);\n            return Je.replace({\n              widget: new oD((a - l % a) * this.view.defaultCharacterWidth / this.view.scaleX)\n            });\n          }\n          return this.decorationCache[s] || (this.decorationCache[s] = Je.replace({ widget: new sD(t, s) }));\n        },\n        boundary: t.replaceTabs ? void 0 : /[^]/\n      });\n    }\n    update(t) {\n      let e = t.state.facet(ou);\n      t.startState.facet(ou) != e ? (this.decorator = this.makeDecorator(e), this.decorations = this.decorator.createDeco(t.view)) : this.decorations = this.decorator.updateDeco(t, this.decorations);\n    }\n  }, {\n    decorations: (t) => t.decorations\n  }));\n}\nconst rD = \"•\";\nfunction iD(t) {\n  return t >= 32 ? rD : t == 10 ? \"␤\" : String.fromCharCode(9216 + t);\n}\nclass sD extends ra {\n  constructor(e, n) {\n    super(), this.options = e, this.code = n;\n  }\n  eq(e) {\n    return e.code == this.code;\n  }\n  toDOM(e) {\n    let n = iD(this.code), r = e.state.phrase(\"Control character\") + \" \" + (J5[this.code] || \"0x\" + this.code.toString(16)), i = this.options.render && this.options.render(this.code, r, n);\n    if (i)\n      return i;\n    let s = document.createElement(\"span\");\n    return s.textContent = n, s.title = r, s.setAttribute(\"aria-label\", r), s.className = \"cm-specialChar\", s;\n  }\n  ignoreEvent() {\n    return !1;\n  }\n}\nclass oD extends ra {\n  constructor(e) {\n    super(), this.width = e;\n  }\n  eq(e) {\n    return e.width == this.width;\n  }\n  toDOM() {\n    let e = document.createElement(\"span\");\n    return e.textContent = \"\t\", e.className = \"cm-tab\", e.style.width = this.width + \"px\", e;\n  }\n  ignoreEvent() {\n    return !1;\n  }\n}\nconst ya = \"-10000px\";\nclass aD {\n  constructor(e, n, r, i) {\n    this.facet = n, this.createTooltipView = r, this.removeTooltipView = i, this.input = e.state.facet(n), this.tooltips = this.input.filter((o) => o);\n    let s = null;\n    this.tooltipViews = this.tooltips.map((o) => s = r(o, s));\n  }\n  update(e, n) {\n    var r;\n    let i = e.state.facet(this.facet), s = i.filter((l) => l);\n    if (i === this.input) {\n      for (let l of this.tooltipViews)\n        l.update && l.update(e);\n      return !1;\n    }\n    let o = [], a = n ? [] : null;\n    for (let l = 0; l < s.length; l++) {\n      let c = s[l], u = -1;\n      if (c) {\n        for (let d = 0; d < this.tooltips.length; d++) {\n          let f = this.tooltips[d];\n          f && f.create == c.create && (u = d);\n        }\n        if (u < 0)\n          o[l] = this.createTooltipView(c, l ? o[l - 1] : null), a && (a[l] = !!c.above);\n        else {\n          let d = o[l] = this.tooltipViews[u];\n          a && (a[l] = n[u]), d.update && d.update(e);\n        }\n      }\n    }\n    for (let l of this.tooltipViews)\n      o.indexOf(l) < 0 && (this.removeTooltipView(l), (r = l.destroy) === null || r === void 0 || r.call(l));\n    return n && (a.forEach((l, c) => n[c] = l), n.length = a.length), this.input = i, this.tooltips = s, this.tooltipViews = o, !0;\n  }\n}\nfunction lD(t) {\n  let { win: e } = t;\n  return { top: 0, left: 0, bottom: e.innerHeight, right: e.innerWidth };\n}\nconst Cf = /* @__PURE__ */ ve.define({\n  combine: (t) => {\n    var e, n, r;\n    return {\n      position: de.ios ? \"absolute\" : ((e = t.find((i) => i.position)) === null || e === void 0 ? void 0 : e.position) || \"fixed\",\n      parent: ((n = t.find((i) => i.parent)) === null || n === void 0 ? void 0 : n.parent) || null,\n      tooltipSpace: ((r = t.find((i) => i.tooltipSpace)) === null || r === void 0 ? void 0 : r.tooltipSpace) || lD\n    };\n  }\n}), Tv = /* @__PURE__ */ new WeakMap(), qk = /* @__PURE__ */ rr.fromClass(class {\n  constructor(t) {\n    this.view = t, this.above = [], this.inView = !0, this.madeAbsolute = !1, this.lastTransaction = 0, this.measureTimeout = -1;\n    let e = t.state.facet(Cf);\n    this.position = e.position, this.parent = e.parent, this.classes = t.themeClasses, this.createContainer(), this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this }, this.resizeObserver = typeof ResizeObserver == \"function\" ? new ResizeObserver(() => this.measureSoon()) : null, this.manager = new aD(t, Yk, (n, r) => this.createTooltip(n, r), (n) => {\n      this.resizeObserver && this.resizeObserver.unobserve(n.dom), n.dom.remove();\n    }), this.above = this.manager.tooltips.map((n) => !!n.above), this.intersectionObserver = typeof IntersectionObserver == \"function\" ? new IntersectionObserver((n) => {\n      Date.now() > this.lastTransaction - 50 && n.length > 0 && n[n.length - 1].intersectionRatio < 1 && this.measureSoon();\n    }, { threshold: [1] }) : null, this.observeIntersection(), t.win.addEventListener(\"resize\", this.measureSoon = this.measureSoon.bind(this)), this.maybeMeasure();\n  }\n  createContainer() {\n    this.parent ? (this.container = document.createElement(\"div\"), this.container.style.position = \"relative\", this.container.className = this.view.themeClasses, this.parent.appendChild(this.container)) : this.container = this.view.dom;\n  }\n  observeIntersection() {\n    if (this.intersectionObserver) {\n      this.intersectionObserver.disconnect();\n      for (let t of this.manager.tooltipViews)\n        this.intersectionObserver.observe(t.dom);\n    }\n  }\n  measureSoon() {\n    this.measureTimeout < 0 && (this.measureTimeout = setTimeout(() => {\n      this.measureTimeout = -1, this.maybeMeasure();\n    }, 50));\n  }\n  update(t) {\n    t.transactions.length && (this.lastTransaction = Date.now());\n    let e = this.manager.update(t, this.above);\n    e && this.observeIntersection();\n    let n = e || t.geometryChanged, r = t.state.facet(Cf);\n    if (r.position != this.position && !this.madeAbsolute) {\n      this.position = r.position;\n      for (let i of this.manager.tooltipViews)\n        i.dom.style.position = this.position;\n      n = !0;\n    }\n    if (r.parent != this.parent) {\n      this.parent && this.container.remove(), this.parent = r.parent, this.createContainer();\n      for (let i of this.manager.tooltipViews)\n        this.container.appendChild(i.dom);\n      n = !0;\n    } else\n      this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);\n    n && this.maybeMeasure();\n  }\n  createTooltip(t, e) {\n    let n = t.create(this.view), r = e ? e.dom : null;\n    if (n.dom.classList.add(\"cm-tooltip\"), t.arrow && !n.dom.querySelector(\".cm-tooltip > .cm-tooltip-arrow\")) {\n      let i = document.createElement(\"div\");\n      i.className = \"cm-tooltip-arrow\", n.dom.insertBefore(i, r);\n    }\n    return n.dom.style.position = this.position, n.dom.style.top = ya, n.dom.style.left = \"0px\", this.container.insertBefore(n.dom, r), n.mount && n.mount(this.view), this.resizeObserver && this.resizeObserver.observe(n.dom), n;\n  }\n  destroy() {\n    var t, e, n;\n    this.view.win.removeEventListener(\"resize\", this.measureSoon);\n    for (let r of this.manager.tooltipViews)\n      r.dom.remove(), (t = r.destroy) === null || t === void 0 || t.call(r);\n    this.parent && this.container.remove(), (e = this.resizeObserver) === null || e === void 0 || e.disconnect(), (n = this.intersectionObserver) === null || n === void 0 || n.disconnect(), clearTimeout(this.measureTimeout);\n  }\n  readMeasure() {\n    let t = this.view.dom.getBoundingClientRect(), e = 1, n = 1, r = !1;\n    if (this.position == \"fixed\" && this.manager.tooltipViews.length) {\n      let { dom: i } = this.manager.tooltipViews[0];\n      if (de.gecko)\n        r = i.offsetParent != this.container.ownerDocument.body;\n      else if (i.style.top == ya && i.style.left == \"0px\") {\n        let s = i.getBoundingClientRect();\n        r = Math.abs(s.top + 1e4) > 1 || Math.abs(s.left) > 1;\n      }\n    }\n    if (r || this.position == \"absolute\")\n      if (this.parent) {\n        let i = this.parent.getBoundingClientRect();\n        i.width && i.height && (e = i.width / this.parent.offsetWidth, n = i.height / this.parent.offsetHeight);\n      } else\n        ({ scaleX: e, scaleY: n } = this.view.viewState);\n    return {\n      editor: t,\n      parent: this.parent ? this.container.getBoundingClientRect() : t,\n      pos: this.manager.tooltips.map((i, s) => {\n        let o = this.manager.tooltipViews[s];\n        return o.getCoords ? o.getCoords(i.pos) : this.view.coordsAtPos(i.pos);\n      }),\n      size: this.manager.tooltipViews.map(({ dom: i }) => i.getBoundingClientRect()),\n      space: this.view.state.facet(Cf).tooltipSpace(this.view),\n      scaleX: e,\n      scaleY: n,\n      makeAbsolute: r\n    };\n  }\n  writeMeasure(t) {\n    var e;\n    if (t.makeAbsolute) {\n      this.madeAbsolute = !0, this.position = \"absolute\";\n      for (let a of this.manager.tooltipViews)\n        a.dom.style.position = \"absolute\";\n    }\n    let { editor: n, space: r, scaleX: i, scaleY: s } = t, o = [];\n    for (let a = 0; a < this.manager.tooltips.length; a++) {\n      let l = this.manager.tooltips[a], c = this.manager.tooltipViews[a], { dom: u } = c, d = t.pos[a], f = t.size[a];\n      if (!d || d.bottom <= Math.max(n.top, r.top) || d.top >= Math.min(n.bottom, r.bottom) || d.right < Math.max(n.left, r.left) - 0.1 || d.left > Math.min(n.right, r.right) + 0.1) {\n        u.style.top = ya;\n        continue;\n      }\n      let h = l.arrow ? c.dom.querySelector(\".cm-tooltip-arrow\") : null, p = h ? 7 : 0, O = f.right - f.left, m = (e = Tv.get(c)) !== null && e !== void 0 ? e : f.bottom - f.top, y = c.offset || uD, b = this.view.textDirection == Qt.LTR, g = f.width > r.right - r.left ? b ? r.left : r.right - f.width : b ? Math.min(d.left - (h ? 14 : 0) + y.x, r.right - O) : Math.max(r.left, d.left - O + (h ? 14 : 0) - y.x), v = this.above[a];\n      !l.strictSide && (v ? d.top - (f.bottom - f.top) - y.y < r.top : d.bottom + (f.bottom - f.top) + y.y > r.bottom) && v == r.bottom - d.bottom > d.top - r.top && (v = this.above[a] = !v);\n      let S = (v ? d.top - r.top : r.bottom - d.bottom) - p;\n      if (S < m && c.resize !== !1) {\n        if (S < this.view.defaultLineHeight) {\n          u.style.top = ya;\n          continue;\n        }\n        Tv.set(c, m), u.style.height = (m = S) / s + \"px\";\n      } else\n        u.style.height && (u.style.height = \"\");\n      let w = v ? d.top - m - p - y.y : d.bottom + p + y.y, k = g + O;\n      if (c.overlap !== !0)\n        for (let _ of o)\n          _.left < k && _.right > g && _.top < w + m && _.bottom > w && (w = v ? _.top - m - 2 - p : _.bottom + p + 2);\n      if (this.position == \"absolute\" ? (u.style.top = (w - t.parent.top) / s + \"px\", u.style.left = (g - t.parent.left) / i + \"px\") : (u.style.top = w / s + \"px\", u.style.left = g / i + \"px\"), h) {\n        let _ = d.left + (b ? y.x : -y.x) - (g + 14 - 7);\n        h.style.left = _ / i + \"px\";\n      }\n      c.overlap !== !0 && o.push({ left: g, top: w, right: k, bottom: w + m }), u.classList.toggle(\"cm-tooltip-above\", v), u.classList.toggle(\"cm-tooltip-below\", !v), c.positioned && c.positioned(t.space);\n    }\n  }\n  maybeMeasure() {\n    if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq), this.inView != this.view.inView && (this.inView = this.view.inView, !this.inView)))\n      for (let t of this.manager.tooltipViews)\n        t.dom.style.top = ya;\n  }\n}, {\n  eventObservers: {\n    scroll() {\n      this.maybeMeasure();\n    }\n  }\n}), cD = /* @__PURE__ */ Se.baseTheme({\n  \".cm-tooltip\": {\n    zIndex: 100,\n    boxSizing: \"border-box\"\n  },\n  \"&light .cm-tooltip\": {\n    border: \"1px solid #bbb\",\n    backgroundColor: \"#f5f5f5\"\n  },\n  \"&light .cm-tooltip-section:not(:first-child)\": {\n    borderTop: \"1px solid #bbb\"\n  },\n  \"&dark .cm-tooltip\": {\n    backgroundColor: \"#333338\",\n    color: \"white\"\n  },\n  \".cm-tooltip-arrow\": {\n    height: \"7px\",\n    width: `${7 * 2}px`,\n    position: \"absolute\",\n    zIndex: -1,\n    overflow: \"hidden\",\n    \"&:before, &:after\": {\n      content: \"''\",\n      position: \"absolute\",\n      width: 0,\n      height: 0,\n      borderLeft: \"7px solid transparent\",\n      borderRight: \"7px solid transparent\"\n    },\n    \".cm-tooltip-above &\": {\n      bottom: \"-7px\",\n      \"&:before\": {\n        borderTop: \"7px solid #bbb\"\n      },\n      \"&:after\": {\n        borderTop: \"7px solid #f5f5f5\",\n        bottom: \"1px\"\n      }\n    },\n    \".cm-tooltip-below &\": {\n      top: \"-7px\",\n      \"&:before\": {\n        borderBottom: \"7px solid #bbb\"\n      },\n      \"&:after\": {\n        borderBottom: \"7px solid #f5f5f5\",\n        top: \"1px\"\n      }\n    }\n  },\n  \"&dark .cm-tooltip .cm-tooltip-arrow\": {\n    \"&:before\": {\n      borderTopColor: \"#333338\",\n      borderBottomColor: \"#333338\"\n    },\n    \"&:after\": {\n      borderTopColor: \"transparent\",\n      borderBottomColor: \"transparent\"\n    }\n  }\n}), uD = { x: 0, y: 0 }, Yk = /* @__PURE__ */ ve.define({\n  enables: [qk, cD]\n});\nfunction zk(t, e) {\n  let n = t.plugin(qk);\n  if (!n)\n    return null;\n  let r = n.manager.tooltips.indexOf(e);\n  return r < 0 ? null : n.manager.tooltipViews[r];\n}\nclass Hs extends qs {\n  /**\n  @internal\n  */\n  compare(e) {\n    return this == e || this.constructor == e.constructor && this.eq(e);\n  }\n  /**\n  Compare this marker to another marker of the same type.\n  */\n  eq(e) {\n    return !1;\n  }\n  /**\n  Called if the marker has a `toDOM` method and its representation\n  was removed from a gutter.\n  */\n  destroy(e) {\n  }\n}\nHs.prototype.elementClass = \"\";\nHs.prototype.toDOM = void 0;\nHs.prototype.mapMode = on.TrackBefore;\nHs.prototype.startSide = Hs.prototype.endSide = -1;\nHs.prototype.point = !0;\nconst Af = /* @__PURE__ */ ve.define(), au = /* @__PURE__ */ ve.define(), vp = /* @__PURE__ */ ve.define({\n  combine: (t) => t.some((e) => e)\n});\nfunction dD(t) {\n  let e = [\n    fD\n  ];\n  return t && t.fixed === !1 && e.push(vp.of(!0)), e;\n}\nconst fD = /* @__PURE__ */ rr.fromClass(class {\n  constructor(t) {\n    this.view = t, this.prevViewport = t.viewport, this.dom = document.createElement(\"div\"), this.dom.className = \"cm-gutters\", this.dom.setAttribute(\"aria-hidden\", \"true\"), this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + \"px\", this.gutters = t.state.facet(au).map((e) => new $v(t, e));\n    for (let e of this.gutters)\n      this.dom.appendChild(e.dom);\n    this.fixed = !t.state.facet(vp), this.fixed && (this.dom.style.position = \"sticky\"), this.syncGutters(!1), t.scrollDOM.insertBefore(this.dom, t.contentDOM);\n  }\n  update(t) {\n    if (this.updateGutters(t)) {\n      let e = this.prevViewport, n = t.view.viewport, r = Math.min(e.to, n.to) - Math.max(e.from, n.from);\n      this.syncGutters(r < (n.to - n.from) * 0.8);\n    }\n    t.geometryChanged && (this.dom.style.minHeight = this.view.contentHeight + \"px\"), this.view.state.facet(vp) != !this.fixed && (this.fixed = !this.fixed, this.dom.style.position = this.fixed ? \"sticky\" : \"\"), this.prevViewport = t.view.viewport;\n  }\n  syncGutters(t) {\n    let e = this.dom.nextSibling;\n    t && this.dom.remove();\n    let n = ze.iter(this.view.state.facet(Af), this.view.viewport.from), r = [], i = this.gutters.map((s) => new hD(s, this.view.viewport, -this.view.documentPadding.top));\n    for (let s of this.view.viewportLineBlocks)\n      if (r.length && (r = []), Array.isArray(s.type)) {\n        let o = !0;\n        for (let a of s.type)\n          if (a.type == fr.Text && o) {\n            yp(n, r, a.from);\n            for (let l of i)\n              l.line(this.view, a, r);\n            o = !1;\n          } else if (a.widget)\n            for (let l of i)\n              l.widget(this.view, a);\n      } else if (s.type == fr.Text) {\n        yp(n, r, s.from);\n        for (let o of i)\n          o.line(this.view, s, r);\n      } else if (s.widget)\n        for (let o of i)\n          o.widget(this.view, s);\n    for (let s of i)\n      s.finish();\n    t && this.view.scrollDOM.insertBefore(this.dom, e);\n  }\n  updateGutters(t) {\n    let e = t.startState.facet(au), n = t.state.facet(au), r = t.docChanged || t.heightChanged || t.viewportChanged || !ze.eq(t.startState.facet(Af), t.state.facet(Af), t.view.viewport.from, t.view.viewport.to);\n    if (e == n)\n      for (let i of this.gutters)\n        i.update(t) && (r = !0);\n    else {\n      r = !0;\n      let i = [];\n      for (let s of n) {\n        let o = e.indexOf(s);\n        o < 0 ? i.push(new $v(this.view, s)) : (this.gutters[o].update(t), i.push(this.gutters[o]));\n      }\n      for (let s of this.gutters)\n        s.dom.remove(), i.indexOf(s) < 0 && s.destroy();\n      for (let s of i)\n        this.dom.appendChild(s.dom);\n      this.gutters = i;\n    }\n    return r;\n  }\n  destroy() {\n    for (let t of this.gutters)\n      t.destroy();\n    this.dom.remove();\n  }\n}, {\n  provide: (t) => Se.scrollMargins.of((e) => {\n    let n = e.plugin(t);\n    return !n || n.gutters.length == 0 || !n.fixed ? null : e.textDirection == Qt.LTR ? { left: n.dom.offsetWidth * e.scaleX } : { right: n.dom.offsetWidth * e.scaleX };\n  })\n});\nfunction Ev(t) {\n  return Array.isArray(t) ? t : [t];\n}\nfunction yp(t, e, n) {\n  for (; t.value && t.from <= n; )\n    t.from == n && e.push(t.value), t.next();\n}\nclass hD {\n  constructor(e, n, r) {\n    this.gutter = e, this.height = r, this.i = 0, this.cursor = ze.iter(e.markers, n.from);\n  }\n  addElement(e, n, r) {\n    let { gutter: i } = this, s = (n.top - this.height) / e.scaleY, o = n.height / e.scaleY;\n    if (this.i == i.elements.length) {\n      let a = new Hk(e, o, s, r);\n      i.elements.push(a), i.dom.appendChild(a.dom);\n    } else\n      i.elements[this.i].update(e, o, s, r);\n    this.height = n.bottom, this.i++;\n  }\n  line(e, n, r) {\n    let i = [];\n    yp(this.cursor, i, n.from), r.length && (i = i.concat(r));\n    let s = this.gutter.config.lineMarker(e, n, i);\n    s && i.unshift(s);\n    let o = this.gutter;\n    i.length == 0 && !o.config.renderEmptyElements || this.addElement(e, n, i);\n  }\n  widget(e, n) {\n    let r = this.gutter.config.widgetMarker(e, n.widget, n);\n    r && this.addElement(e, n, [r]);\n  }\n  finish() {\n    let e = this.gutter;\n    for (; e.elements.length > this.i; ) {\n      let n = e.elements.pop();\n      e.dom.removeChild(n.dom), n.destroy();\n    }\n  }\n}\nclass $v {\n  constructor(e, n) {\n    this.view = e, this.config = n, this.elements = [], this.spacer = null, this.dom = document.createElement(\"div\"), this.dom.className = \"cm-gutter\" + (this.config.class ? \" \" + this.config.class : \"\");\n    for (let r in n.domEventHandlers)\n      this.dom.addEventListener(r, (i) => {\n        let s = i.target, o;\n        if (s != this.dom && this.dom.contains(s)) {\n          for (; s.parentNode != this.dom; )\n            s = s.parentNode;\n          let l = s.getBoundingClientRect();\n          o = (l.top + l.bottom) / 2;\n        } else\n          o = i.clientY;\n        let a = e.lineBlockAtHeight(o - e.documentTop);\n        n.domEventHandlers[r](e, a, i) && i.preventDefault();\n      });\n    this.markers = Ev(n.markers(e)), n.initialSpacer && (this.spacer = new Hk(e, 0, 0, [n.initialSpacer(e)]), this.dom.appendChild(this.spacer.dom), this.spacer.dom.style.cssText += \"visibility: hidden; pointer-events: none\");\n  }\n  update(e) {\n    let n = this.markers;\n    if (this.markers = Ev(this.config.markers(e.view)), this.spacer && this.config.updateSpacer) {\n      let i = this.config.updateSpacer(this.spacer.markers[0], e);\n      i != this.spacer.markers[0] && this.spacer.update(e.view, 0, 0, [i]);\n    }\n    let r = e.view.viewport;\n    return !ze.eq(this.markers, n, r.from, r.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(e) : !1);\n  }\n  destroy() {\n    for (let e of this.elements)\n      e.destroy();\n  }\n}\nclass Hk {\n  constructor(e, n, r, i) {\n    this.height = -1, this.above = 0, this.markers = [], this.dom = document.createElement(\"div\"), this.dom.className = \"cm-gutterElement\", this.update(e, n, r, i);\n  }\n  update(e, n, r, i) {\n    this.height != n && (this.height = n, this.dom.style.height = n + \"px\"), this.above != r && (this.dom.style.marginTop = (this.above = r) ? r + \"px\" : \"\"), pD(this.markers, i) || this.setMarkers(e, i);\n  }\n  setMarkers(e, n) {\n    let r = \"cm-gutterElement\", i = this.dom.firstChild;\n    for (let s = 0, o = 0; ; ) {\n      let a = o, l = s < n.length ? n[s++] : null, c = !1;\n      if (l) {\n        let u = l.elementClass;\n        u && (r += \" \" + u);\n        for (let d = o; d < this.markers.length; d++)\n          if (this.markers[d].compare(l)) {\n            a = d, c = !0;\n            break;\n          }\n      } else\n        a = this.markers.length;\n      for (; o < a; ) {\n        let u = this.markers[o++];\n        if (u.toDOM) {\n          u.destroy(i);\n          let d = i.nextSibling;\n          i.remove(), i = d;\n        }\n      }\n      if (!l)\n        break;\n      l.toDOM && (c ? i = i.nextSibling : this.dom.insertBefore(l.toDOM(e), i)), c && o++;\n    }\n    this.dom.className = r, this.markers = n;\n  }\n  destroy() {\n    this.setMarkers(null, []);\n  }\n}\nfunction pD(t, e) {\n  if (t.length != e.length)\n    return !1;\n  for (let n = 0; n < t.length; n++)\n    if (!t[n].compare(e[n]))\n      return !1;\n  return !0;\n}\nconst OD = /* @__PURE__ */ ve.define(), po = /* @__PURE__ */ ve.define({\n  combine(t) {\n    return Ud(t, { formatNumber: String, domEventHandlers: {} }, {\n      domEventHandlers(e, n) {\n        let r = Object.assign({}, e);\n        for (let i in n) {\n          let s = r[i], o = n[i];\n          r[i] = s ? (a, l, c) => s(a, l, c) || o(a, l, c) : o;\n        }\n        return r;\n      }\n    });\n  }\n});\nclass Rf extends Hs {\n  constructor(e) {\n    super(), this.number = e;\n  }\n  eq(e) {\n    return this.number == e.number;\n  }\n  toDOM() {\n    return document.createTextNode(this.number);\n  }\n}\nfunction Nf(t, e) {\n  return t.state.facet(po).formatNumber(e, t.state);\n}\nconst gD = /* @__PURE__ */ au.compute([po], (t) => ({\n  class: \"cm-lineNumbers\",\n  renderEmptyElements: !1,\n  markers(e) {\n    return e.state.facet(OD);\n  },\n  lineMarker(e, n, r) {\n    return r.some((i) => i.toDOM) ? null : new Rf(Nf(e, e.state.doc.lineAt(n.from).number));\n  },\n  widgetMarker: () => null,\n  lineMarkerChange: (e) => e.startState.facet(po) != e.state.facet(po),\n  initialSpacer(e) {\n    return new Rf(Nf(e, Qv(e.state.doc.lines)));\n  },\n  updateSpacer(e, n) {\n    let r = Nf(n.view, Qv(n.view.state.doc.lines));\n    return r == e.number ? e : new Rf(r);\n  },\n  domEventHandlers: t.facet(po).domEventHandlers\n}));\nfunction mD(t = {}) {\n  return [\n    po.of(t),\n    dD(),\n    gD\n  ];\n}\nfunction Qv(t) {\n  let e = 9;\n  for (; e < t; )\n    e = e * 10 + 9;\n  return e;\n}\nconst Fk = 1024;\nlet bD = 0;\nclass Fn {\n  constructor(e, n) {\n    this.from = e, this.to = n;\n  }\n}\nclass Re {\n  /**\n  Create a new node prop type.\n  */\n  constructor(e = {}) {\n    this.id = bD++, this.perNode = !!e.perNode, this.deserialize = e.deserialize || (() => {\n      throw new Error(\"This node type doesn't define a deserialize function\");\n    });\n  }\n  /**\n  This is meant to be used with\n  [`NodeSet.extend`](#common.NodeSet.extend) or\n  [`LRParser.configure`](#lr.ParserConfig.props) to compute\n  prop values for each node type in the set. Takes a [match\n  object](#common.NodeType^match) or function that returns undefined\n  if the node type doesn't get this prop, and the prop's value if\n  it does.\n  */\n  add(e) {\n    if (this.perNode)\n      throw new RangeError(\"Can't add per-node props to node types\");\n    return typeof e != \"function\" && (e = On.match(e)), (n) => {\n      let r = e(n);\n      return r === void 0 ? null : [this, r];\n    };\n  }\n}\nRe.closedBy = new Re({ deserialize: (t) => t.split(\" \") });\nRe.openedBy = new Re({ deserialize: (t) => t.split(\" \") });\nRe.group = new Re({ deserialize: (t) => t.split(\" \") });\nRe.isolate = new Re({ deserialize: (t) => {\n  if (t && t != \"rtl\" && t != \"ltr\" && t != \"auto\")\n    throw new RangeError(\"Invalid value for isolate: \" + t);\n  return t || \"auto\";\n} });\nRe.contextHash = new Re({ perNode: !0 });\nRe.lookAhead = new Re({ perNode: !0 });\nRe.mounted = new Re({ perNode: !0 });\nclass vl {\n  constructor(e, n, r) {\n    this.tree = e, this.overlay = n, this.parser = r;\n  }\n  /**\n  @internal\n  */\n  static get(e) {\n    return e && e.props && e.props[Re.mounted.id];\n  }\n}\nconst vD = /* @__PURE__ */ Object.create(null);\nclass On {\n  /**\n  @internal\n  */\n  constructor(e, n, r, i = 0) {\n    this.name = e, this.props = n, this.id = r, this.flags = i;\n  }\n  /**\n  Define a node type.\n  */\n  static define(e) {\n    let n = e.props && e.props.length ? /* @__PURE__ */ Object.create(null) : vD, r = (e.top ? 1 : 0) | (e.skipped ? 2 : 0) | (e.error ? 4 : 0) | (e.name == null ? 8 : 0), i = new On(e.name || \"\", n, e.id, r);\n    if (e.props) {\n      for (let s of e.props)\n        if (Array.isArray(s) || (s = s(i)), s) {\n          if (s[0].perNode)\n            throw new RangeError(\"Can't store a per-node prop on a node type\");\n          n[s[0].id] = s[1];\n        }\n    }\n    return i;\n  }\n  /**\n  Retrieves a node prop for this type. Will return `undefined` if\n  the prop isn't present on this node.\n  */\n  prop(e) {\n    return this.props[e.id];\n  }\n  /**\n  True when this is the top node of a grammar.\n  */\n  get isTop() {\n    return (this.flags & 1) > 0;\n  }\n  /**\n  True when this node is produced by a skip rule.\n  */\n  get isSkipped() {\n    return (this.flags & 2) > 0;\n  }\n  /**\n  Indicates whether this is an error node.\n  */\n  get isError() {\n    return (this.flags & 4) > 0;\n  }\n  /**\n  When true, this node type doesn't correspond to a user-declared\n  named node, for example because it is used to cache repetition.\n  */\n  get isAnonymous() {\n    return (this.flags & 8) > 0;\n  }\n  /**\n  Returns true when this node's name or one of its\n  [groups](#common.NodeProp^group) matches the given string.\n  */\n  is(e) {\n    if (typeof e == \"string\") {\n      if (this.name == e)\n        return !0;\n      let n = this.prop(Re.group);\n      return n ? n.indexOf(e) > -1 : !1;\n    }\n    return this.id == e;\n  }\n  /**\n  Create a function from node types to arbitrary values by\n  specifying an object whose property names are node or\n  [group](#common.NodeProp^group) names. Often useful with\n  [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n  names, separated by spaces, in a single property name to map\n  multiple node names to a single value.\n  */\n  static match(e) {\n    let n = /* @__PURE__ */ Object.create(null);\n    for (let r in e)\n      for (let i of r.split(\" \"))\n        n[i] = e[r];\n    return (r) => {\n      for (let i = r.prop(Re.group), s = -1; s < (i ? i.length : 0); s++) {\n        let o = n[s < 0 ? r.name : i[s]];\n        if (o)\n          return o;\n      }\n    };\n  }\n}\nOn.none = new On(\n  \"\",\n  /* @__PURE__ */ Object.create(null),\n  0,\n  8\n  /* NodeFlag.Anonymous */\n);\nclass fg {\n  /**\n  Create a set with the given types. The `id` property of each\n  type should correspond to its position within the array.\n  */\n  constructor(e) {\n    this.types = e;\n    for (let n = 0; n < e.length; n++)\n      if (e[n].id != n)\n        throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n  }\n  /**\n  Create a copy of this set with some node properties added. The\n  arguments to this method can be created with\n  [`NodeProp.add`](#common.NodeProp.add).\n  */\n  extend(...e) {\n    let n = [];\n    for (let r of this.types) {\n      let i = null;\n      for (let s of e) {\n        let o = s(r);\n        o && (i || (i = Object.assign({}, r.props)), i[o[0].id] = o[1]);\n      }\n      n.push(i ? new On(r.name, i, r.id, r.flags) : r);\n    }\n    return new fg(n);\n  }\n}\nconst Nc = /* @__PURE__ */ new WeakMap(), Cv = /* @__PURE__ */ new WeakMap();\nvar lt;\n(function(t) {\n  t[t.ExcludeBuffers = 1] = \"ExcludeBuffers\", t[t.IncludeAnonymous = 2] = \"IncludeAnonymous\", t[t.IgnoreMounts = 4] = \"IgnoreMounts\", t[t.IgnoreOverlays = 8] = \"IgnoreOverlays\";\n})(lt || (lt = {}));\nclass gt {\n  /**\n  Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n  */\n  constructor(e, n, r, i, s) {\n    if (this.type = e, this.children = n, this.positions = r, this.length = i, this.props = null, s && s.length) {\n      this.props = /* @__PURE__ */ Object.create(null);\n      for (let [o, a] of s)\n        this.props[typeof o == \"number\" ? o : o.id] = a;\n    }\n  }\n  /**\n  @internal\n  */\n  toString() {\n    let e = vl.get(this);\n    if (e && !e.overlay)\n      return e.tree.toString();\n    let n = \"\";\n    for (let r of this.children) {\n      let i = r.toString();\n      i && (n && (n += \",\"), n += i);\n    }\n    return this.type.name ? (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (n.length ? \"(\" + n + \")\" : \"\") : n;\n  }\n  /**\n  Get a [tree cursor](#common.TreeCursor) positioned at the top of\n  the tree. Mode can be used to [control](#common.IterMode) which\n  nodes the cursor visits.\n  */\n  cursor(e = 0) {\n    return new Xu(this.topNode, e);\n  }\n  /**\n  Get a [tree cursor](#common.TreeCursor) pointing into this tree\n  at the given position and side (see\n  [`moveTo`](#common.TreeCursor.moveTo).\n  */\n  cursorAt(e, n = 0, r = 0) {\n    let i = Nc.get(this) || this.topNode, s = new Xu(i);\n    return s.moveTo(e, n), Nc.set(this, s._tree), s;\n  }\n  /**\n  Get a [syntax node](#common.SyntaxNode) object for the top of the\n  tree.\n  */\n  get topNode() {\n    return new ln(this, 0, 0, null);\n  }\n  /**\n  Get the [syntax node](#common.SyntaxNode) at the given position.\n  If `side` is -1, this will move into nodes that end at the\n  position. If 1, it'll move into nodes that start at the\n  position. With 0, it'll only enter nodes that cover the position\n  from both sides.\n  \n  Note that this will not enter\n  [overlays](#common.MountedTree.overlay), and you often want\n  [`resolveInner`](#common.Tree.resolveInner) instead.\n  */\n  resolve(e, n = 0) {\n    let r = yl(Nc.get(this) || this.topNode, e, n, !1);\n    return Nc.set(this, r), r;\n  }\n  /**\n  Like [`resolve`](#common.Tree.resolve), but will enter\n  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n  pointing into the innermost overlaid tree at the given position\n  (with parent links going through all parent structure, including\n  the host trees).\n  */\n  resolveInner(e, n = 0) {\n    let r = yl(Cv.get(this) || this.topNode, e, n, !0);\n    return Cv.set(this, r), r;\n  }\n  /**\n  In some situations, it can be useful to iterate through all\n  nodes around a position, including those in overlays that don't\n  directly cover the position. This method gives you an iterator\n  that will produce all nodes, from small to big, around the given\n  position.\n  */\n  resolveStack(e, n = 0) {\n    return wD(this, e, n);\n  }\n  /**\n  Iterate over the tree and its children, calling `enter` for any\n  node that touches the `from`/`to` region (if given) before\n  running over such a node's children, and `leave` (if given) when\n  leaving the node. When `enter` returns `false`, that node will\n  not have its children iterated over (or `leave` called).\n  */\n  iterate(e) {\n    let { enter: n, leave: r, from: i = 0, to: s = this.length } = e, o = e.mode || 0, a = (o & lt.IncludeAnonymous) > 0;\n    for (let l = this.cursor(o | lt.IncludeAnonymous); ; ) {\n      let c = !1;\n      if (l.from <= s && l.to >= i && (!a && l.type.isAnonymous || n(l) !== !1)) {\n        if (l.firstChild())\n          continue;\n        c = !0;\n      }\n      for (; c && r && (a || !l.type.isAnonymous) && r(l), !l.nextSibling(); ) {\n        if (!l.parent())\n          return;\n        c = !0;\n      }\n    }\n  }\n  /**\n  Get the value of the given [node prop](#common.NodeProp) for this\n  node. Works with both per-node and per-type props.\n  */\n  prop(e) {\n    return e.perNode ? this.props ? this.props[e.id] : void 0 : this.type.prop(e);\n  }\n  /**\n  Returns the node's [per-node props](#common.NodeProp.perNode) in a\n  format that can be passed to the [`Tree`](#common.Tree)\n  constructor.\n  */\n  get propValues() {\n    let e = [];\n    if (this.props)\n      for (let n in this.props)\n        e.push([+n, this.props[n]]);\n    return e;\n  }\n  /**\n  Balance the direct children of this tree, producing a copy of\n  which may have children grouped into subtrees with type\n  [`NodeType.none`](#common.NodeType^none).\n  */\n  balance(e = {}) {\n    return this.children.length <= 8 ? this : Og(On.none, this.children, this.positions, 0, this.children.length, 0, this.length, (n, r, i) => new gt(this.type, n, r, i, this.propValues), e.makeTree || ((n, r, i) => new gt(On.none, n, r, i)));\n  }\n  /**\n  Build a tree from a postfix-ordered buffer of node information,\n  or a cursor over such a buffer.\n  */\n  static build(e) {\n    return kD(e);\n  }\n}\ngt.empty = new gt(On.none, [], [], 0);\nclass hg {\n  constructor(e, n) {\n    this.buffer = e, this.index = n;\n  }\n  get id() {\n    return this.buffer[this.index - 4];\n  }\n  get start() {\n    return this.buffer[this.index - 3];\n  }\n  get end() {\n    return this.buffer[this.index - 2];\n  }\n  get size() {\n    return this.buffer[this.index - 1];\n  }\n  get pos() {\n    return this.index;\n  }\n  next() {\n    this.index -= 4;\n  }\n  fork() {\n    return new hg(this.buffer, this.index);\n  }\n}\nclass ls {\n  /**\n  Create a tree buffer.\n  */\n  constructor(e, n, r) {\n    this.buffer = e, this.length = n, this.set = r;\n  }\n  /**\n  @internal\n  */\n  get type() {\n    return On.none;\n  }\n  /**\n  @internal\n  */\n  toString() {\n    let e = [];\n    for (let n = 0; n < this.buffer.length; )\n      e.push(this.childString(n)), n = this.buffer[n + 3];\n    return e.join(\",\");\n  }\n  /**\n  @internal\n  */\n  childString(e) {\n    let n = this.buffer[e], r = this.buffer[e + 3], i = this.set.types[n], s = i.name;\n    if (/\\W/.test(s) && !i.isError && (s = JSON.stringify(s)), e += 4, r == e)\n      return s;\n    let o = [];\n    for (; e < r; )\n      o.push(this.childString(e)), e = this.buffer[e + 3];\n    return s + \"(\" + o.join(\",\") + \")\";\n  }\n  /**\n  @internal\n  */\n  findChild(e, n, r, i, s) {\n    let { buffer: o } = this, a = -1;\n    for (let l = e; l != n && !(Gk(s, i, o[l + 1], o[l + 2]) && (a = l, r > 0)); l = o[l + 3])\n      ;\n    return a;\n  }\n  /**\n  @internal\n  */\n  slice(e, n, r) {\n    let i = this.buffer, s = new Uint16Array(n - e), o = 0;\n    for (let a = e, l = 0; a < n; ) {\n      s[l++] = i[a++], s[l++] = i[a++] - r;\n      let c = s[l++] = i[a++] - r;\n      s[l++] = i[a++] - e, o = Math.max(o, c);\n    }\n    return new ls(s, o, this.set);\n  }\n}\nfunction Gk(t, e, n, r) {\n  switch (t) {\n    case -2:\n      return n < e;\n    case -1:\n      return r >= e && n < e;\n    case 0:\n      return n < e && r > e;\n    case 1:\n      return n <= e && r > e;\n    case 2:\n      return r > e;\n    case 4:\n      return !0;\n  }\n}\nfunction yl(t, e, n, r) {\n  for (var i; t.from == t.to || (n < 1 ? t.from >= e : t.from > e) || (n > -1 ? t.to <= e : t.to < e); ) {\n    let o = !r && t instanceof ln && t.index < 0 ? null : t.parent;\n    if (!o)\n      return t;\n    t = o;\n  }\n  let s = r ? 0 : lt.IgnoreOverlays;\n  if (r)\n    for (let o = t, a = o.parent; a; o = a, a = o.parent)\n      o instanceof ln && o.index < 0 && ((i = a.enter(e, n, s)) === null || i === void 0 ? void 0 : i.from) != o.from && (t = a);\n  for (; ; ) {\n    let o = t.enter(e, n, s);\n    if (!o)\n      return t;\n    t = o;\n  }\n}\nclass Kk {\n  cursor(e = 0) {\n    return new Xu(this, e);\n  }\n  getChild(e, n = null, r = null) {\n    let i = Av(this, e, n, r);\n    return i.length ? i[0] : null;\n  }\n  getChildren(e, n = null, r = null) {\n    return Av(this, e, n, r);\n  }\n  resolve(e, n = 0) {\n    return yl(this, e, n, !1);\n  }\n  resolveInner(e, n = 0) {\n    return yl(this, e, n, !0);\n  }\n  matchContext(e) {\n    return Sp(this, e);\n  }\n  enterUnfinishedNodesBefore(e) {\n    let n = this.childBefore(e), r = this;\n    for (; n; ) {\n      let i = n.lastChild;\n      if (!i || i.to != n.to)\n        break;\n      i.type.isError && i.from == i.to ? (r = n, n = i.prevSibling) : n = i;\n    }\n    return r;\n  }\n  get node() {\n    return this;\n  }\n  get next() {\n    return this.parent;\n  }\n}\nclass ln extends Kk {\n  constructor(e, n, r, i) {\n    super(), this._tree = e, this.from = n, this.index = r, this._parent = i;\n  }\n  get type() {\n    return this._tree.type;\n  }\n  get name() {\n    return this._tree.type.name;\n  }\n  get to() {\n    return this.from + this._tree.length;\n  }\n  nextChild(e, n, r, i, s = 0) {\n    for (let o = this; ; ) {\n      for (let { children: a, positions: l } = o._tree, c = n > 0 ? a.length : -1; e != c; e += n) {\n        let u = a[e], d = l[e] + o.from;\n        if (Gk(i, r, d, d + u.length)) {\n          if (u instanceof ls) {\n            if (s & lt.ExcludeBuffers)\n              continue;\n            let f = u.findChild(0, u.buffer.length, n, r - d, i);\n            if (f > -1)\n              return new Nr(new yD(o, u, e, d), null, f);\n          } else if (s & lt.IncludeAnonymous || !u.type.isAnonymous || pg(u)) {\n            let f;\n            if (!(s & lt.IgnoreMounts) && (f = vl.get(u)) && !f.overlay)\n              return new ln(f.tree, d, e, o);\n            let h = new ln(u, d, e, o);\n            return s & lt.IncludeAnonymous || !h.type.isAnonymous ? h : h.nextChild(n < 0 ? u.children.length - 1 : 0, n, r, i);\n          }\n        }\n      }\n      if (s & lt.IncludeAnonymous || !o.type.isAnonymous || (o.index >= 0 ? e = o.index + n : e = n < 0 ? -1 : o._parent._tree.children.length, o = o._parent, !o))\n        return null;\n    }\n  }\n  get firstChild() {\n    return this.nextChild(\n      0,\n      1,\n      0,\n      4\n      /* Side.DontCare */\n    );\n  }\n  get lastChild() {\n    return this.nextChild(\n      this._tree.children.length - 1,\n      -1,\n      0,\n      4\n      /* Side.DontCare */\n    );\n  }\n  childAfter(e) {\n    return this.nextChild(\n      0,\n      1,\n      e,\n      2\n      /* Side.After */\n    );\n  }\n  childBefore(e) {\n    return this.nextChild(\n      this._tree.children.length - 1,\n      -1,\n      e,\n      -2\n      /* Side.Before */\n    );\n  }\n  enter(e, n, r = 0) {\n    let i;\n    if (!(r & lt.IgnoreOverlays) && (i = vl.get(this._tree)) && i.overlay) {\n      let s = e - this.from;\n      for (let { from: o, to: a } of i.overlay)\n        if ((n > 0 ? o <= s : o < s) && (n < 0 ? a >= s : a > s))\n          return new ln(i.tree, i.overlay[0].from + this.from, -1, this);\n    }\n    return this.nextChild(0, 1, e, n, r);\n  }\n  nextSignificantParent() {\n    let e = this;\n    for (; e.type.isAnonymous && e._parent; )\n      e = e._parent;\n    return e;\n  }\n  get parent() {\n    return this._parent ? this._parent.nextSignificantParent() : null;\n  }\n  get nextSibling() {\n    return this._parent && this.index >= 0 ? this._parent.nextChild(\n      this.index + 1,\n      1,\n      0,\n      4\n      /* Side.DontCare */\n    ) : null;\n  }\n  get prevSibling() {\n    return this._parent && this.index >= 0 ? this._parent.nextChild(\n      this.index - 1,\n      -1,\n      0,\n      4\n      /* Side.DontCare */\n    ) : null;\n  }\n  get tree() {\n    return this._tree;\n  }\n  toTree() {\n    return this._tree;\n  }\n  /**\n  @internal\n  */\n  toString() {\n    return this._tree.toString();\n  }\n}\nfunction Av(t, e, n, r) {\n  let i = t.cursor(), s = [];\n  if (!i.firstChild())\n    return s;\n  if (n != null) {\n    for (let o = !1; !o; )\n      if (o = i.type.is(n), !i.nextSibling())\n        return s;\n  }\n  for (; ; ) {\n    if (r != null && i.type.is(r))\n      return s;\n    if (i.type.is(e) && s.push(i.node), !i.nextSibling())\n      return r == null ? s : [];\n  }\n}\nfunction Sp(t, e, n = e.length - 1) {\n  for (let r = t.parent; n >= 0; r = r.parent) {\n    if (!r)\n      return !1;\n    if (!r.type.isAnonymous) {\n      if (e[n] && e[n] != r.name)\n        return !1;\n      n--;\n    }\n  }\n  return !0;\n}\nclass yD {\n  constructor(e, n, r, i) {\n    this.parent = e, this.buffer = n, this.index = r, this.start = i;\n  }\n}\nclass Nr extends Kk {\n  get name() {\n    return this.type.name;\n  }\n  get from() {\n    return this.context.start + this.context.buffer.buffer[this.index + 1];\n  }\n  get to() {\n    return this.context.start + this.context.buffer.buffer[this.index + 2];\n  }\n  constructor(e, n, r) {\n    super(), this.context = e, this._parent = n, this.index = r, this.type = e.buffer.set.types[e.buffer.buffer[r]];\n  }\n  child(e, n, r) {\n    let { buffer: i } = this.context, s = i.findChild(this.index + 4, i.buffer[this.index + 3], e, n - this.context.start, r);\n    return s < 0 ? null : new Nr(this.context, this, s);\n  }\n  get firstChild() {\n    return this.child(\n      1,\n      0,\n      4\n      /* Side.DontCare */\n    );\n  }\n  get lastChild() {\n    return this.child(\n      -1,\n      0,\n      4\n      /* Side.DontCare */\n    );\n  }\n  childAfter(e) {\n    return this.child(\n      1,\n      e,\n      2\n      /* Side.After */\n    );\n  }\n  childBefore(e) {\n    return this.child(\n      -1,\n      e,\n      -2\n      /* Side.Before */\n    );\n  }\n  enter(e, n, r = 0) {\n    if (r & lt.ExcludeBuffers)\n      return null;\n    let { buffer: i } = this.context, s = i.findChild(this.index + 4, i.buffer[this.index + 3], n > 0 ? 1 : -1, e - this.context.start, n);\n    return s < 0 ? null : new Nr(this.context, this, s);\n  }\n  get parent() {\n    return this._parent || this.context.parent.nextSignificantParent();\n  }\n  externalSibling(e) {\n    return this._parent ? null : this.context.parent.nextChild(\n      this.context.index + e,\n      e,\n      0,\n      4\n      /* Side.DontCare */\n    );\n  }\n  get nextSibling() {\n    let { buffer: e } = this.context, n = e.buffer[this.index + 3];\n    return n < (this._parent ? e.buffer[this._parent.index + 3] : e.buffer.length) ? new Nr(this.context, this._parent, n) : this.externalSibling(1);\n  }\n  get prevSibling() {\n    let { buffer: e } = this.context, n = this._parent ? this._parent.index + 4 : 0;\n    return this.index == n ? this.externalSibling(-1) : new Nr(this.context, this._parent, e.findChild(\n      n,\n      this.index,\n      -1,\n      0,\n      4\n      /* Side.DontCare */\n    ));\n  }\n  get tree() {\n    return null;\n  }\n  toTree() {\n    let e = [], n = [], { buffer: r } = this.context, i = this.index + 4, s = r.buffer[this.index + 3];\n    if (s > i) {\n      let o = r.buffer[this.index + 1];\n      e.push(r.slice(i, s, o)), n.push(0);\n    }\n    return new gt(this.type, e, n, this.to - this.from);\n  }\n  /**\n  @internal\n  */\n  toString() {\n    return this.context.buffer.childString(this.index);\n  }\n}\nfunction Jk(t) {\n  if (!t.length)\n    return null;\n  let e = 0, n = t[0];\n  for (let s = 1; s < t.length; s++) {\n    let o = t[s];\n    (o.from > n.from || o.to < n.to) && (n = o, e = s);\n  }\n  let r = n instanceof ln && n.index < 0 ? null : n.parent, i = t.slice();\n  return r ? i[e] = r : i.splice(e, 1), new SD(i, n);\n}\nclass SD {\n  constructor(e, n) {\n    this.heads = e, this.node = n;\n  }\n  get next() {\n    return Jk(this.heads);\n  }\n}\nfunction wD(t, e, n) {\n  let r = t.resolveInner(e, n), i = null;\n  for (let s = r instanceof ln ? r : r.context.parent; s; s = s.parent)\n    if (s.index < 0) {\n      let o = s.parent;\n      (i || (i = [r])).push(o.resolve(e, n)), s = o;\n    } else {\n      let o = vl.get(s.tree);\n      if (o && o.overlay && o.overlay[0].from <= e && o.overlay[o.overlay.length - 1].to >= e) {\n        let a = new ln(o.tree, o.overlay[0].from + s.from, -1, s);\n        (i || (i = [r])).push(yl(a, e, n, !1));\n      }\n    }\n  return i ? Jk(i) : r;\n}\nclass Xu {\n  /**\n  Shorthand for `.type.name`.\n  */\n  get name() {\n    return this.type.name;\n  }\n  /**\n  @internal\n  */\n  constructor(e, n = 0) {\n    if (this.mode = n, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, e instanceof ln)\n      this.yieldNode(e);\n    else {\n      this._tree = e.context.parent, this.buffer = e.context;\n      for (let r = e._parent; r; r = r._parent)\n        this.stack.unshift(r.index);\n      this.bufferNode = e, this.yieldBuf(e.index);\n    }\n  }\n  yieldNode(e) {\n    return e ? (this._tree = e, this.type = e.type, this.from = e.from, this.to = e.to, !0) : !1;\n  }\n  yieldBuf(e, n) {\n    this.index = e;\n    let { start: r, buffer: i } = this.buffer;\n    return this.type = n || i.set.types[i.buffer[e]], this.from = r + i.buffer[e + 1], this.to = r + i.buffer[e + 2], !0;\n  }\n  /**\n  @internal\n  */\n  yield(e) {\n    return e ? e instanceof ln ? (this.buffer = null, this.yieldNode(e)) : (this.buffer = e.context, this.yieldBuf(e.index, e.type)) : !1;\n  }\n  /**\n  @internal\n  */\n  toString() {\n    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n  }\n  /**\n  @internal\n  */\n  enterChild(e, n, r) {\n    if (!this.buffer)\n      return this.yield(this._tree.nextChild(e < 0 ? this._tree._tree.children.length - 1 : 0, e, n, r, this.mode));\n    let { buffer: i } = this.buffer, s = i.findChild(this.index + 4, i.buffer[this.index + 3], e, n - this.buffer.start, r);\n    return s < 0 ? !1 : (this.stack.push(this.index), this.yieldBuf(s));\n  }\n  /**\n  Move the cursor to this node's first child. When this returns\n  false, the node has no child, and the cursor has not been moved.\n  */\n  firstChild() {\n    return this.enterChild(\n      1,\n      0,\n      4\n      /* Side.DontCare */\n    );\n  }\n  /**\n  Move the cursor to this node's last child.\n  */\n  lastChild() {\n    return this.enterChild(\n      -1,\n      0,\n      4\n      /* Side.DontCare */\n    );\n  }\n  /**\n  Move the cursor to the first child that ends after `pos`.\n  */\n  childAfter(e) {\n    return this.enterChild(\n      1,\n      e,\n      2\n      /* Side.After */\n    );\n  }\n  /**\n  Move to the last child that starts before `pos`.\n  */\n  childBefore(e) {\n    return this.enterChild(\n      -1,\n      e,\n      -2\n      /* Side.Before */\n    );\n  }\n  /**\n  Move the cursor to the child around `pos`. If side is -1 the\n  child may end at that position, when 1 it may start there. This\n  will also enter [overlaid](#common.MountedTree.overlay)\n  [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n  set to false.\n  */\n  enter(e, n, r = this.mode) {\n    return this.buffer ? r & lt.ExcludeBuffers ? !1 : this.enterChild(1, e, n) : this.yield(this._tree.enter(e, n, r));\n  }\n  /**\n  Move to the node's parent node, if this isn't the top node.\n  */\n  parent() {\n    if (!this.buffer)\n      return this.yieldNode(this.mode & lt.IncludeAnonymous ? this._tree._parent : this._tree.parent);\n    if (this.stack.length)\n      return this.yieldBuf(this.stack.pop());\n    let e = this.mode & lt.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n    return this.buffer = null, this.yieldNode(e);\n  }\n  /**\n  @internal\n  */\n  sibling(e) {\n    if (!this.buffer)\n      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + e, e, 0, 4, this.mode)) : !1;\n    let { buffer: n } = this.buffer, r = this.stack.length - 1;\n    if (e < 0) {\n      let i = r < 0 ? 0 : this.stack[r] + 4;\n      if (this.index != i)\n        return this.yieldBuf(n.findChild(\n          i,\n          this.index,\n          -1,\n          0,\n          4\n          /* Side.DontCare */\n        ));\n    } else {\n      let i = n.buffer[this.index + 3];\n      if (i < (r < 0 ? n.buffer.length : n.buffer[this.stack[r] + 3]))\n        return this.yieldBuf(i);\n    }\n    return r < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + e, e, 0, 4, this.mode)) : !1;\n  }\n  /**\n  Move to this node's next sibling, if any.\n  */\n  nextSibling() {\n    return this.sibling(1);\n  }\n  /**\n  Move to this node's previous sibling, if any.\n  */\n  prevSibling() {\n    return this.sibling(-1);\n  }\n  atLastNode(e) {\n    let n, r, { buffer: i } = this;\n    if (i) {\n      if (e > 0) {\n        if (this.index < i.buffer.buffer.length)\n          return !1;\n      } else\n        for (let s = 0; s < this.index; s++)\n          if (i.buffer.buffer[s + 3] < this.index)\n            return !1;\n      ({ index: n, parent: r } = i);\n    } else\n      ({ index: n, _parent: r } = this._tree);\n    for (; r; { index: n, _parent: r } = r)\n      if (n > -1)\n        for (let s = n + e, o = e < 0 ? -1 : r._tree.children.length; s != o; s += e) {\n          let a = r._tree.children[s];\n          if (this.mode & lt.IncludeAnonymous || a instanceof ls || !a.type.isAnonymous || pg(a))\n            return !1;\n        }\n    return !0;\n  }\n  move(e, n) {\n    if (n && this.enterChild(\n      e,\n      0,\n      4\n      /* Side.DontCare */\n    ))\n      return !0;\n    for (; ; ) {\n      if (this.sibling(e))\n        return !0;\n      if (this.atLastNode(e) || !this.parent())\n        return !1;\n    }\n  }\n  /**\n  Move to the next node in a\n  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)\n  traversal, going from a node to its first child or, if the\n  current node is empty or `enter` is false, its next sibling or\n  the next sibling of the first parent node that has one.\n  */\n  next(e = !0) {\n    return this.move(1, e);\n  }\n  /**\n  Move to the next node in a last-to-first pre-order traveral. A\n  node is followed by its last child or, if it has none, its\n  previous sibling or the previous sibling of the first parent\n  node that has one.\n  */\n  prev(e = !0) {\n    return this.move(-1, e);\n  }\n  /**\n  Move the cursor to the innermost node that covers `pos`. If\n  `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n  it will enter nodes that start at `pos`.\n  */\n  moveTo(e, n = 0) {\n    for (; (this.from == this.to || (n < 1 ? this.from >= e : this.from > e) || (n > -1 ? this.to <= e : this.to < e)) && this.parent(); )\n      ;\n    for (; this.enterChild(1, e, n); )\n      ;\n    return this;\n  }\n  /**\n  Get a [syntax node](#common.SyntaxNode) at the cursor's current\n  position.\n  */\n  get node() {\n    if (!this.buffer)\n      return this._tree;\n    let e = this.bufferNode, n = null, r = 0;\n    if (e && e.context == this.buffer)\n      e:\n        for (let i = this.index, s = this.stack.length; s >= 0; ) {\n          for (let o = e; o; o = o._parent)\n            if (o.index == i) {\n              if (i == this.index)\n                return o;\n              n = o, r = s + 1;\n              break e;\n            }\n          i = this.stack[--s];\n        }\n    for (let i = r; i < this.stack.length; i++)\n      n = new Nr(this.buffer, n, this.stack[i]);\n    return this.bufferNode = new Nr(this.buffer, n, this.index);\n  }\n  /**\n  Get the [tree](#common.Tree) that represents the current node, if\n  any. Will return null when the node is in a [tree\n  buffer](#common.TreeBuffer).\n  */\n  get tree() {\n    return this.buffer ? null : this._tree._tree;\n  }\n  /**\n  Iterate over the current node and all its descendants, calling\n  `enter` when entering a node and `leave`, if given, when leaving\n  one. When `enter` returns `false`, any children of that node are\n  skipped, and `leave` isn't called for it.\n  */\n  iterate(e, n) {\n    for (let r = 0; ; ) {\n      let i = !1;\n      if (this.type.isAnonymous || e(this) !== !1) {\n        if (this.firstChild()) {\n          r++;\n          continue;\n        }\n        this.type.isAnonymous || (i = !0);\n      }\n      for (; i && n && n(this), i = this.type.isAnonymous, !this.nextSibling(); ) {\n        if (!r)\n          return;\n        this.parent(), r--, i = !0;\n      }\n    }\n  }\n  /**\n  Test whether the current node matches a given context—a sequence\n  of direct parent node names. Empty strings in the context array\n  are treated as wildcards.\n  */\n  matchContext(e) {\n    if (!this.buffer)\n      return Sp(this.node, e);\n    let { buffer: n } = this.buffer, { types: r } = n.set;\n    for (let i = e.length - 1, s = this.stack.length - 1; i >= 0; s--) {\n      if (s < 0)\n        return Sp(this.node, e, i);\n      let o = r[n.buffer[this.stack[s]]];\n      if (!o.isAnonymous) {\n        if (e[i] && e[i] != o.name)\n          return !1;\n        i--;\n      }\n    }\n    return !0;\n  }\n}\nfunction pg(t) {\n  return t.children.some((e) => e instanceof ls || !e.type.isAnonymous || pg(e));\n}\nfunction kD(t) {\n  var e;\n  let { buffer: n, nodeSet: r, maxBufferLength: i = Fk, reused: s = [], minRepeatType: o = r.types.length } = t, a = Array.isArray(n) ? new hg(n, n.length) : n, l = r.types, c = 0, u = 0;\n  function d(S, w, k, _, T, C) {\n    let { id: A, start: Q, end: W, size: L } = a, re = u;\n    for (; L < 0; )\n      if (a.next(), L == -1) {\n        let Ce = s[A];\n        k.push(Ce), _.push(Q - S);\n        return;\n      } else if (L == -3) {\n        c = A;\n        return;\n      } else if (L == -4) {\n        u = A;\n        return;\n      } else\n        throw new RangeError(`Unrecognized record size: ${L}`);\n    let Y = l[A], K, B, _e = Q - S;\n    if (W - Q <= i && (B = m(a.pos - w, T))) {\n      let Ce = new Uint16Array(B.size - B.skip), ue = a.pos - B.size, ge = Ce.length;\n      for (; a.pos > ue; )\n        ge = y(B.start, Ce, ge);\n      K = new ls(Ce, W - B.start, r), _e = B.start - S;\n    } else {\n      let Ce = a.pos - L;\n      a.next();\n      let ue = [], ge = [], Be = A >= o ? A : -1, Le = 0, Zt = W;\n      for (; a.pos > Ce; )\n        Be >= 0 && a.id == Be && a.size >= 0 ? (a.end <= Zt - i && (p(ue, ge, Q, Le, a.end, Zt, Be, re), Le = ue.length, Zt = a.end), a.next()) : C > 2500 ? f(Q, Ce, ue, ge) : d(Q, Ce, ue, ge, Be, C + 1);\n      if (Be >= 0 && Le > 0 && Le < ue.length && p(ue, ge, Q, Le, Q, Zt, Be, re), ue.reverse(), ge.reverse(), Be > -1 && Le > 0) {\n        let Vt = h(Y);\n        K = Og(Y, ue, ge, 0, ue.length, 0, W - Q, Vt, Vt);\n      } else\n        K = O(Y, ue, ge, W - Q, re - W);\n    }\n    k.push(K), _.push(_e);\n  }\n  function f(S, w, k, _) {\n    let T = [], C = 0, A = -1;\n    for (; a.pos > w; ) {\n      let { id: Q, start: W, end: L, size: re } = a;\n      if (re > 4)\n        a.next();\n      else {\n        if (A > -1 && W < A)\n          break;\n        A < 0 && (A = L - i), T.push(Q, W, L), C++, a.next();\n      }\n    }\n    if (C) {\n      let Q = new Uint16Array(C * 4), W = T[T.length - 2];\n      for (let L = T.length - 3, re = 0; L >= 0; L -= 3)\n        Q[re++] = T[L], Q[re++] = T[L + 1] - W, Q[re++] = T[L + 2] - W, Q[re++] = re;\n      k.push(new ls(Q, T[2] - W, r)), _.push(W - S);\n    }\n  }\n  function h(S) {\n    return (w, k, _) => {\n      let T = 0, C = w.length - 1, A, Q;\n      if (C >= 0 && (A = w[C]) instanceof gt) {\n        if (!C && A.type == S && A.length == _)\n          return A;\n        (Q = A.prop(Re.lookAhead)) && (T = k[C] + A.length + Q);\n      }\n      return O(S, w, k, _, T);\n    };\n  }\n  function p(S, w, k, _, T, C, A, Q) {\n    let W = [], L = [];\n    for (; S.length > _; )\n      W.push(S.pop()), L.push(w.pop() + k - T);\n    S.push(O(r.types[A], W, L, C - T, Q - C)), w.push(T - k);\n  }\n  function O(S, w, k, _, T = 0, C) {\n    if (c) {\n      let A = [Re.contextHash, c];\n      C = C ? [A].concat(C) : [A];\n    }\n    if (T > 25) {\n      let A = [Re.lookAhead, T];\n      C = C ? [A].concat(C) : [A];\n    }\n    return new gt(S, w, k, _, C);\n  }\n  function m(S, w) {\n    let k = a.fork(), _ = 0, T = 0, C = 0, A = k.end - i, Q = { size: 0, start: 0, skip: 0 };\n    e:\n      for (let W = k.pos - S; k.pos > W; ) {\n        let L = k.size;\n        if (k.id == w && L >= 0) {\n          Q.size = _, Q.start = T, Q.skip = C, C += 4, _ += 4, k.next();\n          continue;\n        }\n        let re = k.pos - L;\n        if (L < 0 || re < W || k.start < A)\n          break;\n        let Y = k.id >= o ? 4 : 0, K = k.start;\n        for (k.next(); k.pos > re; ) {\n          if (k.size < 0)\n            if (k.size == -3)\n              Y += 4;\n            else\n              break e;\n          else\n            k.id >= o && (Y += 4);\n          k.next();\n        }\n        T = K, _ += L, C += Y;\n      }\n    return (w < 0 || _ == S) && (Q.size = _, Q.start = T, Q.skip = C), Q.size > 4 ? Q : void 0;\n  }\n  function y(S, w, k) {\n    let { id: _, start: T, end: C, size: A } = a;\n    if (a.next(), A >= 0 && _ < o) {\n      let Q = k;\n      if (A > 4) {\n        let W = a.pos - (A - 4);\n        for (; a.pos > W; )\n          k = y(S, w, k);\n      }\n      w[--k] = Q, w[--k] = C - S, w[--k] = T - S, w[--k] = _;\n    } else\n      A == -3 ? c = _ : A == -4 && (u = _);\n    return k;\n  }\n  let b = [], g = [];\n  for (; a.pos > 0; )\n    d(t.start || 0, t.bufferStart || 0, b, g, -1, 0);\n  let v = (e = t.length) !== null && e !== void 0 ? e : b.length ? g[0] + b[0].length : 0;\n  return new gt(l[t.topID], b.reverse(), g.reverse(), v);\n}\nconst Rv = /* @__PURE__ */ new WeakMap();\nfunction lu(t, e) {\n  if (!t.isAnonymous || e instanceof ls || e.type != t)\n    return 1;\n  let n = Rv.get(e);\n  if (n == null) {\n    n = 1;\n    for (let r of e.children) {\n      if (r.type != t || !(r instanceof gt)) {\n        n = 1;\n        break;\n      }\n      n += lu(t, r);\n    }\n    Rv.set(e, n);\n  }\n  return n;\n}\nfunction Og(t, e, n, r, i, s, o, a, l) {\n  let c = 0;\n  for (let p = r; p < i; p++)\n    c += lu(t, e[p]);\n  let u = Math.ceil(\n    c * 1.5 / 8\n    /* Balance.BranchFactor */\n  ), d = [], f = [];\n  function h(p, O, m, y, b) {\n    for (let g = m; g < y; ) {\n      let v = g, S = O[g], w = lu(t, p[g]);\n      for (g++; g < y; g++) {\n        let k = lu(t, p[g]);\n        if (w + k >= u)\n          break;\n        w += k;\n      }\n      if (g == v + 1) {\n        if (w > u) {\n          let k = p[v];\n          h(k.children, k.positions, 0, k.children.length, O[v] + b);\n          continue;\n        }\n        d.push(p[v]);\n      } else {\n        let k = O[g - 1] + p[g - 1].length - S;\n        d.push(Og(t, p, O, v, g, S, k, null, l));\n      }\n      f.push(S + b - s);\n    }\n  }\n  return h(e, n, r, i, 0), (a || l)(d, f, o);\n}\nclass ex {\n  constructor() {\n    this.map = /* @__PURE__ */ new WeakMap();\n  }\n  setBuffer(e, n, r) {\n    let i = this.map.get(e);\n    i || this.map.set(e, i = /* @__PURE__ */ new Map()), i.set(n, r);\n  }\n  getBuffer(e, n) {\n    let r = this.map.get(e);\n    return r && r.get(n);\n  }\n  /**\n  Set the value for this syntax node.\n  */\n  set(e, n) {\n    e instanceof Nr ? this.setBuffer(e.context.buffer, e.index, n) : e instanceof ln && this.map.set(e.tree, n);\n  }\n  /**\n  Retrieve value for this syntax node, if it exists in the map.\n  */\n  get(e) {\n    return e instanceof Nr ? this.getBuffer(e.context.buffer, e.index) : e instanceof ln ? this.map.get(e.tree) : void 0;\n  }\n  /**\n  Set the value for the node that a cursor currently points to.\n  */\n  cursorSet(e, n) {\n    e.buffer ? this.setBuffer(e.buffer.buffer, e.index, n) : this.map.set(e.tree, n);\n  }\n  /**\n  Retrieve the value for the node that a cursor currently points\n  to.\n  */\n  cursorGet(e) {\n    return e.buffer ? this.getBuffer(e.buffer.buffer, e.index) : this.map.get(e.tree);\n  }\n}\nclass si {\n  /**\n  Construct a tree fragment. You'll usually want to use\n  [`addTree`](#common.TreeFragment^addTree) and\n  [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n  calling this directly.\n  */\n  constructor(e, n, r, i, s = !1, o = !1) {\n    this.from = e, this.to = n, this.tree = r, this.offset = i, this.open = (s ? 1 : 0) | (o ? 2 : 0);\n  }\n  /**\n  Whether the start of the fragment represents the start of a\n  parse, or the end of a change. (In the second case, it may not\n  be safe to reuse some nodes at the start, depending on the\n  parsing algorithm.)\n  */\n  get openStart() {\n    return (this.open & 1) > 0;\n  }\n  /**\n  Whether the end of the fragment represents the end of a\n  full-document parse, or the start of a change.\n  */\n  get openEnd() {\n    return (this.open & 2) > 0;\n  }\n  /**\n  Create a set of fragments from a freshly parsed tree, or update\n  an existing set of fragments by replacing the ones that overlap\n  with a tree with content from the new tree. When `partial` is\n  true, the parse is treated as incomplete, and the resulting\n  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n  true.\n  */\n  static addTree(e, n = [], r = !1) {\n    let i = [new si(0, e.length, e, 0, !1, r)];\n    for (let s of n)\n      s.to > e.length && i.push(s);\n    return i;\n  }\n  /**\n  Apply a set of edits to an array of fragments, removing or\n  splitting fragments as necessary to remove edited ranges, and\n  adjusting offsets for fragments that moved.\n  */\n  static applyChanges(e, n, r = 128) {\n    if (!n.length)\n      return e;\n    let i = [], s = 1, o = e.length ? e[0] : null;\n    for (let a = 0, l = 0, c = 0; ; a++) {\n      let u = a < n.length ? n[a] : null, d = u ? u.fromA : 1e9;\n      if (d - l >= r)\n        for (; o && o.from < d; ) {\n          let f = o;\n          if (l >= f.from || d <= f.to || c) {\n            let h = Math.max(f.from, l) - c, p = Math.min(f.to, d) - c;\n            f = h >= p ? null : new si(h, p, f.tree, f.offset + c, a > 0, !!u);\n          }\n          if (f && i.push(f), o.to > d)\n            break;\n          o = s < e.length ? e[s++] : null;\n        }\n      if (!u)\n        break;\n      l = u.toA, c = u.toA - u.toB;\n    }\n    return i;\n  }\n}\nclass tx {\n  /**\n  Start a parse, returning a [partial parse](#common.PartialParse)\n  object. [`fragments`](#common.TreeFragment) can be passed in to\n  make the parse incremental.\n  \n  By default, the entire input is parsed. You can pass `ranges`,\n  which should be a sorted array of non-empty, non-overlapping\n  ranges, to parse only those ranges. The tree returned in that\n  case will start at `ranges[0].from`.\n  */\n  startParse(e, n, r) {\n    return typeof e == \"string\" && (e = new xD(e)), r = r ? r.length ? r.map((i) => new Fn(i.from, i.to)) : [new Fn(0, 0)] : [new Fn(0, e.length)], this.createParse(e, n || [], r);\n  }\n  /**\n  Run a full parse, returning the resulting tree.\n  */\n  parse(e, n, r) {\n    let i = this.startParse(e, n, r);\n    for (; ; ) {\n      let s = i.advance();\n      if (s)\n        return s;\n    }\n  }\n}\nclass xD {\n  constructor(e) {\n    this.string = e;\n  }\n  get length() {\n    return this.string.length;\n  }\n  chunk(e) {\n    return this.string.slice(e);\n  }\n  get lineChunks() {\n    return !1;\n  }\n  read(e, n) {\n    return this.string.slice(e, n);\n  }\n}\nfunction PD(t) {\n  return (e, n, r, i) => new TD(e, t, n, r, i);\n}\nclass Nv {\n  constructor(e, n, r, i, s) {\n    this.parser = e, this.parse = n, this.overlay = r, this.target = i, this.from = s;\n  }\n}\nfunction Dv(t) {\n  if (!t.length || t.some((e) => e.from >= e.to))\n    throw new RangeError(\"Invalid inner parse ranges given: \" + JSON.stringify(t));\n}\nclass _D {\n  constructor(e, n, r, i, s, o, a) {\n    this.parser = e, this.predicate = n, this.mounts = r, this.index = i, this.start = s, this.target = o, this.prev = a, this.depth = 0, this.ranges = [];\n  }\n}\nconst wp = new Re({ perNode: !0 });\nclass TD {\n  constructor(e, n, r, i, s) {\n    this.nest = n, this.input = r, this.fragments = i, this.ranges = s, this.inner = [], this.innerDone = 0, this.baseTree = null, this.stoppedAt = null, this.baseParse = e;\n  }\n  advance() {\n    if (this.baseParse) {\n      let r = this.baseParse.advance();\n      if (!r)\n        return null;\n      if (this.baseParse = null, this.baseTree = r, this.startInner(), this.stoppedAt != null)\n        for (let i of this.inner)\n          i.parse.stopAt(this.stoppedAt);\n    }\n    if (this.innerDone == this.inner.length) {\n      let r = this.baseTree;\n      return this.stoppedAt != null && (r = new gt(r.type, r.children, r.positions, r.length, r.propValues.concat([[wp, this.stoppedAt]]))), r;\n    }\n    let e = this.inner[this.innerDone], n = e.parse.advance();\n    if (n) {\n      this.innerDone++;\n      let r = Object.assign(/* @__PURE__ */ Object.create(null), e.target.props);\n      r[Re.mounted.id] = new vl(n, e.overlay, e.parser), e.target.props = r;\n    }\n    return null;\n  }\n  get parsedPos() {\n    if (this.baseParse)\n      return 0;\n    let e = this.input.length;\n    for (let n = this.innerDone; n < this.inner.length; n++)\n      this.inner[n].from < e && (e = Math.min(e, this.inner[n].parse.parsedPos));\n    return e;\n  }\n  stopAt(e) {\n    if (this.stoppedAt = e, this.baseParse)\n      this.baseParse.stopAt(e);\n    else\n      for (let n = this.innerDone; n < this.inner.length; n++)\n        this.inner[n].parse.stopAt(e);\n  }\n  startInner() {\n    let e = new QD(this.fragments), n = null, r = null, i = new Xu(new ln(this.baseTree, this.ranges[0].from, 0, null), lt.IncludeAnonymous | lt.IgnoreMounts);\n    e:\n      for (let s, o; ; ) {\n        let a = !0, l;\n        if (this.stoppedAt != null && i.from >= this.stoppedAt)\n          a = !1;\n        else if (e.hasNode(i)) {\n          if (n) {\n            let c = n.mounts.find((u) => u.frag.from <= i.from && u.frag.to >= i.to && u.mount.overlay);\n            if (c)\n              for (let u of c.mount.overlay) {\n                let d = u.from + c.pos, f = u.to + c.pos;\n                d >= i.from && f <= i.to && !n.ranges.some((h) => h.from < f && h.to > d) && n.ranges.push({ from: d, to: f });\n              }\n          }\n          a = !1;\n        } else if (r && (o = ED(r.ranges, i.from, i.to)))\n          a = o != 2;\n        else if (!i.type.isAnonymous && (s = this.nest(i, this.input)) && (i.from < i.to || !s.overlay)) {\n          i.tree || $D(i);\n          let c = e.findMounts(i.from, s.parser);\n          if (typeof s.overlay == \"function\")\n            n = new _D(s.parser, s.overlay, c, this.inner.length, i.from, i.tree, n);\n          else {\n            let u = Iv(this.ranges, s.overlay || (i.from < i.to ? [new Fn(i.from, i.to)] : []));\n            u.length && Dv(u), (u.length || !s.overlay) && this.inner.push(new Nv(s.parser, u.length ? s.parser.startParse(this.input, Wv(c, u), u) : s.parser.startParse(\"\"), s.overlay ? s.overlay.map((d) => new Fn(d.from - i.from, d.to - i.from)) : null, i.tree, u.length ? u[0].from : i.from)), s.overlay ? u.length && (r = { ranges: u, depth: 0, prev: r }) : a = !1;\n          }\n        } else\n          n && (l = n.predicate(i)) && (l === !0 && (l = new Fn(i.from, i.to)), l.from < l.to && n.ranges.push(l));\n        if (a && i.firstChild())\n          n && n.depth++, r && r.depth++;\n        else\n          for (; !i.nextSibling(); ) {\n            if (!i.parent())\n              break e;\n            if (n && !--n.depth) {\n              let c = Iv(this.ranges, n.ranges);\n              c.length && (Dv(c), this.inner.splice(n.index, 0, new Nv(n.parser, n.parser.startParse(this.input, Wv(n.mounts, c), c), n.ranges.map((u) => new Fn(u.from - n.start, u.to - n.start)), n.target, c[0].from))), n = n.prev;\n            }\n            r && !--r.depth && (r = r.prev);\n          }\n      }\n  }\n}\nfunction ED(t, e, n) {\n  for (let r of t) {\n    if (r.from >= n)\n      break;\n    if (r.to > e)\n      return r.from <= e && r.to >= n ? 2 : 1;\n  }\n  return 0;\n}\nfunction Zv(t, e, n, r, i, s) {\n  if (e < n) {\n    let o = t.buffer[e + 1];\n    r.push(t.slice(e, n, o)), i.push(o - s);\n  }\n}\nfunction $D(t) {\n  let { node: e } = t, n = [], r = e.context.buffer;\n  do\n    n.push(t.index), t.parent();\n  while (!t.tree);\n  let i = t.tree, s = i.children.indexOf(r), o = i.children[s], a = o.buffer, l = [s];\n  function c(u, d, f, h, p, O) {\n    let m = n[O], y = [], b = [];\n    Zv(o, u, m, y, b, h);\n    let g = a[m + 1], v = a[m + 2];\n    l.push(y.length);\n    let S = O ? c(m + 4, a[m + 3], o.set.types[a[m]], g, v - g, O - 1) : e.toTree();\n    return y.push(S), b.push(g - h), Zv(o, a[m + 3], d, y, b, h), new gt(f, y, b, p);\n  }\n  i.children[s] = c(0, a.length, On.none, 0, o.length, n.length - 1);\n  for (let u of l) {\n    let d = t.tree.children[u], f = t.tree.positions[u];\n    t.yield(new ln(d, f + t.from, u, t._tree));\n  }\n}\nclass Vv {\n  constructor(e, n) {\n    this.offset = n, this.done = !1, this.cursor = e.cursor(lt.IncludeAnonymous | lt.IgnoreMounts);\n  }\n  // Move to the first node (in pre-order) that starts at or after `pos`.\n  moveTo(e) {\n    let { cursor: n } = this, r = e - this.offset;\n    for (; !this.done && n.from < r; )\n      n.to >= e && n.enter(r, 1, lt.IgnoreOverlays | lt.ExcludeBuffers) || n.next(!1) || (this.done = !0);\n  }\n  hasNode(e) {\n    if (this.moveTo(e.from), !this.done && this.cursor.from + this.offset == e.from && this.cursor.tree)\n      for (let n = this.cursor.tree; ; ) {\n        if (n == e.tree)\n          return !0;\n        if (n.children.length && n.positions[0] == 0 && n.children[0] instanceof gt)\n          n = n.children[0];\n        else\n          break;\n      }\n    return !1;\n  }\n}\nlet QD = class {\n  constructor(e) {\n    var n;\n    if (this.fragments = e, this.curTo = 0, this.fragI = 0, e.length) {\n      let r = this.curFrag = e[0];\n      this.curTo = (n = r.tree.prop(wp)) !== null && n !== void 0 ? n : r.to, this.inner = new Vv(r.tree, -r.offset);\n    } else\n      this.curFrag = this.inner = null;\n  }\n  hasNode(e) {\n    for (; this.curFrag && e.from >= this.curTo; )\n      this.nextFrag();\n    return this.curFrag && this.curFrag.from <= e.from && this.curTo >= e.to && this.inner.hasNode(e);\n  }\n  nextFrag() {\n    var e;\n    if (this.fragI++, this.fragI == this.fragments.length)\n      this.curFrag = this.inner = null;\n    else {\n      let n = this.curFrag = this.fragments[this.fragI];\n      this.curTo = (e = n.tree.prop(wp)) !== null && e !== void 0 ? e : n.to, this.inner = new Vv(n.tree, -n.offset);\n    }\n  }\n  findMounts(e, n) {\n    var r;\n    let i = [];\n    if (this.inner) {\n      this.inner.cursor.moveTo(e, 1);\n      for (let s = this.inner.cursor.node; s; s = s.parent) {\n        let o = (r = s.tree) === null || r === void 0 ? void 0 : r.prop(Re.mounted);\n        if (o && o.parser == n)\n          for (let a = this.fragI; a < this.fragments.length; a++) {\n            let l = this.fragments[a];\n            if (l.from >= s.to)\n              break;\n            l.tree == this.curFrag.tree && i.push({\n              frag: l,\n              pos: s.from - l.offset,\n              mount: o\n            });\n          }\n      }\n    }\n    return i;\n  }\n};\nfunction Iv(t, e) {\n  let n = null, r = e;\n  for (let i = 1, s = 0; i < t.length; i++) {\n    let o = t[i - 1].to, a = t[i].from;\n    for (; s < r.length; s++) {\n      let l = r[s];\n      if (l.from >= a)\n        break;\n      l.to <= o || (n || (r = n = e.slice()), l.from < o ? (n[s] = new Fn(l.from, o), l.to > a && n.splice(s + 1, 0, new Fn(a, l.to))) : l.to > a ? n[s--] = new Fn(a, l.to) : n.splice(s--, 1));\n    }\n  }\n  return r;\n}\nfunction CD(t, e, n, r) {\n  let i = 0, s = 0, o = !1, a = !1, l = -1e9, c = [];\n  for (; ; ) {\n    let u = i == t.length ? 1e9 : o ? t[i].to : t[i].from, d = s == e.length ? 1e9 : a ? e[s].to : e[s].from;\n    if (o != a) {\n      let f = Math.max(l, n), h = Math.min(u, d, r);\n      f < h && c.push(new Fn(f, h));\n    }\n    if (l = Math.min(u, d), l == 1e9)\n      break;\n    u == l && (o ? (o = !1, i++) : o = !0), d == l && (a ? (a = !1, s++) : a = !0);\n  }\n  return c;\n}\nfunction Wv(t, e) {\n  let n = [];\n  for (let { pos: r, mount: i, frag: s } of t) {\n    let o = r + (i.overlay ? i.overlay[0].from : 0), a = o + i.tree.length, l = Math.max(s.from, o), c = Math.min(s.to, a);\n    if (i.overlay) {\n      let u = i.overlay.map((f) => new Fn(f.from + r, f.to + r)), d = CD(e, u, l, c);\n      for (let f = 0, h = l; ; f++) {\n        let p = f == d.length, O = p ? c : d[f].from;\n        if (O > h && n.push(new si(h, O, i.tree, -o, s.from >= h || s.openStart, s.to <= O || s.openEnd)), p)\n          break;\n        h = d[f].to;\n      }\n    } else\n      n.push(new si(l, c, i.tree, -o, s.from >= o || s.openStart, s.to <= a || s.openEnd));\n  }\n  return n;\n}\nlet AD = 0, Ni = class nx {\n  /**\n  @internal\n  */\n  constructor(e, n, r) {\n    this.set = e, this.base = n, this.modified = r, this.id = AD++;\n  }\n  /**\n  Define a new tag. If `parent` is given, the tag is treated as a\n  sub-tag of that parent, and\n  [highlighters](#highlight.tagHighlighter) that don't mention\n  this tag will try to fall back to the parent tag (or grandparent\n  tag, etc).\n  */\n  static define(e) {\n    if (e != null && e.base)\n      throw new Error(\"Can not derive from a modified tag\");\n    let n = new nx([], null, []);\n    if (n.set.push(n), e)\n      for (let r of e.set)\n        n.set.push(r);\n    return n;\n  }\n  /**\n  Define a tag _modifier_, which is a function that, given a tag,\n  will return a tag that is a subtag of the original. Applying the\n  same modifier to a twice tag will return the same value (`m1(t1)\n  == m1(t1)`) and applying multiple modifiers will, regardless or\n  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).\n  \n  When multiple modifiers are applied to a given base tag, each\n  smaller set of modifiers is registered as a parent, so that for\n  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,\n  `m1(m3(t1)`, and so on.\n  */\n  static defineModifier() {\n    let e = new ju();\n    return (n) => n.modified.indexOf(e) > -1 ? n : ju.get(n.base || n, n.modified.concat(e).sort((r, i) => r.id - i.id));\n  }\n}, RD = 0;\nclass ju {\n  constructor() {\n    this.instances = [], this.id = RD++;\n  }\n  static get(e, n) {\n    if (!n.length)\n      return e;\n    let r = n[0].instances.find((a) => a.base == e && ND(n, a.modified));\n    if (r)\n      return r;\n    let i = [], s = new Ni(i, e, n);\n    for (let a of n)\n      a.instances.push(s);\n    let o = DD(n);\n    for (let a of e.set)\n      if (!a.modified.length)\n        for (let l of o)\n          i.push(ju.get(a, l));\n    return s;\n  }\n}\nfunction ND(t, e) {\n  return t.length == e.length && t.every((n, r) => n == e[r]);\n}\nfunction DD(t) {\n  let e = [[]];\n  for (let n = 0; n < t.length; n++)\n    for (let r = 0, i = e.length; r < i; r++)\n      e.push(e[r].concat(t[n]));\n  return e.sort((n, r) => r.length - n.length);\n}\nfunction ia(t) {\n  let e = /* @__PURE__ */ Object.create(null);\n  for (let n in t) {\n    let r = t[n];\n    Array.isArray(r) || (r = [r]);\n    for (let i of n.split(\" \"))\n      if (i) {\n        let s = [], o = 2, a = i;\n        for (let d = 0; ; ) {\n          if (a == \"...\" && d > 0 && d + 3 == i.length) {\n            o = 1;\n            break;\n          }\n          let f = /^\"(?:[^\"\\\\]|\\\\.)*?\"|[^\\/!]+/.exec(a);\n          if (!f)\n            throw new RangeError(\"Invalid path: \" + i);\n          if (s.push(f[0] == \"*\" ? \"\" : f[0][0] == '\"' ? JSON.parse(f[0]) : f[0]), d += f[0].length, d == i.length)\n            break;\n          let h = i[d++];\n          if (d == i.length && h == \"!\") {\n            o = 0;\n            break;\n          }\n          if (h != \"/\")\n            throw new RangeError(\"Invalid path: \" + i);\n          a = i.slice(d);\n        }\n        let l = s.length - 1, c = s[l];\n        if (!c)\n          throw new RangeError(\"Invalid path: \" + i);\n        let u = new Bu(r, o, l > 0 ? s.slice(0, l) : null);\n        e[c] = u.sort(e[c]);\n      }\n  }\n  return rx.add(e);\n}\nconst rx = new Re();\nclass Bu {\n  constructor(e, n, r, i) {\n    this.tags = e, this.mode = n, this.context = r, this.next = i;\n  }\n  get opaque() {\n    return this.mode == 0;\n  }\n  get inherit() {\n    return this.mode == 1;\n  }\n  sort(e) {\n    return !e || e.depth < this.depth ? (this.next = e, this) : (e.next = this.sort(e.next), e);\n  }\n  get depth() {\n    return this.context ? this.context.length : 0;\n  }\n}\nBu.empty = new Bu([], 2, null);\nfunction ix(t, e) {\n  let n = /* @__PURE__ */ Object.create(null);\n  for (let s of t)\n    if (!Array.isArray(s.tag))\n      n[s.tag.id] = s.class;\n    else\n      for (let o of s.tag)\n        n[o.id] = s.class;\n  let { scope: r, all: i = null } = e || {};\n  return {\n    style: (s) => {\n      let o = i;\n      for (let a of s)\n        for (let l of a.set) {\n          let c = n[l.id];\n          if (c) {\n            o = o ? o + \" \" + c : c;\n            break;\n          }\n        }\n      return o;\n    },\n    scope: r\n  };\n}\nfunction ZD(t, e) {\n  let n = null;\n  for (let r of t) {\n    let i = r.style(e);\n    i && (n = n ? n + \" \" + i : i);\n  }\n  return n;\n}\nfunction VD(t, e, n, r = 0, i = t.length) {\n  let s = new ID(r, Array.isArray(e) ? e : [e], n);\n  s.highlightRange(t.cursor(), r, i, \"\", s.highlighters), s.flush(i);\n}\nclass ID {\n  constructor(e, n, r) {\n    this.at = e, this.highlighters = n, this.span = r, this.class = \"\";\n  }\n  startSpan(e, n) {\n    n != this.class && (this.flush(e), e > this.at && (this.at = e), this.class = n);\n  }\n  flush(e) {\n    e > this.at && this.class && this.span(this.at, e, this.class);\n  }\n  highlightRange(e, n, r, i, s) {\n    let { type: o, from: a, to: l } = e;\n    if (a >= r || l <= n)\n      return;\n    o.isTop && (s = this.highlighters.filter((h) => !h.scope || h.scope(o)));\n    let c = i, u = WD(e) || Bu.empty, d = ZD(s, u.tags);\n    if (d && (c && (c += \" \"), c += d, u.mode == 1 && (i += (i ? \" \" : \"\") + d)), this.startSpan(Math.max(n, a), c), u.opaque)\n      return;\n    let f = e.tree && e.tree.prop(Re.mounted);\n    if (f && f.overlay) {\n      let h = e.node.enter(f.overlay[0].from + a, 1), p = this.highlighters.filter((m) => !m.scope || m.scope(f.tree.type)), O = e.firstChild();\n      for (let m = 0, y = a; ; m++) {\n        let b = m < f.overlay.length ? f.overlay[m] : null, g = b ? b.from + a : l, v = Math.max(n, y), S = Math.min(r, g);\n        if (v < S && O)\n          for (; e.from < S && (this.highlightRange(e, v, S, i, s), this.startSpan(Math.min(S, e.to), c), !(e.to >= g || !e.nextSibling())); )\n            ;\n        if (!b || g > r)\n          break;\n        y = b.to + a, y > n && (this.highlightRange(h.cursor(), Math.max(n, b.from + a), Math.min(r, y), \"\", p), this.startSpan(Math.min(r, y), c));\n      }\n      O && e.parent();\n    } else if (e.firstChild()) {\n      f && (i = \"\");\n      do\n        if (!(e.to <= n)) {\n          if (e.from >= r)\n            break;\n          this.highlightRange(e, n, r, i, s), this.startSpan(Math.min(r, e.to), c);\n        }\n      while (e.nextSibling());\n      e.parent();\n    }\n  }\n}\nfunction WD(t) {\n  let e = t.type.prop(rx);\n  for (; e && e.context && !t.matchContext(e.context); )\n    e = e.next;\n  return e || null;\n}\nconst te = Ni.define, Dc = te(), Di = te(), Mv = te(Di), Xv = te(Di), Zi = te(), Zc = te(Zi), Df = te(Zi), Pr = te(), ms = te(Pr), kr = te(), xr = te(), kp = te(), Sa = te(kp), Vc = te(), P = {\n  /**\n  A comment.\n  */\n  comment: Dc,\n  /**\n  A line [comment](#highlight.tags.comment).\n  */\n  lineComment: te(Dc),\n  /**\n  A block [comment](#highlight.tags.comment).\n  */\n  blockComment: te(Dc),\n  /**\n  A documentation [comment](#highlight.tags.comment).\n  */\n  docComment: te(Dc),\n  /**\n  Any kind of identifier.\n  */\n  name: Di,\n  /**\n  The [name](#highlight.tags.name) of a variable.\n  */\n  variableName: te(Di),\n  /**\n  A type [name](#highlight.tags.name).\n  */\n  typeName: Mv,\n  /**\n  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).\n  */\n  tagName: te(Mv),\n  /**\n  A property or field [name](#highlight.tags.name).\n  */\n  propertyName: Xv,\n  /**\n  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).\n  */\n  attributeName: te(Xv),\n  /**\n  The [name](#highlight.tags.name) of a class.\n  */\n  className: te(Di),\n  /**\n  A label [name](#highlight.tags.name).\n  */\n  labelName: te(Di),\n  /**\n  A namespace [name](#highlight.tags.name).\n  */\n  namespace: te(Di),\n  /**\n  The [name](#highlight.tags.name) of a macro.\n  */\n  macroName: te(Di),\n  /**\n  A literal value.\n  */\n  literal: Zi,\n  /**\n  A string [literal](#highlight.tags.literal).\n  */\n  string: Zc,\n  /**\n  A documentation [string](#highlight.tags.string).\n  */\n  docString: te(Zc),\n  /**\n  A character literal (subtag of [string](#highlight.tags.string)).\n  */\n  character: te(Zc),\n  /**\n  An attribute value (subtag of [string](#highlight.tags.string)).\n  */\n  attributeValue: te(Zc),\n  /**\n  A number [literal](#highlight.tags.literal).\n  */\n  number: Df,\n  /**\n  An integer [number](#highlight.tags.number) literal.\n  */\n  integer: te(Df),\n  /**\n  A floating-point [number](#highlight.tags.number) literal.\n  */\n  float: te(Df),\n  /**\n  A boolean [literal](#highlight.tags.literal).\n  */\n  bool: te(Zi),\n  /**\n  Regular expression [literal](#highlight.tags.literal).\n  */\n  regexp: te(Zi),\n  /**\n  An escape [literal](#highlight.tags.literal), for example a\n  backslash escape in a string.\n  */\n  escape: te(Zi),\n  /**\n  A color [literal](#highlight.tags.literal).\n  */\n  color: te(Zi),\n  /**\n  A URL [literal](#highlight.tags.literal).\n  */\n  url: te(Zi),\n  /**\n  A language keyword.\n  */\n  keyword: kr,\n  /**\n  The [keyword](#highlight.tags.keyword) for the self or this\n  object.\n  */\n  self: te(kr),\n  /**\n  The [keyword](#highlight.tags.keyword) for null.\n  */\n  null: te(kr),\n  /**\n  A [keyword](#highlight.tags.keyword) denoting some atomic value.\n  */\n  atom: te(kr),\n  /**\n  A [keyword](#highlight.tags.keyword) that represents a unit.\n  */\n  unit: te(kr),\n  /**\n  A modifier [keyword](#highlight.tags.keyword).\n  */\n  modifier: te(kr),\n  /**\n  A [keyword](#highlight.tags.keyword) that acts as an operator.\n  */\n  operatorKeyword: te(kr),\n  /**\n  A control-flow related [keyword](#highlight.tags.keyword).\n  */\n  controlKeyword: te(kr),\n  /**\n  A [keyword](#highlight.tags.keyword) that defines something.\n  */\n  definitionKeyword: te(kr),\n  /**\n  A [keyword](#highlight.tags.keyword) related to defining or\n  interfacing with modules.\n  */\n  moduleKeyword: te(kr),\n  /**\n  An operator.\n  */\n  operator: xr,\n  /**\n  An [operator](#highlight.tags.operator) that dereferences something.\n  */\n  derefOperator: te(xr),\n  /**\n  Arithmetic-related [operator](#highlight.tags.operator).\n  */\n  arithmeticOperator: te(xr),\n  /**\n  Logical [operator](#highlight.tags.operator).\n  */\n  logicOperator: te(xr),\n  /**\n  Bit [operator](#highlight.tags.operator).\n  */\n  bitwiseOperator: te(xr),\n  /**\n  Comparison [operator](#highlight.tags.operator).\n  */\n  compareOperator: te(xr),\n  /**\n  [Operator](#highlight.tags.operator) that updates its operand.\n  */\n  updateOperator: te(xr),\n  /**\n  [Operator](#highlight.tags.operator) that defines something.\n  */\n  definitionOperator: te(xr),\n  /**\n  Type-related [operator](#highlight.tags.operator).\n  */\n  typeOperator: te(xr),\n  /**\n  Control-flow [operator](#highlight.tags.operator).\n  */\n  controlOperator: te(xr),\n  /**\n  Program or markup punctuation.\n  */\n  punctuation: kp,\n  /**\n  [Punctuation](#highlight.tags.punctuation) that separates\n  things.\n  */\n  separator: te(kp),\n  /**\n  Bracket-style [punctuation](#highlight.tags.punctuation).\n  */\n  bracket: Sa,\n  /**\n  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`\n  tokens).\n  */\n  angleBracket: te(Sa),\n  /**\n  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`\n  tokens).\n  */\n  squareBracket: te(Sa),\n  /**\n  Parentheses (usually `(` and `)` tokens). Subtag of\n  [bracket](#highlight.tags.bracket).\n  */\n  paren: te(Sa),\n  /**\n  Braces (usually `{` and `}` tokens). Subtag of\n  [bracket](#highlight.tags.bracket).\n  */\n  brace: te(Sa),\n  /**\n  Content, for example plain text in XML or markup documents.\n  */\n  content: Pr,\n  /**\n  [Content](#highlight.tags.content) that represents a heading.\n  */\n  heading: ms,\n  /**\n  A level 1 [heading](#highlight.tags.heading).\n  */\n  heading1: te(ms),\n  /**\n  A level 2 [heading](#highlight.tags.heading).\n  */\n  heading2: te(ms),\n  /**\n  A level 3 [heading](#highlight.tags.heading).\n  */\n  heading3: te(ms),\n  /**\n  A level 4 [heading](#highlight.tags.heading).\n  */\n  heading4: te(ms),\n  /**\n  A level 5 [heading](#highlight.tags.heading).\n  */\n  heading5: te(ms),\n  /**\n  A level 6 [heading](#highlight.tags.heading).\n  */\n  heading6: te(ms),\n  /**\n  A prose separator (such as a horizontal rule).\n  */\n  contentSeparator: te(Pr),\n  /**\n  [Content](#highlight.tags.content) that represents a list.\n  */\n  list: te(Pr),\n  /**\n  [Content](#highlight.tags.content) that represents a quote.\n  */\n  quote: te(Pr),\n  /**\n  [Content](#highlight.tags.content) that is emphasized.\n  */\n  emphasis: te(Pr),\n  /**\n  [Content](#highlight.tags.content) that is styled strong.\n  */\n  strong: te(Pr),\n  /**\n  [Content](#highlight.tags.content) that is part of a link.\n  */\n  link: te(Pr),\n  /**\n  [Content](#highlight.tags.content) that is styled as code or\n  monospace.\n  */\n  monospace: te(Pr),\n  /**\n  [Content](#highlight.tags.content) that has a strike-through\n  style.\n  */\n  strikethrough: te(Pr),\n  /**\n  Inserted text in a change-tracking format.\n  */\n  inserted: te(),\n  /**\n  Deleted text.\n  */\n  deleted: te(),\n  /**\n  Changed text.\n  */\n  changed: te(),\n  /**\n  An invalid or unsyntactic element.\n  */\n  invalid: te(),\n  /**\n  Metadata or meta-instruction.\n  */\n  meta: Vc,\n  /**\n  [Metadata](#highlight.tags.meta) that applies to the entire\n  document.\n  */\n  documentMeta: te(Vc),\n  /**\n  [Metadata](#highlight.tags.meta) that annotates or adds\n  attributes to a given syntactic element.\n  */\n  annotation: te(Vc),\n  /**\n  Processing instruction or preprocessor directive. Subtag of\n  [meta](#highlight.tags.meta).\n  */\n  processingInstruction: te(Vc),\n  /**\n  [Modifier](#highlight.Tag^defineModifier) that indicates that a\n  given element is being defined. Expected to be used with the\n  various [name](#highlight.tags.name) tags.\n  */\n  definition: Ni.defineModifier(),\n  /**\n  [Modifier](#highlight.Tag^defineModifier) that indicates that\n  something is constant. Mostly expected to be used with\n  [variable names](#highlight.tags.variableName).\n  */\n  constant: Ni.defineModifier(),\n  /**\n  [Modifier](#highlight.Tag^defineModifier) used to indicate that\n  a [variable](#highlight.tags.variableName) or [property\n  name](#highlight.tags.propertyName) is being called or defined\n  as a function.\n  */\n  function: Ni.defineModifier(),\n  /**\n  [Modifier](#highlight.Tag^defineModifier) that can be applied to\n  [names](#highlight.tags.name) to indicate that they belong to\n  the language's standard environment.\n  */\n  standard: Ni.defineModifier(),\n  /**\n  [Modifier](#highlight.Tag^defineModifier) that indicates a given\n  [names](#highlight.tags.name) is local to some scope.\n  */\n  local: Ni.defineModifier(),\n  /**\n  A generic variant [modifier](#highlight.Tag^defineModifier) that\n  can be used to tag language-specific alternative variants of\n  some common tag. It is recommended for themes to define special\n  forms of at least the [string](#highlight.tags.string) and\n  [variable name](#highlight.tags.variableName) tags, since those\n  come up a lot.\n  */\n  special: Ni.defineModifier()\n};\nix([\n  { tag: P.link, class: \"tok-link\" },\n  { tag: P.heading, class: \"tok-heading\" },\n  { tag: P.emphasis, class: \"tok-emphasis\" },\n  { tag: P.strong, class: \"tok-strong\" },\n  { tag: P.keyword, class: \"tok-keyword\" },\n  { tag: P.atom, class: \"tok-atom\" },\n  { tag: P.bool, class: \"tok-bool\" },\n  { tag: P.url, class: \"tok-url\" },\n  { tag: P.labelName, class: \"tok-labelName\" },\n  { tag: P.inserted, class: \"tok-inserted\" },\n  { tag: P.deleted, class: \"tok-deleted\" },\n  { tag: P.literal, class: \"tok-literal\" },\n  { tag: P.string, class: \"tok-string\" },\n  { tag: P.number, class: \"tok-number\" },\n  { tag: [P.regexp, P.escape, P.special(P.string)], class: \"tok-string2\" },\n  { tag: P.variableName, class: \"tok-variableName\" },\n  { tag: P.local(P.variableName), class: \"tok-variableName tok-local\" },\n  { tag: P.definition(P.variableName), class: \"tok-variableName tok-definition\" },\n  { tag: P.special(P.variableName), class: \"tok-variableName2\" },\n  { tag: P.definition(P.propertyName), class: \"tok-propertyName tok-definition\" },\n  { tag: P.typeName, class: \"tok-typeName\" },\n  { tag: P.namespace, class: \"tok-namespace\" },\n  { tag: P.className, class: \"tok-className\" },\n  { tag: P.macroName, class: \"tok-macroName\" },\n  { tag: P.propertyName, class: \"tok-propertyName\" },\n  { tag: P.operator, class: \"tok-operator\" },\n  { tag: P.comment, class: \"tok-comment\" },\n  { tag: P.meta, class: \"tok-meta\" },\n  { tag: P.invalid, class: \"tok-invalid\" },\n  { tag: P.punctuation, class: \"tok-punctuation\" }\n]);\nvar Zf;\nconst Oo = /* @__PURE__ */ new Re();\nfunction sx(t) {\n  return ve.define({\n    combine: t ? (e) => e.concat(t) : void 0\n  });\n}\nconst gg = /* @__PURE__ */ new Re();\nclass ur {\n  /**\n  Construct a language object. If you need to invoke this\n  directly, first define a data facet with\n  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then\n  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it\n  to the language's outer syntax node.\n  */\n  constructor(e, n, r = [], i = \"\") {\n    this.data = e, this.name = i, Ye.prototype.hasOwnProperty(\"tree\") || Object.defineProperty(Ye.prototype, \"tree\", { get() {\n      return un(this);\n    } }), this.parser = n, this.extension = [\n      Uo.of(this),\n      Ye.languageData.of((s, o, a) => {\n        let l = jv(s, o, a), c = l.type.prop(Oo);\n        if (!c)\n          return [];\n        let u = s.facet(c), d = l.type.prop(gg);\n        if (d) {\n          let f = l.resolve(o - l.from, a);\n          for (let h of d)\n            if (h.test(f, s)) {\n              let p = s.facet(h.facet);\n              return h.type == \"replace\" ? p : p.concat(u);\n            }\n        }\n        return u;\n      })\n    ].concat(r);\n  }\n  /**\n  Query whether this language is active at the given position.\n  */\n  isActiveAt(e, n, r = -1) {\n    return jv(e, n, r).type.prop(Oo) == this.data;\n  }\n  /**\n  Find the document regions that were parsed using this language.\n  The returned regions will _include_ any nested languages rooted\n  in this language, when those exist.\n  */\n  findRegions(e) {\n    let n = e.facet(Uo);\n    if ((n == null ? void 0 : n.data) == this.data)\n      return [{ from: 0, to: e.doc.length }];\n    if (!n || !n.allowsNesting)\n      return [];\n    let r = [], i = (s, o) => {\n      if (s.prop(Oo) == this.data) {\n        r.push({ from: o, to: o + s.length });\n        return;\n      }\n      let a = s.prop(Re.mounted);\n      if (a) {\n        if (a.tree.prop(Oo) == this.data) {\n          if (a.overlay)\n            for (let l of a.overlay)\n              r.push({ from: l.from + o, to: l.to + o });\n          else\n            r.push({ from: o, to: o + s.length });\n          return;\n        } else if (a.overlay) {\n          let l = r.length;\n          if (i(a.tree, a.overlay[0].from + o), r.length > l)\n            return;\n        }\n      }\n      for (let l = 0; l < s.children.length; l++) {\n        let c = s.children[l];\n        c instanceof gt && i(c, s.positions[l] + o);\n      }\n    };\n    return i(un(e), 0), r;\n  }\n  /**\n  Indicates whether this language allows nested languages. The\n  default implementation returns true.\n  */\n  get allowsNesting() {\n    return !0;\n  }\n}\nur.setState = /* @__PURE__ */ ot.define();\nfunction jv(t, e, n) {\n  let r = t.facet(Uo), i = un(t).topNode;\n  if (!r || r.allowsNesting)\n    for (let s = i; s; s = s.enter(e, n, lt.ExcludeBuffers))\n      s.type.isTop && (i = s);\n  return i;\n}\nclass cs extends ur {\n  constructor(e, n, r) {\n    super(e, n, [], r), this.parser = n;\n  }\n  /**\n  Define a language from a parser.\n  */\n  static define(e) {\n    let n = sx(e.languageData);\n    return new cs(n, e.parser.configure({\n      props: [Oo.add((r) => r.isTop ? n : void 0)]\n    }), e.name);\n  }\n  /**\n  Create a new instance of this language with a reconfigured\n  version of its parser and optionally a new name.\n  */\n  configure(e, n) {\n    return new cs(this.data, this.parser.configure(e), n || this.name);\n  }\n  get allowsNesting() {\n    return this.parser.hasWrappers();\n  }\n}\nfunction un(t) {\n  let e = t.field(ur.state, !1);\n  return e ? e.tree : gt.empty;\n}\nclass MD {\n  /**\n  Create an input object for the given document.\n  */\n  constructor(e) {\n    this.doc = e, this.cursorPos = 0, this.string = \"\", this.cursor = e.iter();\n  }\n  get length() {\n    return this.doc.length;\n  }\n  syncTo(e) {\n    return this.string = this.cursor.next(e - this.cursorPos).value, this.cursorPos = e + this.string.length, this.cursorPos - this.string.length;\n  }\n  chunk(e) {\n    return this.syncTo(e), this.string;\n  }\n  get lineChunks() {\n    return !0;\n  }\n  read(e, n) {\n    let r = this.cursorPos - this.string.length;\n    return e < r || n >= this.cursorPos ? this.doc.sliceString(e, n) : this.string.slice(e - r, n - r);\n  }\n}\nlet wa = null;\nclass Lu {\n  constructor(e, n, r = [], i, s, o, a, l) {\n    this.parser = e, this.state = n, this.fragments = r, this.tree = i, this.treeLen = s, this.viewport = o, this.skipped = a, this.scheduleOn = l, this.parse = null, this.tempSkipped = [];\n  }\n  /**\n  @internal\n  */\n  static create(e, n, r) {\n    return new Lu(e, n, [], gt.empty, 0, r, [], null);\n  }\n  startParse() {\n    return this.parser.startParse(new MD(this.state.doc), this.fragments);\n  }\n  /**\n  @internal\n  */\n  work(e, n) {\n    return n != null && n >= this.state.doc.length && (n = void 0), this.tree != gt.empty && this.isDone(n ?? this.state.doc.length) ? (this.takeTree(), !0) : this.withContext(() => {\n      var r;\n      if (typeof e == \"number\") {\n        let i = Date.now() + e;\n        e = () => Date.now() > i;\n      }\n      for (this.parse || (this.parse = this.startParse()), n != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > n) && n < this.state.doc.length && this.parse.stopAt(n); ; ) {\n        let i = this.parse.advance();\n        if (i)\n          if (this.fragments = this.withoutTempSkipped(si.addTree(i, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (r = this.parse.stoppedAt) !== null && r !== void 0 ? r : this.state.doc.length, this.tree = i, this.parse = null, this.treeLen < (n ?? this.state.doc.length))\n            this.parse = this.startParse();\n          else\n            return !0;\n        if (e())\n          return !1;\n      }\n    });\n  }\n  /**\n  @internal\n  */\n  takeTree() {\n    let e, n;\n    this.parse && (e = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > e) && this.parse.stopAt(e), this.withContext(() => {\n      for (; !(n = this.parse.advance()); )\n        ;\n    }), this.treeLen = e, this.tree = n, this.fragments = this.withoutTempSkipped(si.addTree(this.tree, this.fragments, !0)), this.parse = null);\n  }\n  withContext(e) {\n    let n = wa;\n    wa = this;\n    try {\n      return e();\n    } finally {\n      wa = n;\n    }\n  }\n  withoutTempSkipped(e) {\n    for (let n; n = this.tempSkipped.pop(); )\n      e = Bv(e, n.from, n.to);\n    return e;\n  }\n  /**\n  @internal\n  */\n  changes(e, n) {\n    let { fragments: r, tree: i, treeLen: s, viewport: o, skipped: a } = this;\n    if (this.takeTree(), !e.empty) {\n      let l = [];\n      if (e.iterChangedRanges((c, u, d, f) => l.push({ fromA: c, toA: u, fromB: d, toB: f })), r = si.applyChanges(r, l), i = gt.empty, s = 0, o = { from: e.mapPos(o.from, -1), to: e.mapPos(o.to, 1) }, this.skipped.length) {\n        a = [];\n        for (let c of this.skipped) {\n          let u = e.mapPos(c.from, 1), d = e.mapPos(c.to, -1);\n          u < d && a.push({ from: u, to: d });\n        }\n      }\n    }\n    return new Lu(this.parser, n, r, i, s, o, a, this.scheduleOn);\n  }\n  /**\n  @internal\n  */\n  updateViewport(e) {\n    if (this.viewport.from == e.from && this.viewport.to == e.to)\n      return !1;\n    this.viewport = e;\n    let n = this.skipped.length;\n    for (let r = 0; r < this.skipped.length; r++) {\n      let { from: i, to: s } = this.skipped[r];\n      i < e.to && s > e.from && (this.fragments = Bv(this.fragments, i, s), this.skipped.splice(r--, 1));\n    }\n    return this.skipped.length >= n ? !1 : (this.reset(), !0);\n  }\n  /**\n  @internal\n  */\n  reset() {\n    this.parse && (this.takeTree(), this.parse = null);\n  }\n  /**\n  Notify the parse scheduler that the given region was skipped\n  because it wasn't in view, and the parse should be restarted\n  when it comes into view.\n  */\n  skipUntilInView(e, n) {\n    this.skipped.push({ from: e, to: n });\n  }\n  /**\n  Returns a parser intended to be used as placeholder when\n  asynchronously loading a nested parser. It'll skip its input and\n  mark it as not-really-parsed, so that the next update will parse\n  it again.\n  \n  When `until` is given, a reparse will be scheduled when that\n  promise resolves.\n  */\n  static getSkippingParser(e) {\n    return new class extends tx {\n      createParse(n, r, i) {\n        let s = i[0].from, o = i[i.length - 1].to;\n        return {\n          parsedPos: s,\n          advance() {\n            let l = wa;\n            if (l) {\n              for (let c of i)\n                l.tempSkipped.push(c);\n              e && (l.scheduleOn = l.scheduleOn ? Promise.all([l.scheduleOn, e]) : e);\n            }\n            return this.parsedPos = o, new gt(On.none, [], [], o - s);\n          },\n          stoppedAt: null,\n          stopAt() {\n          }\n        };\n      }\n    }();\n  }\n  /**\n  @internal\n  */\n  isDone(e) {\n    e = Math.min(e, this.state.doc.length);\n    let n = this.fragments;\n    return this.treeLen >= e && n.length && n[0].from == 0 && n[0].to >= e;\n  }\n  /**\n  Get the context for the current parse, or `null` if no editor\n  parse is in progress.\n  */\n  static get() {\n    return wa;\n  }\n}\nfunction Bv(t, e, n) {\n  return si.applyChanges(t, [{ fromA: e, toA: n, fromB: e, toB: n }]);\n}\nclass Lo {\n  constructor(e) {\n    this.context = e, this.tree = e.tree;\n  }\n  apply(e) {\n    if (!e.docChanged && this.tree == this.context.tree)\n      return this;\n    let n = this.context.changes(e.changes, e.state), r = this.context.treeLen == e.startState.doc.length ? void 0 : Math.max(e.changes.mapPos(this.context.treeLen), n.viewport.to);\n    return n.work(20, r) || n.takeTree(), new Lo(n);\n  }\n  static init(e) {\n    let n = Math.min(3e3, e.doc.length), r = Lu.create(e.facet(Uo).parser, e, { from: 0, to: n });\n    return r.work(20, n) || r.takeTree(), new Lo(r);\n  }\n}\nur.state = /* @__PURE__ */ yr.define({\n  create: Lo.init,\n  update(t, e) {\n    for (let n of e.effects)\n      if (n.is(ur.setState))\n        return n.value;\n    return e.startState.facet(Uo) != e.state.facet(Uo) ? Lo.init(e.state) : t.apply(e);\n  }\n});\nlet ox = (t) => {\n  let e = setTimeout(\n    () => t(),\n    500\n    /* Work.MaxPause */\n  );\n  return () => clearTimeout(e);\n};\ntypeof requestIdleCallback < \"u\" && (ox = (t) => {\n  let e = -1, n = setTimeout(\n    () => {\n      e = requestIdleCallback(t, {\n        timeout: 400\n        /* Work.MinPause */\n      });\n    },\n    100\n    /* Work.MinPause */\n  );\n  return () => e < 0 ? clearTimeout(n) : cancelIdleCallback(e);\n});\nconst Vf = typeof navigator < \"u\" && (!((Zf = navigator.scheduling) === null || Zf === void 0) && Zf.isInputPending) ? () => navigator.scheduling.isInputPending() : null, XD = /* @__PURE__ */ rr.fromClass(class {\n  constructor(e) {\n    this.view = e, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();\n  }\n  update(e) {\n    let n = this.view.state.field(ur.state).context;\n    (n.updateViewport(e.view.viewport) || this.view.viewport.to > n.treeLen) && this.scheduleWork(), (e.docChanged || e.selectionSet) && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(n);\n  }\n  scheduleWork() {\n    if (this.working)\n      return;\n    let { state: e } = this.view, n = e.field(ur.state);\n    (n.tree != n.context.tree || !n.context.isDone(e.doc.length)) && (this.working = ox(this.work));\n  }\n  work(e) {\n    this.working = null;\n    let n = Date.now();\n    if (this.chunkEnd < n && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = n + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)\n      return;\n    let { state: r, viewport: { to: i } } = this.view, s = r.field(ur.state);\n    if (s.tree == s.context.tree && s.context.isDone(\n      i + 1e5\n      /* Work.MaxParseAhead */\n    ))\n      return;\n    let o = Date.now() + Math.min(this.chunkBudget, 100, e && !Vf ? Math.max(25, e.timeRemaining() - 5) : 1e9), a = s.context.treeLen < i && r.doc.length > i + 1e3, l = s.context.work(() => Vf && Vf() || Date.now() > o, i + (a ? 0 : 1e5));\n    this.chunkBudget -= Date.now() - n, (l || this.chunkBudget <= 0) && (s.context.takeTree(), this.view.dispatch({ effects: ur.setState.of(new Lo(s.context)) })), this.chunkBudget > 0 && !(l && !a) && this.scheduleWork(), this.checkAsyncSchedule(s.context);\n  }\n  checkAsyncSchedule(e) {\n    e.scheduleOn && (this.workScheduled++, e.scheduleOn.then(() => this.scheduleWork()).catch((n) => hr(this.view.state, n)).then(() => this.workScheduled--), e.scheduleOn = null);\n  }\n  destroy() {\n    this.working && this.working();\n  }\n  isWorking() {\n    return !!(this.working || this.workScheduled > 0);\n  }\n}, {\n  eventHandlers: { focus() {\n    this.scheduleWork();\n  } }\n}), Uo = /* @__PURE__ */ ve.define({\n  combine(t) {\n    return t.length ? t[0] : null;\n  },\n  enables: (t) => [\n    ur.state,\n    XD,\n    Se.contentAttributes.compute([t], (e) => {\n      let n = e.facet(t);\n      return n && n.name ? { \"data-language\": n.name } : {};\n    })\n  ]\n});\nclass Gl {\n  /**\n  Create a language support object.\n  */\n  constructor(e, n = []) {\n    this.language = e, this.support = n, this.extension = [e, n];\n  }\n}\nconst jD = /* @__PURE__ */ ve.define(), zd = /* @__PURE__ */ ve.define({\n  combine: (t) => {\n    if (!t.length)\n      return \"  \";\n    let e = t[0];\n    if (!e || /\\S/.test(e) || Array.from(e).some((n) => n != e[0]))\n      throw new Error(\"Invalid indent unit: \" + JSON.stringify(t[0]));\n    return e;\n  }\n});\nfunction ax(t) {\n  let e = t.facet(zd);\n  return e.charCodeAt(0) == 9 ? t.tabSize * e.length : e.length;\n}\nfunction lx(t, e) {\n  let n = \"\", r = t.tabSize, i = t.facet(zd)[0];\n  if (i == \"\t\") {\n    for (; e >= r; )\n      n += \"\t\", e -= r;\n    i = \" \";\n  }\n  for (let s = 0; s < e; s++)\n    n += i;\n  return n;\n}\nfunction BD(t, e) {\n  t instanceof Ye && (t = new cx(t));\n  for (let r of t.state.facet(jD)) {\n    let i = r(t, e);\n    if (i !== void 0)\n      return i;\n  }\n  let n = un(t.state);\n  return n.length >= e ? LD(t, n, e) : null;\n}\nclass cx {\n  /**\n  Create an indent context.\n  */\n  constructor(e, n = {}) {\n    this.state = e, this.options = n, this.unit = ax(e);\n  }\n  /**\n  Get a description of the line at the given position, taking\n  [simulated line\n  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n  into account. If there is such a break at `pos`, the `bias`\n  argument determines whether the part of the line line before or\n  after the break is used.\n  */\n  lineAt(e, n = 1) {\n    let r = this.state.doc.lineAt(e), { simulateBreak: i, simulateDoubleBreak: s } = this.options;\n    return i != null && i >= r.from && i <= r.to ? s && i == e ? { text: \"\", from: e } : (n < 0 ? i < e : i <= e) ? { text: r.text.slice(i - r.from), from: i } : { text: r.text.slice(0, i - r.from), from: r.from } : r;\n  }\n  /**\n  Get the text directly after `pos`, either the entire line\n  or the next 100 characters, whichever is shorter.\n  */\n  textAfterPos(e, n = 1) {\n    if (this.options.simulateDoubleBreak && e == this.options.simulateBreak)\n      return \"\";\n    let { text: r, from: i } = this.lineAt(e, n);\n    return r.slice(e - i, Math.min(r.length, e + 100 - i));\n  }\n  /**\n  Find the column for the given position.\n  */\n  column(e, n = 1) {\n    let { text: r, from: i } = this.lineAt(e, n), s = this.countColumn(r, e - i), o = this.options.overrideIndentation ? this.options.overrideIndentation(i) : -1;\n    return o > -1 && (s += o - this.countColumn(r, r.search(/\\S|$/))), s;\n  }\n  /**\n  Find the column position (taking tabs into account) of the given\n  position in the given string.\n  */\n  countColumn(e, n = e.length) {\n    return ig(e, this.state.tabSize, n);\n  }\n  /**\n  Find the indentation column of the line at the given point.\n  */\n  lineIndent(e, n = 1) {\n    let { text: r, from: i } = this.lineAt(e, n), s = this.options.overrideIndentation;\n    if (s) {\n      let o = s(i);\n      if (o > -1)\n        return o;\n    }\n    return this.countColumn(r, r.search(/\\S|$/));\n  }\n  /**\n  Returns the [simulated line\n  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n  for this context, if any.\n  */\n  get simulatedBreak() {\n    return this.options.simulateBreak || null;\n  }\n}\nconst sa = /* @__PURE__ */ new Re();\nfunction LD(t, e, n) {\n  let r = e.resolveStack(n), i = r.node.enterUnfinishedNodesBefore(n);\n  if (i != r.node) {\n    let s = [];\n    for (let o = i; o != r.node; o = o.parent)\n      s.push(o);\n    for (let o = s.length - 1; o >= 0; o--)\n      r = { node: s[o], next: r };\n  }\n  return ux(r, t, n);\n}\nfunction ux(t, e, n) {\n  for (let r = t; r; r = r.next) {\n    let i = qD(r.node);\n    if (i)\n      return i(mg.create(e, n, r));\n  }\n  return 0;\n}\nfunction UD(t) {\n  return t.pos == t.options.simulateBreak && t.options.simulateDoubleBreak;\n}\nfunction qD(t) {\n  let e = t.type.prop(sa);\n  if (e)\n    return e;\n  let n = t.firstChild, r;\n  if (n && (r = n.type.prop(Re.closedBy))) {\n    let i = t.lastChild, s = i && r.indexOf(i.name) > -1;\n    return (o) => dx(o, !0, 1, void 0, s && !UD(o) ? i.from : void 0);\n  }\n  return t.parent == null ? YD : null;\n}\nfunction YD() {\n  return 0;\n}\nclass mg extends cx {\n  constructor(e, n, r) {\n    super(e.state, e.options), this.base = e, this.pos = n, this.context = r;\n  }\n  /**\n  The syntax tree node to which the indentation strategy\n  applies.\n  */\n  get node() {\n    return this.context.node;\n  }\n  /**\n  @internal\n  */\n  static create(e, n, r) {\n    return new mg(e, n, r);\n  }\n  /**\n  Get the text directly after `this.pos`, either the entire line\n  or the next 100 characters, whichever is shorter.\n  */\n  get textAfter() {\n    return this.textAfterPos(this.pos);\n  }\n  /**\n  Get the indentation at the reference line for `this.node`, which\n  is the line on which it starts, unless there is a node that is\n  _not_ a parent of this node covering the start of that line. If\n  so, the line at the start of that node is tried, again skipping\n  on if it is covered by another such node.\n  */\n  get baseIndent() {\n    return this.baseIndentFor(this.node);\n  }\n  /**\n  Get the indentation for the reference line of the given node\n  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).\n  */\n  baseIndentFor(e) {\n    let n = this.state.doc.lineAt(e.from);\n    for (; ; ) {\n      let r = e.resolve(n.from);\n      for (; r.parent && r.parent.from == r.from; )\n        r = r.parent;\n      if (zD(r, e))\n        break;\n      n = this.state.doc.lineAt(r.from);\n    }\n    return this.lineIndent(n.from);\n  }\n  /**\n  Continue looking for indentations in the node's parent nodes,\n  and return the result of that.\n  */\n  continue() {\n    return ux(this.context.next, this.base, this.pos);\n  }\n}\nfunction zD(t, e) {\n  for (let n = e; n; n = n.parent)\n    if (t == n)\n      return !0;\n  return !1;\n}\nfunction HD(t) {\n  let e = t.node, n = e.childAfter(e.from), r = e.lastChild;\n  if (!n)\n    return null;\n  let i = t.options.simulateBreak, s = t.state.doc.lineAt(n.from), o = i == null || i <= s.from ? s.to : Math.min(s.to, i);\n  for (let a = n.to; ; ) {\n    let l = e.childAfter(a);\n    if (!l || l == r)\n      return null;\n    if (!l.type.isSkipped)\n      return l.from < o ? n : null;\n    a = l.to;\n  }\n}\nfunction xp({ closing: t, align: e = !0, units: n = 1 }) {\n  return (r) => dx(r, e, n, t);\n}\nfunction dx(t, e, n, r, i) {\n  let s = t.textAfter, o = s.match(/^\\s*/)[0].length, a = r && s.slice(o, o + r.length) == r || i == t.pos + o, l = e ? HD(t) : null;\n  return l ? a ? t.column(l.from) : t.column(l.to) : t.baseIndent + (a ? 0 : t.unit * n);\n}\nconst FD = (t) => t.baseIndent;\nfunction $o({ except: t, units: e = 1 } = {}) {\n  return (n) => {\n    let r = t && t.test(n.textAfter);\n    return n.baseIndent + (r ? 0 : e * n.unit);\n  };\n}\nconst GD = 200;\nfunction KD() {\n  return Ye.transactionFilter.of((t) => {\n    if (!t.docChanged || !t.isUserEvent(\"input.type\") && !t.isUserEvent(\"input.complete\"))\n      return t;\n    let e = t.startState.languageDataAt(\"indentOnInput\", t.startState.selection.main.head);\n    if (!e.length)\n      return t;\n    let n = t.newDoc, { head: r } = t.newSelection.main, i = n.lineAt(r);\n    if (r > i.from + GD)\n      return t;\n    let s = n.sliceString(i.from, r);\n    if (!e.some((c) => c.test(s)))\n      return t;\n    let { state: o } = t, a = -1, l = [];\n    for (let { head: c } of o.selection.ranges) {\n      let u = o.doc.lineAt(c);\n      if (u.from == a)\n        continue;\n      a = u.from;\n      let d = BD(o, u.from);\n      if (d == null)\n        continue;\n      let f = /^\\s*/.exec(u.text)[0], h = lx(o, d);\n      f != h && l.push({ from: u.from, to: u.from + f.length, insert: h });\n    }\n    return l.length ? [t, { changes: l, sequential: !0 }] : t;\n  });\n}\nconst Kl = /* @__PURE__ */ new Re();\nfunction Hd(t) {\n  let e = t.firstChild, n = t.lastChild;\n  return e && e.to < n.from ? { from: e.to, to: n.type.isError ? t.to : n.from } : null;\n}\nclass Jl {\n  constructor(e, n) {\n    this.specs = e;\n    let r;\n    function i(a) {\n      let l = ss.newName();\n      return (r || (r = /* @__PURE__ */ Object.create(null)))[\".\" + l] = a, l;\n    }\n    const s = typeof n.all == \"string\" ? n.all : n.all ? i(n.all) : void 0, o = n.scope;\n    this.scope = o instanceof ur ? (a) => a.prop(Oo) == o.data : o ? (a) => a == o : void 0, this.style = ix(e.map((a) => ({\n      tag: a.tag,\n      class: a.class || i(Object.assign({}, a, { tag: null }))\n    })), {\n      all: s\n    }).style, this.module = r ? new ss(r) : null, this.themeType = n.themeType;\n  }\n  /**\n  Create a highlighter style that associates the given styles to\n  the given tags. The specs must be objects that hold a style tag\n  or array of tags in their `tag` property, and either a single\n  `class` property providing a static CSS class (for highlighter\n  that rely on external styling), or a\n  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n  set of CSS properties (which define the styling for those tags).\n  \n  The CSS rules created for a highlighter will be emitted in the\n  order of the spec's properties. That means that for elements that\n  have multiple tags associated with them, styles defined further\n  down in the list will have a higher CSS precedence than styles\n  defined earlier.\n  */\n  static define(e, n) {\n    return new Jl(e, n || {});\n  }\n}\nconst Pp = /* @__PURE__ */ ve.define(), fx = /* @__PURE__ */ ve.define({\n  combine(t) {\n    return t.length ? [t[0]] : null;\n  }\n});\nfunction If(t) {\n  let e = t.facet(Pp);\n  return e.length ? e : t.facet(fx);\n}\nfunction hx(t, e) {\n  let n = [eZ], r;\n  return t instanceof Jl && (t.module && n.push(Se.styleModule.of(t.module)), r = t.themeType), e != null && e.fallback ? n.push(fx.of(t)) : r ? n.push(Pp.computeN([Se.darkTheme], (i) => i.facet(Se.darkTheme) == (r == \"dark\") ? [t] : [])) : n.push(Pp.of(t)), n;\n}\nclass JD {\n  constructor(e) {\n    this.markCache = /* @__PURE__ */ Object.create(null), this.tree = un(e.state), this.decorations = this.buildDeco(e, If(e.state)), this.decoratedTo = e.viewport.to;\n  }\n  update(e) {\n    let n = un(e.state), r = If(e.state), i = r != If(e.startState), { viewport: s } = e.view, o = e.changes.mapPos(this.decoratedTo, 1);\n    n.length < s.to && !i && n.type == this.tree.type && o >= s.to ? (this.decorations = this.decorations.map(e.changes), this.decoratedTo = o) : (n != this.tree || e.viewportChanged || i) && (this.tree = n, this.decorations = this.buildDeco(e.view, r), this.decoratedTo = s.to);\n  }\n  buildDeco(e, n) {\n    if (!n || !this.tree.length)\n      return Je.none;\n    let r = new jo();\n    for (let { from: i, to: s } of e.visibleRanges)\n      VD(this.tree, n, (o, a, l) => {\n        r.add(o, a, this.markCache[l] || (this.markCache[l] = Je.mark({ class: l })));\n      }, i, s);\n    return r.finish();\n  }\n}\nconst eZ = /* @__PURE__ */ zl.high(/* @__PURE__ */ rr.fromClass(JD, {\n  decorations: (t) => t.decorations\n})), tZ = /* @__PURE__ */ Jl.define([\n  {\n    tag: P.meta,\n    color: \"#404740\"\n  },\n  {\n    tag: P.link,\n    textDecoration: \"underline\"\n  },\n  {\n    tag: P.heading,\n    textDecoration: \"underline\",\n    fontWeight: \"bold\"\n  },\n  {\n    tag: P.emphasis,\n    fontStyle: \"italic\"\n  },\n  {\n    tag: P.strong,\n    fontWeight: \"bold\"\n  },\n  {\n    tag: P.strikethrough,\n    textDecoration: \"line-through\"\n  },\n  {\n    tag: P.keyword,\n    color: \"#708\"\n  },\n  {\n    tag: [P.atom, P.bool, P.url, P.contentSeparator, P.labelName],\n    color: \"#219\"\n  },\n  {\n    tag: [P.literal, P.inserted],\n    color: \"#164\"\n  },\n  {\n    tag: [P.string, P.deleted],\n    color: \"#a11\"\n  },\n  {\n    tag: [P.regexp, P.escape, /* @__PURE__ */ P.special(P.string)],\n    color: \"#e40\"\n  },\n  {\n    tag: /* @__PURE__ */ P.definition(P.variableName),\n    color: \"#00f\"\n  },\n  {\n    tag: /* @__PURE__ */ P.local(P.variableName),\n    color: \"#30a\"\n  },\n  {\n    tag: [P.typeName, P.namespace],\n    color: \"#085\"\n  },\n  {\n    tag: P.className,\n    color: \"#167\"\n  },\n  {\n    tag: [/* @__PURE__ */ P.special(P.variableName), P.macroName],\n    color: \"#256\"\n  },\n  {\n    tag: /* @__PURE__ */ P.definition(P.propertyName),\n    color: \"#00c\"\n  },\n  {\n    tag: P.comment,\n    color: \"#940\"\n  },\n  {\n    tag: P.invalid,\n    color: \"#f00\"\n  }\n]), nZ = /* @__PURE__ */ Se.baseTheme({\n  \"&.cm-focused .cm-matchingBracket\": { backgroundColor: \"#328c8252\" },\n  \"&.cm-focused .cm-nonmatchingBracket\": { backgroundColor: \"#bb555544\" }\n}), px = 1e4, Ox = \"()[]{}\", gx = /* @__PURE__ */ ve.define({\n  combine(t) {\n    return Ud(t, {\n      afterCursor: !0,\n      brackets: Ox,\n      maxScanDistance: px,\n      renderMatch: sZ\n    });\n  }\n}), rZ = /* @__PURE__ */ Je.mark({ class: \"cm-matchingBracket\" }), iZ = /* @__PURE__ */ Je.mark({ class: \"cm-nonmatchingBracket\" });\nfunction sZ(t) {\n  let e = [], n = t.matched ? rZ : iZ;\n  return e.push(n.range(t.start.from, t.start.to)), t.end && e.push(n.range(t.end.from, t.end.to)), e;\n}\nconst oZ = /* @__PURE__ */ yr.define({\n  create() {\n    return Je.none;\n  },\n  update(t, e) {\n    if (!e.docChanged && !e.selection)\n      return t;\n    let n = [], r = e.state.facet(gx);\n    for (let i of e.state.selection.ranges) {\n      if (!i.empty)\n        continue;\n      let s = Ic(e.state, i.head, -1, r) || i.head > 0 && Ic(e.state, i.head - 1, 1, r) || r.afterCursor && (Ic(e.state, i.head, 1, r) || i.head < e.state.doc.length && Ic(e.state, i.head + 1, -1, r));\n      s && (n = n.concat(r.renderMatch(s, e.state)));\n    }\n    return Je.set(n, !0);\n  },\n  provide: (t) => Se.decorations.from(t)\n}), aZ = [\n  oZ,\n  nZ\n];\nfunction lZ(t = {}) {\n  return [gx.of(t), aZ];\n}\nconst mx = /* @__PURE__ */ new Re();\nfunction _p(t, e, n) {\n  let r = t.prop(e < 0 ? Re.openedBy : Re.closedBy);\n  if (r)\n    return r;\n  if (t.name.length == 1) {\n    let i = n.indexOf(t.name);\n    if (i > -1 && i % 2 == (e < 0 ? 1 : 0))\n      return [n[i + e]];\n  }\n  return null;\n}\nfunction Tp(t) {\n  let e = t.type.prop(mx);\n  return e ? e(t.node) : t;\n}\nfunction Ic(t, e, n, r = {}) {\n  let i = r.maxScanDistance || px, s = r.brackets || Ox, o = un(t), a = o.resolveInner(e, n);\n  for (let l = a; l; l = l.parent) {\n    let c = _p(l.type, n, s);\n    if (c && l.from < l.to) {\n      let u = Tp(l);\n      if (u && (n > 0 ? e >= u.from && e < u.to : e > u.from && e <= u.to))\n        return cZ(t, e, n, l, u, c, s);\n    }\n  }\n  return uZ(t, e, n, o, a.type, i, s);\n}\nfunction cZ(t, e, n, r, i, s, o) {\n  let a = r.parent, l = { from: i.from, to: i.to }, c = 0, u = a == null ? void 0 : a.cursor();\n  if (u && (n < 0 ? u.childBefore(r.from) : u.childAfter(r.to)))\n    do\n      if (n < 0 ? u.to <= r.from : u.from >= r.to) {\n        if (c == 0 && s.indexOf(u.type.name) > -1 && u.from < u.to) {\n          let d = Tp(u);\n          return { start: l, end: d ? { from: d.from, to: d.to } : void 0, matched: !0 };\n        } else if (_p(u.type, n, o))\n          c++;\n        else if (_p(u.type, -n, o)) {\n          if (c == 0) {\n            let d = Tp(u);\n            return {\n              start: l,\n              end: d && d.from < d.to ? { from: d.from, to: d.to } : void 0,\n              matched: !1\n            };\n          }\n          c--;\n        }\n      }\n    while (n < 0 ? u.prevSibling() : u.nextSibling());\n  return { start: l, matched: !1 };\n}\nfunction uZ(t, e, n, r, i, s, o) {\n  let a = n < 0 ? t.sliceDoc(e - 1, e) : t.sliceDoc(e, e + 1), l = o.indexOf(a);\n  if (l < 0 || l % 2 == 0 != n > 0)\n    return null;\n  let c = { from: n < 0 ? e - 1 : e, to: n > 0 ? e + 1 : e }, u = t.doc.iterRange(e, n > 0 ? t.doc.length : 0), d = 0;\n  for (let f = 0; !u.next().done && f <= s; ) {\n    let h = u.value;\n    n < 0 && (f += h.length);\n    let p = e + f * n;\n    for (let O = n > 0 ? 0 : h.length - 1, m = n > 0 ? h.length : -1; O != m; O += n) {\n      let y = o.indexOf(h[O]);\n      if (!(y < 0 || r.resolveInner(p + O, 1).type != i))\n        if (y % 2 == 0 == n > 0)\n          d++;\n        else {\n          if (d == 1)\n            return { start: c, end: { from: p + O, to: p + O + 1 }, matched: y >> 1 == l >> 1 };\n          d--;\n        }\n    }\n    n > 0 && (f += h.length);\n  }\n  return u.done ? { start: c, matched: !1 } : null;\n}\nconst dZ = /* @__PURE__ */ Object.create(null), Lv = [On.none], Uv = [], qv = /* @__PURE__ */ Object.create(null), fZ = /* @__PURE__ */ Object.create(null);\nfor (let [t, e] of [\n  [\"variable\", \"variableName\"],\n  [\"variable-2\", \"variableName.special\"],\n  [\"string-2\", \"string.special\"],\n  [\"def\", \"variableName.definition\"],\n  [\"tag\", \"tagName\"],\n  [\"attribute\", \"attributeName\"],\n  [\"type\", \"typeName\"],\n  [\"builtin\", \"variableName.standard\"],\n  [\"qualifier\", \"modifier\"],\n  [\"error\", \"invalid\"],\n  [\"header\", \"heading\"],\n  [\"property\", \"propertyName\"]\n])\n  fZ[t] = /* @__PURE__ */ hZ(dZ, e);\nfunction Wf(t, e) {\n  Uv.indexOf(t) > -1 || (Uv.push(t), console.warn(e));\n}\nfunction hZ(t, e) {\n  let n = [];\n  for (let a of e.split(\" \")) {\n    let l = [];\n    for (let c of a.split(\".\")) {\n      let u = t[c] || P[c];\n      u ? typeof u == \"function\" ? l.length ? l = l.map(u) : Wf(c, `Modifier ${c} used at start of tag`) : l.length ? Wf(c, `Tag ${c} used as modifier`) : l = Array.isArray(u) ? u : [u] : Wf(c, `Unknown highlighting tag ${c}`);\n    }\n    for (let c of l)\n      n.push(c);\n  }\n  if (!n.length)\n    return 0;\n  let r = e.replace(/ /g, \"_\"), i = r + \" \" + n.map((a) => a.id), s = qv[i];\n  if (s)\n    return s.id;\n  let o = qv[i] = On.define({\n    id: Lv.length,\n    name: r,\n    props: [ia({ [r]: n })]\n  });\n  return Lv.push(o), o.id;\n}\nQt.RTL, Qt.LTR;\nclass bx {\n  /**\n  Create a new completion context. (Mostly useful for testing\n  completion sources—in the editor, the extension will create\n  these for you.)\n  */\n  constructor(e, n, r) {\n    this.state = e, this.pos = n, this.explicit = r, this.abortListeners = [];\n  }\n  /**\n  Get the extent, content, and (if there is a token) type of the\n  token before `this.pos`.\n  */\n  tokenBefore(e) {\n    let n = un(this.state).resolveInner(this.pos, -1);\n    for (; n && e.indexOf(n.name) < 0; )\n      n = n.parent;\n    return n ? {\n      from: n.from,\n      to: this.pos,\n      text: this.state.sliceDoc(n.from, this.pos),\n      type: n.type\n    } : null;\n  }\n  /**\n  Get the match of the given expression directly before the\n  cursor.\n  */\n  matchBefore(e) {\n    let n = this.state.doc.lineAt(this.pos), r = Math.max(n.from, this.pos - 250), i = n.text.slice(r - n.from, this.pos - n.from), s = i.search(yx(e, !1));\n    return s < 0 ? null : { from: r + s, to: this.pos, text: i.slice(s) };\n  }\n  /**\n  Yields true when the query has been aborted. Can be useful in\n  asynchronous queries to avoid doing work that will be ignored.\n  */\n  get aborted() {\n    return this.abortListeners == null;\n  }\n  /**\n  Allows you to register abort handlers, which will be called when\n  the query is\n  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).\n  */\n  addEventListener(e, n) {\n    e == \"abort\" && this.abortListeners && this.abortListeners.push(n);\n  }\n}\nfunction Yv(t) {\n  let e = Object.keys(t).join(\"\"), n = /\\w/.test(e);\n  return n && (e = e.replace(/\\w/g, \"\")), `[${n ? \"\\\\w\" : \"\"}${e.replace(/[^\\w\\s]/g, \"\\\\$&\")}]`;\n}\nfunction pZ(t) {\n  let e = /* @__PURE__ */ Object.create(null), n = /* @__PURE__ */ Object.create(null);\n  for (let { label: i } of t) {\n    e[i[0]] = !0;\n    for (let s = 1; s < i.length; s++)\n      n[i[s]] = !0;\n  }\n  let r = Yv(e) + Yv(n) + \"*$\";\n  return [new RegExp(\"^\" + r), new RegExp(r)];\n}\nfunction vx(t) {\n  let e = t.map((i) => typeof i == \"string\" ? { label: i } : i), [n, r] = e.every((i) => /^\\w+$/.test(i.label)) ? [/\\w*$/, /\\w+$/] : pZ(e);\n  return (i) => {\n    let s = i.matchBefore(r);\n    return s || i.explicit ? { from: s ? s.from : i.pos, options: e, validFor: n } : null;\n  };\n}\nfunction OZ(t, e) {\n  return (n) => {\n    for (let r = un(n.state).resolveInner(n.pos, -1); r; r = r.parent) {\n      if (t.indexOf(r.name) > -1)\n        return null;\n      if (r.type.isTop)\n        break;\n    }\n    return e(n);\n  };\n}\nclass zv {\n  constructor(e, n, r, i) {\n    this.completion = e, this.source = n, this.match = r, this.score = i;\n  }\n}\nfunction Ji(t) {\n  return t.selection.main.from;\n}\nfunction yx(t, e) {\n  var n;\n  let { source: r } = t, i = e && r[0] != \"^\", s = r[r.length - 1] != \"$\";\n  return !i && !s ? t : new RegExp(`${i ? \"^\" : \"\"}(?:${r})${s ? \"$\" : \"\"}`, (n = t.flags) !== null && n !== void 0 ? n : t.ignoreCase ? \"i\" : \"\");\n}\nconst Sx = /* @__PURE__ */ no.define();\nfunction gZ(t, e, n, r) {\n  let { main: i } = t.selection, s = n - i.from, o = r - i.from;\n  return Object.assign(Object.assign({}, t.changeByRange((a) => a != i && n != r && t.sliceDoc(a.from + s, a.from + o) != t.sliceDoc(n, r) ? { range: a } : {\n    changes: { from: a.from + s, to: r == i.from ? a.to : a.from + o, insert: e },\n    range: ae.cursor(a.from + s + e.length)\n  })), { scrollIntoView: !0, userEvent: \"input.complete\" });\n}\nconst Hv = /* @__PURE__ */ new WeakMap();\nfunction mZ(t) {\n  if (!Array.isArray(t))\n    return t;\n  let e = Hv.get(t);\n  return e || Hv.set(t, e = vx(t)), e;\n}\nconst Uu = /* @__PURE__ */ ot.define(), Sl = /* @__PURE__ */ ot.define();\nclass bZ {\n  constructor(e) {\n    this.pattern = e, this.chars = [], this.folded = [], this.any = [], this.precise = [], this.byWord = [], this.score = 0, this.matched = [];\n    for (let n = 0; n < e.length; ) {\n      let r = nn(e, n), i = cr(r);\n      this.chars.push(r);\n      let s = e.slice(n, n + i), o = s.toUpperCase();\n      this.folded.push(nn(o == s ? s.toLowerCase() : o, 0)), n += i;\n    }\n    this.astral = e.length != this.chars.length;\n  }\n  ret(e, n) {\n    return this.score = e, this.matched = n, !0;\n  }\n  // Matches a given word (completion) against the pattern (input).\n  // Will return a boolean indicating whether there was a match and,\n  // on success, set `this.score` to the score, `this.matched` to an\n  // array of `from, to` pairs indicating the matched parts of `word`.\n  //\n  // The score is a number that is more negative the worse the match\n  // is. See `Penalty` above.\n  match(e) {\n    if (this.pattern.length == 0)\n      return this.ret(-100, []);\n    if (e.length < this.pattern.length)\n      return !1;\n    let { chars: n, folded: r, any: i, precise: s, byWord: o } = this;\n    if (n.length == 1) {\n      let b = nn(e, 0), g = cr(b), v = g == e.length ? 0 : -100;\n      if (b != n[0])\n        if (b == r[0])\n          v += -200;\n        else\n          return !1;\n      return this.ret(v, [0, g]);\n    }\n    let a = e.indexOf(this.pattern);\n    if (a == 0)\n      return this.ret(e.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);\n    let l = n.length, c = 0;\n    if (a < 0) {\n      for (let b = 0, g = Math.min(e.length, 200); b < g && c < l; ) {\n        let v = nn(e, b);\n        (v == n[c] || v == r[c]) && (i[c++] = b), b += cr(v);\n      }\n      if (c < l)\n        return !1;\n    }\n    let u = 0, d = 0, f = !1, h = 0, p = -1, O = -1, m = /[a-z]/.test(e), y = !0;\n    for (let b = 0, g = Math.min(e.length, 200), v = 0; b < g && d < l; ) {\n      let S = nn(e, b);\n      a < 0 && (u < l && S == n[u] && (s[u++] = b), h < l && (S == n[h] || S == r[h] ? (h == 0 && (p = b), O = b + 1, h++) : h = 0));\n      let w, k = S < 255 ? S >= 48 && S <= 57 || S >= 97 && S <= 122 ? 2 : S >= 65 && S <= 90 ? 1 : 0 : (w = Iw(S)) != w.toLowerCase() ? 1 : w != w.toUpperCase() ? 2 : 0;\n      (!b || k == 1 && m || v == 0 && k != 0) && (n[d] == S || r[d] == S && (f = !0) ? o[d++] = b : o.length && (y = !1)), v = k, b += cr(S);\n    }\n    return d == l && o[0] == 0 && y ? this.result(-100 + (f ? -200 : 0), o, e) : h == l && p == 0 ? this.ret(-200 - e.length + (O == e.length ? 0 : -100), [0, O]) : a > -1 ? this.ret(-700 - e.length, [a, a + this.pattern.length]) : h == l ? this.ret(-900 - e.length, [p, O]) : d == l ? this.result(-100 + (f ? -200 : 0) + -700 + (y ? 0 : -1100), o, e) : n.length == 2 ? !1 : this.result((i[0] ? -700 : 0) + -200 + -1100, i, e);\n  }\n  result(e, n, r) {\n    let i = [], s = 0;\n    for (let o of n) {\n      let a = o + (this.astral ? cr(nn(r, o)) : 1);\n      s && i[s - 1] == o ? i[s - 1] = a : (i[s++] = o, i[s++] = a);\n    }\n    return this.ret(e - r.length, i);\n  }\n}\nconst Ft = /* @__PURE__ */ ve.define({\n  combine(t) {\n    return Ud(t, {\n      activateOnTyping: !0,\n      activateOnTypingDelay: 100,\n      selectOnOpen: !0,\n      override: null,\n      closeOnBlur: !0,\n      maxRenderedOptions: 100,\n      defaultKeymap: !0,\n      tooltipClass: () => \"\",\n      optionClass: () => \"\",\n      aboveCursor: !1,\n      icons: !0,\n      addToOptions: [],\n      positionInfo: vZ,\n      compareCompletions: (e, n) => e.label.localeCompare(n.label),\n      interactionDelay: 75,\n      updateSyncTime: 100\n    }, {\n      defaultKeymap: (e, n) => e && n,\n      closeOnBlur: (e, n) => e && n,\n      icons: (e, n) => e && n,\n      tooltipClass: (e, n) => (r) => Fv(e(r), n(r)),\n      optionClass: (e, n) => (r) => Fv(e(r), n(r)),\n      addToOptions: (e, n) => e.concat(n)\n    });\n  }\n});\nfunction Fv(t, e) {\n  return t ? e ? t + \" \" + e : t : e;\n}\nfunction vZ(t, e, n, r, i, s) {\n  let o = t.textDirection == Qt.RTL, a = o, l = !1, c = \"top\", u, d, f = e.left - i.left, h = i.right - e.right, p = r.right - r.left, O = r.bottom - r.top;\n  if (a && f < Math.min(p, h) ? a = !1 : !a && h < Math.min(p, f) && (a = !0), p <= (a ? f : h))\n    u = Math.max(i.top, Math.min(n.top, i.bottom - O)) - e.top, d = Math.min(400, a ? f : h);\n  else {\n    l = !0, d = Math.min(\n      400,\n      (o ? e.right : i.right - e.left) - 30\n      /* Info.Margin */\n    );\n    let b = i.bottom - e.bottom;\n    b >= O || b > e.top ? u = n.bottom - e.top : (c = \"bottom\", u = e.bottom - n.top);\n  }\n  let m = (e.bottom - e.top) / s.offsetHeight, y = (e.right - e.left) / s.offsetWidth;\n  return {\n    style: `${c}: ${u / m}px; max-width: ${d / y}px`,\n    class: \"cm-completionInfo-\" + (l ? o ? \"left-narrow\" : \"right-narrow\" : a ? \"left\" : \"right\")\n  };\n}\nfunction yZ(t) {\n  let e = t.addToOptions.slice();\n  return t.icons && e.push({\n    render(n) {\n      let r = document.createElement(\"div\");\n      return r.classList.add(\"cm-completionIcon\"), n.type && r.classList.add(...n.type.split(/\\s+/g).map((i) => \"cm-completionIcon-\" + i)), r.setAttribute(\"aria-hidden\", \"true\"), r;\n    },\n    position: 20\n  }), e.push({\n    render(n, r, i, s) {\n      let o = document.createElement(\"span\");\n      o.className = \"cm-completionLabel\";\n      let a = n.displayLabel || n.label, l = 0;\n      for (let c = 0; c < s.length; ) {\n        let u = s[c++], d = s[c++];\n        u > l && o.appendChild(document.createTextNode(a.slice(l, u)));\n        let f = o.appendChild(document.createElement(\"span\"));\n        f.appendChild(document.createTextNode(a.slice(u, d))), f.className = \"cm-completionMatchedText\", l = d;\n      }\n      return l < a.length && o.appendChild(document.createTextNode(a.slice(l))), o;\n    },\n    position: 50\n  }, {\n    render(n) {\n      if (!n.detail)\n        return null;\n      let r = document.createElement(\"span\");\n      return r.className = \"cm-completionDetail\", r.textContent = n.detail, r;\n    },\n    position: 80\n  }), e.sort((n, r) => n.position - r.position).map((n) => n.render);\n}\nfunction Mf(t, e, n) {\n  if (t <= n)\n    return { from: 0, to: t };\n  if (e < 0 && (e = 0), e <= t >> 1) {\n    let i = Math.floor(e / n);\n    return { from: i * n, to: (i + 1) * n };\n  }\n  let r = Math.floor((t - e) / n);\n  return { from: t - (r + 1) * n, to: t - r * n };\n}\nclass SZ {\n  constructor(e, n, r) {\n    this.view = e, this.stateField = n, this.applyCompletion = r, this.info = null, this.infoDestroy = null, this.placeInfoReq = {\n      read: () => this.measureInfo(),\n      write: (l) => this.placeInfo(l),\n      key: this\n    }, this.space = null, this.currentClass = \"\";\n    let i = e.state.field(n), { options: s, selected: o } = i.open, a = e.state.facet(Ft);\n    this.optionContent = yZ(a), this.optionClass = a.optionClass, this.tooltipClass = a.tooltipClass, this.range = Mf(s.length, o, a.maxRenderedOptions), this.dom = document.createElement(\"div\"), this.dom.className = \"cm-tooltip-autocomplete\", this.updateTooltipClass(e.state), this.dom.addEventListener(\"mousedown\", (l) => {\n      let { options: c } = e.state.field(n).open;\n      for (let u = l.target, d; u && u != this.dom; u = u.parentNode)\n        if (u.nodeName == \"LI\" && (d = /-(\\d+)$/.exec(u.id)) && +d[1] < c.length) {\n          this.applyCompletion(e, c[+d[1]]), l.preventDefault();\n          return;\n        }\n    }), this.dom.addEventListener(\"focusout\", (l) => {\n      let c = e.state.field(this.stateField, !1);\n      c && c.tooltip && e.state.facet(Ft).closeOnBlur && l.relatedTarget != e.contentDOM && e.dispatch({ effects: Sl.of(null) });\n    }), this.showOptions(s, i.id);\n  }\n  mount() {\n    this.updateSel();\n  }\n  showOptions(e, n) {\n    this.list && this.list.remove(), this.list = this.dom.appendChild(this.createListBox(e, n, this.range)), this.list.addEventListener(\"scroll\", () => {\n      this.info && this.view.requestMeasure(this.placeInfoReq);\n    });\n  }\n  update(e) {\n    var n;\n    let r = e.state.field(this.stateField), i = e.startState.field(this.stateField);\n    if (this.updateTooltipClass(e.state), r != i) {\n      let { options: s, selected: o, disabled: a } = r.open;\n      (!i.open || i.open.options != s) && (this.range = Mf(s.length, o, e.state.facet(Ft).maxRenderedOptions), this.showOptions(s, r.id)), this.updateSel(), a != ((n = i.open) === null || n === void 0 ? void 0 : n.disabled) && this.dom.classList.toggle(\"cm-tooltip-autocomplete-disabled\", !!a);\n    }\n  }\n  updateTooltipClass(e) {\n    let n = this.tooltipClass(e);\n    if (n != this.currentClass) {\n      for (let r of this.currentClass.split(\" \"))\n        r && this.dom.classList.remove(r);\n      for (let r of n.split(\" \"))\n        r && this.dom.classList.add(r);\n      this.currentClass = n;\n    }\n  }\n  positioned(e) {\n    this.space = e, this.info && this.view.requestMeasure(this.placeInfoReq);\n  }\n  updateSel() {\n    let e = this.view.state.field(this.stateField), n = e.open;\n    if ((n.selected > -1 && n.selected < this.range.from || n.selected >= this.range.to) && (this.range = Mf(n.options.length, n.selected, this.view.state.facet(Ft).maxRenderedOptions), this.showOptions(n.options, e.id)), this.updateSelectedOption(n.selected)) {\n      this.destroyInfo();\n      let { completion: r } = n.options[n.selected], { info: i } = r;\n      if (!i)\n        return;\n      let s = typeof i == \"string\" ? document.createTextNode(i) : i(r);\n      if (!s)\n        return;\n      \"then\" in s ? s.then((o) => {\n        o && this.view.state.field(this.stateField, !1) == e && this.addInfoPane(o, r);\n      }).catch((o) => hr(this.view.state, o, \"completion info\")) : this.addInfoPane(s, r);\n    }\n  }\n  addInfoPane(e, n) {\n    this.destroyInfo();\n    let r = this.info = document.createElement(\"div\");\n    if (r.className = \"cm-tooltip cm-completionInfo\", e.nodeType != null)\n      r.appendChild(e), this.infoDestroy = null;\n    else {\n      let { dom: i, destroy: s } = e;\n      r.appendChild(i), this.infoDestroy = s || null;\n    }\n    this.dom.appendChild(r), this.view.requestMeasure(this.placeInfoReq);\n  }\n  updateSelectedOption(e) {\n    let n = null;\n    for (let r = this.list.firstChild, i = this.range.from; r; r = r.nextSibling, i++)\n      r.nodeName != \"LI\" || !r.id ? i-- : i == e ? r.hasAttribute(\"aria-selected\") || (r.setAttribute(\"aria-selected\", \"true\"), n = r) : r.hasAttribute(\"aria-selected\") && r.removeAttribute(\"aria-selected\");\n    return n && kZ(this.list, n), n;\n  }\n  measureInfo() {\n    let e = this.dom.querySelector(\"[aria-selected]\");\n    if (!e || !this.info)\n      return null;\n    let n = this.dom.getBoundingClientRect(), r = this.info.getBoundingClientRect(), i = e.getBoundingClientRect(), s = this.space;\n    if (!s) {\n      let o = this.dom.ownerDocument.defaultView || window;\n      s = { left: 0, top: 0, right: o.innerWidth, bottom: o.innerHeight };\n    }\n    return i.top > Math.min(s.bottom, n.bottom) - 10 || i.bottom < Math.max(s.top, n.top) + 10 ? null : this.view.state.facet(Ft).positionInfo(this.view, n, i, r, s, this.dom);\n  }\n  placeInfo(e) {\n    this.info && (e ? (e.style && (this.info.style.cssText = e.style), this.info.className = \"cm-tooltip cm-completionInfo \" + (e.class || \"\")) : this.info.style.cssText = \"top: -1e6px\");\n  }\n  createListBox(e, n, r) {\n    const i = document.createElement(\"ul\");\n    i.id = n, i.setAttribute(\"role\", \"listbox\"), i.setAttribute(\"aria-expanded\", \"true\"), i.setAttribute(\"aria-label\", this.view.state.phrase(\"Completions\"));\n    let s = null;\n    for (let o = r.from; o < r.to; o++) {\n      let { completion: a, match: l } = e[o], { section: c } = a;\n      if (c) {\n        let f = typeof c == \"string\" ? c : c.name;\n        if (f != s && (o > r.from || r.from == 0))\n          if (s = f, typeof c != \"string\" && c.header)\n            i.appendChild(c.header(c));\n          else {\n            let h = i.appendChild(document.createElement(\"completion-section\"));\n            h.textContent = f;\n          }\n      }\n      const u = i.appendChild(document.createElement(\"li\"));\n      u.id = n + \"-\" + o, u.setAttribute(\"role\", \"option\");\n      let d = this.optionClass(a);\n      d && (u.className = d);\n      for (let f of this.optionContent) {\n        let h = f(a, this.view.state, this.view, l);\n        h && u.appendChild(h);\n      }\n    }\n    return r.from && i.classList.add(\"cm-completionListIncompleteTop\"), r.to < e.length && i.classList.add(\"cm-completionListIncompleteBottom\"), i;\n  }\n  destroyInfo() {\n    this.info && (this.infoDestroy && this.infoDestroy(), this.info.remove(), this.info = null);\n  }\n  destroy() {\n    this.destroyInfo();\n  }\n}\nfunction wZ(t, e) {\n  return (n) => new SZ(n, t, e);\n}\nfunction kZ(t, e) {\n  let n = t.getBoundingClientRect(), r = e.getBoundingClientRect(), i = n.height / t.offsetHeight;\n  r.top < n.top ? t.scrollTop -= (n.top - r.top) / i : r.bottom > n.bottom && (t.scrollTop += (r.bottom - n.bottom) / i);\n}\nfunction Gv(t) {\n  return (t.boost || 0) * 100 + (t.apply ? 10 : 0) + (t.info ? 5 : 0) + (t.type ? 1 : 0);\n}\nfunction xZ(t, e) {\n  let n = [], r = null, i = (l) => {\n    n.push(l);\n    let { section: c } = l.completion;\n    if (c) {\n      r || (r = []);\n      let u = typeof c == \"string\" ? c : c.name;\n      r.some((d) => d.name == u) || r.push(typeof c == \"string\" ? { name: u } : c);\n    }\n  };\n  for (let l of t)\n    if (l.hasResult()) {\n      let c = l.result.getMatch;\n      if (l.result.filter === !1)\n        for (let u of l.result.options)\n          i(new zv(u, l.source, c ? c(u) : [], 1e9 - n.length));\n      else {\n        let u = new bZ(e.sliceDoc(l.from, l.to));\n        for (let d of l.result.options)\n          if (u.match(d.label)) {\n            let f = d.displayLabel ? c ? c(d, u.matched) : [] : u.matched;\n            i(new zv(d, l.source, f, u.score + (d.boost || 0)));\n          }\n      }\n    }\n  if (r) {\n    let l = /* @__PURE__ */ Object.create(null), c = 0, u = (d, f) => {\n      var h, p;\n      return ((h = d.rank) !== null && h !== void 0 ? h : 1e9) - ((p = f.rank) !== null && p !== void 0 ? p : 1e9) || (d.name < f.name ? -1 : 1);\n    };\n    for (let d of r.sort(u))\n      c -= 1e5, l[d.name] = c;\n    for (let d of n) {\n      let { section: f } = d.completion;\n      f && (d.score += l[typeof f == \"string\" ? f : f.name]);\n    }\n  }\n  let s = [], o = null, a = e.facet(Ft).compareCompletions;\n  for (let l of n.sort((c, u) => u.score - c.score || a(c.completion, u.completion))) {\n    let c = l.completion;\n    !o || o.label != c.label || o.detail != c.detail || o.type != null && c.type != null && o.type != c.type || o.apply != c.apply || o.boost != c.boost ? s.push(l) : Gv(l.completion) > Gv(o) && (s[s.length - 1] = l), o = l.completion;\n  }\n  return s;\n}\nclass go {\n  constructor(e, n, r, i, s, o) {\n    this.options = e, this.attrs = n, this.tooltip = r, this.timestamp = i, this.selected = s, this.disabled = o;\n  }\n  setSelected(e, n) {\n    return e == this.selected || e >= this.options.length ? this : new go(this.options, Kv(n, e), this.tooltip, this.timestamp, e, this.disabled);\n  }\n  static build(e, n, r, i, s) {\n    let o = xZ(e, n);\n    if (!o.length)\n      return i && e.some(\n        (l) => l.state == 1\n        /* State.Pending */\n      ) ? new go(i.options, i.attrs, i.tooltip, i.timestamp, i.selected, !0) : null;\n    let a = n.facet(Ft).selectOnOpen ? 0 : -1;\n    if (i && i.selected != a && i.selected != -1) {\n      let l = i.options[i.selected].completion;\n      for (let c = 0; c < o.length; c++)\n        if (o[c].completion == l) {\n          a = c;\n          break;\n        }\n    }\n    return new go(o, Kv(r, a), {\n      pos: e.reduce((l, c) => c.hasResult() ? Math.min(l, c.from) : l, 1e8),\n      create: $Z,\n      above: s.aboveCursor\n    }, i ? i.timestamp : Date.now(), a, !1);\n  }\n  map(e) {\n    return new go(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: e.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);\n  }\n}\nclass qu {\n  constructor(e, n, r) {\n    this.active = e, this.id = n, this.open = r;\n  }\n  static start() {\n    return new qu(TZ, \"cm-ac-\" + Math.floor(Math.random() * 2e6).toString(36), null);\n  }\n  update(e) {\n    let { state: n } = e, r = n.facet(Ft), s = (r.override || n.languageDataAt(\"autocomplete\", Ji(n)).map(mZ)).map((a) => (this.active.find((c) => c.source == a) || new wn(\n      a,\n      this.active.some(\n        (c) => c.state != 0\n        /* State.Inactive */\n      ) ? 1 : 0\n      /* State.Inactive */\n    )).update(e, r));\n    s.length == this.active.length && s.every((a, l) => a == this.active[l]) && (s = this.active);\n    let o = this.open;\n    o && e.docChanged && (o = o.map(e.changes)), e.selection || s.some((a) => a.hasResult() && e.changes.touchesRange(a.from, a.to)) || !PZ(s, this.active) ? o = go.build(s, n, this.id, o, r) : o && o.disabled && !s.some(\n      (a) => a.state == 1\n      /* State.Pending */\n    ) && (o = null), !o && s.every(\n      (a) => a.state != 1\n      /* State.Pending */\n    ) && s.some((a) => a.hasResult()) && (s = s.map((a) => a.hasResult() ? new wn(\n      a.source,\n      0\n      /* State.Inactive */\n    ) : a));\n    for (let a of e.effects)\n      a.is(kx) && (o = o && o.setSelected(a.value, this.id));\n    return s == this.active && o == this.open ? this : new qu(s, this.id, o);\n  }\n  get tooltip() {\n    return this.open ? this.open.tooltip : null;\n  }\n  get attrs() {\n    return this.open ? this.open.attrs : _Z;\n  }\n}\nfunction PZ(t, e) {\n  if (t == e)\n    return !0;\n  for (let n = 0, r = 0; ; ) {\n    for (; n < t.length && !t[n].hasResult; )\n      n++;\n    for (; r < e.length && !e[r].hasResult; )\n      r++;\n    let i = n == t.length, s = r == e.length;\n    if (i || s)\n      return i == s;\n    if (t[n++].result != e[r++].result)\n      return !1;\n  }\n}\nconst _Z = {\n  \"aria-autocomplete\": \"list\"\n};\nfunction Kv(t, e) {\n  let n = {\n    \"aria-autocomplete\": \"list\",\n    \"aria-haspopup\": \"listbox\",\n    \"aria-controls\": t\n  };\n  return e > -1 && (n[\"aria-activedescendant\"] = t + \"-\" + e), n;\n}\nconst TZ = [];\nfunction Ep(t) {\n  return t.isUserEvent(\"input.type\") ? \"input\" : t.isUserEvent(\"delete.backward\") ? \"delete\" : null;\n}\nclass wn {\n  constructor(e, n, r = -1) {\n    this.source = e, this.state = n, this.explicitPos = r;\n  }\n  hasResult() {\n    return !1;\n  }\n  update(e, n) {\n    let r = Ep(e), i = this;\n    r ? i = i.handleUserEvent(e, r, n) : e.docChanged ? i = i.handleChange(e) : e.selection && i.state != 0 && (i = new wn(\n      i.source,\n      0\n      /* State.Inactive */\n    ));\n    for (let s of e.effects)\n      if (s.is(Uu))\n        i = new wn(i.source, 1, s.value ? Ji(e.state) : -1);\n      else if (s.is(Sl))\n        i = new wn(\n          i.source,\n          0\n          /* State.Inactive */\n        );\n      else if (s.is(wx))\n        for (let o of s.value)\n          o.source == i.source && (i = o);\n    return i;\n  }\n  handleUserEvent(e, n, r) {\n    return n == \"delete\" || !r.activateOnTyping ? this.map(e.changes) : new wn(\n      this.source,\n      1\n      /* State.Pending */\n    );\n  }\n  handleChange(e) {\n    return e.changes.touchesRange(Ji(e.startState)) ? new wn(\n      this.source,\n      0\n      /* State.Inactive */\n    ) : this.map(e.changes);\n  }\n  map(e) {\n    return e.empty || this.explicitPos < 0 ? this : new wn(this.source, this.state, e.mapPos(this.explicitPos));\n  }\n}\nclass Qo extends wn {\n  constructor(e, n, r, i, s) {\n    super(e, 2, n), this.result = r, this.from = i, this.to = s;\n  }\n  hasResult() {\n    return !0;\n  }\n  handleUserEvent(e, n, r) {\n    var i;\n    let s = e.changes.mapPos(this.from), o = e.changes.mapPos(this.to, 1), a = Ji(e.state);\n    if ((this.explicitPos < 0 ? a <= s : a < this.from) || a > o || n == \"delete\" && Ji(e.startState) == this.from)\n      return new wn(\n        this.source,\n        n == \"input\" && r.activateOnTyping ? 1 : 0\n        /* State.Inactive */\n      );\n    let l = this.explicitPos < 0 ? -1 : e.changes.mapPos(this.explicitPos), c;\n    return EZ(this.result.validFor, e.state, s, o) ? new Qo(this.source, l, this.result, s, o) : this.result.update && (c = this.result.update(this.result, s, o, new bx(e.state, a, l >= 0))) ? new Qo(this.source, l, c, c.from, (i = c.to) !== null && i !== void 0 ? i : Ji(e.state)) : new wn(this.source, 1, l);\n  }\n  handleChange(e) {\n    return e.changes.touchesRange(this.from, this.to) ? new wn(\n      this.source,\n      0\n      /* State.Inactive */\n    ) : this.map(e.changes);\n  }\n  map(e) {\n    return e.empty ? this : new Qo(this.source, this.explicitPos < 0 ? -1 : e.mapPos(this.explicitPos), this.result, e.mapPos(this.from), e.mapPos(this.to, 1));\n  }\n}\nfunction EZ(t, e, n, r) {\n  if (!t)\n    return !1;\n  let i = e.sliceDoc(n, r);\n  return typeof t == \"function\" ? t(i, n, r, e) : yx(t, !0).test(i);\n}\nconst wx = /* @__PURE__ */ ot.define({\n  map(t, e) {\n    return t.map((n) => n.map(e));\n  }\n}), kx = /* @__PURE__ */ ot.define(), Zn = /* @__PURE__ */ yr.define({\n  create() {\n    return qu.start();\n  },\n  update(t, e) {\n    return t.update(e);\n  },\n  provide: (t) => [\n    Yk.from(t, (e) => e.tooltip),\n    Se.contentAttributes.from(t, (e) => e.attrs)\n  ]\n});\nfunction xx(t, e) {\n  const n = e.completion.apply || e.completion.label;\n  let r = t.state.field(Zn).active.find((i) => i.source == e.source);\n  return r instanceof Qo ? (typeof n == \"string\" ? t.dispatch(Object.assign(Object.assign({}, gZ(t.state, n, r.from, r.to)), { annotations: Sx.of(e.completion) })) : n(t, e.completion, r.from, r.to), !0) : !1;\n}\nconst $Z = /* @__PURE__ */ wZ(Zn, xx);\nfunction Wc(t, e = \"option\") {\n  return (n) => {\n    let r = n.state.field(Zn, !1);\n    if (!r || !r.open || r.open.disabled || Date.now() - r.open.timestamp < n.state.facet(Ft).interactionDelay)\n      return !1;\n    let i = 1, s;\n    e == \"page\" && (s = zk(n, r.open.tooltip)) && (i = Math.max(2, Math.floor(s.dom.offsetHeight / s.dom.querySelector(\"li\").offsetHeight) - 1));\n    let { length: o } = r.open.options, a = r.open.selected > -1 ? r.open.selected + i * (t ? 1 : -1) : t ? 0 : o - 1;\n    return a < 0 ? a = e == \"page\" ? 0 : o - 1 : a >= o && (a = e == \"page\" ? o - 1 : 0), n.dispatch({ effects: kx.of(a) }), !0;\n  };\n}\nconst QZ = (t) => {\n  let e = t.state.field(Zn, !1);\n  return t.state.readOnly || !e || !e.open || e.open.selected < 0 || e.open.disabled || Date.now() - e.open.timestamp < t.state.facet(Ft).interactionDelay ? !1 : xx(t, e.open.options[e.open.selected]);\n}, CZ = (t) => t.state.field(Zn, !1) ? (t.dispatch({ effects: Uu.of(!0) }), !0) : !1, AZ = (t) => {\n  let e = t.state.field(Zn, !1);\n  return !e || !e.active.some(\n    (n) => n.state != 0\n    /* State.Inactive */\n  ) ? !1 : (t.dispatch({ effects: Sl.of(null) }), !0);\n};\nclass RZ {\n  constructor(e, n) {\n    this.active = e, this.context = n, this.time = Date.now(), this.updates = [], this.done = void 0;\n  }\n}\nconst NZ = 50, DZ = 1e3, ZZ = /* @__PURE__ */ rr.fromClass(class {\n  constructor(t) {\n    this.view = t, this.debounceUpdate = -1, this.running = [], this.debounceAccept = -1, this.pendingStart = !1, this.composing = 0;\n    for (let e of t.state.field(Zn).active)\n      e.state == 1 && this.startQuery(e);\n  }\n  update(t) {\n    let e = t.state.field(Zn);\n    if (!t.selectionSet && !t.docChanged && t.startState.field(Zn) == e)\n      return;\n    let n = t.transactions.some((i) => (i.selection || i.docChanged) && !Ep(i));\n    for (let i = 0; i < this.running.length; i++) {\n      let s = this.running[i];\n      if (n || s.updates.length + t.transactions.length > NZ && Date.now() - s.time > DZ) {\n        for (let o of s.context.abortListeners)\n          try {\n            o();\n          } catch (a) {\n            hr(this.view.state, a);\n          }\n        s.context.abortListeners = null, this.running.splice(i--, 1);\n      } else\n        s.updates.push(...t.transactions);\n    }\n    this.debounceUpdate > -1 && clearTimeout(this.debounceUpdate), t.transactions.some((i) => i.effects.some((s) => s.is(Uu))) && (this.pendingStart = !0);\n    let r = this.pendingStart ? 50 : t.state.facet(Ft).activateOnTypingDelay;\n    if (this.debounceUpdate = e.active.some((i) => i.state == 1 && !this.running.some((s) => s.active.source == i.source)) ? setTimeout(() => this.startUpdate(), r) : -1, this.composing != 0)\n      for (let i of t.transactions)\n        Ep(i) == \"input\" ? this.composing = 2 : this.composing == 2 && i.selection && (this.composing = 3);\n  }\n  startUpdate() {\n    this.debounceUpdate = -1, this.pendingStart = !1;\n    let { state: t } = this.view, e = t.field(Zn);\n    for (let n of e.active)\n      n.state == 1 && !this.running.some((r) => r.active.source == n.source) && this.startQuery(n);\n  }\n  startQuery(t) {\n    let { state: e } = this.view, n = Ji(e), r = new bx(e, n, t.explicitPos == n), i = new RZ(t, r);\n    this.running.push(i), Promise.resolve(t.source(r)).then((s) => {\n      i.context.aborted || (i.done = s || null, this.scheduleAccept());\n    }, (s) => {\n      this.view.dispatch({ effects: Sl.of(null) }), hr(this.view.state, s);\n    });\n  }\n  scheduleAccept() {\n    this.running.every((t) => t.done !== void 0) ? this.accept() : this.debounceAccept < 0 && (this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(Ft).updateSyncTime));\n  }\n  // For each finished query in this.running, try to create a result\n  // or, if appropriate, restart the query.\n  accept() {\n    var t;\n    this.debounceAccept > -1 && clearTimeout(this.debounceAccept), this.debounceAccept = -1;\n    let e = [], n = this.view.state.facet(Ft);\n    for (let r = 0; r < this.running.length; r++) {\n      let i = this.running[r];\n      if (i.done === void 0)\n        continue;\n      if (this.running.splice(r--, 1), i.done) {\n        let o = new Qo(i.active.source, i.active.explicitPos, i.done, i.done.from, (t = i.done.to) !== null && t !== void 0 ? t : Ji(i.updates.length ? i.updates[0].startState : this.view.state));\n        for (let a of i.updates)\n          o = o.update(a, n);\n        if (o.hasResult()) {\n          e.push(o);\n          continue;\n        }\n      }\n      let s = this.view.state.field(Zn).active.find((o) => o.source == i.active.source);\n      if (s && s.state == 1)\n        if (i.done == null) {\n          let o = new wn(\n            i.active.source,\n            0\n            /* State.Inactive */\n          );\n          for (let a of i.updates)\n            o = o.update(a, n);\n          o.state != 1 && e.push(o);\n        } else\n          this.startQuery(s);\n    }\n    e.length && this.view.dispatch({ effects: wx.of(e) });\n  }\n}, {\n  eventHandlers: {\n    blur(t) {\n      let e = this.view.state.field(Zn, !1);\n      if (e && e.tooltip && this.view.state.facet(Ft).closeOnBlur) {\n        let n = e.open && zk(this.view, e.open.tooltip);\n        (!n || !n.dom.contains(t.relatedTarget)) && setTimeout(() => this.view.dispatch({ effects: Sl.of(null) }), 10);\n      }\n    },\n    compositionstart() {\n      this.composing = 1;\n    },\n    compositionend() {\n      this.composing == 3 && setTimeout(() => this.view.dispatch({ effects: Uu.of(!1) }), 20), this.composing = 0;\n    }\n  }\n}), Px = /* @__PURE__ */ Se.baseTheme({\n  \".cm-tooltip.cm-tooltip-autocomplete\": {\n    \"& > ul\": {\n      fontFamily: \"monospace\",\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden auto\",\n      maxWidth_fallback: \"700px\",\n      maxWidth: \"min(700px, 95vw)\",\n      minWidth: \"250px\",\n      maxHeight: \"10em\",\n      height: \"100%\",\n      listStyle: \"none\",\n      margin: 0,\n      padding: 0,\n      \"& > li, & > completion-section\": {\n        padding: \"1px 3px\",\n        lineHeight: 1.2\n      },\n      \"& > li\": {\n        overflowX: \"hidden\",\n        textOverflow: \"ellipsis\",\n        cursor: \"pointer\"\n      },\n      \"& > completion-section\": {\n        display: \"list-item\",\n        borderBottom: \"1px solid silver\",\n        paddingLeft: \"0.5em\",\n        opacity: 0.7\n      }\n    }\n  },\n  \"&light .cm-tooltip-autocomplete ul li[aria-selected]\": {\n    background: \"#17c\",\n    color: \"white\"\n  },\n  \"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\n    background: \"#777\"\n  },\n  \"&dark .cm-tooltip-autocomplete ul li[aria-selected]\": {\n    background: \"#347\",\n    color: \"white\"\n  },\n  \"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\n    background: \"#444\"\n  },\n  \".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after\": {\n    content: '\"···\"',\n    opacity: 0.5,\n    display: \"block\",\n    textAlign: \"center\"\n  },\n  \".cm-tooltip.cm-completionInfo\": {\n    position: \"absolute\",\n    padding: \"3px 9px\",\n    width: \"max-content\",\n    maxWidth: \"400px\",\n    boxSizing: \"border-box\"\n  },\n  \".cm-completionInfo.cm-completionInfo-left\": { right: \"100%\" },\n  \".cm-completionInfo.cm-completionInfo-right\": { left: \"100%\" },\n  \".cm-completionInfo.cm-completionInfo-left-narrow\": { right: \"30px\" },\n  \".cm-completionInfo.cm-completionInfo-right-narrow\": { left: \"30px\" },\n  \"&light .cm-snippetField\": { backgroundColor: \"#00000022\" },\n  \"&dark .cm-snippetField\": { backgroundColor: \"#ffffff22\" },\n  \".cm-snippetFieldPosition\": {\n    verticalAlign: \"text-top\",\n    width: 0,\n    height: \"1.15em\",\n    display: \"inline-block\",\n    margin: \"0 -0.7px -.7em\",\n    borderLeft: \"1.4px dotted #888\"\n  },\n  \".cm-completionMatchedText\": {\n    textDecoration: \"underline\"\n  },\n  \".cm-completionDetail\": {\n    marginLeft: \"0.5em\",\n    fontStyle: \"italic\"\n  },\n  \".cm-completionIcon\": {\n    fontSize: \"90%\",\n    width: \".8em\",\n    display: \"inline-block\",\n    textAlign: \"center\",\n    paddingRight: \".6em\",\n    opacity: \"0.6\",\n    boxSizing: \"content-box\"\n  },\n  \".cm-completionIcon-function, .cm-completionIcon-method\": {\n    \"&:after\": { content: \"'ƒ'\" }\n  },\n  \".cm-completionIcon-class\": {\n    \"&:after\": { content: \"'○'\" }\n  },\n  \".cm-completionIcon-interface\": {\n    \"&:after\": { content: \"'◌'\" }\n  },\n  \".cm-completionIcon-variable\": {\n    \"&:after\": { content: \"'𝑥'\" }\n  },\n  \".cm-completionIcon-constant\": {\n    \"&:after\": { content: \"'𝐶'\" }\n  },\n  \".cm-completionIcon-type\": {\n    \"&:after\": { content: \"'𝑡'\" }\n  },\n  \".cm-completionIcon-enum\": {\n    \"&:after\": { content: \"'∪'\" }\n  },\n  \".cm-completionIcon-property\": {\n    \"&:after\": { content: \"'□'\" }\n  },\n  \".cm-completionIcon-keyword\": {\n    \"&:after\": { content: \"'🔑︎'\" }\n    // Disable emoji rendering\n  },\n  \".cm-completionIcon-namespace\": {\n    \"&:after\": { content: \"'▢'\" }\n  },\n  \".cm-completionIcon-text\": {\n    \"&:after\": { content: \"'abc'\", fontSize: \"50%\", verticalAlign: \"middle\" }\n  }\n});\nclass VZ {\n  constructor(e, n, r, i) {\n    this.field = e, this.line = n, this.from = r, this.to = i;\n  }\n}\nclass bg {\n  constructor(e, n, r) {\n    this.field = e, this.from = n, this.to = r;\n  }\n  map(e) {\n    let n = e.mapPos(this.from, -1, on.TrackDel), r = e.mapPos(this.to, 1, on.TrackDel);\n    return n == null || r == null ? null : new bg(this.field, n, r);\n  }\n}\nclass vg {\n  constructor(e, n) {\n    this.lines = e, this.fieldPositions = n;\n  }\n  instantiate(e, n) {\n    let r = [], i = [n], s = e.doc.lineAt(n), o = /^\\s*/.exec(s.text)[0];\n    for (let l of this.lines) {\n      if (r.length) {\n        let c = o, u = /^\\t*/.exec(l)[0].length;\n        for (let d = 0; d < u; d++)\n          c += e.facet(zd);\n        i.push(n + c.length - u), l = c + l.slice(u);\n      }\n      r.push(l), n += l.length + 1;\n    }\n    let a = this.fieldPositions.map((l) => new bg(l.field, i[l.line] + l.from, i[l.line] + l.to));\n    return { text: r, ranges: a };\n  }\n  static parse(e) {\n    let n = [], r = [], i = [], s;\n    for (let o of e.split(/\\r\\n?|\\n/)) {\n      for (; s = /[#$]\\{(?:(\\d+)(?::([^}]*))?|([^}]*))\\}/.exec(o); ) {\n        let a = s[1] ? +s[1] : null, l = s[2] || s[3] || \"\", c = -1;\n        for (let u = 0; u < n.length; u++)\n          (a != null ? n[u].seq == a : l && n[u].name == l) && (c = u);\n        if (c < 0) {\n          let u = 0;\n          for (; u < n.length && (a == null || n[u].seq != null && n[u].seq < a); )\n            u++;\n          n.splice(u, 0, { seq: a, name: l }), c = u;\n          for (let d of i)\n            d.field >= c && d.field++;\n        }\n        i.push(new VZ(c, r.length, s.index, s.index + l.length)), o = o.slice(0, s.index) + l + o.slice(s.index + s[0].length);\n      }\n      for (let a; a = /\\\\([{}])/.exec(o); ) {\n        o = o.slice(0, a.index) + a[1] + o.slice(a.index + a[0].length);\n        for (let l of i)\n          l.line == r.length && l.from > a.index && (l.from--, l.to--);\n      }\n      r.push(o);\n    }\n    return new vg(r, i);\n  }\n}\nlet IZ = /* @__PURE__ */ Je.widget({ widget: /* @__PURE__ */ new class extends ra {\n  toDOM() {\n    let t = document.createElement(\"span\");\n    return t.className = \"cm-snippetFieldPosition\", t;\n  }\n  ignoreEvent() {\n    return !1;\n  }\n}() }), WZ = /* @__PURE__ */ Je.mark({ class: \"cm-snippetField\" });\nclass oa {\n  constructor(e, n) {\n    this.ranges = e, this.active = n, this.deco = Je.set(e.map((r) => (r.from == r.to ? IZ : WZ).range(r.from, r.to)));\n  }\n  map(e) {\n    let n = [];\n    for (let r of this.ranges) {\n      let i = r.map(e);\n      if (!i)\n        return null;\n      n.push(i);\n    }\n    return new oa(n, this.active);\n  }\n  selectionInsideField(e) {\n    return e.ranges.every((n) => this.ranges.some((r) => r.field == this.active && r.from <= n.from && r.to >= n.to));\n  }\n}\nconst ec = /* @__PURE__ */ ot.define({\n  map(t, e) {\n    return t && t.map(e);\n  }\n}), MZ = /* @__PURE__ */ ot.define(), wl = /* @__PURE__ */ yr.define({\n  create() {\n    return null;\n  },\n  update(t, e) {\n    for (let n of e.effects) {\n      if (n.is(ec))\n        return n.value;\n      if (n.is(MZ) && t)\n        return new oa(t.ranges, n.value);\n    }\n    return t && e.docChanged && (t = t.map(e.changes)), t && e.selection && !t.selectionInsideField(e.selection) && (t = null), t;\n  },\n  provide: (t) => Se.decorations.from(t, (e) => e ? e.deco : Je.none)\n});\nfunction yg(t, e) {\n  return ae.create(t.filter((n) => n.field == e).map((n) => ae.range(n.from, n.to)));\n}\nfunction XZ(t) {\n  let e = vg.parse(t);\n  return (n, r, i, s) => {\n    let { text: o, ranges: a } = e.instantiate(n.state, i), l = {\n      changes: { from: i, to: s, insert: Fe.of(o) },\n      scrollIntoView: !0,\n      annotations: r ? [Sx.of(r), Gt.userEvent.of(\"input.complete\")] : void 0\n    };\n    if (a.length && (l.selection = yg(a, 0)), a.some((c) => c.field > 0)) {\n      let c = new oa(a, 0), u = l.effects = [ec.of(c)];\n      n.state.field(wl, !1) === void 0 && u.push(ot.appendConfig.of([wl, qZ, YZ, Px]));\n    }\n    n.dispatch(n.state.update(l));\n  };\n}\nfunction _x(t) {\n  return ({ state: e, dispatch: n }) => {\n    let r = e.field(wl, !1);\n    if (!r || t < 0 && r.active == 0)\n      return !1;\n    let i = r.active + t, s = t > 0 && !r.ranges.some((o) => o.field == i + t);\n    return n(e.update({\n      selection: yg(r.ranges, i),\n      effects: ec.of(s ? null : new oa(r.ranges, i)),\n      scrollIntoView: !0\n    })), !0;\n  };\n}\nconst jZ = ({ state: t, dispatch: e }) => t.field(wl, !1) ? (e(t.update({ effects: ec.of(null) })), !0) : !1, BZ = /* @__PURE__ */ _x(1), LZ = /* @__PURE__ */ _x(-1), UZ = [\n  { key: \"Tab\", run: BZ, shift: LZ },\n  { key: \"Escape\", run: jZ }\n], Jv = /* @__PURE__ */ ve.define({\n  combine(t) {\n    return t.length ? t[0] : UZ;\n  }\n}), qZ = /* @__PURE__ */ zl.highest(/* @__PURE__ */ bl.compute([Jv], (t) => t.facet(Jv)));\nfunction vn(t, e) {\n  return Object.assign(Object.assign({}, e), { apply: XZ(t) });\n}\nconst YZ = /* @__PURE__ */ Se.domEventHandlers({\n  mousedown(t, e) {\n    let n = e.state.field(wl, !1), r;\n    if (!n || (r = e.posAtCoords({ x: t.clientX, y: t.clientY })) == null)\n      return !1;\n    let i = n.ranges.find((s) => s.from <= r && s.to >= r);\n    return !i || i.field == n.active ? !1 : (e.dispatch({\n      selection: yg(n.ranges, i.field),\n      effects: ec.of(n.ranges.some((s) => s.field > i.field) ? new oa(n.ranges, i.field) : null),\n      scrollIntoView: !0\n    }), !0);\n  }\n}), kl = {\n  brackets: [\"(\", \"[\", \"{\", \"'\", '\"'],\n  before: \")]}:;>\",\n  stringPrefixes: []\n}, _s = /* @__PURE__ */ ot.define({\n  map(t, e) {\n    let n = e.mapPos(t, -1, on.TrackAfter);\n    return n ?? void 0;\n  }\n}), Sg = /* @__PURE__ */ new class extends qs {\n}();\nSg.startSide = 1;\nSg.endSide = -1;\nconst Tx = /* @__PURE__ */ yr.define({\n  create() {\n    return ze.empty;\n  },\n  update(t, e) {\n    if (t = t.map(e.changes), e.selection) {\n      let n = e.state.doc.lineAt(e.selection.main.head);\n      t = t.update({ filter: (r) => r >= n.from && r <= n.to });\n    }\n    for (let n of e.effects)\n      n.is(_s) && (t = t.update({ add: [Sg.range(n.value, n.value + 1)] }));\n    return t;\n  }\n});\nfunction zZ() {\n  return [FZ, Tx];\n}\nconst Xf = \"()[]{}<>\";\nfunction Ex(t) {\n  for (let e = 0; e < Xf.length; e += 2)\n    if (Xf.charCodeAt(e) == t)\n      return Xf.charAt(e + 1);\n  return Iw(t < 128 ? t : t + 1);\n}\nfunction $x(t, e) {\n  return t.languageDataAt(\"closeBrackets\", e)[0] || kl;\n}\nconst HZ = typeof navigator == \"object\" && /* @__PURE__ */ /Android\\b/.test(navigator.userAgent), FZ = /* @__PURE__ */ Se.inputHandler.of((t, e, n, r) => {\n  if ((HZ ? t.composing : t.compositionStarted) || t.state.readOnly)\n    return !1;\n  let i = t.state.selection.main;\n  if (r.length > 2 || r.length == 2 && cr(nn(r, 0)) == 1 || e != i.from || n != i.to)\n    return !1;\n  let s = JZ(t.state, r);\n  return s ? (t.dispatch(s), !0) : !1;\n}), GZ = ({ state: t, dispatch: e }) => {\n  if (t.readOnly)\n    return !1;\n  let r = $x(t, t.selection.main.head).brackets || kl.brackets, i = null, s = t.changeByRange((o) => {\n    if (o.empty) {\n      let a = eV(t.doc, o.head);\n      for (let l of r)\n        if (l == a && Fd(t.doc, o.head) == Ex(nn(l, 0)))\n          return {\n            changes: { from: o.head - l.length, to: o.head + l.length },\n            range: ae.cursor(o.head - l.length)\n          };\n    }\n    return { range: i = o };\n  });\n  return i || e(t.update(s, { scrollIntoView: !0, userEvent: \"delete.backward\" })), !i;\n}, KZ = [\n  { key: \"Backspace\", run: GZ }\n];\nfunction JZ(t, e) {\n  let n = $x(t, t.selection.main.head), r = n.brackets || kl.brackets;\n  for (let i of r) {\n    let s = Ex(nn(i, 0));\n    if (e == i)\n      return s == i ? rV(t, i, r.indexOf(i + i + i) > -1, n) : tV(t, i, s, n.before || kl.before);\n    if (e == s && Qx(t, t.selection.main.from))\n      return nV(t, i, s);\n  }\n  return null;\n}\nfunction Qx(t, e) {\n  let n = !1;\n  return t.field(Tx).between(0, t.doc.length, (r) => {\n    r == e && (n = !0);\n  }), n;\n}\nfunction Fd(t, e) {\n  let n = t.sliceString(e, e + 2);\n  return n.slice(0, cr(nn(n, 0)));\n}\nfunction eV(t, e) {\n  let n = t.sliceString(e - 2, e);\n  return cr(nn(n, 0)) == n.length ? n : n.slice(1);\n}\nfunction tV(t, e, n, r) {\n  let i = null, s = t.changeByRange((o) => {\n    if (!o.empty)\n      return {\n        changes: [{ insert: e, from: o.from }, { insert: n, from: o.to }],\n        effects: _s.of(o.to + e.length),\n        range: ae.range(o.anchor + e.length, o.head + e.length)\n      };\n    let a = Fd(t.doc, o.head);\n    return !a || /\\s/.test(a) || r.indexOf(a) > -1 ? {\n      changes: { insert: e + n, from: o.head },\n      effects: _s.of(o.head + e.length),\n      range: ae.cursor(o.head + e.length)\n    } : { range: i = o };\n  });\n  return i ? null : t.update(s, {\n    scrollIntoView: !0,\n    userEvent: \"input.type\"\n  });\n}\nfunction nV(t, e, n) {\n  let r = null, i = t.changeByRange((s) => s.empty && Fd(t.doc, s.head) == n ? {\n    changes: { from: s.head, to: s.head + n.length, insert: n },\n    range: ae.cursor(s.head + n.length)\n  } : r = { range: s });\n  return r ? null : t.update(i, {\n    scrollIntoView: !0,\n    userEvent: \"input.type\"\n  });\n}\nfunction rV(t, e, n, r) {\n  let i = r.stringPrefixes || kl.stringPrefixes, s = null, o = t.changeByRange((a) => {\n    if (!a.empty)\n      return {\n        changes: [{ insert: e, from: a.from }, { insert: e, from: a.to }],\n        effects: _s.of(a.to + e.length),\n        range: ae.range(a.anchor + e.length, a.head + e.length)\n      };\n    let l = a.head, c = Fd(t.doc, l), u;\n    if (c == e) {\n      if (e0(t, l))\n        return {\n          changes: { insert: e + e, from: l },\n          effects: _s.of(l + e.length),\n          range: ae.cursor(l + e.length)\n        };\n      if (Qx(t, l)) {\n        let f = n && t.sliceDoc(l, l + e.length * 3) == e + e + e ? e + e + e : e;\n        return {\n          changes: { from: l, to: l + f.length, insert: f },\n          range: ae.cursor(l + f.length)\n        };\n      }\n    } else {\n      if (n && t.sliceDoc(l - 2 * e.length, l) == e + e && (u = t0(t, l - 2 * e.length, i)) > -1 && e0(t, u))\n        return {\n          changes: { insert: e + e + e + e, from: l },\n          effects: _s.of(l + e.length),\n          range: ae.cursor(l + e.length)\n        };\n      if (t.charCategorizer(l)(c) != Hn.Word && t0(t, l, i) > -1 && !iV(t, l, e, i))\n        return {\n          changes: { insert: e + e, from: l },\n          effects: _s.of(l + e.length),\n          range: ae.cursor(l + e.length)\n        };\n    }\n    return { range: s = a };\n  });\n  return s ? null : t.update(o, {\n    scrollIntoView: !0,\n    userEvent: \"input.type\"\n  });\n}\nfunction e0(t, e) {\n  let n = un(t).resolveInner(e + 1);\n  return n.parent && n.from == e;\n}\nfunction iV(t, e, n, r) {\n  let i = un(t).resolveInner(e, -1), s = r.reduce((o, a) => Math.max(o, a.length), 0);\n  for (let o = 0; o < 5; o++) {\n    let a = t.sliceDoc(i.from, Math.min(i.to, i.from + n.length + s)), l = a.indexOf(n);\n    if (!l || l > -1 && r.indexOf(a.slice(0, l)) > -1) {\n      let u = i.firstChild;\n      for (; u && u.from == i.from && u.to - u.from > n.length + l; ) {\n        if (t.sliceDoc(u.to - n.length, u.to) == n)\n          return !1;\n        u = u.firstChild;\n      }\n      return !0;\n    }\n    let c = i.to == e && i.parent;\n    if (!c)\n      break;\n    i = c;\n  }\n  return !1;\n}\nfunction t0(t, e, n) {\n  let r = t.charCategorizer(e);\n  if (r(t.sliceDoc(e - 1, e)) != Hn.Word)\n    return e;\n  for (let i of n) {\n    let s = e - i.length;\n    if (t.sliceDoc(s, e) == i && r(t.sliceDoc(s - 1, s)) != Hn.Word)\n      return s;\n  }\n  return -1;\n}\nfunction sV(t = {}) {\n  return [\n    Zn,\n    Ft.of(t),\n    ZZ,\n    oV,\n    Px\n  ];\n}\nconst Cx = [\n  { key: \"Ctrl-Space\", run: CZ },\n  { key: \"Escape\", run: AZ },\n  { key: \"ArrowDown\", run: /* @__PURE__ */ Wc(!0) },\n  { key: \"ArrowUp\", run: /* @__PURE__ */ Wc(!1) },\n  { key: \"PageDown\", run: /* @__PURE__ */ Wc(!0, \"page\") },\n  { key: \"PageUp\", run: /* @__PURE__ */ Wc(!1, \"page\") },\n  { key: \"Enter\", run: QZ }\n], oV = /* @__PURE__ */ zl.highest(/* @__PURE__ */ bl.computeN([Ft], (t) => t.facet(Ft).defaultKeymap ? [Cx] : []));\nfunction Ax(t, e) {\n  let n = -1;\n  return t.changeByRange((r) => {\n    let i = [];\n    for (let o = r.from; o <= r.to; ) {\n      let a = t.doc.lineAt(o);\n      a.number > n && (r.empty || r.to > a.from) && (e(a, i, r), n = a.number), o = a.to + 1;\n    }\n    let s = t.changes(i);\n    return {\n      changes: i,\n      range: ae.range(s.mapPos(r.anchor, 1), s.mapPos(r.head, 1))\n    };\n  });\n}\nconst aV = ({ state: t, dispatch: e }) => t.readOnly ? !1 : (e(t.update(Ax(t, (n, r) => {\n  r.push({ from: n.from, insert: t.facet(zd) });\n}), { userEvent: \"input.indent\" })), !0), lV = ({ state: t, dispatch: e }) => t.readOnly ? !1 : (e(t.update(Ax(t, (n, r) => {\n  let i = /^\\s*/.exec(n.text)[0];\n  if (!i)\n    return;\n  let s = ig(i, t.tabSize), o = 0, a = lx(t, Math.max(0, s - ax(t)));\n  for (; o < i.length && o < a.length && i.charCodeAt(o) == a.charCodeAt(o); )\n    o++;\n  r.push({ from: n.from + o, to: n.from + i.length, insert: a.slice(o) });\n}), { userEvent: \"delete.dedent\" })), !0), cV = { key: \"Tab\", run: aV, shift: lV };\nclass Yu {\n  /**\n  @internal\n  */\n  constructor(e, n, r, i, s, o, a, l, c, u = 0, d) {\n    this.p = e, this.stack = n, this.state = r, this.reducePos = i, this.pos = s, this.score = o, this.buffer = a, this.bufferBase = l, this.curContext = c, this.lookAhead = u, this.parent = d;\n  }\n  /**\n  @internal\n  */\n  toString() {\n    return `[${this.stack.filter((e, n) => n % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n  }\n  // Start an empty stack\n  /**\n  @internal\n  */\n  static start(e, n, r = 0) {\n    let i = e.parser.context;\n    return new Yu(e, [], n, r, r, 0, [], 0, i ? new n0(i, i.start) : null, 0, null);\n  }\n  /**\n  The stack's current [context](#lr.ContextTracker) value, if\n  any. Its type will depend on the context tracker's type\n  parameter, or it will be `null` if there is no context\n  tracker.\n  */\n  get context() {\n    return this.curContext ? this.curContext.context : null;\n  }\n  // Push a state onto the stack, tracking its start position as well\n  // as the buffer base at that point.\n  /**\n  @internal\n  */\n  pushState(e, n) {\n    this.stack.push(this.state, n, this.bufferBase + this.buffer.length), this.state = e;\n  }\n  // Apply a reduce action\n  /**\n  @internal\n  */\n  reduce(e) {\n    var n;\n    let r = e >> 19, i = e & 65535, { parser: s } = this.p, o = s.dynamicPrecedence(i);\n    if (o && (this.score += o), r == 0) {\n      this.pushState(s.getGoto(this.state, i, !0), this.reducePos), i < s.minRepeatTerm && this.storeNode(i, this.reducePos, this.reducePos, 4, !0), this.reduceContext(i, this.reducePos);\n      return;\n    }\n    let a = this.stack.length - (r - 1) * 3 - (e & 262144 ? 6 : 0), l = a ? this.stack[a - 2] : this.p.ranges[0].from, c = this.reducePos - l;\n    c >= 2e3 && !(!((n = this.p.parser.nodeSet.types[i]) === null || n === void 0) && n.isAnonymous) && (l == this.p.lastBigReductionStart ? (this.p.bigReductionCount++, this.p.lastBigReductionSize = c) : this.p.lastBigReductionSize < c && (this.p.bigReductionCount = 1, this.p.lastBigReductionStart = l, this.p.lastBigReductionSize = c));\n    let u = a ? this.stack[a - 1] : 0, d = this.bufferBase + this.buffer.length - u;\n    if (i < s.minRepeatTerm || e & 131072) {\n      let f = s.stateFlag(\n        this.state,\n        1\n        /* StateFlag.Skipped */\n      ) ? this.pos : this.reducePos;\n      this.storeNode(i, l, f, d + 4, !0);\n    }\n    if (e & 262144)\n      this.state = this.stack[a];\n    else {\n      let f = this.stack[a - 3];\n      this.state = s.getGoto(f, i, !0);\n    }\n    for (; this.stack.length > a; )\n      this.stack.pop();\n    this.reduceContext(i, l);\n  }\n  // Shift a value into the buffer\n  /**\n  @internal\n  */\n  storeNode(e, n, r, i = 4, s = !1) {\n    if (e == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n      let o = this, a = this.buffer.length;\n      if (a == 0 && o.parent && (a = o.bufferBase - o.parent.bufferBase, o = o.parent), a > 0 && o.buffer[a - 4] == 0 && o.buffer[a - 1] > -1) {\n        if (n == r)\n          return;\n        if (o.buffer[a - 2] >= n) {\n          o.buffer[a - 2] = r;\n          return;\n        }\n      }\n    }\n    if (!s || this.pos == r)\n      this.buffer.push(e, n, r, i);\n    else {\n      let o = this.buffer.length;\n      if (o > 0 && this.buffer[o - 4] != 0)\n        for (; o > 0 && this.buffer[o - 2] > r; )\n          this.buffer[o] = this.buffer[o - 4], this.buffer[o + 1] = this.buffer[o - 3], this.buffer[o + 2] = this.buffer[o - 2], this.buffer[o + 3] = this.buffer[o - 1], o -= 4, i > 4 && (i -= 4);\n      this.buffer[o] = e, this.buffer[o + 1] = n, this.buffer[o + 2] = r, this.buffer[o + 3] = i;\n    }\n  }\n  // Apply a shift action\n  /**\n  @internal\n  */\n  shift(e, n, r, i) {\n    if (e & 131072)\n      this.pushState(e & 65535, this.pos);\n    else if (e & 262144)\n      this.pos = i, this.shiftContext(n, r), n <= this.p.parser.maxNode && this.buffer.push(n, r, i, 4);\n    else {\n      let s = e, { parser: o } = this.p;\n      (i > this.pos || n <= o.maxNode) && (this.pos = i, o.stateFlag(\n        s,\n        1\n        /* StateFlag.Skipped */\n      ) || (this.reducePos = i)), this.pushState(s, r), this.shiftContext(n, r), n <= o.maxNode && this.buffer.push(n, r, i, 4);\n    }\n  }\n  // Apply an action\n  /**\n  @internal\n  */\n  apply(e, n, r, i) {\n    e & 65536 ? this.reduce(e) : this.shift(e, n, r, i);\n  }\n  // Add a prebuilt (reused) node into the buffer.\n  /**\n  @internal\n  */\n  useNode(e, n) {\n    let r = this.p.reused.length - 1;\n    (r < 0 || this.p.reused[r] != e) && (this.p.reused.push(e), r++);\n    let i = this.pos;\n    this.reducePos = this.pos = i + e.length, this.pushState(n, i), this.buffer.push(\n      r,\n      i,\n      this.reducePos,\n      -1\n      /* size == -1 means this is a reused value */\n    ), this.curContext && this.updateContext(this.curContext.tracker.reuse(this.curContext.context, e, this, this.p.stream.reset(this.pos - e.length)));\n  }\n  // Split the stack. Due to the buffer sharing and the fact\n  // that `this.stack` tends to stay quite shallow, this isn't very\n  // expensive.\n  /**\n  @internal\n  */\n  split() {\n    let e = this, n = e.buffer.length;\n    for (; n > 0 && e.buffer[n - 2] > e.reducePos; )\n      n -= 4;\n    let r = e.buffer.slice(n), i = e.bufferBase + n;\n    for (; e && i == e.bufferBase; )\n      e = e.parent;\n    return new Yu(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, r, i, this.curContext, this.lookAhead, e);\n  }\n  // Try to recover from an error by 'deleting' (ignoring) one token.\n  /**\n  @internal\n  */\n  recoverByDelete(e, n) {\n    let r = e <= this.p.parser.maxNode;\n    r && this.storeNode(e, this.pos, n, 4), this.storeNode(0, this.pos, n, r ? 8 : 4), this.pos = this.reducePos = n, this.score -= 190;\n  }\n  /**\n  Check if the given term would be able to be shifted (optionally\n  after some reductions) on this stack. This can be useful for\n  external tokenizers that want to make sure they only provide a\n  given token when it applies.\n  */\n  canShift(e) {\n    for (let n = new uV(this); ; ) {\n      let r = this.p.parser.stateSlot(\n        n.state,\n        4\n        /* ParseState.DefaultReduce */\n      ) || this.p.parser.hasAction(n.state, e);\n      if (r == 0)\n        return !1;\n      if (!(r & 65536))\n        return !0;\n      n.reduce(r);\n    }\n  }\n  // Apply up to Recover.MaxNext recovery actions that conceptually\n  // inserts some missing token or rule.\n  /**\n  @internal\n  */\n  recoverByInsert(e) {\n    if (this.stack.length >= 300)\n      return [];\n    let n = this.p.parser.nextStates(this.state);\n    if (n.length > 8 || this.stack.length >= 120) {\n      let i = [];\n      for (let s = 0, o; s < n.length; s += 2)\n        (o = n[s + 1]) != this.state && this.p.parser.hasAction(o, e) && i.push(n[s], o);\n      if (this.stack.length < 120)\n        for (let s = 0; i.length < 8 && s < n.length; s += 2) {\n          let o = n[s + 1];\n          i.some((a, l) => l & 1 && a == o) || i.push(n[s], o);\n        }\n      n = i;\n    }\n    let r = [];\n    for (let i = 0; i < n.length && r.length < 4; i += 2) {\n      let s = n[i + 1];\n      if (s == this.state)\n        continue;\n      let o = this.split();\n      o.pushState(s, this.pos), o.storeNode(0, o.pos, o.pos, 4, !0), o.shiftContext(n[i], this.pos), o.reducePos = this.pos, o.score -= 200, r.push(o);\n    }\n    return r;\n  }\n  // Force a reduce, if possible. Return false if that can't\n  // be done.\n  /**\n  @internal\n  */\n  forceReduce() {\n    let { parser: e } = this.p, n = e.stateSlot(\n      this.state,\n      5\n      /* ParseState.ForcedReduce */\n    );\n    if (!(n & 65536))\n      return !1;\n    if (!e.validAction(this.state, n)) {\n      let r = n >> 19, i = n & 65535, s = this.stack.length - r * 3;\n      if (s < 0 || e.getGoto(this.stack[s], i, !1) < 0) {\n        let o = this.findForcedReduction();\n        if (o == null)\n          return !1;\n        n = o;\n      }\n      this.storeNode(0, this.pos, this.pos, 4, !0), this.score -= 100;\n    }\n    return this.reducePos = this.pos, this.reduce(n), !0;\n  }\n  /**\n  Try to scan through the automaton to find some kind of reduction\n  that can be applied. Used when the regular ForcedReduce field\n  isn't a valid action. @internal\n  */\n  findForcedReduction() {\n    let { parser: e } = this.p, n = [], r = (i, s) => {\n      if (!n.includes(i))\n        return n.push(i), e.allActions(i, (o) => {\n          if (!(o & 393216))\n            if (o & 65536) {\n              let a = (o >> 19) - s;\n              if (a > 1) {\n                let l = o & 65535, c = this.stack.length - a * 3;\n                if (c >= 0 && e.getGoto(this.stack[c], l, !1) >= 0)\n                  return a << 19 | 65536 | l;\n              }\n            } else {\n              let a = r(o, s + 1);\n              if (a != null)\n                return a;\n            }\n        });\n    };\n    return r(this.state, 0);\n  }\n  /**\n  @internal\n  */\n  forceAll() {\n    for (; !this.p.parser.stateFlag(\n      this.state,\n      2\n      /* StateFlag.Accepting */\n    ); )\n      if (!this.forceReduce()) {\n        this.storeNode(0, this.pos, this.pos, 4, !0);\n        break;\n      }\n    return this;\n  }\n  /**\n  Check whether this state has no further actions (assumed to be a direct descendant of the\n  top state, since any other states must be able to continue\n  somehow). @internal\n  */\n  get deadEnd() {\n    if (this.stack.length != 3)\n      return !1;\n    let { parser: e } = this.p;\n    return e.data[e.stateSlot(\n      this.state,\n      1\n      /* ParseState.Actions */\n    )] == 65535 && !e.stateSlot(\n      this.state,\n      4\n      /* ParseState.DefaultReduce */\n    );\n  }\n  /**\n  Restart the stack (put it back in its start state). Only safe\n  when this.stack.length == 3 (state is directly below the top\n  state). @internal\n  */\n  restart() {\n    this.storeNode(0, this.pos, this.pos, 4, !0), this.state = this.stack[0], this.stack.length = 0;\n  }\n  /**\n  @internal\n  */\n  sameState(e) {\n    if (this.state != e.state || this.stack.length != e.stack.length)\n      return !1;\n    for (let n = 0; n < this.stack.length; n += 3)\n      if (this.stack[n] != e.stack[n])\n        return !1;\n    return !0;\n  }\n  /**\n  Get the parser used by this stack.\n  */\n  get parser() {\n    return this.p.parser;\n  }\n  /**\n  Test whether a given dialect (by numeric ID, as exported from\n  the terms file) is enabled.\n  */\n  dialectEnabled(e) {\n    return this.p.parser.dialect.flags[e];\n  }\n  shiftContext(e, n) {\n    this.curContext && this.updateContext(this.curContext.tracker.shift(this.curContext.context, e, this, this.p.stream.reset(n)));\n  }\n  reduceContext(e, n) {\n    this.curContext && this.updateContext(this.curContext.tracker.reduce(this.curContext.context, e, this, this.p.stream.reset(n)));\n  }\n  /**\n  @internal\n  */\n  emitContext() {\n    let e = this.buffer.length - 1;\n    (e < 0 || this.buffer[e] != -3) && this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);\n  }\n  /**\n  @internal\n  */\n  emitLookAhead() {\n    let e = this.buffer.length - 1;\n    (e < 0 || this.buffer[e] != -4) && this.buffer.push(this.lookAhead, this.pos, this.pos, -4);\n  }\n  updateContext(e) {\n    if (e != this.curContext.context) {\n      let n = new n0(this.curContext.tracker, e);\n      n.hash != this.curContext.hash && this.emitContext(), this.curContext = n;\n    }\n  }\n  /**\n  @internal\n  */\n  setLookAhead(e) {\n    e > this.lookAhead && (this.emitLookAhead(), this.lookAhead = e);\n  }\n  /**\n  @internal\n  */\n  close() {\n    this.curContext && this.curContext.tracker.strict && this.emitContext(), this.lookAhead > 0 && this.emitLookAhead();\n  }\n}\nclass n0 {\n  constructor(e, n) {\n    this.tracker = e, this.context = n, this.hash = e.strict ? e.hash(n) : 0;\n  }\n}\nclass uV {\n  constructor(e) {\n    this.start = e, this.state = e.state, this.stack = e.stack, this.base = this.stack.length;\n  }\n  reduce(e) {\n    let n = e & 65535, r = e >> 19;\n    r == 0 ? (this.stack == this.start.stack && (this.stack = this.stack.slice()), this.stack.push(this.state, 0, 0), this.base += 3) : this.base -= (r - 1) * 3;\n    let i = this.start.p.parser.getGoto(this.stack[this.base - 3], n, !0);\n    this.state = i;\n  }\n}\nclass zu {\n  constructor(e, n, r) {\n    this.stack = e, this.pos = n, this.index = r, this.buffer = e.buffer, this.index == 0 && this.maybeNext();\n  }\n  static create(e, n = e.bufferBase + e.buffer.length) {\n    return new zu(e, n, n - e.bufferBase);\n  }\n  maybeNext() {\n    let e = this.stack.parent;\n    e != null && (this.index = this.stack.bufferBase - e.bufferBase, this.stack = e, this.buffer = e.buffer);\n  }\n  get id() {\n    return this.buffer[this.index - 4];\n  }\n  get start() {\n    return this.buffer[this.index - 3];\n  }\n  get end() {\n    return this.buffer[this.index - 2];\n  }\n  get size() {\n    return this.buffer[this.index - 1];\n  }\n  next() {\n    this.index -= 4, this.pos -= 4, this.index == 0 && this.maybeNext();\n  }\n  fork() {\n    return new zu(this.stack, this.pos, this.index);\n  }\n}\nfunction Va(t, e = Uint16Array) {\n  if (typeof t != \"string\")\n    return t;\n  let n = null;\n  for (let r = 0, i = 0; r < t.length; ) {\n    let s = 0;\n    for (; ; ) {\n      let o = t.charCodeAt(r++), a = !1;\n      if (o == 126) {\n        s = 65535;\n        break;\n      }\n      o >= 92 && o--, o >= 34 && o--;\n      let l = o - 32;\n      if (l >= 46 && (l -= 46, a = !0), s += l, a)\n        break;\n      s *= 46;\n    }\n    n ? n[i++] = s : n = new e(s);\n  }\n  return n;\n}\nclass cu {\n  constructor() {\n    this.start = -1, this.value = -1, this.end = -1, this.extended = -1, this.lookAhead = 0, this.mask = 0, this.context = 0;\n  }\n}\nconst r0 = new cu();\nclass dV {\n  /**\n  @internal\n  */\n  constructor(e, n) {\n    this.input = e, this.ranges = n, this.chunk = \"\", this.chunkOff = 0, this.chunk2 = \"\", this.chunk2Pos = 0, this.next = -1, this.token = r0, this.rangeIndex = 0, this.pos = this.chunkPos = n[0].from, this.range = n[0], this.end = n[n.length - 1].to, this.readNext();\n  }\n  /**\n  @internal\n  */\n  resolveOffset(e, n) {\n    let r = this.range, i = this.rangeIndex, s = this.pos + e;\n    for (; s < r.from; ) {\n      if (!i)\n        return null;\n      let o = this.ranges[--i];\n      s -= r.from - o.to, r = o;\n    }\n    for (; n < 0 ? s > r.to : s >= r.to; ) {\n      if (i == this.ranges.length - 1)\n        return null;\n      let o = this.ranges[++i];\n      s += o.from - r.to, r = o;\n    }\n    return s;\n  }\n  /**\n  @internal\n  */\n  clipPos(e) {\n    if (e >= this.range.from && e < this.range.to)\n      return e;\n    for (let n of this.ranges)\n      if (n.to > e)\n        return Math.max(e, n.from);\n    return this.end;\n  }\n  /**\n  Look at a code unit near the stream position. `.peek(0)` equals\n  `.next`, `.peek(-1)` gives you the previous character, and so\n  on.\n  \n  Note that looking around during tokenizing creates dependencies\n  on potentially far-away content, which may reduce the\n  effectiveness incremental parsing—when looking forward—or even\n  cause invalid reparses when looking backward more than 25 code\n  units, since the library does not track lookbehind.\n  */\n  peek(e) {\n    let n = this.chunkOff + e, r, i;\n    if (n >= 0 && n < this.chunk.length)\n      r = this.pos + e, i = this.chunk.charCodeAt(n);\n    else {\n      let s = this.resolveOffset(e, 1);\n      if (s == null)\n        return -1;\n      if (r = s, r >= this.chunk2Pos && r < this.chunk2Pos + this.chunk2.length)\n        i = this.chunk2.charCodeAt(r - this.chunk2Pos);\n      else {\n        let o = this.rangeIndex, a = this.range;\n        for (; a.to <= r; )\n          a = this.ranges[++o];\n        this.chunk2 = this.input.chunk(this.chunk2Pos = r), r + this.chunk2.length > a.to && (this.chunk2 = this.chunk2.slice(0, a.to - r)), i = this.chunk2.charCodeAt(0);\n      }\n    }\n    return r >= this.token.lookAhead && (this.token.lookAhead = r + 1), i;\n  }\n  /**\n  Accept a token. By default, the end of the token is set to the\n  current stream position, but you can pass an offset (relative to\n  the stream position) to change that.\n  */\n  acceptToken(e, n = 0) {\n    let r = n ? this.resolveOffset(n, -1) : this.pos;\n    if (r == null || r < this.token.start)\n      throw new RangeError(\"Token end out of bounds\");\n    this.token.value = e, this.token.end = r;\n  }\n  /**\n  Accept a token ending at a specific given position.\n  */\n  acceptTokenTo(e, n) {\n    this.token.value = e, this.token.end = n;\n  }\n  getChunk() {\n    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n      let { chunk: e, chunkPos: n } = this;\n      this.chunk = this.chunk2, this.chunkPos = this.chunk2Pos, this.chunk2 = e, this.chunk2Pos = n, this.chunkOff = this.pos - this.chunkPos;\n    } else {\n      this.chunk2 = this.chunk, this.chunk2Pos = this.chunkPos;\n      let e = this.input.chunk(this.pos), n = this.pos + e.length;\n      this.chunk = n > this.range.to ? e.slice(0, this.range.to - this.pos) : e, this.chunkPos = this.pos, this.chunkOff = 0;\n    }\n  }\n  readNext() {\n    return this.chunkOff >= this.chunk.length && (this.getChunk(), this.chunkOff == this.chunk.length) ? this.next = -1 : this.next = this.chunk.charCodeAt(this.chunkOff);\n  }\n  /**\n  Move the stream forward N (defaults to 1) code units. Returns\n  the new value of [`next`](#lr.InputStream.next).\n  */\n  advance(e = 1) {\n    for (this.chunkOff += e; this.pos + e >= this.range.to; ) {\n      if (this.rangeIndex == this.ranges.length - 1)\n        return this.setDone();\n      e -= this.range.to - this.pos, this.range = this.ranges[++this.rangeIndex], this.pos = this.range.from;\n    }\n    return this.pos += e, this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1), this.readNext();\n  }\n  setDone() {\n    return this.pos = this.chunkPos = this.end, this.range = this.ranges[this.rangeIndex = this.ranges.length - 1], this.chunk = \"\", this.next = -1;\n  }\n  /**\n  @internal\n  */\n  reset(e, n) {\n    if (n ? (this.token = n, n.start = e, n.lookAhead = e + 1, n.value = n.extended = -1) : this.token = r0, this.pos != e) {\n      if (this.pos = e, e == this.end)\n        return this.setDone(), this;\n      for (; e < this.range.from; )\n        this.range = this.ranges[--this.rangeIndex];\n      for (; e >= this.range.to; )\n        this.range = this.ranges[++this.rangeIndex];\n      e >= this.chunkPos && e < this.chunkPos + this.chunk.length ? this.chunkOff = e - this.chunkPos : (this.chunk = \"\", this.chunkOff = 0), this.readNext();\n    }\n    return this;\n  }\n  /**\n  @internal\n  */\n  read(e, n) {\n    if (e >= this.chunkPos && n <= this.chunkPos + this.chunk.length)\n      return this.chunk.slice(e - this.chunkPos, n - this.chunkPos);\n    if (e >= this.chunk2Pos && n <= this.chunk2Pos + this.chunk2.length)\n      return this.chunk2.slice(e - this.chunk2Pos, n - this.chunk2Pos);\n    if (e >= this.range.from && n <= this.range.to)\n      return this.input.read(e, n);\n    let r = \"\";\n    for (let i of this.ranges) {\n      if (i.from >= n)\n        break;\n      i.to > e && (r += this.input.read(Math.max(i.from, e), Math.min(i.to, n)));\n    }\n    return r;\n  }\n}\nclass Co {\n  constructor(e, n) {\n    this.data = e, this.id = n;\n  }\n  token(e, n) {\n    let { parser: r } = n.p;\n    Rx(this.data, e, n, this.id, r.data, r.tokenPrecTable);\n  }\n}\nCo.prototype.contextual = Co.prototype.fallback = Co.prototype.extend = !1;\nclass Hu {\n  constructor(e, n, r) {\n    this.precTable = n, this.elseToken = r, this.data = typeof e == \"string\" ? Va(e) : e;\n  }\n  token(e, n) {\n    let r = e.pos, i = 0;\n    for (; ; ) {\n      let s = e.next < 0, o = e.resolveOffset(1, 1);\n      if (Rx(this.data, e, n, 0, this.data, this.precTable), e.token.value > -1)\n        break;\n      if (this.elseToken == null)\n        return;\n      if (s || i++, o == null)\n        break;\n      e.reset(o, e.token);\n    }\n    i && (e.reset(r, e.token), e.acceptToken(this.elseToken, i));\n  }\n}\nHu.prototype.contextual = Co.prototype.fallback = Co.prototype.extend = !1;\nclass gn {\n  /**\n  Create a tokenizer. The first argument is the function that,\n  given an input stream, scans for the types of tokens it\n  recognizes at the stream's position, and calls\n  [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n  one.\n  */\n  constructor(e, n = {}) {\n    this.token = e, this.contextual = !!n.contextual, this.fallback = !!n.fallback, this.extend = !!n.extend;\n  }\n}\nfunction Rx(t, e, n, r, i, s) {\n  let o = 0, a = 1 << r, { dialect: l } = n.p.parser;\n  e:\n    for (; a & t[o]; ) {\n      let c = t[o + 1];\n      for (let h = o + 3; h < c; h += 2)\n        if ((t[h + 1] & a) > 0) {\n          let p = t[h];\n          if (l.allows(p) && (e.token.value == -1 || e.token.value == p || fV(p, e.token.value, i, s))) {\n            e.acceptToken(p);\n            break;\n          }\n        }\n      let u = e.next, d = 0, f = t[o + 2];\n      if (e.next < 0 && f > d && t[c + f * 3 - 3] == 65535) {\n        o = t[c + f * 3 - 1];\n        continue e;\n      }\n      for (; d < f; ) {\n        let h = d + f >> 1, p = c + h + (h << 1), O = t[p], m = t[p + 1] || 65536;\n        if (u < O)\n          f = h;\n        else if (u >= m)\n          d = h + 1;\n        else {\n          o = t[p + 2], e.advance();\n          continue e;\n        }\n      }\n      break;\n    }\n}\nfunction i0(t, e, n) {\n  for (let r = e, i; (i = t[r]) != 65535; r++)\n    if (i == n)\n      return r - e;\n  return -1;\n}\nfunction fV(t, e, n, r) {\n  let i = i0(n, r, e);\n  return i < 0 || i0(n, r, t) < i;\n}\nconst Qn = typeof process < \"u\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet jf = null;\nfunction s0(t, e, n) {\n  let r = t.cursor(lt.IncludeAnonymous);\n  for (r.moveTo(e); ; )\n    if (!(n < 0 ? r.childBefore(e) : r.childAfter(e)))\n      for (; ; ) {\n        if ((n < 0 ? r.to < e : r.from > e) && !r.type.isError)\n          return n < 0 ? Math.max(0, Math.min(\n            r.to - 1,\n            e - 25\n            /* Safety.Margin */\n          )) : Math.min(t.length, Math.max(\n            r.from + 1,\n            e + 25\n            /* Safety.Margin */\n          ));\n        if (n < 0 ? r.prevSibling() : r.nextSibling())\n          break;\n        if (!r.parent())\n          return n < 0 ? 0 : t.length;\n      }\n}\nclass hV {\n  constructor(e, n) {\n    this.fragments = e, this.nodeSet = n, this.i = 0, this.fragment = null, this.safeFrom = -1, this.safeTo = -1, this.trees = [], this.start = [], this.index = [], this.nextFragment();\n  }\n  nextFragment() {\n    let e = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n    if (e) {\n      for (this.safeFrom = e.openStart ? s0(e.tree, e.from + e.offset, 1) - e.offset : e.from, this.safeTo = e.openEnd ? s0(e.tree, e.to + e.offset, -1) - e.offset : e.to; this.trees.length; )\n        this.trees.pop(), this.start.pop(), this.index.pop();\n      this.trees.push(e.tree), this.start.push(-e.offset), this.index.push(0), this.nextStart = this.safeFrom;\n    } else\n      this.nextStart = 1e9;\n  }\n  // `pos` must be >= any previously given `pos` for this cursor\n  nodeAt(e) {\n    if (e < this.nextStart)\n      return null;\n    for (; this.fragment && this.safeTo <= e; )\n      this.nextFragment();\n    if (!this.fragment)\n      return null;\n    for (; ; ) {\n      let n = this.trees.length - 1;\n      if (n < 0)\n        return this.nextFragment(), null;\n      let r = this.trees[n], i = this.index[n];\n      if (i == r.children.length) {\n        this.trees.pop(), this.start.pop(), this.index.pop();\n        continue;\n      }\n      let s = r.children[i], o = this.start[n] + r.positions[i];\n      if (o > e)\n        return this.nextStart = o, null;\n      if (s instanceof gt) {\n        if (o == e) {\n          if (o < this.safeFrom)\n            return null;\n          let a = o + s.length;\n          if (a <= this.safeTo) {\n            let l = s.prop(Re.lookAhead);\n            if (!l || a + l < this.fragment.to)\n              return s;\n          }\n        }\n        this.index[n]++, o + s.length >= Math.max(this.safeFrom, e) && (this.trees.push(s), this.start.push(o), this.index.push(0));\n      } else\n        this.index[n]++, this.nextStart = o + s.length;\n    }\n  }\n}\nclass pV {\n  constructor(e, n) {\n    this.stream = n, this.tokens = [], this.mainToken = null, this.actions = [], this.tokens = e.tokenizers.map((r) => new cu());\n  }\n  getActions(e) {\n    let n = 0, r = null, { parser: i } = e.p, { tokenizers: s } = i, o = i.stateSlot(\n      e.state,\n      3\n      /* ParseState.TokenizerMask */\n    ), a = e.curContext ? e.curContext.hash : 0, l = 0;\n    for (let c = 0; c < s.length; c++) {\n      if (!(1 << c & o))\n        continue;\n      let u = s[c], d = this.tokens[c];\n      if (!(r && !u.fallback) && ((u.contextual || d.start != e.pos || d.mask != o || d.context != a) && (this.updateCachedToken(d, u, e), d.mask = o, d.context = a), d.lookAhead > d.end + 25 && (l = Math.max(d.lookAhead, l)), d.value != 0)) {\n        let f = n;\n        if (d.extended > -1 && (n = this.addActions(e, d.extended, d.end, n)), n = this.addActions(e, d.value, d.end, n), !u.extend && (r = d, n > f))\n          break;\n      }\n    }\n    for (; this.actions.length > n; )\n      this.actions.pop();\n    return l && e.setLookAhead(l), !r && e.pos == this.stream.end && (r = new cu(), r.value = e.p.parser.eofTerm, r.start = r.end = e.pos, n = this.addActions(e, r.value, r.end, n)), this.mainToken = r, this.actions;\n  }\n  getMainToken(e) {\n    if (this.mainToken)\n      return this.mainToken;\n    let n = new cu(), { pos: r, p: i } = e;\n    return n.start = r, n.end = Math.min(r + 1, i.stream.end), n.value = r == i.stream.end ? i.parser.eofTerm : 0, n;\n  }\n  updateCachedToken(e, n, r) {\n    let i = this.stream.clipPos(r.pos);\n    if (n.token(this.stream.reset(i, e), r), e.value > -1) {\n      let { parser: s } = r.p;\n      for (let o = 0; o < s.specialized.length; o++)\n        if (s.specialized[o] == e.value) {\n          let a = s.specializers[o](this.stream.read(e.start, e.end), r);\n          if (a >= 0 && r.p.parser.dialect.allows(a >> 1)) {\n            a & 1 ? e.extended = a >> 1 : e.value = a >> 1;\n            break;\n          }\n        }\n    } else\n      e.value = 0, e.end = this.stream.clipPos(i + 1);\n  }\n  putAction(e, n, r, i) {\n    for (let s = 0; s < i; s += 3)\n      if (this.actions[s] == e)\n        return i;\n    return this.actions[i++] = e, this.actions[i++] = n, this.actions[i++] = r, i;\n  }\n  addActions(e, n, r, i) {\n    let { state: s } = e, { parser: o } = e.p, { data: a } = o;\n    for (let l = 0; l < 2; l++)\n      for (let c = o.stateSlot(\n        s,\n        l ? 2 : 1\n        /* ParseState.Actions */\n      ); ; c += 3) {\n        if (a[c] == 65535)\n          if (a[c + 1] == 1)\n            c = ti(a, c + 2);\n          else {\n            i == 0 && a[c + 1] == 2 && (i = this.putAction(ti(a, c + 2), n, r, i));\n            break;\n          }\n        a[c] == n && (i = this.putAction(ti(a, c + 1), n, r, i));\n      }\n    return i;\n  }\n}\nclass OV {\n  constructor(e, n, r, i) {\n    this.parser = e, this.input = n, this.ranges = i, this.recovering = 0, this.nextStackID = 9812, this.minStackPos = 0, this.reused = [], this.stoppedAt = null, this.lastBigReductionStart = -1, this.lastBigReductionSize = 0, this.bigReductionCount = 0, this.stream = new dV(n, i), this.tokens = new pV(e, this.stream), this.topTerm = e.top[1];\n    let { from: s } = i[0];\n    this.stacks = [Yu.start(this, e.top[0], s)], this.fragments = r.length && this.stream.end - s > e.bufferLength * 4 ? new hV(r, e.nodeSet) : null;\n  }\n  get parsedPos() {\n    return this.minStackPos;\n  }\n  // Move the parser forward. This will process all parse stacks at\n  // `this.pos` and try to advance them to a further position. If no\n  // stack for such a position is found, it'll start error-recovery.\n  //\n  // When the parse is finished, this will return a syntax tree. When\n  // not, it returns `null`.\n  advance() {\n    let e = this.stacks, n = this.minStackPos, r = this.stacks = [], i, s;\n    if (this.bigReductionCount > 300 && e.length == 1) {\n      let [o] = e;\n      for (; o.forceReduce() && o.stack.length && o.stack[o.stack.length - 2] >= this.lastBigReductionStart; )\n        ;\n      this.bigReductionCount = this.lastBigReductionSize = 0;\n    }\n    for (let o = 0; o < e.length; o++) {\n      let a = e[o];\n      for (; ; ) {\n        if (this.tokens.mainToken = null, a.pos > n)\n          r.push(a);\n        else {\n          if (this.advanceStack(a, r, e))\n            continue;\n          {\n            i || (i = [], s = []), i.push(a);\n            let l = this.tokens.getMainToken(a);\n            s.push(l.value, l.end);\n          }\n        }\n        break;\n      }\n    }\n    if (!r.length) {\n      let o = i && mV(i);\n      if (o)\n        return Qn && console.log(\"Finish with \" + this.stackID(o)), this.stackToTree(o);\n      if (this.parser.strict)\n        throw Qn && i && console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\")), new SyntaxError(\"No parse at \" + n);\n      this.recovering || (this.recovering = 5);\n    }\n    if (this.recovering && i) {\n      let o = this.stoppedAt != null && i[0].pos > this.stoppedAt ? i[0] : this.runRecovery(i, s, r);\n      if (o)\n        return Qn && console.log(\"Force-finish \" + this.stackID(o)), this.stackToTree(o.forceAll());\n    }\n    if (this.recovering) {\n      let o = this.recovering == 1 ? 1 : this.recovering * 3;\n      if (r.length > o)\n        for (r.sort((a, l) => l.score - a.score); r.length > o; )\n          r.pop();\n      r.some((a) => a.reducePos > n) && this.recovering--;\n    } else if (r.length > 1) {\n      e:\n        for (let o = 0; o < r.length - 1; o++) {\n          let a = r[o];\n          for (let l = o + 1; l < r.length; l++) {\n            let c = r[l];\n            if (a.sameState(c) || a.buffer.length > 500 && c.buffer.length > 500)\n              if ((a.score - c.score || a.buffer.length - c.buffer.length) > 0)\n                r.splice(l--, 1);\n              else {\n                r.splice(o--, 1);\n                continue e;\n              }\n          }\n        }\n      r.length > 12 && r.splice(\n        12,\n        r.length - 12\n        /* Rec.MaxStackCount */\n      );\n    }\n    this.minStackPos = r[0].pos;\n    for (let o = 1; o < r.length; o++)\n      r[o].pos < this.minStackPos && (this.minStackPos = r[o].pos);\n    return null;\n  }\n  stopAt(e) {\n    if (this.stoppedAt != null && this.stoppedAt < e)\n      throw new RangeError(\"Can't move stoppedAt forward\");\n    this.stoppedAt = e;\n  }\n  // Returns an updated version of the given stack, or null if the\n  // stack can't advance normally. When `split` and `stacks` are\n  // given, stacks split off by ambiguous operations will be pushed to\n  // `split`, or added to `stacks` if they move `pos` forward.\n  advanceStack(e, n, r) {\n    let i = e.pos, { parser: s } = this, o = Qn ? this.stackID(e) + \" -> \" : \"\";\n    if (this.stoppedAt != null && i > this.stoppedAt)\n      return e.forceReduce() ? e : null;\n    if (this.fragments) {\n      let c = e.curContext && e.curContext.tracker.strict, u = c ? e.curContext.hash : 0;\n      for (let d = this.fragments.nodeAt(i); d; ) {\n        let f = this.parser.nodeSet.types[d.type.id] == d.type ? s.getGoto(e.state, d.type.id) : -1;\n        if (f > -1 && d.length && (!c || (d.prop(Re.contextHash) || 0) == u))\n          return e.useNode(d, f), Qn && console.log(o + this.stackID(e) + ` (via reuse of ${s.getName(d.type.id)})`), !0;\n        if (!(d instanceof gt) || d.children.length == 0 || d.positions[0] > 0)\n          break;\n        let h = d.children[0];\n        if (h instanceof gt && d.positions[0] == 0)\n          d = h;\n        else\n          break;\n      }\n    }\n    let a = s.stateSlot(\n      e.state,\n      4\n      /* ParseState.DefaultReduce */\n    );\n    if (a > 0)\n      return e.reduce(a), Qn && console.log(o + this.stackID(e) + ` (via always-reduce ${s.getName(\n        a & 65535\n        /* Action.ValueMask */\n      )})`), !0;\n    if (e.stack.length >= 8400)\n      for (; e.stack.length > 6e3 && e.forceReduce(); )\n        ;\n    let l = this.tokens.getActions(e);\n    for (let c = 0; c < l.length; ) {\n      let u = l[c++], d = l[c++], f = l[c++], h = c == l.length || !r, p = h ? e : e.split(), O = this.tokens.mainToken;\n      if (p.apply(u, d, O ? O.start : p.pos, f), Qn && console.log(o + this.stackID(p) + ` (via ${u & 65536 ? `reduce of ${s.getName(\n        u & 65535\n        /* Action.ValueMask */\n      )}` : \"shift\"} for ${s.getName(d)} @ ${i}${p == e ? \"\" : \", split\"})`), h)\n        return !0;\n      p.pos > i ? n.push(p) : r.push(p);\n    }\n    return !1;\n  }\n  // Advance a given stack forward as far as it will go. Returns the\n  // (possibly updated) stack if it got stuck, or null if it moved\n  // forward and was given to `pushStackDedup`.\n  advanceFully(e, n) {\n    let r = e.pos;\n    for (; ; ) {\n      if (!this.advanceStack(e, null, null))\n        return !1;\n      if (e.pos > r)\n        return o0(e, n), !0;\n    }\n  }\n  runRecovery(e, n, r) {\n    let i = null, s = !1;\n    for (let o = 0; o < e.length; o++) {\n      let a = e[o], l = n[o << 1], c = n[(o << 1) + 1], u = Qn ? this.stackID(a) + \" -> \" : \"\";\n      if (a.deadEnd && (s || (s = !0, a.restart(), Qn && console.log(u + this.stackID(a) + \" (restarted)\"), this.advanceFully(a, r))))\n        continue;\n      let d = a.split(), f = u;\n      for (let h = 0; d.forceReduce() && h < 10 && (Qn && console.log(f + this.stackID(d) + \" (via force-reduce)\"), !this.advanceFully(d, r)); h++)\n        Qn && (f = this.stackID(d) + \" -> \");\n      for (let h of a.recoverByInsert(l))\n        Qn && console.log(u + this.stackID(h) + \" (via recover-insert)\"), this.advanceFully(h, r);\n      this.stream.end > a.pos ? (c == a.pos && (c++, l = 0), a.recoverByDelete(l, c), Qn && console.log(u + this.stackID(a) + ` (via recover-delete ${this.parser.getName(l)})`), o0(a, r)) : (!i || i.score < a.score) && (i = a);\n    }\n    return i;\n  }\n  // Convert the stack's buffer to a syntax tree.\n  stackToTree(e) {\n    return e.close(), gt.build({\n      buffer: zu.create(e),\n      nodeSet: this.parser.nodeSet,\n      topID: this.topTerm,\n      maxBufferLength: this.parser.bufferLength,\n      reused: this.reused,\n      start: this.ranges[0].from,\n      length: e.pos - this.ranges[0].from,\n      minRepeatType: this.parser.minRepeatTerm\n    });\n  }\n  stackID(e) {\n    let n = (jf || (jf = /* @__PURE__ */ new WeakMap())).get(e);\n    return n || jf.set(e, n = String.fromCodePoint(this.nextStackID++)), n + e;\n  }\n}\nfunction o0(t, e) {\n  for (let n = 0; n < e.length; n++) {\n    let r = e[n];\n    if (r.pos == t.pos && r.sameState(t)) {\n      e[n].score < t.score && (e[n] = t);\n      return;\n    }\n  }\n  e.push(t);\n}\nclass gV {\n  constructor(e, n, r) {\n    this.source = e, this.flags = n, this.disabled = r;\n  }\n  allows(e) {\n    return !this.disabled || this.disabled[e] == 0;\n  }\n}\nconst Bf = (t) => t;\nclass wg {\n  /**\n  Define a context tracker.\n  */\n  constructor(e) {\n    this.start = e.start, this.shift = e.shift || Bf, this.reduce = e.reduce || Bf, this.reuse = e.reuse || Bf, this.hash = e.hash || (() => 0), this.strict = e.strict !== !1;\n  }\n}\nclass us extends tx {\n  /**\n  @internal\n  */\n  constructor(e) {\n    if (super(), this.wrappers = [], e.version != 14)\n      throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (14)`);\n    let n = e.nodeNames.split(\" \");\n    this.minRepeatTerm = n.length;\n    for (let a = 0; a < e.repeatNodeCount; a++)\n      n.push(\"\");\n    let r = Object.keys(e.topRules).map((a) => e.topRules[a][1]), i = [];\n    for (let a = 0; a < n.length; a++)\n      i.push([]);\n    function s(a, l, c) {\n      i[a].push([l, l.deserialize(String(c))]);\n    }\n    if (e.nodeProps)\n      for (let a of e.nodeProps) {\n        let l = a[0];\n        typeof l == \"string\" && (l = Re[l]);\n        for (let c = 1; c < a.length; ) {\n          let u = a[c++];\n          if (u >= 0)\n            s(u, l, a[c++]);\n          else {\n            let d = a[c + -u];\n            for (let f = -u; f > 0; f--)\n              s(a[c++], l, d);\n            c++;\n          }\n        }\n      }\n    this.nodeSet = new fg(n.map((a, l) => On.define({\n      name: l >= this.minRepeatTerm ? void 0 : a,\n      id: l,\n      props: i[l],\n      top: r.indexOf(l) > -1,\n      error: l == 0,\n      skipped: e.skippedNodes && e.skippedNodes.indexOf(l) > -1\n    }))), e.propSources && (this.nodeSet = this.nodeSet.extend(...e.propSources)), this.strict = !1, this.bufferLength = Fk;\n    let o = Va(e.tokenData);\n    this.context = e.context, this.specializerSpecs = e.specialized || [], this.specialized = new Uint16Array(this.specializerSpecs.length);\n    for (let a = 0; a < this.specializerSpecs.length; a++)\n      this.specialized[a] = this.specializerSpecs[a].term;\n    this.specializers = this.specializerSpecs.map(a0), this.states = Va(e.states, Uint32Array), this.data = Va(e.stateData), this.goto = Va(e.goto), this.maxTerm = e.maxTerm, this.tokenizers = e.tokenizers.map((a) => typeof a == \"number\" ? new Co(o, a) : a), this.topRules = e.topRules, this.dialects = e.dialects || {}, this.dynamicPrecedences = e.dynamicPrecedences || null, this.tokenPrecTable = e.tokenPrec, this.termNames = e.termNames || null, this.maxNode = this.nodeSet.types.length - 1, this.dialect = this.parseDialect(), this.top = this.topRules[Object.keys(this.topRules)[0]];\n  }\n  createParse(e, n, r) {\n    let i = new OV(this, e, n, r);\n    for (let s of this.wrappers)\n      i = s(i, e, n, r);\n    return i;\n  }\n  /**\n  Get a goto table entry @internal\n  */\n  getGoto(e, n, r = !1) {\n    let i = this.goto;\n    if (n >= i[0])\n      return -1;\n    for (let s = i[n + 1]; ; ) {\n      let o = i[s++], a = o & 1, l = i[s++];\n      if (a && r)\n        return l;\n      for (let c = s + (o >> 1); s < c; s++)\n        if (i[s] == e)\n          return l;\n      if (a)\n        return -1;\n    }\n  }\n  /**\n  Check if this state has an action for a given terminal @internal\n  */\n  hasAction(e, n) {\n    let r = this.data;\n    for (let i = 0; i < 2; i++)\n      for (let s = this.stateSlot(\n        e,\n        i ? 2 : 1\n        /* ParseState.Actions */\n      ), o; ; s += 3) {\n        if ((o = r[s]) == 65535)\n          if (r[s + 1] == 1)\n            o = r[s = ti(r, s + 2)];\n          else {\n            if (r[s + 1] == 2)\n              return ti(r, s + 2);\n            break;\n          }\n        if (o == n || o == 0)\n          return ti(r, s + 1);\n      }\n    return 0;\n  }\n  /**\n  @internal\n  */\n  stateSlot(e, n) {\n    return this.states[e * 6 + n];\n  }\n  /**\n  @internal\n  */\n  stateFlag(e, n) {\n    return (this.stateSlot(\n      e,\n      0\n      /* ParseState.Flags */\n    ) & n) > 0;\n  }\n  /**\n  @internal\n  */\n  validAction(e, n) {\n    return !!this.allActions(e, (r) => r == n ? !0 : null);\n  }\n  /**\n  @internal\n  */\n  allActions(e, n) {\n    let r = this.stateSlot(\n      e,\n      4\n      /* ParseState.DefaultReduce */\n    ), i = r ? n(r) : void 0;\n    for (let s = this.stateSlot(\n      e,\n      1\n      /* ParseState.Actions */\n    ); i == null; s += 3) {\n      if (this.data[s] == 65535)\n        if (this.data[s + 1] == 1)\n          s = ti(this.data, s + 2);\n        else\n          break;\n      i = n(ti(this.data, s + 1));\n    }\n    return i;\n  }\n  /**\n  Get the states that can follow this one through shift actions or\n  goto jumps. @internal\n  */\n  nextStates(e) {\n    let n = [];\n    for (let r = this.stateSlot(\n      e,\n      1\n      /* ParseState.Actions */\n    ); ; r += 3) {\n      if (this.data[r] == 65535)\n        if (this.data[r + 1] == 1)\n          r = ti(this.data, r + 2);\n        else\n          break;\n      if (!(this.data[r + 2] & 1)) {\n        let i = this.data[r + 1];\n        n.some((s, o) => o & 1 && s == i) || n.push(this.data[r], i);\n      }\n    }\n    return n;\n  }\n  /**\n  Configure the parser. Returns a new parser instance that has the\n  given settings modified. Settings not provided in `config` are\n  kept from the original parser.\n  */\n  configure(e) {\n    let n = Object.assign(Object.create(us.prototype), this);\n    if (e.props && (n.nodeSet = this.nodeSet.extend(...e.props)), e.top) {\n      let r = this.topRules[e.top];\n      if (!r)\n        throw new RangeError(`Invalid top rule name ${e.top}`);\n      n.top = r;\n    }\n    return e.tokenizers && (n.tokenizers = this.tokenizers.map((r) => {\n      let i = e.tokenizers.find((s) => s.from == r);\n      return i ? i.to : r;\n    })), e.specializers && (n.specializers = this.specializers.slice(), n.specializerSpecs = this.specializerSpecs.map((r, i) => {\n      let s = e.specializers.find((a) => a.from == r.external);\n      if (!s)\n        return r;\n      let o = Object.assign(Object.assign({}, r), { external: s.to });\n      return n.specializers[i] = a0(o), o;\n    })), e.contextTracker && (n.context = e.contextTracker), e.dialect && (n.dialect = this.parseDialect(e.dialect)), e.strict != null && (n.strict = e.strict), e.wrap && (n.wrappers = n.wrappers.concat(e.wrap)), e.bufferLength != null && (n.bufferLength = e.bufferLength), n;\n  }\n  /**\n  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n  are registered for this parser.\n  */\n  hasWrappers() {\n    return this.wrappers.length > 0;\n  }\n  /**\n  Returns the name associated with a given term. This will only\n  work for all terms when the parser was generated with the\n  `--names` option. By default, only the names of tagged terms are\n  stored.\n  */\n  getName(e) {\n    return this.termNames ? this.termNames[e] : String(e <= this.maxNode && this.nodeSet.types[e].name || e);\n  }\n  /**\n  The eof term id is always allocated directly after the node\n  types. @internal\n  */\n  get eofTerm() {\n    return this.maxNode + 1;\n  }\n  /**\n  The type of top node produced by the parser.\n  */\n  get topNode() {\n    return this.nodeSet.types[this.top[1]];\n  }\n  /**\n  @internal\n  */\n  dynamicPrecedence(e) {\n    let n = this.dynamicPrecedences;\n    return n == null ? 0 : n[e] || 0;\n  }\n  /**\n  @internal\n  */\n  parseDialect(e) {\n    let n = Object.keys(this.dialects), r = n.map(() => !1);\n    if (e)\n      for (let s of e.split(\" \")) {\n        let o = n.indexOf(s);\n        o >= 0 && (r[o] = !0);\n      }\n    let i = null;\n    for (let s = 0; s < n.length; s++)\n      if (!r[s])\n        for (let o = this.dialects[n[s]], a; (a = this.data[o++]) != 65535; )\n          (i || (i = new Uint8Array(this.maxTerm + 1)))[a] = 1;\n    return new gV(e, r, i);\n  }\n  /**\n  Used by the output of the parser generator. Not available to\n  user code. @hide\n  */\n  static deserialize(e) {\n    return new us(e);\n  }\n}\nfunction ti(t, e) {\n  return t[e] | t[e + 1] << 16;\n}\nfunction mV(t) {\n  let e = null;\n  for (let n of t) {\n    let r = n.p.stoppedAt;\n    (n.pos == n.p.stream.end || r != null && n.pos > r) && n.p.parser.stateFlag(\n      n.state,\n      2\n      /* StateFlag.Accepting */\n    ) && (!e || e.score < n.score) && (e = n);\n  }\n  return e;\n}\nfunction a0(t) {\n  if (t.external) {\n    let e = t.extend ? 1 : 0;\n    return (n, r) => t.external(n, r) << 1 | e;\n  }\n  return t.get;\n}\nconst bV = 99, l0 = 1, vV = 100, yV = 101, c0 = 2, Nx = [\n  9,\n  10,\n  11,\n  12,\n  13,\n  32,\n  133,\n  160,\n  5760,\n  8192,\n  8193,\n  8194,\n  8195,\n  8196,\n  8197,\n  8198,\n  8199,\n  8200,\n  8201,\n  8202,\n  8232,\n  8233,\n  8239,\n  8287,\n  12288\n], SV = 58, wV = 40, Dx = 95, kV = 91, uu = 45, xV = 46, PV = 35, _V = 37, TV = 38, EV = 92, $V = 10;\nfunction xl(t) {\n  return t >= 65 && t <= 90 || t >= 97 && t <= 122 || t >= 161;\n}\nfunction Zx(t) {\n  return t >= 48 && t <= 57;\n}\nconst QV = new gn((t, e) => {\n  for (let n = !1, r = 0, i = 0; ; i++) {\n    let { next: s } = t;\n    if (xl(s) || s == uu || s == Dx || n && Zx(s))\n      !n && (s != uu || i > 0) && (n = !0), r === i && s == uu && r++, t.advance();\n    else if (s == EV && t.peek(1) != $V)\n      t.advance(), t.next > -1 && t.advance(), n = !0;\n    else {\n      n && t.acceptToken(s == wV ? vV : r == 2 && e.canShift(c0) ? c0 : yV);\n      break;\n    }\n  }\n}), CV = new gn((t) => {\n  if (Nx.includes(t.peek(-1))) {\n    let { next: e } = t;\n    (xl(e) || e == Dx || e == PV || e == xV || e == kV || e == SV && xl(t.peek(1)) || e == uu || e == TV) && t.acceptToken(bV);\n  }\n}), AV = new gn((t) => {\n  if (!Nx.includes(t.peek(-1))) {\n    let { next: e } = t;\n    if (e == _V && (t.advance(), t.acceptToken(l0)), xl(e)) {\n      do\n        t.advance();\n      while (xl(t.next) || Zx(t.next));\n      t.acceptToken(l0);\n    }\n  }\n}), RV = ia({\n  \"AtKeyword import charset namespace keyframes media supports\": P.definitionKeyword,\n  \"from to selector\": P.keyword,\n  NamespaceName: P.namespace,\n  KeyframeName: P.labelName,\n  KeyframeRangeName: P.operatorKeyword,\n  TagName: P.tagName,\n  ClassName: P.className,\n  PseudoClassName: P.constant(P.className),\n  IdName: P.labelName,\n  \"FeatureName PropertyName\": P.propertyName,\n  AttributeName: P.attributeName,\n  NumberLiteral: P.number,\n  KeywordQuery: P.keyword,\n  UnaryQueryOp: P.operatorKeyword,\n  \"CallTag ValueName\": P.atom,\n  VariableName: P.variableName,\n  Callee: P.operatorKeyword,\n  Unit: P.unit,\n  \"UniversalSelector NestingSelector\": P.definitionOperator,\n  MatchOp: P.compareOperator,\n  \"ChildOp SiblingOp, LogicOp\": P.logicOperator,\n  BinOp: P.arithmeticOperator,\n  Important: P.modifier,\n  Comment: P.blockComment,\n  ColorLiteral: P.color,\n  \"ParenthesizedContent StringLiteral\": P.string,\n  \":\": P.punctuation,\n  \"PseudoOp #\": P.derefOperator,\n  \"; ,\": P.separator,\n  \"( )\": P.paren,\n  \"[ ]\": P.squareBracket,\n  \"{ }\": P.brace\n}), NV = { __proto__: null, lang: 32, \"nth-child\": 32, \"nth-last-child\": 32, \"nth-of-type\": 32, \"nth-last-of-type\": 32, dir: 32, \"host-context\": 32, url: 60, \"url-prefix\": 60, domain: 60, regexp: 60, selector: 138 }, DV = { __proto__: null, \"@import\": 118, \"@media\": 142, \"@charset\": 146, \"@namespace\": 150, \"@keyframes\": 156, \"@supports\": 168 }, ZV = { __proto__: null, not: 132, only: 132 }, VV = us.deserialize({\n  version: 14,\n  states: \":^QYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$_QXO'#CaO$fQ[O'#ChO$qQ[O'#DTO$vQ[O'#DWOOQP'#Em'#EmO${QdO'#DgO%jQ[O'#DtO${QdO'#DvO%{Q[O'#DxO&WQ[O'#D{O&`Q[O'#ERO&nQ[O'#ETOOQS'#El'#ElOOQS'#EW'#EWQYQ[OOO&uQXO'#CdO'jQWO'#DcO'oQWO'#EsO'zQ[O'#EsQOQWOOP(UO#tO'#C_POOO)C@[)C@[OOQP'#Cg'#CgOOQP,59Q,59QO#kQ[O,59QO(aQ[O'#E[O({QWO,58{O)TQ[O,59SO$qQ[O,59oO$vQ[O,59rO(aQ[O,59uO(aQ[O,59wO(aQ[O,59xO)`Q[O'#DbOOQS,58{,58{OOQP'#Ck'#CkOOQO'#DR'#DROOQP,59S,59SO)gQWO,59SO)lQWO,59SOOQP'#DV'#DVOOQP,59o,59oOOQO'#DX'#DXO)qQ`O,59rOOQS'#Cp'#CpO${QdO'#CqO)yQvO'#CsO+ZQtO,5:ROOQO'#Cx'#CxO)lQWO'#CwO+oQWO'#CyO+tQ[O'#DOOOQS'#Ep'#EpOOQO'#Dj'#DjO+|Q[O'#DqO,[QWO'#EtO&`Q[O'#DoO,jQWO'#DrOOQO'#Eu'#EuO)OQWO,5:`O,oQpO,5:bOOQS'#Dz'#DzO,wQWO,5:dO,|Q[O,5:dOOQO'#D}'#D}O-UQWO,5:gO-ZQWO,5:mO-cQWO,5:oOOQS-E8U-E8UO${QdO,59}O-kQ[O'#E^O-xQWO,5;_O-xQWO,5;_POOO'#EV'#EVP.TO#tO,58yPOOO,58y,58yOOQP1G.l1G.lO.zQXO,5:vOOQO-E8Y-E8YOOQS1G.g1G.gOOQP1G.n1G.nO)gQWO1G.nO)lQWO1G.nOOQP1G/Z1G/ZO/XQ`O1G/^O/rQXO1G/aO0YQXO1G/cO0pQXO1G/dO1WQWO,59|O1]Q[O'#DSO1dQdO'#CoOOQP1G/^1G/^O${QdO1G/^O1kQpO,59]OOQS,59_,59_O${QdO,59aO1sQWO1G/mOOQS,59c,59cO1xQ!bO,59eOOQS'#DP'#DPOOQS'#EY'#EYO2QQ[O,59jOOQS,59j,59jO2YQWO'#DjO2eQWO,5:VO2jQWO,5:]O&`Q[O,5:XO&`Q[O'#E_O2rQWO,5;`O2}QWO,5:ZO(aQ[O,5:^OOQS1G/z1G/zOOQS1G/|1G/|OOQS1G0O1G0OO3`QWO1G0OO3eQdO'#EOOOQS1G0R1G0ROOQS1G0X1G0XOOQS1G0Z1G0ZO3pQtO1G/iOOQO,5:x,5:xO4WQ[O,5:xOOQO-E8[-E8[O4eQWO1G0yPOOO-E8T-E8TPOOO1G.e1G.eOOQP7+$Y7+$YOOQP7+$x7+$xO${QdO7+$xOOQS1G/h1G/hO4pQXO'#ErO4wQWO,59nO4|QtO'#EXO5tQdO'#EoO6OQWO,59ZO6TQpO7+$xOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%X7+%XO6]QWO1G/POOQS-E8W-E8WOOQS1G/U1G/UO${QdO1G/qOOQO1G/w1G/wOOQO1G/s1G/sO6bQWO,5:yOOQO-E8]-E8]O6pQXO1G/xOOQS7+%j7+%jO6wQYO'#CsOOQO'#EQ'#EQO7SQ`O'#EPOOQO'#EP'#EPO7_QWO'#E`O7gQdO,5:jOOQS,5:j,5:jO7rQtO'#E]O${QdO'#E]O8sQdO7+%TOOQO7+%T7+%TOOQO1G0d1G0dO9WQpO<<HdO9`QWO,5;^OOQP1G/Y1G/YOOQS-E8V-E8VO${QdO'#EZO9hQWO,5;ZOOQT1G.u1G.uOOQP<<Hd<<HdOOQS7+$k7+$kO9pQdO7+%]OOQO7+%d7+%dOOQO,5:k,5:kO3hQdO'#EaO7_QWO,5:zOOQS,5:z,5:zOOQS-E8^-E8^OOQS1G0U1G0UO9wQtO,5:wOOQS-E8Z-E8ZOOQO<<Ho<<HoOOQPAN>OAN>OO:xQdO,5:uOOQO-E8X-E8XOOQO<<Hw<<HwOOQO,5:{,5:{OOQO-E8_-E8_OOQS1G0f1G0f\",\n  stateData: \";[~O#ZOS#[QQ~OUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XRO#bTO~OQfOUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XeO#bTO~O#U#gP~P!ZO#[jO~O#XlO~O]qO^qOqsOtoOxrO!OtO!RvO#VuO#bnO~O!TwO~P#pO`}O#WzO#XyO~O#X!OO~O#X!QO~OQ![Ob!TOf![Oh![On!YOq!ZO#W!WO#X!SO#e!UO~Ob!^O!d!`O!g!aO#X!]O!T#hP~Oh!fOn!YO#X!eO~Oh!hO#X!hO~Ob!^O!d!`O!g!aO#X!]O~O!Y#hP~P%jO]WX]!WX^WXqWXtWXxWX!OWX!RWX!TWX#VWX#bWX~O]!mO~O!Y!nO#U#gX!S#gX~O#U#gX!S#gX~P!ZO#]!qO#^!qO#_!sO~OUYOXYO]VO^VOqXOxWO#XRO#bTO~OtoO!TwO~O`!zO#WzO#XyO~O!S#gP~P!ZOb#RO~Ob#SO~Op#TO|#UO~OP#WObgXjgX!YgX!dgX!ggX#XgXagXQgXfgXhgXngXqgXtgX!XgX#UgX#WgX#egXpgX!SgX~Ob!^Oj#XO!d!`O!g!aO#X!]O!Y#hP~Ob#[O~Op#`O#X#]O~Ob!^O!d!`O!g!aO#X#aO~Ot#eO!b#dO!T#hX!Y#hX~Ob#hO~Oj#XO!Y#jO~O!Y#kO~Oh#lOn!YO~O!T#mO~O!TwO!b#dO~O!TwO!Y#pO~O!Y#QX#U#QX!S#QX~P!ZO!Y!nO#U#ga!S#ga~O#]!qO#^!qO#_#wO~O]qO^qOqsOxrO!OtO!RvO#VuO#bnO~Ot#Oa!T#Oaa#Oa~P.`Op#yO|#zO~O]qO^qOqsOxrO#bnO~Ot}i!O}i!R}i!T}i#V}ia}i~P/aOt!Pi!O!Pi!R!Pi!T!Pi#V!Pia!Pi~P/aOt!Qi!O!Qi!R!Qi!T!Qi#V!Qia!Qi~P/aO!S#{O~Oa#fP~P(aOa#cP~P${Oa$SOj#XO~O!Y$UO~Oh$VOo$VO~Op$XO#X#]O~O]!`Xa!^X!b!^X~O]$YO~Oa$ZO!b#dO~Ot#eO!T#ha!Y#ha~O!b#dOt!ca!T!ca!Y!caa!ca~O!Y$`O~O!S$gO#X$bO#e$aO~Oj#XOt$iO!X$kO!Y!Vi#U!Vi!S!Vi~P${O!Y#Qa#U#Qa!S#Qa~P!ZO!Y!nO#U#gi!S#gi~Oa#fX~P#pOa$oO~Oj#XOQ!{Xa!{Xb!{Xf!{Xh!{Xn!{Xq!{Xt!{X#W!{X#X!{X#e!{X~Ot$qOa#cX~P${Oa$sO~Oj#XOp$tO~Oa$uO~O!b#dOt#Ra!T#Ra!Y#Ra~Oa$wO~P.`OP#WOtgX!TgX~O#e$aOt!sX!T!sX~Ot$yO!TwO~O!S$}O#X$bO#e$aO~Oj#XOQ#PXb#PXf#PXh#PXn#PXq#PXt#PX!X#PX!Y#PX#U#PX#W#PX#X#PX#e#PX!S#PX~Ot$iO!X%QO!Y!Vq#U!Vq!S!Vq~P${Oj#XOp%RO~OtoOa#fa~Ot$qOa#ca~Oa%UO~P${Oj#XOQ#Pab#Paf#Pah#Pan#Paq#Pat#Pa!X#Pa!Y#Pa#U#Pa#W#Pa#X#Pa#e#Pa!S#Pa~Oa!}at!}a~P${O#Zo#[#ej!R#e~\",\n  goto: \"-g#jPPP#kP#nP#w$WP#w$g#wPP$mPPP$s$|$|P%`P$|P$|%z&^PPPP$|&vP&z'Q#wP'W#w'^P#wP#w#wPPP'd'y(WPP#nPP(_(_(i(_P(_P(_(_P#nP#nP#nP(l#nP(o(r(u(|#nP#nP)R)X)h)v)|*S*^*d*n*t*zPPPPPPPPPP+Q+ZP+v+yP,o,r,x-RRkQ_bOPdhw!n#skYOPdhotuvw!n#R#h#skSOPdhotuvw!n#R#h#sQmTR!tnQ{VR!xqQ!x}Q#Z!XR#x!zq![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%Sp![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%SU$d#m$f$yR$x$cq!XZ]!T!m#S#U#X#q#z$P$Y$i$j$q$v%Sp![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%SQ!f^R#l!gT#^!Z#_Q|VR!yqQ!x|R#x!yQ!PWR!{rQ!RXR!|sQxUQ!wpQ#i!cQ#o!jQ#p!kQ${$eR%X$zSgPwQ!phQ#r!nR$l#sZfPhw!n#sa!b[`a!V!^!`#d#eR#b!^R!g^R!i_R#n!iS$e#m$fR%V$yV$c#m$f$yQ!rjR#v!rQdOShPwU!ldh#sR#s!nQ$P#SU$p$P$v%SQ$v$YR%S$qQ#_!ZR$W#_Q$r$PR%T$rQpUS!vp$nR$n#|Q$j#qR%P$jQ!ogS#t!o#uR#u!pQ#f!_R$^#fQ$f#mR$|$fQ$z$eR%W$z_cOPdhw!n#s^UOPdhw!n#sQ!uoQ!}tQ#OuQ#PvQ#|#RR$_#hR$Q#SQ!VZQ!d]Q#V!TQ#q!m[$O#S$P$Y$q$v%SQ$R#UQ$T#XS$h#q$jQ$m#zR%O$iR#}#RQiPR#QwQ!c[Q!kaR#Y!VU!_[a!VQ!j`Q#c!^Q#g!`Q$[#dR$]#e\",\n  nodeNames: \"⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles\",\n  maxTerm: 117,\n  nodeProps: [\n    [\"isolate\", -2, 3, 24, \"\"],\n    [\"openedBy\", 17, \"(\", 32, \"[\", 50, \"{\"],\n    [\"closedBy\", 18, \")\", 33, \"]\", 51, \"}\"]\n  ],\n  propSources: [RV],\n  skippedNodes: [0, 3, 87],\n  repeatNodeCount: 11,\n  tokenData: \"J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSo`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#Z~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#Z~o`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUo`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Uo`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUo`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Uo`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUo`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Uo`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUo`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Uo`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!X[o`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYxQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYo`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYo`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYf[o`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYf[o`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYo`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYf[o`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYo`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSf[o`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS|So`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSb^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOa~n9{UUQjWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWjW!RQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUo`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYo`#e[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYo`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUo`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUo`#e[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[o`#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSt^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWjWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VU#bQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSo`#[~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU]QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S^Qo`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Y^Oy%^z;'S%^;'S;=`%o<%lO%^dCoS|SOy%^z;'S%^;'S;=`%o<%lO%^bDQU!OQOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS!OQo`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[![Qo`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^nFfSq^Oy%^z;'S%^;'S;=`%o<%lO%^nFwSp^Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUo`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!bQo`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!TUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!S^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!RQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}\",\n  tokenizers: [CV, AV, QV, 1, 2, 3, 4, new Hu(\"m~RRYZ[z{a~~g~aO#^~~dP!P!Qg~lO#_~~\", 28, 105)],\n  topRules: { StyleSheet: [0, 4], Styles: [1, 86] },\n  specialized: [{ term: 100, get: (t) => NV[t] || -1 }, { term: 58, get: (t) => DV[t] || -1 }, { term: 101, get: (t) => ZV[t] || -1 }],\n  tokenPrec: 1200\n});\nlet Lf = null;\nfunction Uf() {\n  if (!Lf && typeof document == \"object\" && document.body) {\n    let { style: t } = document.body, e = [], n = /* @__PURE__ */ new Set();\n    for (let r in t)\n      r != \"cssText\" && r != \"cssFloat\" && typeof t[r] == \"string\" && (/[A-Z]/.test(r) && (r = r.replace(/[A-Z]/g, (i) => \"-\" + i.toLowerCase())), n.has(r) || (e.push(r), n.add(r)));\n    Lf = e.sort().map((r) => ({ type: \"property\", label: r }));\n  }\n  return Lf || [];\n}\nconst u0 = /* @__PURE__ */ [\n  \"active\",\n  \"after\",\n  \"any-link\",\n  \"autofill\",\n  \"backdrop\",\n  \"before\",\n  \"checked\",\n  \"cue\",\n  \"default\",\n  \"defined\",\n  \"disabled\",\n  \"empty\",\n  \"enabled\",\n  \"file-selector-button\",\n  \"first\",\n  \"first-child\",\n  \"first-letter\",\n  \"first-line\",\n  \"first-of-type\",\n  \"focus\",\n  \"focus-visible\",\n  \"focus-within\",\n  \"fullscreen\",\n  \"has\",\n  \"host\",\n  \"host-context\",\n  \"hover\",\n  \"in-range\",\n  \"indeterminate\",\n  \"invalid\",\n  \"is\",\n  \"lang\",\n  \"last-child\",\n  \"last-of-type\",\n  \"left\",\n  \"link\",\n  \"marker\",\n  \"modal\",\n  \"not\",\n  \"nth-child\",\n  \"nth-last-child\",\n  \"nth-last-of-type\",\n  \"nth-of-type\",\n  \"only-child\",\n  \"only-of-type\",\n  \"optional\",\n  \"out-of-range\",\n  \"part\",\n  \"placeholder\",\n  \"placeholder-shown\",\n  \"read-only\",\n  \"read-write\",\n  \"required\",\n  \"right\",\n  \"root\",\n  \"scope\",\n  \"selection\",\n  \"slotted\",\n  \"target\",\n  \"target-text\",\n  \"valid\",\n  \"visited\",\n  \"where\"\n].map((t) => ({ type: \"class\", label: t })), d0 = /* @__PURE__ */ [\n  \"above\",\n  \"absolute\",\n  \"activeborder\",\n  \"additive\",\n  \"activecaption\",\n  \"after-white-space\",\n  \"ahead\",\n  \"alias\",\n  \"all\",\n  \"all-scroll\",\n  \"alphabetic\",\n  \"alternate\",\n  \"always\",\n  \"antialiased\",\n  \"appworkspace\",\n  \"asterisks\",\n  \"attr\",\n  \"auto\",\n  \"auto-flow\",\n  \"avoid\",\n  \"avoid-column\",\n  \"avoid-page\",\n  \"avoid-region\",\n  \"axis-pan\",\n  \"background\",\n  \"backwards\",\n  \"baseline\",\n  \"below\",\n  \"bidi-override\",\n  \"blink\",\n  \"block\",\n  \"block-axis\",\n  \"bold\",\n  \"bolder\",\n  \"border\",\n  \"border-box\",\n  \"both\",\n  \"bottom\",\n  \"break\",\n  \"break-all\",\n  \"break-word\",\n  \"bullets\",\n  \"button\",\n  \"button-bevel\",\n  \"buttonface\",\n  \"buttonhighlight\",\n  \"buttonshadow\",\n  \"buttontext\",\n  \"calc\",\n  \"capitalize\",\n  \"caps-lock-indicator\",\n  \"caption\",\n  \"captiontext\",\n  \"caret\",\n  \"cell\",\n  \"center\",\n  \"checkbox\",\n  \"circle\",\n  \"cjk-decimal\",\n  \"clear\",\n  \"clip\",\n  \"close-quote\",\n  \"col-resize\",\n  \"collapse\",\n  \"color\",\n  \"color-burn\",\n  \"color-dodge\",\n  \"column\",\n  \"column-reverse\",\n  \"compact\",\n  \"condensed\",\n  \"contain\",\n  \"content\",\n  \"contents\",\n  \"content-box\",\n  \"context-menu\",\n  \"continuous\",\n  \"copy\",\n  \"counter\",\n  \"counters\",\n  \"cover\",\n  \"crop\",\n  \"cross\",\n  \"crosshair\",\n  \"currentcolor\",\n  \"cursive\",\n  \"cyclic\",\n  \"darken\",\n  \"dashed\",\n  \"decimal\",\n  \"decimal-leading-zero\",\n  \"default\",\n  \"default-button\",\n  \"dense\",\n  \"destination-atop\",\n  \"destination-in\",\n  \"destination-out\",\n  \"destination-over\",\n  \"difference\",\n  \"disc\",\n  \"discard\",\n  \"disclosure-closed\",\n  \"disclosure-open\",\n  \"document\",\n  \"dot-dash\",\n  \"dot-dot-dash\",\n  \"dotted\",\n  \"double\",\n  \"down\",\n  \"e-resize\",\n  \"ease\",\n  \"ease-in\",\n  \"ease-in-out\",\n  \"ease-out\",\n  \"element\",\n  \"ellipse\",\n  \"ellipsis\",\n  \"embed\",\n  \"end\",\n  \"ethiopic-abegede-gez\",\n  \"ethiopic-halehame-aa-er\",\n  \"ethiopic-halehame-gez\",\n  \"ew-resize\",\n  \"exclusion\",\n  \"expanded\",\n  \"extends\",\n  \"extra-condensed\",\n  \"extra-expanded\",\n  \"fantasy\",\n  \"fast\",\n  \"fill\",\n  \"fill-box\",\n  \"fixed\",\n  \"flat\",\n  \"flex\",\n  \"flex-end\",\n  \"flex-start\",\n  \"footnotes\",\n  \"forwards\",\n  \"from\",\n  \"geometricPrecision\",\n  \"graytext\",\n  \"grid\",\n  \"groove\",\n  \"hand\",\n  \"hard-light\",\n  \"help\",\n  \"hidden\",\n  \"hide\",\n  \"higher\",\n  \"highlight\",\n  \"highlighttext\",\n  \"horizontal\",\n  \"hsl\",\n  \"hsla\",\n  \"hue\",\n  \"icon\",\n  \"ignore\",\n  \"inactiveborder\",\n  \"inactivecaption\",\n  \"inactivecaptiontext\",\n  \"infinite\",\n  \"infobackground\",\n  \"infotext\",\n  \"inherit\",\n  \"initial\",\n  \"inline\",\n  \"inline-axis\",\n  \"inline-block\",\n  \"inline-flex\",\n  \"inline-grid\",\n  \"inline-table\",\n  \"inset\",\n  \"inside\",\n  \"intrinsic\",\n  \"invert\",\n  \"italic\",\n  \"justify\",\n  \"keep-all\",\n  \"landscape\",\n  \"large\",\n  \"larger\",\n  \"left\",\n  \"level\",\n  \"lighter\",\n  \"lighten\",\n  \"line-through\",\n  \"linear\",\n  \"linear-gradient\",\n  \"lines\",\n  \"list-item\",\n  \"listbox\",\n  \"listitem\",\n  \"local\",\n  \"logical\",\n  \"loud\",\n  \"lower\",\n  \"lower-hexadecimal\",\n  \"lower-latin\",\n  \"lower-norwegian\",\n  \"lowercase\",\n  \"ltr\",\n  \"luminosity\",\n  \"manipulation\",\n  \"match\",\n  \"matrix\",\n  \"matrix3d\",\n  \"medium\",\n  \"menu\",\n  \"menutext\",\n  \"message-box\",\n  \"middle\",\n  \"min-intrinsic\",\n  \"mix\",\n  \"monospace\",\n  \"move\",\n  \"multiple\",\n  \"multiple_mask_images\",\n  \"multiply\",\n  \"n-resize\",\n  \"narrower\",\n  \"ne-resize\",\n  \"nesw-resize\",\n  \"no-close-quote\",\n  \"no-drop\",\n  \"no-open-quote\",\n  \"no-repeat\",\n  \"none\",\n  \"normal\",\n  \"not-allowed\",\n  \"nowrap\",\n  \"ns-resize\",\n  \"numbers\",\n  \"numeric\",\n  \"nw-resize\",\n  \"nwse-resize\",\n  \"oblique\",\n  \"opacity\",\n  \"open-quote\",\n  \"optimizeLegibility\",\n  \"optimizeSpeed\",\n  \"outset\",\n  \"outside\",\n  \"outside-shape\",\n  \"overlay\",\n  \"overline\",\n  \"padding\",\n  \"padding-box\",\n  \"painted\",\n  \"page\",\n  \"paused\",\n  \"perspective\",\n  \"pinch-zoom\",\n  \"plus-darker\",\n  \"plus-lighter\",\n  \"pointer\",\n  \"polygon\",\n  \"portrait\",\n  \"pre\",\n  \"pre-line\",\n  \"pre-wrap\",\n  \"preserve-3d\",\n  \"progress\",\n  \"push-button\",\n  \"radial-gradient\",\n  \"radio\",\n  \"read-only\",\n  \"read-write\",\n  \"read-write-plaintext-only\",\n  \"rectangle\",\n  \"region\",\n  \"relative\",\n  \"repeat\",\n  \"repeating-linear-gradient\",\n  \"repeating-radial-gradient\",\n  \"repeat-x\",\n  \"repeat-y\",\n  \"reset\",\n  \"reverse\",\n  \"rgb\",\n  \"rgba\",\n  \"ridge\",\n  \"right\",\n  \"rotate\",\n  \"rotate3d\",\n  \"rotateX\",\n  \"rotateY\",\n  \"rotateZ\",\n  \"round\",\n  \"row\",\n  \"row-resize\",\n  \"row-reverse\",\n  \"rtl\",\n  \"run-in\",\n  \"running\",\n  \"s-resize\",\n  \"sans-serif\",\n  \"saturation\",\n  \"scale\",\n  \"scale3d\",\n  \"scaleX\",\n  \"scaleY\",\n  \"scaleZ\",\n  \"screen\",\n  \"scroll\",\n  \"scrollbar\",\n  \"scroll-position\",\n  \"se-resize\",\n  \"self-start\",\n  \"self-end\",\n  \"semi-condensed\",\n  \"semi-expanded\",\n  \"separate\",\n  \"serif\",\n  \"show\",\n  \"single\",\n  \"skew\",\n  \"skewX\",\n  \"skewY\",\n  \"skip-white-space\",\n  \"slide\",\n  \"slider-horizontal\",\n  \"slider-vertical\",\n  \"sliderthumb-horizontal\",\n  \"sliderthumb-vertical\",\n  \"slow\",\n  \"small\",\n  \"small-caps\",\n  \"small-caption\",\n  \"smaller\",\n  \"soft-light\",\n  \"solid\",\n  \"source-atop\",\n  \"source-in\",\n  \"source-out\",\n  \"source-over\",\n  \"space\",\n  \"space-around\",\n  \"space-between\",\n  \"space-evenly\",\n  \"spell-out\",\n  \"square\",\n  \"start\",\n  \"static\",\n  \"status-bar\",\n  \"stretch\",\n  \"stroke\",\n  \"stroke-box\",\n  \"sub\",\n  \"subpixel-antialiased\",\n  \"svg_masks\",\n  \"super\",\n  \"sw-resize\",\n  \"symbolic\",\n  \"symbols\",\n  \"system-ui\",\n  \"table\",\n  \"table-caption\",\n  \"table-cell\",\n  \"table-column\",\n  \"table-column-group\",\n  \"table-footer-group\",\n  \"table-header-group\",\n  \"table-row\",\n  \"table-row-group\",\n  \"text\",\n  \"text-bottom\",\n  \"text-top\",\n  \"textarea\",\n  \"textfield\",\n  \"thick\",\n  \"thin\",\n  \"threeddarkshadow\",\n  \"threedface\",\n  \"threedhighlight\",\n  \"threedlightshadow\",\n  \"threedshadow\",\n  \"to\",\n  \"top\",\n  \"transform\",\n  \"translate\",\n  \"translate3d\",\n  \"translateX\",\n  \"translateY\",\n  \"translateZ\",\n  \"transparent\",\n  \"ultra-condensed\",\n  \"ultra-expanded\",\n  \"underline\",\n  \"unidirectional-pan\",\n  \"unset\",\n  \"up\",\n  \"upper-latin\",\n  \"uppercase\",\n  \"url\",\n  \"var\",\n  \"vertical\",\n  \"vertical-text\",\n  \"view-box\",\n  \"visible\",\n  \"visibleFill\",\n  \"visiblePainted\",\n  \"visibleStroke\",\n  \"visual\",\n  \"w-resize\",\n  \"wait\",\n  \"wave\",\n  \"wider\",\n  \"window\",\n  \"windowframe\",\n  \"windowtext\",\n  \"words\",\n  \"wrap\",\n  \"wrap-reverse\",\n  \"x-large\",\n  \"x-small\",\n  \"xor\",\n  \"xx-large\",\n  \"xx-small\"\n].map((t) => ({ type: \"keyword\", label: t })).concat(/* @__PURE__ */ [\n  \"aliceblue\",\n  \"antiquewhite\",\n  \"aqua\",\n  \"aquamarine\",\n  \"azure\",\n  \"beige\",\n  \"bisque\",\n  \"black\",\n  \"blanchedalmond\",\n  \"blue\",\n  \"blueviolet\",\n  \"brown\",\n  \"burlywood\",\n  \"cadetblue\",\n  \"chartreuse\",\n  \"chocolate\",\n  \"coral\",\n  \"cornflowerblue\",\n  \"cornsilk\",\n  \"crimson\",\n  \"cyan\",\n  \"darkblue\",\n  \"darkcyan\",\n  \"darkgoldenrod\",\n  \"darkgray\",\n  \"darkgreen\",\n  \"darkkhaki\",\n  \"darkmagenta\",\n  \"darkolivegreen\",\n  \"darkorange\",\n  \"darkorchid\",\n  \"darkred\",\n  \"darksalmon\",\n  \"darkseagreen\",\n  \"darkslateblue\",\n  \"darkslategray\",\n  \"darkturquoise\",\n  \"darkviolet\",\n  \"deeppink\",\n  \"deepskyblue\",\n  \"dimgray\",\n  \"dodgerblue\",\n  \"firebrick\",\n  \"floralwhite\",\n  \"forestgreen\",\n  \"fuchsia\",\n  \"gainsboro\",\n  \"ghostwhite\",\n  \"gold\",\n  \"goldenrod\",\n  \"gray\",\n  \"grey\",\n  \"green\",\n  \"greenyellow\",\n  \"honeydew\",\n  \"hotpink\",\n  \"indianred\",\n  \"indigo\",\n  \"ivory\",\n  \"khaki\",\n  \"lavender\",\n  \"lavenderblush\",\n  \"lawngreen\",\n  \"lemonchiffon\",\n  \"lightblue\",\n  \"lightcoral\",\n  \"lightcyan\",\n  \"lightgoldenrodyellow\",\n  \"lightgray\",\n  \"lightgreen\",\n  \"lightpink\",\n  \"lightsalmon\",\n  \"lightseagreen\",\n  \"lightskyblue\",\n  \"lightslategray\",\n  \"lightsteelblue\",\n  \"lightyellow\",\n  \"lime\",\n  \"limegreen\",\n  \"linen\",\n  \"magenta\",\n  \"maroon\",\n  \"mediumaquamarine\",\n  \"mediumblue\",\n  \"mediumorchid\",\n  \"mediumpurple\",\n  \"mediumseagreen\",\n  \"mediumslateblue\",\n  \"mediumspringgreen\",\n  \"mediumturquoise\",\n  \"mediumvioletred\",\n  \"midnightblue\",\n  \"mintcream\",\n  \"mistyrose\",\n  \"moccasin\",\n  \"navajowhite\",\n  \"navy\",\n  \"oldlace\",\n  \"olive\",\n  \"olivedrab\",\n  \"orange\",\n  \"orangered\",\n  \"orchid\",\n  \"palegoldenrod\",\n  \"palegreen\",\n  \"paleturquoise\",\n  \"palevioletred\",\n  \"papayawhip\",\n  \"peachpuff\",\n  \"peru\",\n  \"pink\",\n  \"plum\",\n  \"powderblue\",\n  \"purple\",\n  \"rebeccapurple\",\n  \"red\",\n  \"rosybrown\",\n  \"royalblue\",\n  \"saddlebrown\",\n  \"salmon\",\n  \"sandybrown\",\n  \"seagreen\",\n  \"seashell\",\n  \"sienna\",\n  \"silver\",\n  \"skyblue\",\n  \"slateblue\",\n  \"slategray\",\n  \"snow\",\n  \"springgreen\",\n  \"steelblue\",\n  \"tan\",\n  \"teal\",\n  \"thistle\",\n  \"tomato\",\n  \"turquoise\",\n  \"violet\",\n  \"wheat\",\n  \"white\",\n  \"whitesmoke\",\n  \"yellow\",\n  \"yellowgreen\"\n].map((t) => ({ type: \"constant\", label: t }))), IV = /* @__PURE__ */ [\n  \"a\",\n  \"abbr\",\n  \"address\",\n  \"article\",\n  \"aside\",\n  \"b\",\n  \"bdi\",\n  \"bdo\",\n  \"blockquote\",\n  \"body\",\n  \"br\",\n  \"button\",\n  \"canvas\",\n  \"caption\",\n  \"cite\",\n  \"code\",\n  \"col\",\n  \"colgroup\",\n  \"dd\",\n  \"del\",\n  \"details\",\n  \"dfn\",\n  \"dialog\",\n  \"div\",\n  \"dl\",\n  \"dt\",\n  \"em\",\n  \"figcaption\",\n  \"figure\",\n  \"footer\",\n  \"form\",\n  \"header\",\n  \"hgroup\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\",\n  \"hr\",\n  \"html\",\n  \"i\",\n  \"iframe\",\n  \"img\",\n  \"input\",\n  \"ins\",\n  \"kbd\",\n  \"label\",\n  \"legend\",\n  \"li\",\n  \"main\",\n  \"meter\",\n  \"nav\",\n  \"ol\",\n  \"output\",\n  \"p\",\n  \"pre\",\n  \"ruby\",\n  \"section\",\n  \"select\",\n  \"small\",\n  \"source\",\n  \"span\",\n  \"strong\",\n  \"sub\",\n  \"summary\",\n  \"sup\",\n  \"table\",\n  \"tbody\",\n  \"td\",\n  \"template\",\n  \"textarea\",\n  \"tfoot\",\n  \"th\",\n  \"thead\",\n  \"tr\",\n  \"u\",\n  \"ul\"\n].map((t) => ({ type: \"type\", label: t })), xi = /^(\\w[\\w-]*|-\\w[\\w-]*|)$/, WV = /^-(-[\\w-]*)?$/;\nfunction MV(t, e) {\n  var n;\n  if ((t.name == \"(\" || t.type.isError) && (t = t.parent || t), t.name != \"ArgList\")\n    return !1;\n  let r = (n = t.parent) === null || n === void 0 ? void 0 : n.firstChild;\n  return (r == null ? void 0 : r.name) != \"Callee\" ? !1 : e.sliceString(r.from, r.to) == \"var\";\n}\nconst f0 = /* @__PURE__ */ new ex(), XV = [\"Declaration\"];\nfunction jV(t) {\n  for (let e = t; ; ) {\n    if (e.type.isTop)\n      return e;\n    if (!(e = e.parent))\n      return t;\n  }\n}\nfunction Vx(t, e, n) {\n  if (e.to - e.from > 4096) {\n    let r = f0.get(e);\n    if (r)\n      return r;\n    let i = [], s = /* @__PURE__ */ new Set(), o = e.cursor(lt.IncludeAnonymous);\n    if (o.firstChild())\n      do\n        for (let a of Vx(t, o.node, n))\n          s.has(a.label) || (s.add(a.label), i.push(a));\n      while (o.nextSibling());\n    return f0.set(e, i), i;\n  } else {\n    let r = [], i = /* @__PURE__ */ new Set();\n    return e.cursor().iterate((s) => {\n      var o;\n      if (n(s) && s.matchContext(XV) && ((o = s.node.nextSibling) === null || o === void 0 ? void 0 : o.name) == \":\") {\n        let a = t.sliceString(s.from, s.to);\n        i.has(a) || (i.add(a), r.push({ label: a, type: \"variable\" }));\n      }\n    }), r;\n  }\n}\nconst BV = (t) => (e) => {\n  let { state: n, pos: r } = e, i = un(n).resolveInner(r, -1), s = i.type.isError && i.from == i.to - 1 && n.doc.sliceString(i.from, i.to) == \"-\";\n  if (i.name == \"PropertyName\" || (s || i.name == \"TagName\") && /^(Block|Styles)$/.test(i.resolve(i.to).name))\n    return { from: i.from, options: Uf(), validFor: xi };\n  if (i.name == \"ValueName\")\n    return { from: i.from, options: d0, validFor: xi };\n  if (i.name == \"PseudoClassName\")\n    return { from: i.from, options: u0, validFor: xi };\n  if (t(i) || (e.explicit || s) && MV(i, n.doc))\n    return {\n      from: t(i) || s ? i.from : r,\n      options: Vx(n.doc, jV(i), t),\n      validFor: WV\n    };\n  if (i.name == \"TagName\") {\n    for (let { parent: l } = i; l; l = l.parent)\n      if (l.name == \"Block\")\n        return { from: i.from, options: Uf(), validFor: xi };\n    return { from: i.from, options: IV, validFor: xi };\n  }\n  if (!e.explicit)\n    return null;\n  let o = i.resolve(r), a = o.childBefore(r);\n  return a && a.name == \":\" && o.name == \"PseudoClassSelector\" ? { from: r, options: u0, validFor: xi } : a && a.name == \":\" && o.name == \"Declaration\" || o.name == \"ArgList\" ? { from: r, options: d0, validFor: xi } : o.name == \"Block\" || o.name == \"Styles\" ? { from: r, options: Uf(), validFor: xi } : null;\n}, LV = /* @__PURE__ */ BV((t) => t.name == \"VariableName\"), Fu = /* @__PURE__ */ cs.define({\n  name: \"css\",\n  parser: /* @__PURE__ */ VV.configure({\n    props: [\n      /* @__PURE__ */ sa.add({\n        Declaration: /* @__PURE__ */ $o()\n      }),\n      /* @__PURE__ */ Kl.add({\n        \"Block KeyframeList\": Hd\n      })\n    ]\n  }),\n  languageData: {\n    commentTokens: { block: { open: \"/*\", close: \"*/\" } },\n    indentOnInput: /^\\s*\\}$/,\n    wordChars: \"-\"\n  }\n});\nfunction Ix() {\n  return new Gl(Fu, Fu.data.of({ autocomplete: LV }));\n}\nconst UV = 54, qV = 1, YV = 55, zV = 2, HV = 56, FV = 3, h0 = 4, GV = 5, Gu = 6, Wx = 7, Mx = 8, Xx = 9, jx = 10, KV = 11, JV = 12, e3 = 13, qf = 57, t3 = 14, p0 = 58, Bx = 20, n3 = 22, Lx = 23, r3 = 24, $p = 26, Ux = 27, i3 = 28, s3 = 31, o3 = 34, a3 = 36, l3 = 37, c3 = 0, u3 = 1, d3 = {\n  area: !0,\n  base: !0,\n  br: !0,\n  col: !0,\n  command: !0,\n  embed: !0,\n  frame: !0,\n  hr: !0,\n  img: !0,\n  input: !0,\n  keygen: !0,\n  link: !0,\n  meta: !0,\n  param: !0,\n  source: !0,\n  track: !0,\n  wbr: !0,\n  menuitem: !0\n}, f3 = {\n  dd: !0,\n  li: !0,\n  optgroup: !0,\n  option: !0,\n  p: !0,\n  rp: !0,\n  rt: !0,\n  tbody: !0,\n  td: !0,\n  tfoot: !0,\n  th: !0,\n  tr: !0\n}, O0 = {\n  dd: { dd: !0, dt: !0 },\n  dt: { dd: !0, dt: !0 },\n  li: { li: !0 },\n  option: { option: !0, optgroup: !0 },\n  optgroup: { optgroup: !0 },\n  p: {\n    address: !0,\n    article: !0,\n    aside: !0,\n    blockquote: !0,\n    dir: !0,\n    div: !0,\n    dl: !0,\n    fieldset: !0,\n    footer: !0,\n    form: !0,\n    h1: !0,\n    h2: !0,\n    h3: !0,\n    h4: !0,\n    h5: !0,\n    h6: !0,\n    header: !0,\n    hgroup: !0,\n    hr: !0,\n    menu: !0,\n    nav: !0,\n    ol: !0,\n    p: !0,\n    pre: !0,\n    section: !0,\n    table: !0,\n    ul: !0\n  },\n  rp: { rp: !0, rt: !0 },\n  rt: { rp: !0, rt: !0 },\n  tbody: { tbody: !0, tfoot: !0 },\n  td: { td: !0, th: !0 },\n  tfoot: { tbody: !0 },\n  th: { td: !0, th: !0 },\n  thead: { tbody: !0, tfoot: !0 },\n  tr: { tr: !0 }\n};\nfunction h3(t) {\n  return t == 45 || t == 46 || t == 58 || t >= 65 && t <= 90 || t == 95 || t >= 97 && t <= 122 || t >= 161;\n}\nfunction qx(t) {\n  return t == 9 || t == 10 || t == 13 || t == 32;\n}\nlet g0 = null, m0 = null, b0 = 0;\nfunction Qp(t, e) {\n  let n = t.pos + e;\n  if (b0 == n && m0 == t)\n    return g0;\n  let r = t.peek(e);\n  for (; qx(r); )\n    r = t.peek(++e);\n  let i = \"\";\n  for (; h3(r); )\n    i += String.fromCharCode(r), r = t.peek(++e);\n  return m0 = t, b0 = n, g0 = i ? i.toLowerCase() : r == p3 || r == O3 ? void 0 : null;\n}\nconst Yx = 60, Ku = 62, kg = 47, p3 = 63, O3 = 33, g3 = 45;\nfunction v0(t, e) {\n  this.name = t, this.parent = e, this.hash = e ? e.hash : 0;\n  for (let n = 0; n < t.length; n++)\n    this.hash += (this.hash << 4) + t.charCodeAt(n) + (t.charCodeAt(n) << 8);\n}\nconst m3 = [Gu, jx, Wx, Mx, Xx], b3 = new wg({\n  start: null,\n  shift(t, e, n, r) {\n    return m3.indexOf(e) > -1 ? new v0(Qp(r, 1) || \"\", t) : t;\n  },\n  reduce(t, e) {\n    return e == Bx && t ? t.parent : t;\n  },\n  reuse(t, e, n, r) {\n    let i = e.type.id;\n    return i == Gu || i == a3 ? new v0(Qp(r, 1) || \"\", t) : t;\n  },\n  hash(t) {\n    return t ? t.hash : 0;\n  },\n  strict: !1\n}), v3 = new gn((t, e) => {\n  if (t.next != Yx) {\n    t.next < 0 && e.context && t.acceptToken(qf);\n    return;\n  }\n  t.advance();\n  let n = t.next == kg;\n  n && t.advance();\n  let r = Qp(t, 0);\n  if (r === void 0)\n    return;\n  if (!r)\n    return t.acceptToken(n ? t3 : Gu);\n  let i = e.context ? e.context.name : null;\n  if (n) {\n    if (r == i)\n      return t.acceptToken(KV);\n    if (i && f3[i])\n      return t.acceptToken(qf, -2);\n    if (e.dialectEnabled(c3))\n      return t.acceptToken(JV);\n    for (let s = e.context; s; s = s.parent)\n      if (s.name == r)\n        return;\n    t.acceptToken(e3);\n  } else {\n    if (r == \"script\")\n      return t.acceptToken(Wx);\n    if (r == \"style\")\n      return t.acceptToken(Mx);\n    if (r == \"textarea\")\n      return t.acceptToken(Xx);\n    if (d3.hasOwnProperty(r))\n      return t.acceptToken(jx);\n    i && O0[i] && O0[i][r] ? t.acceptToken(qf, -1) : t.acceptToken(Gu);\n  }\n}, { contextual: !0 }), y3 = new gn((t) => {\n  for (let e = 0, n = 0; ; n++) {\n    if (t.next < 0) {\n      n && t.acceptToken(p0);\n      break;\n    }\n    if (t.next == g3)\n      e++;\n    else if (t.next == Ku && e >= 2) {\n      n >= 3 && t.acceptToken(p0, -2);\n      break;\n    } else\n      e = 0;\n    t.advance();\n  }\n});\nfunction S3(t) {\n  for (; t; t = t.parent)\n    if (t.name == \"svg\" || t.name == \"math\")\n      return !0;\n  return !1;\n}\nconst w3 = new gn((t, e) => {\n  if (t.next == kg && t.peek(1) == Ku) {\n    let n = e.dialectEnabled(u3) || S3(e.context);\n    t.acceptToken(n ? GV : h0, 2);\n  } else\n    t.next == Ku && t.acceptToken(h0, 1);\n});\nfunction xg(t, e, n) {\n  let r = 2 + t.length;\n  return new gn((i) => {\n    for (let s = 0, o = 0, a = 0; ; a++) {\n      if (i.next < 0) {\n        a && i.acceptToken(e);\n        break;\n      }\n      if (s == 0 && i.next == Yx || s == 1 && i.next == kg || s >= 2 && s < r && i.next == t.charCodeAt(s - 2))\n        s++, o++;\n      else if ((s == 2 || s == r) && qx(i.next))\n        o++;\n      else if (s == r && i.next == Ku) {\n        a > o ? i.acceptToken(e, -o) : i.acceptToken(n, -(o - 2));\n        break;\n      } else if ((i.next == 10 || i.next == 13) && a) {\n        i.acceptToken(e, 1);\n        break;\n      } else\n        s = o = 0;\n      i.advance();\n    }\n  });\n}\nconst k3 = xg(\"script\", UV, qV), x3 = xg(\"style\", YV, zV), P3 = xg(\"textarea\", HV, FV), _3 = ia({\n  \"Text RawText\": P.content,\n  \"StartTag StartCloseTag SelfClosingEndTag EndTag\": P.angleBracket,\n  TagName: P.tagName,\n  \"MismatchedCloseTag/TagName\": [P.tagName, P.invalid],\n  AttributeName: P.attributeName,\n  \"AttributeValue UnquotedAttributeValue\": P.attributeValue,\n  Is: P.definitionOperator,\n  \"EntityReference CharacterReference\": P.character,\n  Comment: P.blockComment,\n  ProcessingInst: P.processingInstruction,\n  DoctypeDecl: P.documentMeta\n}), T3 = us.deserialize({\n  version: 14,\n  states: \",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z\",\n  stateData: \",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~\",\n  goto: \"%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp\",\n  nodeNames: \"⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl\",\n  maxTerm: 67,\n  context: b3,\n  nodeProps: [\n    [\"closedBy\", -10, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, \"EndTag\", 6, \"EndTag SelfClosingEndTag\", -4, 21, 30, 33, 36, \"CloseTag\"],\n    [\"openedBy\", 4, \"StartTag StartCloseTag\", 5, \"StartTag\", -4, 29, 32, 35, 37, \"OpenTag\"],\n    [\"group\", -9, 14, 17, 18, 19, 20, 39, 40, 41, 42, \"Entity\", 16, \"Entity TextContent\", -3, 28, 31, 34, \"TextContent Entity\"],\n    [\"isolate\", -11, 21, 29, 30, 32, 33, 35, 36, 37, 38, 41, 42, \"ltr\", -3, 26, 27, 39, \"\"]\n  ],\n  propSources: [_3],\n  skippedNodes: [0],\n  repeatNodeCount: 9,\n  tokenData: \"!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X\",\n  tokenizers: [k3, x3, P3, w3, v3, y3, 0, 1, 2, 3, 4, 5],\n  topRules: { Document: [0, 15] },\n  dialects: { noMatch: 0, selfClosing: 509 },\n  tokenPrec: 511\n});\nfunction zx(t, e) {\n  let n = /* @__PURE__ */ Object.create(null);\n  for (let r of t.getChildren(Lx)) {\n    let i = r.getChild(r3), s = r.getChild($p) || r.getChild(Ux);\n    i && (n[e.read(i.from, i.to)] = s ? s.type.id == $p ? e.read(s.from + 1, s.to - 1) : e.read(s.from, s.to) : \"\");\n  }\n  return n;\n}\nfunction y0(t, e) {\n  let n = t.getChild(n3);\n  return n ? e.read(n.from, n.to) : \" \";\n}\nfunction Yf(t, e, n) {\n  let r;\n  for (let i of n)\n    if (!i.attrs || i.attrs(r || (r = zx(t.node.parent.firstChild, e))))\n      return { parser: i.parser };\n  return null;\n}\nfunction Hx(t = [], e = []) {\n  let n = [], r = [], i = [], s = [];\n  for (let a of t)\n    (a.tag == \"script\" ? n : a.tag == \"style\" ? r : a.tag == \"textarea\" ? i : s).push(a);\n  let o = e.length ? /* @__PURE__ */ Object.create(null) : null;\n  for (let a of e)\n    (o[a.name] || (o[a.name] = [])).push(a);\n  return PD((a, l) => {\n    let c = a.type.id;\n    if (c == i3)\n      return Yf(a, l, n);\n    if (c == s3)\n      return Yf(a, l, r);\n    if (c == o3)\n      return Yf(a, l, i);\n    if (c == Bx && s.length) {\n      let u = a.node, d = u.firstChild, f = d && y0(d, l), h;\n      if (f) {\n        for (let p of s)\n          if (p.tag == f && (!p.attrs || p.attrs(h || (h = zx(u, l))))) {\n            let O = u.lastChild, m = O.type.id == l3 ? O.from : u.to;\n            if (m > d.to)\n              return { parser: p.parser, overlay: [{ from: d.to, to: m }] };\n          }\n      }\n    }\n    if (o && c == Lx) {\n      let u = a.node, d;\n      if (d = u.firstChild) {\n        let f = o[l.read(d.from, d.to)];\n        if (f)\n          for (let h of f) {\n            if (h.tagName && h.tagName != y0(u.parent, l))\n              continue;\n            let p = u.lastChild;\n            if (p.type.id == $p) {\n              let O = p.from + 1, m = p.lastChild, y = p.to - (m && m.isError ? 0 : 1);\n              if (y > O)\n                return { parser: h.parser, overlay: [{ from: O, to: y }] };\n            } else if (p.type.id == Ux)\n              return { parser: h.parser, overlay: [{ from: p.from, to: p.to }] };\n          }\n      }\n    }\n    return null;\n  });\n}\nconst E3 = 309, S0 = 1, $3 = 2, Q3 = 3, C3 = 310, A3 = 312, R3 = 313, N3 = 4, D3 = 5, Z3 = 0, Cp = [\n  9,\n  10,\n  11,\n  12,\n  13,\n  32,\n  133,\n  160,\n  5760,\n  8192,\n  8193,\n  8194,\n  8195,\n  8196,\n  8197,\n  8198,\n  8199,\n  8200,\n  8201,\n  8202,\n  8232,\n  8233,\n  8239,\n  8287,\n  12288\n], Fx = 125, V3 = 59, Ap = 47, I3 = 42, W3 = 43, M3 = 45, X3 = 60, j3 = 44, B3 = new wg({\n  start: !1,\n  shift(t, e) {\n    return e == N3 || e == D3 || e == A3 ? t : e == R3;\n  },\n  strict: !1\n}), L3 = new gn((t, e) => {\n  let { next: n } = t;\n  (n == Fx || n == -1 || e.context) && t.acceptToken(C3);\n}, { contextual: !0, fallback: !0 }), U3 = new gn((t, e) => {\n  let { next: n } = t, r;\n  Cp.indexOf(n) > -1 || n == Ap && ((r = t.peek(1)) == Ap || r == I3) || n != Fx && n != V3 && n != -1 && !e.context && t.acceptToken(E3);\n}, { contextual: !0 }), q3 = new gn((t, e) => {\n  let { next: n } = t;\n  if ((n == W3 || n == M3) && (t.advance(), n == t.next)) {\n    t.advance();\n    let r = !e.context && e.canShift(S0);\n    t.acceptToken(r ? S0 : $3);\n  }\n}, { contextual: !0 });\nfunction zf(t, e) {\n  return t >= 65 && t <= 90 || t >= 97 && t <= 122 || t == 95 || t >= 192 || !e && t >= 48 && t <= 57;\n}\nconst Y3 = new gn((t, e) => {\n  if (t.next != X3 || !e.dialectEnabled(Z3) || (t.advance(), t.next == Ap))\n    return;\n  let n = 0;\n  for (; Cp.indexOf(t.next) > -1; )\n    t.advance(), n++;\n  if (zf(t.next, !0)) {\n    for (t.advance(), n++; zf(t.next, !1); )\n      t.advance(), n++;\n    for (; Cp.indexOf(t.next) > -1; )\n      t.advance(), n++;\n    if (t.next == j3)\n      return;\n    for (let r = 0; ; r++) {\n      if (r == 7) {\n        if (!zf(t.next, !0))\n          return;\n        break;\n      }\n      if (t.next != \"extends\".charCodeAt(r))\n        break;\n      t.advance(), n++;\n    }\n  }\n  t.acceptToken(Q3, -n);\n}), z3 = ia({\n  \"get set async static\": P.modifier,\n  \"for while do if else switch try catch finally return throw break continue default case\": P.controlKeyword,\n  \"in of await yield void typeof delete instanceof\": P.operatorKeyword,\n  \"let var const using function class extends\": P.definitionKeyword,\n  \"import export from\": P.moduleKeyword,\n  \"with debugger as new\": P.keyword,\n  TemplateString: P.special(P.string),\n  super: P.atom,\n  BooleanLiteral: P.bool,\n  this: P.self,\n  null: P.null,\n  Star: P.modifier,\n  VariableName: P.variableName,\n  \"CallExpression/VariableName TaggedTemplateExpression/VariableName\": P.function(P.variableName),\n  VariableDefinition: P.definition(P.variableName),\n  Label: P.labelName,\n  PropertyName: P.propertyName,\n  PrivatePropertyName: P.special(P.propertyName),\n  \"CallExpression/MemberExpression/PropertyName\": P.function(P.propertyName),\n  \"FunctionDeclaration/VariableDefinition\": P.function(P.definition(P.variableName)),\n  \"ClassDeclaration/VariableDefinition\": P.definition(P.className),\n  PropertyDefinition: P.definition(P.propertyName),\n  PrivatePropertyDefinition: P.definition(P.special(P.propertyName)),\n  UpdateOp: P.updateOperator,\n  \"LineComment Hashbang\": P.lineComment,\n  BlockComment: P.blockComment,\n  Number: P.number,\n  String: P.string,\n  Escape: P.escape,\n  ArithOp: P.arithmeticOperator,\n  LogicOp: P.logicOperator,\n  BitOp: P.bitwiseOperator,\n  CompareOp: P.compareOperator,\n  RegExp: P.regexp,\n  Equals: P.definitionOperator,\n  Arrow: P.function(P.punctuation),\n  \": Spread\": P.punctuation,\n  \"( )\": P.paren,\n  \"[ ]\": P.squareBracket,\n  \"{ }\": P.brace,\n  \"InterpolationStart InterpolationEnd\": P.special(P.brace),\n  \".\": P.derefOperator,\n  \", ;\": P.separator,\n  \"@\": P.meta,\n  TypeName: P.typeName,\n  TypeDefinition: P.definition(P.typeName),\n  \"type enum interface implements namespace module declare\": P.definitionKeyword,\n  \"abstract global Privacy readonly override\": P.modifier,\n  \"is keyof unique infer\": P.operatorKeyword,\n  JSXAttributeValue: P.attributeValue,\n  JSXText: P.content,\n  \"JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag\": P.angleBracket,\n  \"JSXIdentifier JSXNameSpacedName\": P.tagName,\n  \"JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName\": P.attributeName,\n  \"JSXBuiltin/JSXIdentifier\": P.standard(P.tagName)\n}), H3 = { __proto__: null, export: 18, as: 23, from: 31, default: 34, async: 39, function: 40, extends: 52, this: 56, true: 64, false: 64, null: 76, void: 80, typeof: 84, super: 102, new: 136, delete: 152, yield: 161, await: 165, class: 170, public: 227, private: 227, protected: 227, readonly: 229, instanceof: 248, satisfies: 251, in: 252, const: 254, import: 286, keyof: 339, unique: 343, infer: 349, is: 385, abstract: 405, implements: 407, type: 409, let: 412, var: 414, using: 417, interface: 423, enum: 427, namespace: 433, module: 435, declare: 439, global: 443, for: 462, of: 471, while: 474, with: 478, do: 482, if: 486, else: 488, switch: 492, case: 498, try: 504, catch: 508, finally: 512, return: 516, throw: 520, break: 524, continue: 528, debugger: 532 }, F3 = { __proto__: null, async: 123, get: 125, set: 127, declare: 187, public: 189, private: 189, protected: 189, static: 191, abstract: 193, override: 195, readonly: 201, accessor: 203, new: 389 }, G3 = { __proto__: null, \"<\": 143 }, K3 = us.deserialize({\n  version: 14,\n  states: \"$<UO%TQ^OOO%[Q^OOO'_Q`OOP(lOWOOO*zQ08SO'#ChO+RO!bO'#CiO+aO#tO'#CiO+oO?MpO'#D^O.QQ^O'#DdO.bQ^O'#DoO%[Q^O'#DyO0fQ^O'#EROOQ07b'#EZ'#EZO1PQWO'#EWOOQO'#El'#ElOOQO'#Ie'#IeO1XQWO'#GmO1dQWO'#EkO1iQWO'#EkO3kQ08SO'#JiO6[Q08SO'#JjO6xQWO'#FZO6}Q&jO'#FqOOQ07b'#Fc'#FcO7YO,YO'#FcO7hQ7[O'#FxO9UQWO'#FwOOQ07b'#Jj'#JjOOQ07`'#Ji'#JiO9ZQWO'#GqOOQU'#KU'#KUO9fQWO'#IRO9kQ07hO'#ISOOQU'#JW'#JWOOQU'#IW'#IWQ`Q^OOO`Q^OOO%[Q^O'#DqO9sQ^O'#D}O9zQ^O'#EPO9aQWO'#GmO:RQ7[O'#CnO:aQWO'#EjO:lQWO'#EuO:qQ7[O'#FbO;`QWO'#GmOOQO'#KV'#KVO;eQWO'#KVO;sQWO'#GuO;sQWO'#GvO;sQWO'#GxO9aQWO'#G{O<jQWO'#HOO>RQWO'#CdO>cQWO'#H[O>kQWO'#HbO>kQWO'#HdO`Q^O'#HfO>kQWO'#HhO>kQWO'#HkO>pQWO'#HqO>uQ07iO'#HwO%[Q^O'#HyO?QQ07iO'#H{O?]Q07iO'#H}O9kQ07hO'#IPO?hQ08SO'#ChO@jQ`O'#DiQOQWOOO%[Q^O'#EPOAQQWO'#ESO:RQ7[O'#EjOA]QWO'#EjOAhQpO'#FbOOQU'#Cf'#CfOOQ07`'#Dn'#DnOOQ07`'#Jm'#JmO%[Q^O'#JmOOQO'#Jq'#JqOOQO'#Ib'#IbOBhQ`O'#EcOOQ07`'#Eb'#EbOCdQ07pO'#EcOCnQ`O'#EVOOQO'#Jp'#JpODSQ`O'#JqOEaQ`O'#EVOCnQ`O'#EcPEnO!0LbO'#CaPOOO)CDu)CDuOOOO'#IX'#IXOEyO!bO,59TOOQ07b,59T,59TOOOO'#IY'#IYOFXO#tO,59TO%[Q^O'#D`OOOO'#I['#I[OFgO?MpO,59xOOQ07b,59x,59xOFuQ^O'#I]OGYQWO'#JkOI[QrO'#JkO+}Q^O'#JkOIcQWO,5:OOIyQWO'#ElOJWQWO'#JyOJcQWO'#JxOJcQWO'#JxOJkQWO,5;YOJpQWO'#JwOOQ07f,5:Z,5:ZOJwQ^O,5:ZOLxQ08SO,5:eOMiQWO,5:mONSQ07hO'#JvONZQWO'#JuO9ZQWO'#JuONoQWO'#JuONwQWO,5;XON|QWO'#JuO!#UQrO'#JjOOQ07b'#Ch'#ChO%[Q^O'#ERO!#tQpO,5:rOOQO'#Jr'#JrOOQO-E<c-E<cO9aQWO,5=XO!$[QWO,5=XO!$aQ^O,5;VO!&dQ7[O'#EgO!'}QWO,5;VO!)mQ7[O'#DsO!)tQ^O'#DxO!*OQ`O,5;`O!*WQ`O,5;`O%[Q^O,5;`OOQU'#FR'#FROOQU'#FT'#FTO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aOOQU'#FX'#FXO!*fQ^O,5;rOOQ07b,5;w,5;wOOQ07b,5;x,5;xO!,iQWO,5;xOOQ07b,5;y,5;yO%[Q^O'#IiO!,qQ07hO,5<eO!&dQ7[O,5;aO!-`Q7[O,5;aO%[Q^O,5;uO!-gQ&jO'#FgO!.dQ&jO'#J}O!.OQ&jO'#J}O!.kQ&jO'#J}OOQO'#J}'#J}O!/PQ&jO,5<POOOS,5<],5<]O!/bQ^O'#FsOOOS'#Ih'#IhO7YO,YO,5;}O!/iQ&jO'#FuOOQ07b,5;},5;}O!0YQMhO'#CuOOQ07b'#Cy'#CyO!0mQWO'#CyO!0rO?MpO'#C}O!1`Q7[O,5<bO!1gQWO,5<dO!3SQ!LQO'#GSO!3aQWO'#GTO!3fQWO'#GTO!3kQ!LQO'#GXO!4jQ`O'#G]OOQO'#Gh'#GhO!(SQ7[O'#GgOOQO'#Gj'#GjO!(SQ7[O'#GiO!5]QMhO'#JdOOQ07b'#Jd'#JdO!5gQWO'#JcO!5uQWO'#JbO!5}QWO'#CtOOQ07b'#Cw'#CwOOQ07b'#DR'#DROOQ07b'#DT'#DTO1SQWO'#DVO!(SQ7[O'#FzO!(SQ7[O'#F|O!6VQWO'#GOO!6[QWO'#GPO!3fQWO'#GVO!(SQ7[O'#G[O!6aQWO'#EmO!7OQWO,5<cOOQ07`'#Cq'#CqO!7WQWO'#EnO!8QQ`O'#EoOOQ07`'#Jw'#JwO!8XQ07hO'#KWO9kQ07hO,5=]O`Q^O,5>mOOQU'#J`'#J`OOQU,5>n,5>nOOQU-E<U-E<UO!:ZQ08SO,5:]O!<wQ08SO,5:iO%[Q^O,5:iO!?bQ08SO,5:kOOQO,5@q,5@qO!@RQ7[O,5=XO!@aQ07hO'#JaO9UQWO'#JaO!@rQ07hO,59YO!@}Q`O,59YO!AVQ7[O,59YO:RQ7[O,59YO!AbQWO,5;VO!AjQWO'#HZO!BOQWO'#KZO%[Q^O,5;zO!7{Q`O,5;|O!BWQWO,5=tO!B]QWO,5=tO!BbQWO,5=tO9kQ07hO,5=tO;sQWO,5=dOOQO'#Cu'#CuO!BpQ`O,5=aO!BxQ7[O,5=bO!CTQWO,5=dO!CYQpO,5=gO!CbQWO'#KVO>pQWO'#HQO9aQWO'#HSO!CgQWO'#HSO:RQ7[O'#HUO!ClQWO'#HUOOQU,5=j,5=jO!CqQWO'#HVO!DSQWO'#CnO!DXQWO,59OO!DcQWO,59OO!FhQ^O,59OOOQU,59O,59OO!FxQ07hO,59OO%[Q^O,59OO!ITQ^O'#H^OOQU'#H_'#H_OOQU'#H`'#H`O`Q^O,5=vO!IkQWO,5=vO`Q^O,5=|O`Q^O,5>OO!IpQWO,5>QO`Q^O,5>SO!IuQWO,5>VO!IzQ^O,5>]OOQU,5>c,5>cO%[Q^O,5>cO9kQ07hO,5>eOOQU,5>g,5>gO!NUQWO,5>gOOQU,5>i,5>iO!NUQWO,5>iOOQU,5>k,5>kO!NZQ`O'#D[O%[Q^O'#JmO!NxQ`O'#JmO# gQ`O'#DjO# xQ`O'#DjO#$ZQ^O'#DjO#$bQWO'#JlO#$jQWO,5:TO#$oQWO'#EpO#$}QWO'#JzO#%VQWO,5;ZO#%[Q`O'#DjO#%iQ`O'#EUOOQ07b,5:n,5:nO%[Q^O,5:nO#%pQWO,5:nO>pQWO,5;UO!@}Q`O,5;UO!AVQ7[O,5;UO:RQ7[O,5;UO#%xQWO,5@XO#%}Q$ISO,5:rOOQO-E<`-E<`O#'TQ07pO,5:}OCnQ`O,5:qO#'_Q`O,5:qOCnQ`O,5:}O!@rQ07hO,5:qOOQ07`'#Ef'#EfOOQO,5:},5:}O%[Q^O,5:}O#'lQ07hO,5:}O#'wQ07hO,5:}O!@}Q`O,5:qOOQO,5;T,5;TO#(VQ07hO,5:}POOO'#IV'#IVP#(kO!0LbO,58{POOO,58{,58{OOOO-E<V-E<VOOQ07b1G.o1G.oOOOO-E<W-E<WO#(vQpO,59zOOOO-E<Y-E<YOOQ07b1G/d1G/dO#({QrO,5>wO+}Q^O,5>wOOQO,5>},5>}O#)VQ^O'#I]OOQO-E<Z-E<ZO#)dQWO,5@VO#)lQrO,5@VO#)sQWO,5@dOOQ07b1G/j1G/jO%[Q^O,5@eO#){QWO'#IcOOQO-E<a-E<aO#)sQWO,5@dOOQ07`1G0t1G0tOOQ07f1G/u1G/uOOQ07f1G0X1G0XO%[Q^O,5@bO#*aQ07hO,5@bO#*rQ07hO,5@bO#*yQWO,5@aO9ZQWO,5@aO#+RQWO,5@aO#+aQWO'#IfO#*yQWO,5@aOOQ07`1G0s1G0sO!*OQ`O,5:tO!*ZQ`O,5:tOOQO,5:v,5:vO#,RQWO,5:vO#,ZQ7[O1G2sO9aQWO1G2sOOQ07b1G0q1G0qO#,iQ08SO1G0qO#-nQ08QO,5;ROOQ07b'#GR'#GRO#.[Q08SO'#JdO!$aQ^O1G0qO#0dQ7[O'#JnO#0nQWO,5:_O#0sQrO'#JoO%[Q^O'#JoO#0}QWO,5:dOOQ07b'#D['#D[OOQ07b1G0z1G0zO%[Q^O1G0zOOQ07b1G1d1G1dO#1SQWO1G0zO#3kQ08SO1G0{O#3rQ08SO1G0{O#6]Q08SO1G0{O#6dQ08SO1G0{O#8nQ08SO1G0{O#9UQ08SO1G0{O#<OQ08SO1G0{O#<VQ08SO1G0{O#>jQ08SO1G0{O#>wQ08SO1G0{O#@uQ08SO1G0{O#CuQ(CYO'#ChO#EsQ(CYO1G1^O#EzQ(CYO'#JjO!,lQWO1G1dO#F[Q08SO,5?TOOQ07`-E<g-E<gO#GOQ08SO1G0{OOQ07b1G0{1G0{O#IZQ08SO1G1aO#I}Q&jO,5<TO#JVQ&jO,5<UO#J_Q&jO'#FlO#JvQWO'#FkOOQO'#KO'#KOOOQO'#Ig'#IgO#J{Q&jO1G1kOOQ07b1G1k1G1kOOOS1G1v1G1vO#K^Q(CYO'#JiO#KhQWO,5<_O!*fQ^O,5<_OOOS-E<f-E<fOOQ07b1G1i1G1iO#KmQ`O'#J}OOQ07b,5<a,5<aO#KuQ`O,5<aOOQ07b,59e,59eO!&dQ7[O'#DPOOOO'#IZ'#IZO#KzO?MpO,59iOOQ07b,59i,59iO%[Q^O1G1|O!6[QWO'#IkO#LVQ7[O,5<uOOQ07b,5<r,5<rO!(SQ7[O'#InO#LuQ7[O,5=RO!(SQ7[O'#IpO#MhQ7[O,5=TO!&dQ7[O,5=VOOQO1G2O1G2OO#MrQpO'#CqO#NVQpO,5<nO#N^QWO'#KRO9aQWO'#KRO#NlQWO,5<pO!(SQ7[O,5<oO#NqQWO'#GUO#N|QWO,5<oO$ RQpO'#GRO$ `QpO'#KSO$ jQWO'#KSO!&dQ7[O'#KSO$ oQWO,5<sO$ tQ`O'#G^O!4eQ`O'#G^O$!VQWO'#G`O$![QWO'#GbO!3fQWO'#GeO$!aQ07hO'#ImO$!lQ`O,5<wOOQ07f,5<w,5<wO$!sQ`O'#G^O$#RQ`O'#G_O$#ZQ`O'#G_O$#`Q7[O,5=RO$#pQ7[O,5=TOOQ07b,5=W,5=WO!(SQ7[O,5?}O!(SQ7[O,5?}O$$QQWO'#IrO$$]QWO,5?|O$$eQWO,59`O$%UQ7[O,59qOOQ07b,59q,59qO$%wQ7[O,5<fO$&jQ7[O,5<hO@bQWO,5<jOOQ07b,5<k,5<kO$&tQWO,5<qO$&yQ7[O,5<vO$'ZQWO'#JuO!$aQ^O1G1}O$'`QWO1G1}O9ZQWO'#JxO9ZQWO'#EpO%[Q^O'#EpO9ZQWO'#ItO$'eQ07hO,5@rOOQU1G2w1G2wOOQU1G4X1G4XOOQ07b1G/w1G/wO!,iQWO1G/wO$)jQ08SO1G0TOOQU1G2s1G2sO!&dQ7[O1G2sO%[Q^O1G2sO#,^QWO1G2sO$+nQ7[O'#EgOOQ07`,5?{,5?{O$+xQ07hO,5?{OOQU1G.t1G.tO!@rQ07hO1G.tO!@}Q`O1G.tO!AVQ7[O1G.tO$,ZQWO1G0qO$,`QWO'#ChO$,kQWO'#K[O$,sQWO,5=uO$,xQWO'#K[O$,}QWO'#K[O$-]QWO'#IzO$-kQWO,5@uO$-sQrO1G1fOOQ07b1G1h1G1hO9aQWO1G3`O@bQWO1G3`O$-zQWO1G3`O$.PQWO1G3`OOQU1G3`1G3`O!CTQWO1G3OO!&dQ7[O1G2{O$.UQWO1G2{OOQU1G2|1G2|O!&dQ7[O1G2|O$.ZQWO1G2|O$.cQ`O'#GzOOQU1G3O1G3OO!4eQ`O'#IvO!CYQpO1G3ROOQU1G3R1G3ROOQU,5=l,5=lO$.kQ7[O,5=nO9aQWO,5=nO$![QWO,5=pO9UQWO,5=pO!@}Q`O,5=pO!AVQ7[O,5=pO:RQ7[O,5=pO$.yQWO'#KYO$/UQWO,5=qOOQU1G.j1G.jO$/ZQ07hO1G.jO@bQWO1G.jO$/fQWO1G.jO9kQ07hO1G.jO$1kQrO,5@wO$1{QWO,5@wO9ZQWO,5@wO$2WQ^O,5=xO$2_QWO,5=xOOQU1G3b1G3bO`Q^O1G3bOOQU1G3h1G3hOOQU1G3j1G3jO>kQWO1G3lO$2dQ^O1G3nO$6hQ^O'#HmOOQU1G3q1G3qO$6uQWO'#HsO>pQWO'#HuOOQU1G3w1G3wO$6}Q^O1G3wO9kQ07hO1G3}OOQU1G4P1G4POOQ07`'#GY'#GYO9kQ07hO1G4RO9kQ07hO1G4TO$;UQWO,5@XO!*fQ^O,5;[O9ZQWO,5;[O>pQWO,5:UO!*fQ^O,5:UO!@}Q`O,5:UO$;ZQ(CYO,5:UOOQO,5;[,5;[O$;eQ`O'#I^O$;{QWO,5@WOOQ07b1G/o1G/oO$<TQ`O'#IdO$<_QWO,5@fOOQ07`1G0u1G0uO# xQ`O,5:UOOQO'#Ia'#IaO$<gQ`O,5:pOOQ07f,5:p,5:pO#%sQWO1G0YOOQ07b1G0Y1G0YO%[Q^O1G0YOOQ07b1G0p1G0pO>pQWO1G0pO!@}Q`O1G0pO!AVQ7[O1G0pOOQ07`1G5s1G5sO!@rQ07hO1G0]OOQO1G0i1G0iO%[Q^O1G0iO$<nQ07hO1G0iO$<yQ07hO1G0iO!@}Q`O1G0]OCnQ`O1G0]O$=XQ07hO1G0iOOQO1G0]1G0]O$=mQ08SO1G0iPOOO-E<T-E<TPOOO1G.g1G.gOOOO1G/f1G/fO$=wQpO,5<eO$>PQrO1G4cOOQO1G4i1G4iO%[Q^O,5>wO$>ZQWO1G5qO$>cQWO1G6OO$>kQrO1G6PO9ZQWO,5>}O$>uQ08SO1G5|O%[Q^O1G5|O$?VQ07hO1G5|O$?hQWO1G5{O$?hQWO1G5{O9ZQWO1G5{O$?pQWO,5?QO9ZQWO,5?QOOQO,5?Q,5?QO$@UQWO,5?QO$'ZQWO,5?QOOQO-E<d-E<dOOQO1G0`1G0`OOQO1G0b1G0bO!,lQWO1G0bOOQU7+(_7+(_O!&dQ7[O7+(_O%[Q^O7+(_O$@dQWO7+(_O$@oQ7[O7+(_O$@}Q08SO,5=RO$CYQ08SO,5=TO$EeQ08SO,5=RO$GvQ08SO,5=TO$JXQ08SO,59qO$LaQ08SO,5<fO$NlQ08SO,5<hO%!wQ08SO,5<vOOQ07b7+&]7+&]O%%YQ08SO7+&]O%%|Q7[O'#I_O%&WQWO,5@YOOQ07b1G/y1G/yO%&`Q^O'#I`O%&mQWO,5@ZO%&uQrO,5@ZOOQ07b1G0O1G0OO%'PQWO7+&fOOQ07b7+&f7+&fO%'UQ(CYO,5:eO%[Q^O7+&xO%'`Q(CYO,5:]O%'mQ(CYO,5:iO%'wQ(CYO,5:kOOQ07b7+'O7+'OOOQO1G1o1G1oOOQO1G1p1G1pO%(RQtO,5<WO!*fQ^O,5<VOOQO-E<e-E<eOOQ07b7+'V7+'VOOOS7+'b7+'bOOOS1G1y1G1yO%(^QWO1G1yOOQ07b1G1{1G1{O%(cQpO,59kOOOO-E<X-E<XOOQ07b1G/T1G/TO%(jQ08SO7+'hOOQ07b,5?V,5?VO%)^QpO,5?VOOQ07b1G2a1G2aP!&dQ7[O'#IkPOQ07b-E<i-E<iO%)|Q7[O,5?YOOQ07b-E<l-E<lO%*oQ7[O,5?[OOQ07b-E<n-E<nO%*yQpO1G2qOOQ07b1G2Y1G2YO%+QQWO'#IjO%+`QWO,5@mO%+`QWO,5@mO%+hQWO,5@mO%+sQWO,5@mOOQO1G2[1G2[O%,RQ7[O1G2ZO!(SQ7[O1G2ZO%,cQ!LQO'#IlO%,sQWO,5@nO!&dQ7[O,5@nO%,{QpO,5@nOOQ07b1G2_1G2_OOQ07`,5<x,5<xOOQ07`,5<y,5<yO$'ZQWO,5<yOC_QWO,5<yO!@}Q`O,5<xOOQO'#Ga'#GaO%-VQWO,5<zOOQ07`,5<|,5<|O$'ZQWO,5=POOQO,5?X,5?XOOQO-E<k-E<kOOQ07f1G2c1G2cO!4eQ`O,5<xO%-_QWO,5<yO$!VQWO,5<zO!4eQ`O,5<yO!(SQ7[O'#InO%.RQ7[O1G2mO!(SQ7[O'#IpO%.tQ7[O1G2oO%/OQ7[O1G5iO%/YQ7[O1G5iOOQO,5?^,5?^OOQO-E<p-E<pOOQO1G.z1G.zO!7{Q`O,59sO%[Q^O,59sO%/gQWO1G2UO!(SQ7[O1G2]O%/lQ08SO7+'iOOQ07b7+'i7+'iO!$aQ^O7+'iO%0`QWO,5;[OOQ07`,5?`,5?`OOQ07`-E<r-E<rOOQ07b7+%c7+%cO%0eQpO'#KTO#%sQWO7+(_O%0oQrO7+(_O$@gQWO7+(_O%0vQ08QO'#ChO%1ZQ08QO,5<}O%1{QWO,5<}OOQ07`1G5g1G5gOOQU7+$`7+$`O!@rQ07hO7+$`O!@}Q`O7+$`O!$aQ^O7+&]O%2QQWO'#IyO%2iQWO,5@vOOQO1G3a1G3aO9aQWO,5@vO%2iQWO,5@vO%2qQWO,5@vOOQO,5?f,5?fOOQO-E<x-E<xOOQ07b7+'Q7+'QO%2vQWO7+(zO9kQ07hO7+(zO9aQWO7+(zO@bQWO7+(zOOQU7+(j7+(jO%2{Q08QO7+(gO!&dQ7[O7+(gO%3VQpO7+(hOOQU7+(h7+(hO!&dQ7[O7+(hO%3^QWO'#KXO%3iQWO,5=fOOQO,5?b,5?bOOQO-E<t-E<tOOQU7+(m7+(mO%4xQ`O'#HTOOQU1G3Y1G3YO!&dQ7[O1G3YO%[Q^O1G3YO%5PQWO1G3YO%5[Q7[O1G3YO9kQ07hO1G3[O$![QWO1G3[O9UQWO1G3[O!@}Q`O1G3[O!AVQ7[O1G3[O%5jQWO'#IxO%6OQWO,5@tO%6WQ`O,5@tOOQ07`1G3]1G3]OOQU7+$U7+$UO@bQWO7+$UO9kQ07hO7+$UO%6cQWO7+$UO%[Q^O1G6cO%[Q^O1G6dO%6hQ07hO1G6cO%6rQ^O1G3dO%6yQWO1G3dO%7OQ^O1G3dOOQU7+(|7+(|O9kQ07hO7+)WO`Q^O7+)YOOQU'#K_'#K_OOQU'#I{'#I{O%7VQ^O,5>XOOQU,5>X,5>XO%[Q^O'#HnO%7dQWO'#HpOOQU,5>_,5>_O9ZQWO,5>_OOQU,5>a,5>aOOQU7+)c7+)cOOQU7+)i7+)iOOQU7+)m7+)mOOQU7+)o7+)oO%7iQ`O1G5sO%7}Q(CYO1G0vO%8XQWO1G0vOOQO1G/p1G/pO%8dQ(CYO1G/pO>pQWO1G/pO!*fQ^O'#DjOOQO,5>x,5>xOOQO-E<[-E<[OOQO,5?O,5?OOOQO-E<b-E<bO!@}Q`O1G/pOOQO-E<_-E<_OOQ07f1G0[1G0[OOQ07b7+%t7+%tO#%sQWO7+%tOOQ07b7+&[7+&[O>pQWO7+&[O!@}Q`O7+&[OOQO7+%w7+%wO$=mQ08SO7+&TOOQO7+&T7+&TO%[Q^O7+&TO%8nQ07hO7+&TO!@rQ07hO7+%wO!@}Q`O7+%wO%8yQ07hO7+&TO%9XQ08SO7++hO%[Q^O7++hO%9iQWO7++gO%9iQWO7++gOOQO1G4l1G4lO9ZQWO1G4lO%9qQWO1G4lOOQO7+%|7+%|O#%sQWO<<KyO%0oQrO<<KyO%:PQWO<<KyOOQU<<Ky<<KyO!&dQ7[O<<KyO%[Q^O<<KyO%:XQWO<<KyO%:dQ08SO,5?YO%<oQ08SO,5?[O%>zQ08SO1G2ZO%A]Q08SO1G2mO%ChQ08SO1G2oO%EsQ7[O,5>yOOQO-E<]-E<]O%E}QrO,5>zO%[Q^O,5>zOOQO-E<^-E<^O%FXQWO1G5uOOQ07b<<JQ<<JQO%FaQ(CYO1G0qO%HkQ(CYO1G0{O%HrQ(CYO1G0{O%JvQ(CYO1G0{O%J}Q(CYO1G0{O%LrQ(CYO1G0{O%MYQ(CYO1G0{O& mQ(CYO1G0{O& tQ(CYO1G0{O&#rQ(CYO1G0{O&$PQ(CYO1G0{O&%}Q(CYO1G0{O&&bQ08SO<<JdO&'gQ(CYO1G0{O&)]Q(CYO'#JdO&+`Q(CYO1G1aO&+mQ(CYO1G0TO!*fQ^O'#FnOOQO'#KP'#KPOOQO1G1r1G1rO&+wQWO1G1qO&+|Q(CYO,5?TOOOS7+'e7+'eOOOO1G/V1G/VOOQ07b1G4q1G4qO!(SQ7[O7+(]O&,WQWO,5?UO9aQWO,5?UOOQO-E<h-E<hO&,fQWO1G6XO&,fQWO1G6XO&,nQWO1G6XO&,yQ7[O7+'uO&-ZQpO,5?WO&-eQWO,5?WO!&dQ7[O,5?WOOQO-E<j-E<jO&-jQpO1G6YO&-tQWO1G6YOOQ07`1G2e1G2eO$'ZQWO1G2eOOQ07`1G2d1G2dO&-|QWO1G2fO!&dQ7[O1G2fOOQ07`1G2k1G2kO!@}Q`O1G2dOC_QWO1G2eO&.RQWO1G2fO&.ZQWO1G2eO&.}Q7[O,5?YOOQ07b-E<m-E<mO&/pQ7[O,5?[OOQ07b-E<o-E<oO!(SQ7[O7++TOOQ07b1G/_1G/_O&/zQWO1G/_OOQ07b7+'p7+'pO&0PQ7[O7+'wO&0aQ08SO<<KTOOQ07b<<KT<<KTO&1TQWO1G0vO!&dQ7[O'#IsO&1YQWO,5@oO!&dQ7[O1G2iOOQU<<Gz<<GzO!@rQ07hO<<GzO&1bQ08SO<<IwOOQ07b<<Iw<<IwOOQO,5?e,5?eO&2UQWO,5?eO&2ZQWO,5?eOOQO-E<w-E<wO&2iQWO1G6bO&2iQWO1G6bO9aQWO1G6bO@bQWO<<LfOOQU<<Lf<<LfO&2qQWO<<LfO9kQ07hO<<LfOOQU<<LR<<LRO%2{Q08QO<<LROOQU<<LS<<LSO%3VQpO<<LSO&2vQ`O'#IuO&3RQWO,5@sO!*fQ^O,5@sOOQU1G3Q1G3QO&3ZQ^O'#JmOOQO'#Iw'#IwO9kQ07hO'#IwO&3eQ`O,5=oOOQU,5=o,5=oO&3lQ`O'#EcO&4QQWO7+(tO&4VQWO7+(tOOQU7+(t7+(tO!&dQ7[O7+(tO%[Q^O7+(tO&4_QWO7+(tOOQU7+(v7+(vO9kQ07hO7+(vO$![QWO7+(vO9UQWO7+(vO!@}Q`O7+(vO&4jQWO,5?dOOQO-E<v-E<vOOQO'#HW'#HWO&4uQWO1G6`O9kQ07hO<<GpOOQU<<Gp<<GpO@bQWO<<GpO&4}QWO7++}O&5SQWO7+,OO%[Q^O7++}O%[Q^O7+,OOOQU7+)O7+)OO&5XQWO7+)OO&5^Q^O7+)OO&5eQWO7+)OOOQU<<Lr<<LrOOQU<<Lt<<LtOOQU-E<y-E<yOOQU1G3s1G3sO&5jQWO,5>YOOQU,5>[,5>[O&5oQWO1G3yO9ZQWO7+&bO!*fQ^O7+&bOOQO7+%[7+%[O&5tQ(CYO1G6PO>pQWO7+%[OOQ07b<<I`<<I`OOQ07b<<Iv<<IvO>pQWO<<IvOOQO<<Io<<IoO$=mQ08SO<<IoO%[Q^O<<IoOOQO<<Ic<<IcO!@rQ07hO<<IcO&6OQ07hO<<IoO&6ZQ08SO<= SO&6kQWO<= ROOQO7+*W7+*WO9ZQWO7+*WOOQUANAeANAeO&6sQWOANAeO!&dQ7[OANAeO#%sQWOANAeO%0oQrOANAeO%[Q^OANAeO&6{Q08SO7+'uO&9^Q08SO,5?YO&;iQ08SO,5?[O&=tQ08SO7+'wO&@VQrO1G4fO&@aQ(CYO7+&]O&BeQ(CYO,5=RO&DlQ(CYO,5=TO&D|Q(CYO,5=RO&E^Q(CYO,5=TO&EnQ(CYO,59qO&GqQ(CYO,5<fO&ItQ(CYO,5<hO&KwQ(CYO,5<vO&MmQ(CYO7+'hO&MzQ(CYO7+'iO&NXQWO,5<YOOQO7+']7+']O&N^Q7[O<<KwOOQO1G4p1G4pO&NeQWO1G4pO&NpQWO1G4pO' OQWO7++sO' OQWO7++sO!&dQ7[O1G4rO' WQpO1G4rO' bQWO7++tOOQ07`7+(P7+(PO$'ZQWO7+(QO' jQpO7+(QOOQ07`7+(O7+(OO$'ZQWO7+(PO' qQWO7+(QO!&dQ7[O7+(QOC_QWO7+(PO' vQ7[O<<NoOOQ07b7+$y7+$yO'!QQpO,5?_OOQO-E<q-E<qO'![Q08QO7+(TOOQUAN=fAN=fO9aQWO1G5POOQO1G5P1G5PO'!lQWO1G5PO'!qQWO7++|O'!qQWO7++|O9kQ07hOANBQO@bQWOANBQOOQUANBQANBQOOQUANAmANAmOOQUANAnANAnO'!yQWO,5?aOOQO-E<s-E<sO'#UQ(CYO1G6_O'%fQrO'#ChOOQO,5?c,5?cOOQO-E<u-E<uOOQU1G3Z1G3ZO&3ZQ^O,5<zOOQU<<L`<<L`O!&dQ7[O<<L`O&4QQWO<<L`O'%pQWO<<L`O%[Q^O<<L`OOQU<<Lb<<LbO9kQ07hO<<LbO$![QWO<<LbO9UQWO<<LbO'%xQ`O1G5OO'&TQWO7++zOOQUAN=[AN=[O9kQ07hOAN=[OOQU<= i<= iOOQU<= j<= jO'&]QWO<= iO'&bQWO<= jOOQU<<Lj<<LjO'&gQWO<<LjO'&lQ^O<<LjOOQU1G3t1G3tO>pQWO7+)eO'&sQWO<<I|O''OQ(CYO<<I|OOQO<<Hv<<HvOOQ07bAN?bAN?bOOQOAN?ZAN?ZO$=mQ08SOAN?ZOOQOAN>}AN>}O%[Q^OAN?ZOOQO<<Mr<<MrOOQUG27PG27PO!&dQ7[OG27PO#%sQWOG27PO''YQWOG27PO%0oQrOG27PO''bQ(CYO<<JdO''oQ(CYO1G2ZO')eQ(CYO,5?YO'+hQ(CYO,5?[O'-kQ(CYO1G2mO'/nQ(CYO1G2oO'1qQ(CYO<<KTO'2OQ(CYO<<IwOOQO1G1t1G1tO!(SQ7[OANAcOOQO7+*[7+*[O'2]QWO7+*[O'2hQWO<= _O'2pQpO7+*^OOQ07`<<Kl<<KlO$'ZQWO<<KlOOQ07`<<Kk<<KkO'2zQpO<<KlO$'ZQWO<<KkOOQO7+*k7+*kO9aQWO7+*kO'3RQWO<= hOOQUG27lG27lO9kQ07hOG27lO!*fQ^O1G4{O'3ZQWO7++yO&4QQWOANAzOOQUANAzANAzO!&dQ7[OANAzO'3cQWOANAzOOQUANA|ANA|O9kQ07hOANA|O$![QWOANA|OOQO'#HX'#HXOOQO7+*j7+*jOOQUG22vG22vOOQUANETANETOOQUANEUANEUOOQUANBUANBUO'3kQWOANBUOOQU<<MP<<MPO!*fQ^OAN?hOOQOG24uG24uO$=mQ08SOG24uO#%sQWOLD,kOOQULD,kLD,kO!&dQ7[OLD,kO'3pQWOLD,kO'3xQ(CYO7+'uO'5nQ(CYO,5?YO'7qQ(CYO,5?[O'9tQ(CYO7+'wO';jQ7[OG26}OOQO<<Mv<<MvOOQ07`ANAWANAWO$'ZQWOANAWOOQ07`ANAVANAVOOQO<<NV<<NVOOQULD-WLD-WO';zQ(CYO7+*gOOQUG27fG27fO&4QQWOG27fO!&dQ7[OG27fOOQUG27hG27hO9kQ07hOG27hOOQUG27pG27pO'<UQ(CYOG25SOOQOLD*aLD*aOOQU!$(!V!$(!VO#%sQWO!$(!VO!&dQ7[O!$(!VO'<`Q08SOG26}OOQ07`G26rG26rOOQULD-QLD-QO&4QQWOLD-QOOQULD-SLD-SOOQU!)9Eq!)9EqO#%sQWO!)9EqOOQU!$(!l!$(!lOOQU!.K;]!.K;]O'>qQ(CYOG26}O!*fQ^O'#DyO1PQWO'#EWO'@gQrO'#JiO!*fQ^O'#DqO'@nQ^O'#D}O'@uQrO'#ChO'C]QrO'#ChO!*fQ^O'#EPO'CmQ^O,5;VO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O'#IiO'EpQWO,5<eO'ExQ7[O,5;aO'GcQ7[O,5;aO!*fQ^O,5;uO!&dQ7[O'#GgO'ExQ7[O'#GgO!&dQ7[O'#GiO'ExQ7[O'#GiO1SQWO'#DVO1SQWO'#DVO!&dQ7[O'#FzO'ExQ7[O'#FzO!&dQ7[O'#F|O'ExQ7[O'#F|O!&dQ7[O'#G[O'ExQ7[O'#G[O!*fQ^O,5:iO!*fQ^O,5@eO'CmQ^O1G0qO'GjQ(CYO'#ChO!*fQ^O1G1|O!&dQ7[O'#InO'ExQ7[O'#InO!&dQ7[O'#IpO'ExQ7[O'#IpO!&dQ7[O,5<oO'ExQ7[O,5<oO'CmQ^O1G1}O!*fQ^O7+&xO!&dQ7[O1G2ZO'ExQ7[O1G2ZO!&dQ7[O'#InO'ExQ7[O'#InO!&dQ7[O'#IpO'ExQ7[O'#IpO!&dQ7[O1G2]O'ExQ7[O1G2]O'CmQ^O7+'iO'CmQ^O7+&]O!&dQ7[OANAcO'ExQ7[OANAcO'GtQWO'#EkO'GyQWO'#EkO'HRQWO'#FZO'HWQWO'#EuO'H]QWO'#JyO'HhQWO'#JwO'HsQWO,5;VO'HxQ7[O,5<bO'IPQWO'#GTO'IUQWO'#GTO'IZQWO,5<cO'IcQWO,5;VO'IkQ(CYO1G1^O'IrQWO,5<oO'IwQWO,5<oO'I|QWO,5<qO'JRQWO,5<qO'JWQWO1G1}O'J]QWO1G0qO'JbQ7[O<<KwO'JiQ7[O<<KwO7hQ7[O'#FxO9UQWO'#FwOA]QWO'#EjO!*fQ^O,5;rO!3fQWO'#GTO!3fQWO'#GTO!3fQWO'#GVO!3fQWO'#GVO!(SQ7[O7+(]O!(SQ7[O7+(]O%*yQpO1G2qO%*yQpO1G2qO!&dQ7[O,5=VO!&dQ7[O,5=V\",\n  stateData: \"'Km~O'tOS'uOSSOS'vRQ~OPYOQYORfOX!VO`qOczOdyOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![XO!fuO!kZO!nYO!oYO!pYO!rvO!twO!wxO!{]O#s!PO$T|O%b}O%d!QO%f!OO%g!OO%h!OO%k!RO%m!SO%p!TO%q!TO%s!UO&P!WO&V!XO&X!YO&Z!ZO&]![O&`!]O&f!^O&l!_O&n!`O&p!aO&r!bO&t!cO'{SO'}TO(QUO(XVO(g[O(tiO~OVtO~P`OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!kZO!nYO!oYO!pYO!rvO!t!gO!w!hO$T!kO'{!dO'}TO(QUO(XVO(g[O(tiO~O`!vOo!nO!P!oO!_!xO!`!uO!a!uO!{:dO#P!pO#Q!pO#R!wO#S!pO#T!pO#W!yO#X!yO'|!lO'}TO(QUO([!mO(g!sO~O'v!zO~OP[XZ[X`[Xn[X|[X}[X!P[X!Y[X!h[X!i[X!k[X!o[X#[[X#geX#j[X#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#t[X#v[X#x[X#y[X$O[X'r[X(X[X(h[X(o[X(p[X~O!d$|X~P(qO^!|O'}#OO(O!|O(P#OO~O^#PO(P#OO(Q#OO(R#PO~Ot#RO!R#SO(Y#SO(Z#UO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!kZO!nYO!oYO!pYO!rvO!t!gO!w!hO$T!kO'{:hO'}TO(QUO(XVO(g[O(tiO~O!X#YO!Y#VO!V(_P!V(lP~P+}O!Z#bO~P`OPYOQYORfOc!jOd!iOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!kZO!nYO!oYO!pYO!rvO!t!gO!w!hO$T!kO'}TO(QUO(XVO(g[O(tiO~Ol#lO!X#hO!{]O#e#kO#f#hO'{:iO!j(iP~P.iO!k#nO'{#mO~O!w#rO!{]O%b#sO~O#g#tO~O!d#uO#g#tO~OP$]OZ$dOn$QO|#yO}#zO!P#{O!Y$aO!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO#x$XO#y$YO(XVO(h$ZO(o#|O(p#}O~O`(]X'r(]X'p(]X!j(]X!V(]X![(]X%c(]X!d(]X~P1qO#[$eO$O$eOP(^XZ(^Xn(^X|(^X}(^X!P(^X!Y(^X!h(^X!k(^X!o(^X#j(^X#k(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#t(^X#v(^X#x(^X#y(^X(X(^X(h(^X(o(^X(p(^X![(^X%c(^X~O`(^X!i(^X'r(^X'p(^X!V(^X!j(^Xr(^X!d(^X~P4XO#[$eO~O$Y$gO$[$fO$c$lO~ORfO![$mO$f$nO$h$pO~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz%ZO!P${O![$|O!f%`O!k$xO#f%aO$T%^O$o%[O$q%]O$t%_O'{$rO'}TO(QUO(X$uO(o$}O(p%POf(UP~O!k%bO~O!P%eO![%fO'{%dO~O!d%jO~O`%kO'r%kO~O'|!lO~P%[O%h%rO~P%[Og%VO!k%bO'{%dO'|!lO~Od%yO!k%bO'{%dO~O#r$SO~O|&OO![%{O!k%}O%d&RO'{%dO'|!lO'}TO(QUO_(}P~O!w#rO~O%m&TO!P(yX![(yX'{(yX~O'{&UO~O!t&ZO#s!PO%d!QO%f!OO%g!OO%h!OO%k!RO%m!SO%p!TO%q!TO~Oc&`Od&_O!w&]O%b&^O%u&[O~P;xOc&cOdyO![&bO!t&ZO!wxO!{]O#s!PO%b}O%f!OO%g!OO%h!OO%k!RO%m!SO%p!TO%q!TO%s!UO~Oa&fO#[&iO%d&dO'|!lO~P<}O!k&jO!t&nO~O!k#nO~O![XO~O`%kO'q&vO'r%kO~O`%kO'q&yO'r%kO~O`%kO'q&{O'r%kO~O'p[X!V[Xr[X!j[X&T[X![[X%c[X!d[X~P(qO!_'YO!`'RO!a'RO'|!lO'}TO(QUO~Oo'PO!P'OO!X'SO([&}O!Z(`P!Z(nP~P@UOj']O!['ZO'{%dO~Od'bO!k%bO'{%dO~O|&OO!k%}O~Oo!nO!P!oO!{:dO#P!pO#Q!pO#S!pO#T!pO'|!lO'}TO(QUO([!mO(g!sO~O!_'hO!`'gO!a'gO#R!pO#W'iO#X'iO~PApO`%kOg%VO!d#uO!k%bO'r%kO(h'kO~O!o'oO#['mO~PCOOo!nO!P!oO'}TO(QUO([!mO(g!sO~O![XOo(eX!P(eX!_(eX!`(eX!a(eX!{(eX#P(eX#Q(eX#R(eX#S(eX#T(eX#W(eX#X(eX'|(eX'}(eX(Q(eX([(eX(g(eX~O!`'gO!a'gO'|!lO~PCnO'w'sO'x'sO'y'uO~O^!|O'}'wO(O!|O(P'wO~O^#PO(P'wO(Q'wO(R#PO~Ot#RO!R#SO(Y#SO(Z'{O~O!X'}O!V'PX!V'VX!Y'PX!Y'VX~P+}O!Y(PO!V(_X~OP$]OZ$dOn$QO|#yO}#zO!P#{O!Y(PO!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO#x$XO#y$YO(XVO(h$ZO(o#|O(p#}O~O!V(_X~PGbO!V(UO~O!V(kX!Y(kX!d(kX!j(kX(h(kX~O#[(kX#g#`X!Z(kX~PIhO#[(VO!V(mX!Y(mX~O!Y(WO!V(lX~O!V(ZO~O#[$eO~PIhO!Z([O~P`O|#yO}#zO!P#{O!i#wO!k#xO(XVOP!maZ!man!ma!Y!ma!h!ma!o!ma#j!ma#k!ma#l!ma#m!ma#n!ma#o!ma#p!ma#q!ma#r!ma#t!ma#v!ma#x!ma#y!ma(h!ma(o!ma(p!ma~O`!ma'r!ma'p!ma!V!ma!j!mar!ma![!ma%c!ma!d!ma~PKOO!j(]O~O!d#uO#[(^O(h'kO!Y(jX`(jX'r(jX~O!j(jX~PMnO!P%eO![%fO!{]O#e(cO#f(bO'{%dO~O!Y(dO!j(iX~O!j(fO~O!P%eO![%fO#f(bO'{%dO~OP(^XZ(^Xn(^X|(^X}(^X!P(^X!Y(^X!h(^X!i(^X!k(^X!o(^X#j(^X#k(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#t(^X#v(^X#x(^X#y(^X(X(^X(h(^X(o(^X(p(^X~O!d#uO!j(^X~P! [O|(gO}(hO!i#wO!k#xO!{!za!P!za~O!w!za%b!za![!za#e!za#f!za'{!za~P!#`O!w(lO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![XO!fuO!kZO!nYO!oYO!pYO!rvO!t!gO!w!hO$T!kO'{!dO'}TO(QUO(XVO(g[O(tiO~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz;QO!P${O![$|O!f<`O!k$xO#f;WO$T%^O$o;SO$q;UO$t%_O'{(pO'}TO(QUO(X$uO(o$}O(p%PO~O#g(rO~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz%ZO!P${O![$|O!f%`O!k$xO#f%aO$T%^O$o%[O$q%]O$t%_O'{(pO'}TO(QUO(X$uO(o$}O(p%PO~Of(bP~P!(SO!X(vO!j(cP~P%[O([(xO(g[O~O!P(zO!k#xO([(xO(g[O~OP:cOQ:cORfOc<[Od!iOlkOn:cOokOpkOvkOx:cOz:cO!PWO!TkO!UkO![!eO!f:fO!kZO!n:cO!o:cO!p:cO!r:gO!t:jO!w!hO$T!kO'{)YO'}TO(QUO(XVO(g[O(t<YO~O})]O!k#xO~O!Y$aO`$ma'r$ma'p$ma!j$ma!V$ma![$ma%c$ma!d$ma~O#s)aO~P!&dO|)dO!d)cO![$ZX$W$ZX$Y$ZX$[$ZX$c$ZX~O!d)cO![(qX$W(qX$Y(qX$[(qX$c(qX~O|)dO~P!.OO|)dO![(qX$W(qX$Y(qX$[(qX$c(qX~O![)fO$W)jO$Y)eO$[)eO$c)kO~O!X)nO~P!*fO$Y$gO$[$fO$c)rO~Oj$uX|$uX!P$uX!i$uX(o$uX(p$uX~OfiXf$uXjiX!YiX#[iX~P!/tOo)tO~Ot)uO(Y)vO(Z)xO~Oj*RO|)zO!P){O(o$}O(p%PO~Of)yO~P!0}Of*SO~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz;QO!P${O![$|O!f<`O!k$xO#f;WO$T%^O$o;SO$q;UO$t%_O'}TO(QUO(X$uO(o$}O(p%PO~O!X*WO'{*TO!j(uP~P!1lO#g*YO~O!k*ZO~O!X*`O'{*]O!V(vP~P!1lOn*lO!P*dO!_*jO!`*cO!a*cO!k*ZO#W*kO%Y*fO'|!lO([!mO~O!Z*iO~P!3xO!i#wOj(WX|(WX!P(WX(o(WX(p(WX!Y(WX#[(WX~Of(WX#|(WX~P!4qOj*qO#[*pOf(VX!Y(VX~O!Y*rOf(UX~O'{&UOf(UP~O!k*yO~O'{(pO~Ol*}O!P%eO!X#hO![%fO!{]O#e#kO#f#hO'{%dO!j(iP~O!d#uO#g+OO~O!P%eO!X+QO!Y(WO![%fO'{%dO!V(lP~Oo'VO!P+SO!X+RO'}TO(QUO([(xO~O!Z(nP~P!7lO!Y+TO`(zX'r(zX~OP$]OZ$dOn$QO|#yO}#zO!P#{O!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO#x$XO#y$YO(XVO(h$ZO(o#|O(p#}O~O`!ea!Y!ea'r!ea'p!ea!V!ea!j!ear!ea![!ea%c!ea!d!ea~P!8dO|#yO}#zO!P#{O!i#wO!k#xO(XVOP!qaZ!qan!qa!Y!qa!h!qa!o!qa#j!qa#k!qa#l!qa#m!qa#n!qa#o!qa#p!qa#q!qa#r!qa#t!qa#v!qa#x!qa#y!qa(h!qa(o!qa(p!qa~O`!qa'r!qa'p!qa!V!qa!j!qar!qa![!qa%c!qa!d!qa~P!:}O|#yO}#zO!P#{O!i#wO!k#xO(XVOP!saZ!san!sa!Y!sa!h!sa!o!sa#j!sa#k!sa#l!sa#m!sa#n!sa#o!sa#p!sa#q!sa#r!sa#t!sa#v!sa#x!sa#y!sa(h!sa(o!sa(p!sa~O`!sa'r!sa'p!sa!V!sa!j!sar!sa![!sa%c!sa!d!sa~P!=hOg%VOj+^O!['ZO%c+]O~O!d+`O`(TX![(TX'r(TX!Y(TX~O`%kO![XO'r%kO~Og%VO!k%bO~Og%VO!k%bO'{%dO~O!d#uO#g(rO~Oa+kO%d+lO'{+hO'}TO(QUO!Z)OP~O!Y+mO_(}X~OZ+qO~O_+rO~O![%{O'{%dO'|!lO_(}P~Og%VO#[+wO~Og%VOj+zO![$|O~O![+|O~O|,OO![XO~O%h%rO~O!w,TO~Od,YO~Oa,ZO'{#mO'}TO(QUO!Z(|P~Od%yO~O%d!QO'{&UO~P<}OZ,`O_,_O~OPYOQYORfOczOdyOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO!fuO!kZO!nYO!oYO!pYO!rvO!wxO!{]O%b}O'}TO(QUO(XVO(g[O(tiO~O![!eO!t!gO$T!kO'{!dO~P!DkO_,_O`%kO'r%kO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!kZO!nYO!oYO!pYO!rvO!w!hO$T!kO'{!dO'}TO(QUO(XVO(g[O(tiO~O`,eO!twO#s!OO%f!OO%g!OO%h!OO~P!GTO!k&jO~O&V,kO~O![,mO~O&h,oO&j,pOP&eaQ&eaR&eaX&ea`&eac&ead&eal&ean&eao&eap&eav&eax&eaz&ea!P&ea!T&ea!U&ea![&ea!f&ea!k&ea!n&ea!o&ea!p&ea!r&ea!t&ea!w&ea!{&ea#s&ea$T&ea%b&ea%d&ea%f&ea%g&ea%h&ea%k&ea%m&ea%p&ea%q&ea%s&ea&P&ea&V&ea&X&ea&Z&ea&]&ea&`&ea&f&ea&l&ea&n&ea&p&ea&r&ea&t&ea'p&ea'{&ea'}&ea(Q&ea(X&ea(g&ea(t&ea!Z&ea&^&eaa&ea&c&ea~O'{,uO~Og!bX!Y!OX!Y!bX!Z!OX!Z!bX!d!OX!d!bX!k!bX#[!OX~O!d,zO#[,yOg(aX!Y#dX!Y(aX!Z#dX!Z(aX!d(aX!k(aX~Og%VO!d,|O!k%bO!Y!^X!Z!^X~Oo!nO!P!oO'}TO(QUO([!mO~OP:cOQ:cORfOc<[Od!iOlkOn:cOokOpkOvkOx:cOz:cO!PWO!TkO!UkO![!eO!f:fO!kZO!n:cO!o:cO!p:cO!r:gO!t:jO!w!hO$T!kO'}TO(QUO(XVO(g[O(t<YO~O'{;]O~P#!ZO!Y-QO!Z(`X~O!Z-SO~O!d,zO#[,yO!Y#dX!Z#dX~O!Y-TO!Z(nX~O!Z-VO~O!`-WO!a-WO'|!lO~P# xO!Z-ZO~P'_Oj-^O!['ZO~O!V-cO~Oo!za!_!za!`!za!a!za#P!za#Q!za#R!za#S!za#T!za#W!za#X!za'|!za'}!za(Q!za([!za(g!za~P!#`O!o-hO#[-fO~PCOO!`-jO!a-jO'|!lO~PCnO`%kO#[-fO'r%kO~O`%kO!d#uO#[-fO'r%kO~O`%kO!d#uO!o-hO#[-fO'r%kO(h'kO~O'w'sO'x'sO'y-oO~Or-pO~O!V'Pa!Y'Pa~P!8dO!X-tO!V'PX!Y'PX~P%[O!Y(PO!V(_a~O!V(_a~PGbO!Y(WO!V(la~O!P%eO!X-xO![%fO'{%dO!V'VX!Y'VX~O#[-zO!Y(ja!j(ja`(ja'r(ja~O!d#uO~P#*aO!Y(dO!j(ia~O!P%eO![%fO#f.OO'{%dO~Ol.TO!P%eO!X.QO![%fO!{]O#e.SO#f.QO'{%dO!Y'YX!j'YX~O}.XO!k#xO~Og%VOj.[O!['ZO%c.ZO~O`#_i!Y#_i'r#_i'p#_i!V#_i!j#_ir#_i![#_i%c#_i!d#_i~P!8dOj<fO|)zO!P){O(o$}O(p%PO~O#g#Za`#Za#[#Za'r#Za!Y#Za!j#Za![#Za!V#Za~P#-]O#g(WXP(WXZ(WX`(WXn(WX}(WX!h(WX!k(WX!o(WX#j(WX#k(WX#l(WX#m(WX#n(WX#o(WX#p(WX#q(WX#r(WX#t(WX#v(WX#x(WX#y(WX'r(WX(X(WX(h(WX!j(WX!V(WX'p(WXr(WX![(WX%c(WX!d(WX~P!4qO!Y.iOf(bX~P!0}Of.kO~O!Y.lO!j(cX~P!8dO!j.oO~O!V.qO~OP$]O|#yO}#zO!P#{O!i#wO!k#xO!o$]O(XVOZ#ii`#iin#ii!Y#ii!h#ii#k#ii#l#ii#m#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii'r#ii(h#ii(o#ii(p#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~O#j#ii~P#1XO#j$OO~P#1XOP$]O|#yO}#zO!P#{O!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO(XVOZ#ii`#ii!Y#ii!h#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii'r#ii(h#ii(o#ii(p#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~On#ii~P#3yOn$QO~P#3yOP$]On$QO|#yO}#zO!P#{O!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO(XVO`#ii!Y#ii#t#ii#v#ii#x#ii#y#ii'r#ii(h#ii(o#ii(p#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~OZ#ii!h#ii#o#ii#p#ii#q#ii#r#ii~P#6kOZ$dO!h$SO#o$SO#p$SO#q$cO#r$SO~P#6kOP$]OZ$dOn$QO|#yO}#zO!P#{O!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO(XVO(p#}O`#ii!Y#ii#x#ii#y#ii'r#ii(h#ii(o#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~O#v$VO~P#9lO#v#ii~P#9lOP$]OZ$dOn$QO|#yO}#zO!P#{O!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO(XVO`#ii!Y#ii#x#ii#y#ii'r#ii(h#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~O#v#ii(o#ii(p#ii~P#<^O#v$VO(o#|O(p#}O~P#<^OP$]OZ$dOn$QO|#yO}#zO!P#{O!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO#x$XO(XVO(o#|O(p#}O~O`#ii!Y#ii#y#ii'r#ii(h#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~P#?UOP[XZ[Xn[X|[X}[X!P[X!h[X!i[X!k[X!o[X#[[X#geX#j[X#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#t[X#v[X#x[X#y[X$O[X(X[X(h[X(o[X(p[X!Y[X!Z[X~O#|[X~P#AoOP$]OZ:zOn:nO|#yO}#zO!P#{O!h:pO!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO#o:pO#p:pO#q:yO#r:pO#t:qO#v:sO#x:uO#y:vO(XVO(h$ZO(o#|O(p#}O~O#|.sO~P#C|O#[:{O$O:{O#|(^X!Z(^X~P! [O`']a!Y']a'r']a'p']a!j']a!V']ar']a![']a%c']a!d']a~P!8dOP#iiZ#ii`#iin#ii}#ii!Y#ii!h#ii!i#ii!k#ii!o#ii#j#ii#k#ii#l#ii#m#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii'r#ii(X#ii(h#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~P#-]O`#}i!Y#}i'r#}i'p#}i!V#}i!j#}ir#}i![#}i%c#}i!d#}i~P!8dO$Y.xO$[.xO~O$Y.yO$[.yO~O!d)cO#[.zO![$`X$W$`X$Y$`X$[$`X$c$`X~O!X.{O~O![)fO$W.}O$Y)eO$[)eO$c/OO~O!Y:wO!Z(]X~P#C|O!Z/PO~O!d)cO$c(qX~O$c/RO~Ot)uO(Y)vO(Z/UO~O!V/YO~P!&dO(o$}Oj%Za|%Za!P%Za(p%Za!Y%Za#[%Za~Of%Za#|%Za~P#L^O(p%POj%]a|%]a!P%]a(o%]a!Y%]a#[%]a~Of%]a#|%]a~P#MPO!YeX!deX!jeX!j$uX(heX~P!/tO!j/bO~P#-]O!Y/cO!d#uO(h'kO!j(uX~O!j/hO~O!X*WO'{%dO!j(uP~O#g/jO~O!V$uX!Y$uX!d$|X~P!/tO!Y/kO!V(vX~P#-]O!d/mO~O!V/oO~Og%VOn/sO!d#uO!k%bO(h'kO~O'{/uO~O!d+`O~O`%kO!Y/yO'r%kO~O!Z/{O~P!3xO!`/|O!a/|O'|!lO([!mO~O!P0OO([!mO~O#W0PO~Of%Za!Y%Za#[%Za#|%Za~P!0}Of%]a!Y%]a#[%]a#|%]a~P!0}O'{&UOf'fX!Y'fX~O!Y*rOf(Ua~Of0YO~O|0ZO}0ZO!P0[Ojya(oya(pya!Yya#[ya~Ofya#|ya~P$$jO|)zO!P){Oj$na(o$na(p$na!Y$na#[$na~Of$na#|$na~P$%`O|)zO!P){Oj$pa(o$pa(p$pa!Y$pa#[$pa~Of$pa#|$pa~P$&RO#g0^O~Of%Oa!Y%Oa#[%Oa#|%Oa~P!0}O!d#uO~O#g0aO~O!Y+TO`(za'r(za~O|#yO}#zO!P#{O!i#wO!k#xO(XVOP!qiZ!qin!qi!Y!qi!h!qi!o!qi#j!qi#k!qi#l!qi#m!qi#n!qi#o!qi#p!qi#q!qi#r!qi#t!qi#v!qi#x!qi#y!qi(h!qi(o!qi(p!qi~O`!qi'r!qi'p!qi!V!qi!j!qir!qi![!qi%c!qi!d!qi~P$'pOg%VOn$tOo$sOp$sOv%XOx%YOz;QO!P${O![$|O!f<`O!k$xO#f;WO$T%^O$o;SO$q;UO$t%_O'}TO(QUO(X$uO(o$}O(p%PO~Ol0kO'{0jO~P$*ZO!d+`O`(Ta![(Ta'r(Ta!Y(Ta~O#g0qO~OZ[X!YeX!ZeX~O!Y0rO!Z)OX~O!Z0tO~OZ0uO~Oa0wO'{+hO'}TO(QUO~O![%{O'{%dO_'nX!Y'nX~O!Y+mO_(}a~O!j0zO~P!8dOZ0}O~O_1OO~O#[1RO~Oj1UO![$|O~O([(xO!Z({P~Og%VOj1_O![1[O%c1^O~OZ1iO!Y1gO!Z(|X~O!Z1jO~O_1lO`%kO'r%kO~O'{#mO'}TO(QUO~O#[$eO$O$eOP(^XZ(^Xn(^X|(^X}(^X!P(^X!Y(^X!h(^X!k(^X!o(^X#j(^X#k(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#t(^X#v(^X#x(^X#y(^X(X(^X(h(^X(o(^X(p(^X~O#r1oO&T1pO`(^X!i(^X~P$/qO#[$eO#r1oO&T1pO~O`1rO~P%[O`1tO~O&^1wOP&[iQ&[iR&[iX&[i`&[ic&[id&[il&[in&[io&[ip&[iv&[ix&[iz&[i!P&[i!T&[i!U&[i![&[i!f&[i!k&[i!n&[i!o&[i!p&[i!r&[i!t&[i!w&[i!{&[i#s&[i$T&[i%b&[i%d&[i%f&[i%g&[i%h&[i%k&[i%m&[i%p&[i%q&[i%s&[i&P&[i&V&[i&X&[i&Z&[i&]&[i&`&[i&f&[i&l&[i&n&[i&p&[i&r&[i&t&[i'p&[i'{&[i'}&[i(Q&[i(X&[i(g&[i(t&[i!Z&[ia&[i&c&[i~Oa1}O!Z1{O&c1|O~P`O![XO!k2PO~O&j,pOP&eiQ&eiR&eiX&ei`&eic&eid&eil&ein&eio&eip&eiv&eix&eiz&ei!P&ei!T&ei!U&ei![&ei!f&ei!k&ei!n&ei!o&ei!p&ei!r&ei!t&ei!w&ei!{&ei#s&ei$T&ei%b&ei%d&ei%f&ei%g&ei%h&ei%k&ei%m&ei%p&ei%q&ei%s&ei&P&ei&V&ei&X&ei&Z&ei&]&ei&`&ei&f&ei&l&ei&n&ei&p&ei&r&ei&t&ei'p&ei'{&ei'}&ei(Q&ei(X&ei(g&ei(t&ei!Z&ei&^&eia&ei&c&ei~O!V2VO~O!Y!^a!Z!^a~P#C|Oo!nO!P!oO!X2]O([!mO!Y'QX!Z'QX~P@UO!Y-QO!Z(`a~O!Y'WX!Z'WX~P!7lO!Y-TO!Z(na~O!Z2dO~P'_O`%kO#[2mO'r%kO~O`%kO!d#uO#[2mO'r%kO~O`%kO!d#uO!o2qO#[2mO'r%kO(h'kO~O`%kO'r%kO~P!8dO!Y$aOr$ma~O!V'Pi!Y'Pi~P!8dO!Y(PO!V(_i~O!Y(WO!V(li~O!V(mi!Y(mi~P!8dO!Y(ji!j(ji`(ji'r(ji~P!8dO#[2sO!Y(ji!j(ji`(ji'r(ji~O!Y(dO!j(ii~O!P%eO![%fO!{]O#e2xO#f2wO'{%dO~O!P%eO![%fO#f2wO'{%dO~Oj3PO!['ZO%c3OO~Og%VOj3PO!['ZO%c3OO~O#g%ZaP%ZaZ%Za`%Zan%Za}%Za!h%Za!i%Za!k%Za!o%Za#j%Za#k%Za#l%Za#m%Za#n%Za#o%Za#p%Za#q%Za#r%Za#t%Za#v%Za#x%Za#y%Za'r%Za(X%Za(h%Za!j%Za!V%Za'p%Zar%Za![%Za%c%Za!d%Za~P#L^O#g%]aP%]aZ%]a`%]an%]a}%]a!h%]a!i%]a!k%]a!o%]a#j%]a#k%]a#l%]a#m%]a#n%]a#o%]a#p%]a#q%]a#r%]a#t%]a#v%]a#x%]a#y%]a'r%]a(X%]a(h%]a!j%]a!V%]a'p%]ar%]a![%]a%c%]a!d%]a~P#MPO#g%ZaP%ZaZ%Za`%Zan%Za}%Za!Y%Za!h%Za!i%Za!k%Za!o%Za#j%Za#k%Za#l%Za#m%Za#n%Za#o%Za#p%Za#q%Za#r%Za#t%Za#v%Za#x%Za#y%Za'r%Za(X%Za(h%Za!j%Za!V%Za'p%Za#[%Zar%Za![%Za%c%Za!d%Za~P#-]O#g%]aP%]aZ%]a`%]an%]a}%]a!Y%]a!h%]a!i%]a!k%]a!o%]a#j%]a#k%]a#l%]a#m%]a#n%]a#o%]a#p%]a#q%]a#r%]a#t%]a#v%]a#x%]a#y%]a'r%]a(X%]a(h%]a!j%]a!V%]a'p%]a#[%]ar%]a![%]a%c%]a!d%]a~P#-]O#gyaPyaZya`yanya!hya!iya!kya!oya#jya#kya#lya#mya#nya#oya#pya#qya#rya#tya#vya#xya#yya'rya(Xya(hya!jya!Vya'pyarya![ya%cya!dya~P$$jO#g$naP$naZ$na`$nan$na}$na!h$na!i$na!k$na!o$na#j$na#k$na#l$na#m$na#n$na#o$na#p$na#q$na#r$na#t$na#v$na#x$na#y$na'r$na(X$na(h$na!j$na!V$na'p$nar$na![$na%c$na!d$na~P$%`O#g$paP$paZ$pa`$pan$pa}$pa!h$pa!i$pa!k$pa!o$pa#j$pa#k$pa#l$pa#m$pa#n$pa#o$pa#p$pa#q$pa#r$pa#t$pa#v$pa#x$pa#y$pa'r$pa(X$pa(h$pa!j$pa!V$pa'p$par$pa![$pa%c$pa!d$pa~P$&RO#g%OaP%OaZ%Oa`%Oan%Oa}%Oa!Y%Oa!h%Oa!i%Oa!k%Oa!o%Oa#j%Oa#k%Oa#l%Oa#m%Oa#n%Oa#o%Oa#p%Oa#q%Oa#r%Oa#t%Oa#v%Oa#x%Oa#y%Oa'r%Oa(X%Oa(h%Oa!j%Oa!V%Oa'p%Oa#[%Oar%Oa![%Oa%c%Oa!d%Oa~P#-]O`#_q!Y#_q'r#_q'p#_q!V#_q!j#_qr#_q![#_q%c#_q!d#_q~P!8dOf'RX!Y'RX~P!(SO!Y.iOf(ba~O!X3ZO!Y'SX!j'SX~P%[O!Y.lO!j(ca~O!Y.lO!j(ca~P!8dO!V3^O~O#|!ma!Z!ma~PKOO#|!ea!Y!ea!Z!ea~P#C|O#|!qa!Z!qa~P!:}O#|!sa!Z!sa~P!=hORfO![3pO$a3qO~O!Z3uO~Or3vO~P#-]O`$jq!Y$jq'r$jq'p$jq!V$jq!j$jqr$jq![$jq%c$jq!d$jq~P!8dO!V3wO~P#-]O|)zO!P){O(p%POj'ba(o'ba!Y'ba#['ba~Of'ba#|'ba~P%)eO|)zO!P){Oj'da(o'da(p'da!Y'da#['da~Of'da#|'da~P%*WO(h$ZO~P#-]O!X3zO'{%dO!Y'^X!j'^X~O!Y/cO!j(ua~O!Y/cO!d#uO!j(ua~O!Y/cO!d#uO(h'kO!j(ua~Of$wi!Y$wi#[$wi#|$wi~P!0}O!X4SO'{*]O!V'`X!Y'`X~P!1lO!Y/kO!V(va~O!Y/kO!V(va~P#-]O!d#uO#r4[O~On4_O!d#uO(h'kO~O(o$}Oj%Zi|%Zi!P%Zi(p%Zi!Y%Zi#[%Zi~Of%Zi#|%Zi~P%-jO(p%POj%]i|%]i!P%]i(o%]i!Y%]i#[%]i~Of%]i#|%]i~P%.]Of(Vi!Y(Vi~P!0}O#[4fOf(Vi!Y(Vi~P!0}O!j4iO~O`$kq!Y$kq'r$kq'p$kq!V$kq!j$kqr$kq![$kq%c$kq!d$kq~P!8dO!V4mO~O!Y4nO![(wX~P#-]O!i#wO~P4XO`$uX![$uX%W[X'r$uX!Y$uX~P!/tO%W4pO`kXjkX|kX!PkX![kX'rkX(okX(pkX!YkX~O%W4pO~Oa4vO%d4wO'{+hO'}TO(QUO!Y'mX!Z'mX~O!Y0rO!Z)Oa~OZ4{O~O_4|O~O`%kO'r%kO~P#-]O![$|O~P#-]O!Y5UO#[5WO!Z({X~O!Z5XO~Oo!nO!P5YO!_!xO!`!uO!a!uO!{:dO#P!pO#Q!pO#R!pO#S!pO#T!pO#W5_O#X!yO'|!lO'}TO(QUO([!mO(g!sO~O!Z5^O~P%3nOj5dO![1[O%c5cO~Og%VOj5dO![1[O%c5cO~Oa5kO'{#mO'}TO(QUO!Y'lX!Z'lX~O!Y1gO!Z(|a~O'}TO(QUO([5mO~O_5qO~O#r5tO&T5uO~PMnO!j5vO~P%[O`5xO~O`5xO~P%[Oa1}O!Z5}O&c1|O~P`O!d6PO~O!d6ROg(ai!Y(ai!Z(ai!d(ai!k(ai~O!Y#di!Z#di~P#C|O#[6SO!Y#di!Z#di~O!Y!^i!Z!^i~P#C|O`%kO#[6]O'r%kO~O`%kO!d#uO#[6]O'r%kO~O!Y(jq!j(jq`(jq'r(jq~P!8dO!Y(dO!j(iq~O!P%eO![%fO#f6dO'{%dO~O!['ZO%c6gO~Oj6jO!['ZO%c6gO~O#g'baP'baZ'ba`'ban'ba}'ba!h'ba!i'ba!k'ba!o'ba#j'ba#k'ba#l'ba#m'ba#n'ba#o'ba#p'ba#q'ba#r'ba#t'ba#v'ba#x'ba#y'ba'r'ba(X'ba(h'ba!j'ba!V'ba'p'bar'ba!['ba%c'ba!d'ba~P%)eO#g'daP'daZ'da`'dan'da}'da!h'da!i'da!k'da!o'da#j'da#k'da#l'da#m'da#n'da#o'da#p'da#q'da#r'da#t'da#v'da#x'da#y'da'r'da(X'da(h'da!j'da!V'da'p'dar'da!['da%c'da!d'da~P%*WO#g$wiP$wiZ$wi`$win$wi}$wi!Y$wi!h$wi!i$wi!k$wi!o$wi#j$wi#k$wi#l$wi#m$wi#n$wi#o$wi#p$wi#q$wi#r$wi#t$wi#v$wi#x$wi#y$wi'r$wi(X$wi(h$wi!j$wi!V$wi'p$wi#[$wir$wi![$wi%c$wi!d$wi~P#-]O#g%ZiP%ZiZ%Zi`%Zin%Zi}%Zi!h%Zi!i%Zi!k%Zi!o%Zi#j%Zi#k%Zi#l%Zi#m%Zi#n%Zi#o%Zi#p%Zi#q%Zi#r%Zi#t%Zi#v%Zi#x%Zi#y%Zi'r%Zi(X%Zi(h%Zi!j%Zi!V%Zi'p%Zir%Zi![%Zi%c%Zi!d%Zi~P%-jO#g%]iP%]iZ%]i`%]in%]i}%]i!h%]i!i%]i!k%]i!o%]i#j%]i#k%]i#l%]i#m%]i#n%]i#o%]i#p%]i#q%]i#r%]i#t%]i#v%]i#x%]i#y%]i'r%]i(X%]i(h%]i!j%]i!V%]i'p%]ir%]i![%]i%c%]i!d%]i~P%.]Of'Ra!Y'Ra~P!0}O!Y'Sa!j'Sa~P!8dO!Y.lO!j(ci~O#|#_i!Y#_i!Z#_i~P#C|OP$]O|#yO}#zO!P#{O!i#wO!k#xO!o$]O(XVOZ#iin#ii!h#ii#k#ii#l#ii#m#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii#|#ii(h#ii(o#ii(p#ii!Y#ii!Z#ii~O#j#ii~P%FnO#j:lO~P%FnOP$]O|#yO}#zO!P#{O!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO(XVOZ#ii!h#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii#|#ii(h#ii(o#ii(p#ii!Y#ii!Z#ii~On#ii~P%HyOn:nO~P%HyOP$]On:nO|#yO}#zO!P#{O!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO(XVO#t#ii#v#ii#x#ii#y#ii#|#ii(h#ii(o#ii(p#ii!Y#ii!Z#ii~OZ#ii!h#ii#o#ii#p#ii#q#ii#r#ii~P%KUOZ:zO!h:pO#o:pO#p:pO#q:yO#r:pO~P%KUOP$]OZ:zOn:nO|#yO}#zO!P#{O!h:pO!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO#o:pO#p:pO#q:yO#r:pO#t:qO(XVO(p#}O#x#ii#y#ii#|#ii(h#ii(o#ii!Y#ii!Z#ii~O#v:sO~P%MpO#v#ii~P%MpOP$]OZ:zOn:nO|#yO}#zO!P#{O!h:pO!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO#o:pO#p:pO#q:yO#r:pO#t:qO(XVO#x#ii#y#ii#|#ii(h#ii!Y#ii!Z#ii~O#v#ii(o#ii(p#ii~P& {O#v:sO(o#|O(p#}O~P& {OP$]OZ:zOn:nO|#yO}#zO!P#{O!h:pO!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO#o:pO#p:pO#q:yO#r:pO#t:qO#v:sO#x:uO(XVO(o#|O(p#}O~O#y#ii#|#ii(h#ii!Y#ii!Z#ii~P&$^O`#zy!Y#zy'r#zy'p#zy!V#zy!j#zyr#zy![#zy%c#zy!d#zy~P!8dOj<gO|)zO!P){O(o$}O(p%PO~OP#iiZ#iin#ii}#ii!h#ii!i#ii!k#ii!o#ii#j#ii#k#ii#l#ii#m#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii#|#ii(X#ii(h#ii!Y#ii!Z#ii~P&'UO!i#wOP(WXZ(WXj(WXn(WX|(WX}(WX!P(WX!h(WX!k(WX!o(WX#j(WX#k(WX#l(WX#m(WX#n(WX#o(WX#p(WX#q(WX#r(WX#t(WX#v(WX#x(WX#y(WX#|(WX(X(WX(h(WX(o(WX(p(WX!Y(WX!Z(WX~O#|#}i!Y#}i!Z#}i~P#C|O#|!qi!Z!qi~P$'pO!Z6|O~O!Y']a!Z']a~P#C|O!d#uO(h'kO!Y'^a!j'^a~O!Y/cO!j(ui~O!Y/cO!d#uO!j(ui~Of$wq!Y$wq#[$wq#|$wq~P!0}O!V'`a!Y'`a~P#-]O!d7TO~O!Y/kO!V(vi~P#-]O!Y/kO!V(vi~O!V7XO~O!d#uO#r7^O~On7_O!d#uO(h'kO~O|)zO!P){O(p%POj'ca(o'ca!Y'ca#['ca~Of'ca#|'ca~P&.fO|)zO!P){Oj'ea(o'ea(p'ea!Y'ea#['ea~Of'ea#|'ea~P&/XO!V7aO~Of$yq!Y$yq#[$yq#|$yq~P!0}O`$ky!Y$ky'r$ky'p$ky!V$ky!j$kyr$ky![$ky%c$ky!d$ky~P!8dO!d6RO~O!Y4nO![(wa~O`#_y!Y#_y'r#_y'p#_y!V#_y!j#_yr#_y![#_y%c#_y!d#_y~P!8dOZ7fO~Oa7hO'{+hO'}TO(QUO~O!Y0rO!Z)Oi~O_7lO~O([(xO!Y'iX!Z'iX~O!Y5UO!Z({a~OlkO'{7sO~P.iO!Z7vO~P%3nOo!nO!P7wO'}TO(QUO([!mO(g!sO~O![1[O~O![1[O%c7yO~Oj7|O![1[O%c7yO~OZ8RO!Y'la!Z'la~O!Y1gO!Z(|i~O!j8VO~O!j8WO~O!j8ZO~O!j8ZO~P%[O`8]O~O!d8^O~O!j8_O~O!Y(mi!Z(mi~P#C|O`%kO#[8gO'r%kO~O!Y(jy!j(jy`(jy'r(jy~P!8dO!Y(dO!j(iy~O!['ZO%c8jO~O#g$wqP$wqZ$wq`$wqn$wq}$wq!Y$wq!h$wq!i$wq!k$wq!o$wq#j$wq#k$wq#l$wq#m$wq#n$wq#o$wq#p$wq#q$wq#r$wq#t$wq#v$wq#x$wq#y$wq'r$wq(X$wq(h$wq!j$wq!V$wq'p$wq#[$wqr$wq![$wq%c$wq!d$wq~P#-]O#g'caP'caZ'ca`'can'ca}'ca!h'ca!i'ca!k'ca!o'ca#j'ca#k'ca#l'ca#m'ca#n'ca#o'ca#p'ca#q'ca#r'ca#t'ca#v'ca#x'ca#y'ca'r'ca(X'ca(h'ca!j'ca!V'ca'p'car'ca!['ca%c'ca!d'ca~P&.fO#g'eaP'eaZ'ea`'ean'ea}'ea!h'ea!i'ea!k'ea!o'ea#j'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#t'ea#v'ea#x'ea#y'ea'r'ea(X'ea(h'ea!j'ea!V'ea'p'ear'ea!['ea%c'ea!d'ea~P&/XO#g$yqP$yqZ$yq`$yqn$yq}$yq!Y$yq!h$yq!i$yq!k$yq!o$yq#j$yq#k$yq#l$yq#m$yq#n$yq#o$yq#p$yq#q$yq#r$yq#t$yq#v$yq#x$yq#y$yq'r$yq(X$yq(h$yq!j$yq!V$yq'p$yq#[$yqr$yq![$yq%c$yq!d$yq~P#-]O!Y'Si!j'Si~P!8dO#|#_q!Y#_q!Z#_q~P#C|O(o$}OP%ZaZ%Zan%Za}%Za!h%Za!i%Za!k%Za!o%Za#j%Za#k%Za#l%Za#m%Za#n%Za#o%Za#p%Za#q%Za#r%Za#t%Za#v%Za#x%Za#y%Za#|%Za(X%Za(h%Za!Y%Za!Z%Za~Oj%Za|%Za!P%Za(p%Za~P&@nO(p%POP%]aZ%]an%]a}%]a!h%]a!i%]a!k%]a!o%]a#j%]a#k%]a#l%]a#m%]a#n%]a#o%]a#p%]a#q%]a#r%]a#t%]a#v%]a#x%]a#y%]a#|%]a(X%]a(h%]a!Y%]a!Z%]a~Oj%]a|%]a!P%]a(o%]a~P&BuOj<gO|)zO!P){O(p%PO~P&@nOj<gO|)zO!P){O(o$}O~P&BuO|0ZO}0ZO!P0[OPyaZyajyanya!hya!iya!kya!oya#jya#kya#lya#mya#nya#oya#pya#qya#rya#tya#vya#xya#yya#|ya(Xya(hya(oya(pya!Yya!Zya~O|)zO!P){OP$naZ$naj$nan$na}$na!h$na!i$na!k$na!o$na#j$na#k$na#l$na#m$na#n$na#o$na#p$na#q$na#r$na#t$na#v$na#x$na#y$na#|$na(X$na(h$na(o$na(p$na!Y$na!Z$na~O|)zO!P){OP$paZ$paj$pan$pa}$pa!h$pa!i$pa!k$pa!o$pa#j$pa#k$pa#l$pa#m$pa#n$pa#o$pa#p$pa#q$pa#r$pa#t$pa#v$pa#x$pa#y$pa#|$pa(X$pa(h$pa(o$pa(p$pa!Y$pa!Z$pa~OP%OaZ%Oan%Oa}%Oa!h%Oa!i%Oa!k%Oa!o%Oa#j%Oa#k%Oa#l%Oa#m%Oa#n%Oa#o%Oa#p%Oa#q%Oa#r%Oa#t%Oa#v%Oa#x%Oa#y%Oa#|%Oa(X%Oa(h%Oa!Y%Oa!Z%Oa~P&'UO#|$jq!Y$jq!Z$jq~P#C|O#|$kq!Y$kq!Z$kq~P#C|O!Z8vO~O#|8wO~P!0}O!d#uO!Y'^i!j'^i~O!d#uO(h'kO!Y'^i!j'^i~O!Y/cO!j(uq~O!V'`i!Y'`i~P#-]O!Y/kO!V(vq~O!V8}O~P#-]O!V8}O~Of(Vy!Y(Vy~P!0}O!Y'ga!['ga~P#-]O`%Vq![%Vq'r%Vq!Y%Vq~P#-]OZ9SO~O!Y0rO!Z)Oq~O#[9WO!Y'ia!Z'ia~O!Y5UO!Z({i~P#C|OP[XZ[Xn[X|[X}[X!P[X!V[X!Y[X!h[X!i[X!k[X!o[X#[[X#geX#j[X#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#t[X#v[X#x[X#y[X$O[X(X[X(h[X(o[X(p[X~O!d%TX#r%TX~P'#`O![1[O%c9[O~O'}TO(QUO([9aO~O!Y1gO!Z(|q~O!j9dO~O!j9eO~O!j9fO~O!j9fO~P%[O#[9iO!Y#dy!Z#dy~O!Y#dy!Z#dy~P#C|O!['ZO%c9nO~O#|#zy!Y#zy!Z#zy~P#C|OP$wiZ$win$wi}$wi!h$wi!i$wi!k$wi!o$wi#j$wi#k$wi#l$wi#m$wi#n$wi#o$wi#p$wi#q$wi#r$wi#t$wi#v$wi#x$wi#y$wi#|$wi(X$wi(h$wi!Y$wi!Z$wi~P&'UO|)zO!P){O(p%POP'baZ'baj'ban'ba}'ba!h'ba!i'ba!k'ba!o'ba#j'ba#k'ba#l'ba#m'ba#n'ba#o'ba#p'ba#q'ba#r'ba#t'ba#v'ba#x'ba#y'ba#|'ba(X'ba(h'ba(o'ba!Y'ba!Z'ba~O|)zO!P){OP'daZ'daj'dan'da}'da!h'da!i'da!k'da!o'da#j'da#k'da#l'da#m'da#n'da#o'da#p'da#q'da#r'da#t'da#v'da#x'da#y'da#|'da(X'da(h'da(o'da(p'da!Y'da!Z'da~O(o$}OP%ZiZ%Zij%Zin%Zi|%Zi}%Zi!P%Zi!h%Zi!i%Zi!k%Zi!o%Zi#j%Zi#k%Zi#l%Zi#m%Zi#n%Zi#o%Zi#p%Zi#q%Zi#r%Zi#t%Zi#v%Zi#x%Zi#y%Zi#|%Zi(X%Zi(h%Zi(p%Zi!Y%Zi!Z%Zi~O(p%POP%]iZ%]ij%]in%]i|%]i}%]i!P%]i!h%]i!i%]i!k%]i!o%]i#j%]i#k%]i#l%]i#m%]i#n%]i#o%]i#p%]i#q%]i#r%]i#t%]i#v%]i#x%]i#y%]i#|%]i(X%]i(h%]i(o%]i!Y%]i!Z%]i~O#|$ky!Y$ky!Z$ky~P#C|O#|#_y!Y#_y!Z#_y~P#C|O!d#uO!Y'^q!j'^q~O!Y/cO!j(uy~O!V'`q!Y'`q~P#-]O!V9wO~P#-]O!Y0rO!Z)Oy~O!Y5UO!Z({q~O![1[O%c:OO~O!j:RO~O!['ZO%c:WO~OP$wqZ$wqn$wq}$wq!h$wq!i$wq!k$wq!o$wq#j$wq#k$wq#l$wq#m$wq#n$wq#o$wq#p$wq#q$wq#r$wq#t$wq#v$wq#x$wq#y$wq#|$wq(X$wq(h$wq!Y$wq!Z$wq~P&'UO|)zO!P){O(p%POP'caZ'caj'can'ca}'ca!h'ca!i'ca!k'ca!o'ca#j'ca#k'ca#l'ca#m'ca#n'ca#o'ca#p'ca#q'ca#r'ca#t'ca#v'ca#x'ca#y'ca#|'ca(X'ca(h'ca(o'ca!Y'ca!Z'ca~O|)zO!P){OP'eaZ'eaj'ean'ea}'ea!h'ea!i'ea!k'ea!o'ea#j'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#t'ea#v'ea#x'ea#y'ea#|'ea(X'ea(h'ea(o'ea(p'ea!Y'ea!Z'ea~OP$yqZ$yqn$yq}$yq!h$yq!i$yq!k$yq!o$yq#j$yq#k$yq#l$yq#m$yq#n$yq#o$yq#p$yq#q$yq#r$yq#t$yq#v$yq#x$yq#y$yq#|$yq(X$yq(h$yq!Y$yq!Z$yq~P&'UOf%_!Z!Y%_!Z#[%_!Z#|%_!Z~P!0}O!Y'iq!Z'iq~P#C|O!Y#d!Z!Z#d!Z~P#C|O#g%_!ZP%_!ZZ%_!Z`%_!Zn%_!Z}%_!Z!Y%_!Z!h%_!Z!i%_!Z!k%_!Z!o%_!Z#j%_!Z#k%_!Z#l%_!Z#m%_!Z#n%_!Z#o%_!Z#p%_!Z#q%_!Z#r%_!Z#t%_!Z#v%_!Z#x%_!Z#y%_!Z'r%_!Z(X%_!Z(h%_!Z!j%_!Z!V%_!Z'p%_!Z#[%_!Zr%_!Z![%_!Z%c%_!Z!d%_!Z~P#-]OP%_!ZZ%_!Zn%_!Z}%_!Z!h%_!Z!i%_!Z!k%_!Z!o%_!Z#j%_!Z#k%_!Z#l%_!Z#m%_!Z#n%_!Z#o%_!Z#p%_!Z#q%_!Z#r%_!Z#t%_!Z#v%_!Z#x%_!Z#y%_!Z#|%_!Z(X%_!Z(h%_!Z!Y%_!Z!Z%_!Z~P&'UOr(]X~P1qO'|!lO~P!*fO!VeX!YeX#[eX~P'#`OP[XZ[Xn[X|[X}[X!P[X!Y[X!YeX!h[X!i[X!k[X!o[X#[[X#[eX#geX#j[X#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#t[X#v[X#x[X#y[X$O[X(X[X(h[X(o[X(p[X~O!deX!j[X!jeX(heX~P'ASOP:cOQ:cORfOc<[Od!iOlkOn:cOokOpkOvkOx:cOz:cO!PWO!TkO!UkO![XO!f:fO!kZO!n:cO!o:cO!p:cO!r:gO!t:jO!w!hO$T!kO'{)YO'}TO(QUO(XVO(g[O(t<YO~O!Y:wO!Z$ma~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz;RO!P${O![$|O!f<aO!k$xO#f;XO$T%^O$o;TO$q;VO$t%_O'{(pO'}TO(QUO(X$uO(o$}O(p%PO~O#s)aO~P'ExO!Z[X!ZeX~P'ASO#g:kO~O!d#uO#g:kO~O#[:{O~O#r:pO~O#[;ZO!Y(mX!Z(mX~O#[:{O!Y(kX!Z(kX~O#g;[O~Of;^O~P!0}O#g;cO~O#g;dO~O!d#uO#g;eO~O!d#uO#g;[O~O#|;fO~P#C|O#g;gO~O#g;hO~O#g;mO~O#g;nO~O#g;oO~O#g;pO~O#|;qO~P!0}O#|;rO~P!0}O!i#P#Q#S#T#W#e#f#q(t$o$q$t%W%b%c%d%k%m%p%q%s%u~'vS#k!U't'|#lo#j#mn|'u$Y'u'{$[([~\",\n  goto: \"$2p)SPPPPP)TPP)WP)iP*x.|PPPP5pPP6WPP<S?gP?zP?zPPP?zPAxP?zP?zP?zPA|PPBRPBlPGdPPPGhPPPPGhJiPPPJoKjPGhPMxPPPP!!WGhPPPGhPGhP!$fGhP!'z!(|!)VP!)y!)}!)yPPPPP!-Y!(|PP!-v!.pP!1dGhGh!1i!4s!9Y!9Y!=OPPP!=VGhPPPPPPPPPPP!@dP!AqPPGh!CSPGhPGhGhGhGhPGh!DfP!GnP!JrP!Jv!KQ!KU!KUP!GkP!KY!KYP!N^P!NbGhGh!Nh##k?zP?zP?z?zP#$v?z?z#'O?z#)k?z#+m?z?z#,[#.f#.f#.j#.r#.f#.zP#.fP?z#/d?z#3R?z?z5pPPP#6vPPP#7a#7aP#7aP#7w#7aPP#7}P#7tP#7t#8b#7t#8|#9S5m)W#9V)WP#9^#9^#9^P)WP)WP)WP)WPP)WP#9d#9gP#9g)WP#9kP#9nP)WP)WP)WP)WP)WP)W)WPP#9t#9z#:V#:]#:c#:i#:o#:}#;T#;Z#;e#;k#;u#<U#<[#<|#=`#=f#=l#=z#>a#@O#@^#@d#Ax#BW#Cr#DQ#DW#D^#Dd#Dn#Dt#Dz#EU#Eh#EnPPPPPPPPPP#EtPPPPPPP#Fi#Ip#KP#KW#K`PPPP$!d$%Z$+r$+u$+x$,q$,t$,w$-O$-WPP$-^$-b$.Y$/X$/]$/qPP$/u$/{$0PP$0S$0W$0Z$1P$1h$2P$2T$2W$2Z$2a$2d$2h$2lR!{RoqOXst!Z#c%j&m&o&p&r,h,m1w1zY!uQ'Z-Y1[5]Q%pvQ%xyQ&P|Q&e!VS'R!e-QQ'a!iS'g!r!xS*c$|*hQ+f%yQ+s&RQ,X&_Q-W'YQ-b'bQ-j'hQ/|*jQ1f,YR;Y:g%OdOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S,e,h,m-^-f-t-z.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3Z5Y5d5t5u5x6]7w7|8]8gS#p]:d!r)[$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Q*u%ZQ+k%{Q,Z&bQ,b&jQ.c;QQ0h+^Q0l+`Q0w+lQ1n,`Q2{.[Q4v0rQ5k1gQ6i3PQ6u;RQ7h4wR8m6j&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]t!nQ!r!u!x!y'R'Y'Z'g'h'i-Q-W-Y-j1[5]5_$v$si#u#w$c$d$x${%O%Q%[%]%a)u){)}*P*R*Y*`*p*q+]+`+w+z.Z.i/Z/j/k/m0Q0S0^1R1U1^3O3x4S4[4f4n4p5c6g7T7^7y8j8w9[9n:O:W:y:z:|:};O;P;S;T;U;V;W;X;_;`;a;b;c;d;g;h;i;j;k;l;m;n;q;r<Y<b<c<f<gQ&S|Q'P!eS'V%f-TQ+k%{Q,Z&bQ0]*yQ0w+lQ0|+rQ1m,_Q1n,`Q4v0rQ5P1OQ5k1gQ5n1iQ5o1lQ7h4wQ7k4|Q8U5qQ9V7lR9b8RrnOXst!V!Z#c%j&d&m&o&p&r,h,m1w1zR,]&f&v^OPXYstuvwz!Z!`!g!j!o#R#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O']'m(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<[<][#[WZ#V#Y'S'}!S%gm#g#h#k%b%e(W(b(c(d+Q+R+T,d,z-x.O.P.Q.S2P2w2x6R6dQ%sxQ%wyS%||&RQ&Y!TQ'^!hQ'`!iQ(k#rS*V$x*ZS+e%x%yQ+i%{Q,S&]Q,W&_S-a'a'bQ.^(lQ/g*WQ0p+fQ0v+lQ0x+mQ0{+qQ1a,TS1e,X,YQ2i-bQ3y/cQ4u0rQ4y0uQ5O0}Q5j1fQ7Q3zQ7g4wQ7j4{Q9R7fR9y9S!O$zi#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<c!S%uy!i!t%w%x%y'Q'`'a'b'f'p*b+e+f,}-a-b-i/t0p2b2i2p4^Q+_%sQ+x&VQ+{&WQ,V&_Q.](kQ1`,SU1d,W,X,YQ3Q.^Q5e1aS5i1e1fQ8Q5j#W<^#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<go<_:y:z:};P;T;V;X;`;b;d;h;j;l;n;rW%Ti%V*r<YS&V!Q&dQ&W!RQ&X!SR+v&T$w%Si#u#w$c$d$x${%O%Q%[%]%a)u){)}*P*R*Y*`*p*q+]+`+w+z.Z.i/Z/j/k/m0Q0S0^1R1U1^3O3x4S4[4f4n4p5c6g7T7^7y8j8w9[9n:O:W:y:z:|:};O;P;S;T;U;V;W;X;_;`;a;b;c;d;g;h;i;j;k;l;m;n;q;r<Y<b<c<f<gT)v$u)wV*v%Z;Q;RU'V!e%f-TS(y#y#zQ+p&OS.V(g(hQ1V+|Q4g0ZR7p5U&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]$i$`c#X#d%n%o%q'|(S(n(u(})O)P)Q)R)S)T)U)V)W)X)Z)^)b)l+Z+o-O-m-r-w-y.h.n.r.t.u.v/V0_2W2Z2k2r3Y3_3`3a3b3c3d3e3f3g3h3i3j3k3n3o3t4k4s6U6[6a6o6p6y6z7r8a8e8n8t8u9k9{:S:e<PT#SV#T&}kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Q'T!eR2^-Qv!nQ!e!r!u!x!y'R'Y'Z'g'h'i-Q-W-Y-j1[5]5_S*b$|*hS/t*c*jQ/}*kQ1X,OQ4^/|R4a0PnqOXst!Z#c%j&m&o&p&r,h,m1w1zQ&t!^Q'q!wS(m#t:kQ+c%vQ,Q&YQ,R&[Q-_'_Q-l'jS.g(r;[S0`+O;eQ0n+dQ1Z,PQ2O,oQ2Q,pQ2Y,{Q2g-`Q2j-dS4l0a;oQ4q0oS4t0q;pQ6T2[Q6X2hQ6^2oQ7e4rQ8b6VQ8c6YQ8f6_R9h8_$d$_c#X#d%o%q'|(S(n(u(})O)P)Q)R)S)T)U)V)W)X)Z)^)b)l+Z+o-O-m-r-w-y.h.n.r.u.v/V0_2W2Z2k2r3Y3_3`3a3b3c3d3e3f3g3h3i3j3k3n3o3t4k4s6U6[6a6o6p6y6z7r8a8e8n8t8u9k9{:S:e<PS(j#o'dU*o%R(q3mS+Y%n.tQ2|0hQ6f2{Q8l6iR9o8m$d$^c#X#d%o%q'|(S(n(u(})O)P)Q)R)S)T)U)V)W)X)Z)^)b)l+Z+o-O-m-r-w-y.h.n.r.u.v/V0_2W2Z2k2r3Y3_3`3a3b3c3d3e3f3g3h3i3j3k3n3o3t4k4s6U6[6a6o6p6y6z7r8a8e8n8t8u9k9{:S:e<PS(i#o'dS({#z$_S+X%n.tS.W(h(jQ.w)]Q0e+YR2y.X&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]S#p]:dQ&o!XQ&p!YQ&r![Q&s!]R1v,kQ'[!hQ+[%sQ-]'^S.Y(k+_Q2e-[W2}.].^0g0iQ6W2fU6e2z2|3QS8i6f6hS9m8k8lS:U9l9oQ:^:VR:a:_U!vQ'Z-YT5Z1[5]!Q_OXZ`st!V!Z#c#g%b%j&d&f&m&o&p&r(d,h,m.P1w1z]!pQ!r'Z-Y1[5]T#p]:d%Y{OPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&j&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8gS(y#y#zS.V(g(h!s;v$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Y!tQ'Z-Y1[5]Q'f!rS'p!u!xS'r!y5_S-i'g'hQ-k'iR2p-jQ'o!tS(`#f1qS-h'f'rQ/f*VQ/r*bQ2q-kQ4O/gS4X/s/}Q7P3yS7[4_4aQ8y7QR9Q7_Q#vbQ'n!tS(_#f1qS(a#l*}Q+P%cQ+a%tQ+g%zU-g'f'o'rQ-{(`Q/e*VQ/q*bQ/w*eQ0m+bQ1b,US2n-h-kQ2v.TS3}/f/gS4W/r/}Q4Z/vQ4]/xQ5g1cQ6`2qQ7O3yQ7S4OS7W4X4aQ7]4`Q8O5hS8x7P7QQ8|7XQ9O7[Q9_8PQ9u8yQ9v8}Q9x9QQ:Q9`Q:Y9wQ;y;tQ<U;}R<V<OV!vQ'Z-Y%YaOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&j&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8gS#vz!j!r;s$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]R;y<[%YbOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&j&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8gQ%cj!S%ty!i!t%w%x%y'Q'`'a'b'f'p*b+e+f,}-a-b-i/t0p2b2i2p4^S%zz!jQ+b%uQ,U&_W1c,V,W,X,YU5h1d1e1fS8P5i5jQ9`8Q!r;t$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Q;}<ZR<O<[$|eOPXYstuvw!Z!`!g!o#R#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&m&o&p&r&v'O']'m(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8gY#aWZ#V#Y'}!S%gm#g#h#k%b%e(W(b(c(d+Q+R+T,d,z-x.O.P.Q.S2P2w2x6R6dQ,c&j!p;u$[$m)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]R;x'SS'W!e%fR2`-T%OdOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S,e,h,m-^-f-t-z.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3Z5Y5d5t5u5x6]7w7|8]8g!r)[$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Q,b&jQ0h+^Q2{.[Q6i3PR8m6j!b$Uc#X%n'|(S(n(u)W)X)^)b+o-m-r-w-y.h.n/V0_2k2r3Y3k4k4s6[6a6o8e9k:e!P:r)Z)l-O.t2W2Z3_3i3j3n3t6U6p6y6z7r8a8n8t8u9{:S<P!f$Wc#X%n'|(S(n(u)T)U)W)X)^)b+o-m-r-w-y.h.n/V0_2k2r3Y3k4k4s6[6a6o8e9k:e!T:t)Z)l-O.t2W2Z3_3f3g3i3j3n3t6U6p6y6z7r8a8n8t8u9{:S<P!^$[c#X%n'|(S(n(u)^)b+o-m-r-w-y.h.n/V0_2k2r3Y3k4k4s6[6a6o8e9k:eQ3x/az<])Z)l-O.t2W2Z3_3n3t6U6p6y6z7r8a8n8t8u9{:S<PQ<b<dR<c<e&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]S$nh$oR3q.z'TgOPWXYZhstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m$o%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.z.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]T$jf$pQ$hfS)e$k)iR)q$pT$if$pT)g$k)i'ThOPWXYZhstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m$o%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.z.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]T$nh$oQ$qhR)p$o%YjOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&j&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8g!s<Z$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]#clOPXZst!Z!`!o#R#c#n#{$m%j&f&i&j&m&o&p&r&v'O'](z)n+S+^,e,h,m-^.[.{0[1_1o1p1r1t1w1z1|3P3p5Y5d5t5u5x6j7w7|8]!O%Ri#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<c#W(q#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<gQ*z%_Q/W)zo3m:y:z:};P;T;V;X;`;b;d;h;j;l;n;r!O$yi#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<cQ*[$zS*e$|*hQ*{%`Q/x*f#W;{#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<gn;|:y:z:};P;T;V;X;`;b;d;h;j;l;n;rQ<Q<^Q<R<_Q<S<`R<T<a!O%Ri#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<c#W(q#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<go3m:y:z:};P;T;V;X;`;b;d;h;j;l;n;rnoOXst!Z#c%j&m&o&p&r,h,m1w1zQ*_${Q,v&yQ,w&{R4R/k$v%Si#u#w$c$d$x${%O%Q%[%]%a)u){)}*P*R*Y*`*p*q+]+`+w+z.Z.i/Z/j/k/m0Q0S0^1R1U1^3O3x4S4[4f4n4p5c6g7T7^7y8j8w9[9n:O:W:y:z:|:};O;P;S;T;U;V;W;X;_;`;a;b;c;d;g;h;i;j;k;l;m;n;q;r<Y<b<c<f<gQ+y&WQ1T+{Q5S1SR7o5TT*g$|*hS*g$|*hT5[1[5]S/v*d5YT4`0O7wQ+a%tQ/w*eQ0m+bQ1b,UQ5g1cQ8O5hQ9_8PR:Q9`!O%Oi#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<cr)}$v(s*O*n*|/i0U0V3W4P4j6}7`9t;z<W<XS0Q*m0R#W:|#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<gn:}:y:z:};P;T;V;X;`;b;d;h;j;l;n;r!^;_(o)`*U*^._.b.f/S/X/a/n0f1Q1S3T4Q4U5R5T6k6n7U7Y7b7d8{9P:X<d<e`;`3l6q6t6x8o9p9s:bS;i.a3UT;j6s8r!O%Qi#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<cv*P$v(s*Q*m*|/]/i0U0V3W4P4b4j6}7`9t;z<W<XS0S*n0T#W;O#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<gn;P:y:z:};P;T;V;X;`;b;d;h;j;l;n;r!b;a(o)`*U*^.`.a.f/S/X/a/n0f1Q1S3R3T4Q4U5R5T6k6l6n7U7Y7b7d8{9P:X<d<ed;b3l6r6s6x8o8p9p9q9s:bS;k.b3VT;l6t8srnOXst!V!Z#c%j&d&m&o&p&r,h,m1w1zQ&a!UR,e&jrnOXst!V!Z#c%j&d&m&o&p&r,h,m1w1zR&a!UQ+}&XR1P+vsnOXst!V!Z#c%j&d&m&o&p&r,h,m1w1zQ1],SS5b1`1aU7x5`5a5eS9Z7z7{S9|9Y9]Q:Z9}R:`:[Q&h!VR,^&dR5n1iS%||&RR0x+mQ&m!WR,h&nR,n&sT1x,m1zR,r&tQ,q&tR2R,rQ't!zR-n'tSsOtQ#cXT%ms#cQ!}TR'v!}Q#QUR'x#QQ)w$uR/T)wQ#TVR'z#TQ#WWU(Q#W(R-uQ(R#XR-u(SQ-R'TR2_-RQ.j(sR3X.jQ.m(uS3[.m3]R3].nQ-Y'ZR2c-YY!rQ'Z-Y1[5]R'e!rS#^W%eU(X#^(Y-vQ(Y#_R-v(TQ-U'WR2a-Ut`OXst!V!Z#c%j&d&f&m&o&p&r,h,m1w1zS#gZ%bU#q`#g.PR.P(dQ(e#iQ-|(aW.U(e-|2t6bQ2t-}R6b2uQ)i$kR.|)iQ$ohR)o$oQ$bcU)_$b-q:xQ-q:eR:x)lQ/d*VW3{/d3|7R8zU3|/e/f/gS7R3}4OR8z7S$X)|$v(o(s)`*U*^*m*n*w*x*|.a.b.d.e.f/S/X/]/_/a/i/n0U0V0f1Q1S3R3S3T3W3l4P4Q4U4b4d4j5R5T6k6l6m6n6s6t6v6w6x6}7U7Y7`7b7d8o8p8q8{9P9p9q9r9s9t:X:b;z<W<X<d<eQ/l*^U4T/l4V7VQ4V/nR7V4UQ*h$|R/z*hr*O$v(s*m*n*|/i0U0V3W4P4j6}7`9t;z<W<X!^._(o)`*U*^.a.b.f/S/X/a/n0f1Q1S3T4Q4U5R5T6k6n7U7Y7b7d8{9P:X<d<eU/^*O._6qa6q3l6s6t6x8o9p9s:bQ0R*mQ3U.aU4c0R3U8rR8r6sv*Q$v(s*m*n*|/]/i0U0V3W4P4b4j6}7`9t;z<W<X!b.`(o)`*U*^.a.b.f/S/X/a/n0f1Q1S3R3T4Q4U5R5T6k6l6n7U7Y7b7d8{9P:X<d<eU/`*Q.`6re6r3l6s6t6x8o8p9p9q9s:bQ0T*nQ3V.bU4e0T3V8sR8s6tQ*s%UR0X*sQ4o0fR7c4oQ+U%hR0d+UQ5V1VS7q5V9XR9X7rQ,P&YR1Y,PQ5]1[R7u5]Q1h,ZS5l1h8SR8S5nQ0s+iW4x0s4z7i9TQ4z0vQ7i4yR9T7jQ+n%|R0y+nQ1z,mR5|1zYrOXst#cQ&q!ZQ+W%jQ,g&mQ,i&oQ,j&pQ,l&rQ1u,hS1x,m1zR5{1wQ%lpQ&u!_Q&x!aQ&z!bQ&|!cQ'l!tQ+V%iQ+c%vQ+u&SQ,]&hQ,t&wW-e'f'n'o'rQ-l'jQ/y*gQ0n+dS1k,^,aQ2S,sQ2T,vQ2U,wQ2j-dW2l-g-h-k-mQ4q0oQ4}0|Q5Q1QQ5f1bQ5p1mQ5z1vU6Z2k2n2qQ6^2oQ7e4rQ7m5PQ7n5RQ7t5[Q7}5gQ8T5oS8d6[6`Q8f6_Q9U7kQ9^8OQ9c8UQ9j8eQ9z9VQ:P9_Q:T9kR:]:QQ%vyQ'_!iQ'j!tU+d%w%x%yQ,{'QU-`'`'a'bS-d'f'pQ/p*bS0o+e+fQ2[,}S2h-a-bQ2o-iQ4Y/tQ4r0pQ6V2bQ6Y2iQ6_2pR7Z4^S$wi<YR*t%VU%Ui%V<YR0W*rQ$viS(o#u+`Q(s#wS)`$c$dQ*U$xQ*^${Q*m%OQ*n%QQ*w%[Q*x%]Q*|%aQ.a:|Q.b;OQ.d;SQ.e;UQ.f;WQ/S)uS/X){/ZQ/])}Q/_*PQ/a*RQ/i*YQ/n*`Q0U*pQ0V*qh0f+].Z1^3O5c6g7y8j9[9n:O:WQ1Q+wQ1S+zQ3R;_Q3S;aQ3T;cQ3W.iS3l:y:zQ4P/jQ4Q/kQ4U/mQ4b0QQ4d0SQ4j0^Q5R1RQ5T1UQ6k;gQ6l;iQ6m;kQ6n;mQ6s:}Q6t;PQ6v;TQ6w;VQ6x;XQ6}3xQ7U4SQ7Y4[Q7`4fQ7b4nQ7d4pQ8o;dQ8p;`Q8q;bQ8{7TQ9P7^Q9p;hQ9q;jQ9r;lQ9s;nQ9t8wQ:X;qQ:b;rQ;z<YQ<W<bQ<X<cQ<d<fR<e<gnpOXst!Z#c%j&m&o&p&r,h,m1w1zQ!fPS#eZ#nQ&w!`U'c!o5Y7wQ'y#RQ(|#{Q)m$mS,a&f&iQ,f&jQ,s&vQ,x'OQ-[']Q.p(zQ/Q)nQ0b+SQ0i+^Q1s,eQ2f-^Q2|.[Q3s.{Q4h0[Q5a1_Q5r1oQ5s1pQ5w1rQ5y1tQ6O1|Q6f3PQ6{3pQ7{5dQ8X5tQ8Y5uQ8[5xQ8l6jQ9]7|R9g8]#WcOPXZst!Z!`!o#c#n#{%j&f&i&j&m&o&p&r&v'O'](z+S+^,e,h,m-^.[0[1_1o1p1r1t1w1z1|3P5Y5d5t5u5x6j7w7|8]Q#XWQ#dYQ%nuQ%ovS%qw!gS'|#V(PQ(S#YQ(n#tQ(u#xQ(}$OQ)O$PQ)P$QQ)Q$RQ)R$SQ)S$TQ)T$UQ)U$VQ)V$WQ)W$XQ)X$YQ)Z$[Q)^$aQ)b$eW)l$m)n.{3pQ+Z%pQ+o%}S-O'S2]Q-m'mS-r'}-tQ-w(VQ-y(^Q.h(rQ.n(vQ.r:cQ.t:fQ.u:gQ.v:jQ/V)yQ0_+OQ2W,yQ2Z,|Q2k-fQ2r-zQ3Y.lQ3_:kQ3`:lQ3a:mQ3b:nQ3c:oQ3d:pQ3e:qQ3f:rQ3g:sQ3h:tQ3i:uQ3j:vQ3k.sQ3n:{Q3o;YQ3t:wQ4k0aQ4s0qQ6U;ZQ6[2mQ6a2sQ6o3ZQ6p;[Q6y;^Q6z;eQ7r5WQ8a6SQ8e6]Q8n;fQ8t;oQ8u;pQ9k8gQ9{9WQ:S9iQ:e#RR<P<]R#ZWR'U!eY!tQ'Z-Y1[5]S'Q!e-QQ'f!rS'p!u!xS'r!y5_S,}'R'YS-i'g'hQ-k'iQ2b-WR2p-jR(t#wR(w#xQ!fQT-X'Z-Y]!qQ!r'Z-Y1[5]Q#o]R'd:dT#jZ%bS#iZ%bS%hm,dU(a#g#h#kS-}(b(cQ.R(dQ0c+TQ2u.OU2v.P.Q.SS6c2w2xR8h6d`#]W#V#Y%e'}(W+Q-xr#fZm#g#h#k%b(b(c(d+T.O.P.Q.S2w2x6dQ1q,dQ2X,zQ6Q2PQ8`6RT;w'S+RT#`W%eS#_W%eS(O#V(WS(T#Y+QS-P'S+RT-s'}-xT'X!e%fQ$kfR)s$pT)h$k)iR3r.zT*X$x*ZR*a${Q0g+]Q2z.ZQ5`1^Q6h3OQ7z5cQ8k6gQ9Y7yQ9l8jQ9}9[Q:V9nQ:[:OR:_:WnqOXst!Z#c%j&m&o&p&r,h,m1w1zQ&g!VR,]&dtmOXst!U!V!Z#c%j&d&m&o&p&r,h,m1w1zR,d&jT%im,dR1W+|R,[&bQ&Q|R+t&RR+j%{T&k!W&nT&l!W&nT1y,m1z\",\n  nodeNames: \"⚠ ArithOp ArithOp JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem\",\n  maxTerm: 371,\n  context: B3,\n  nodeProps: [\n    [\"isolate\", -8, 4, 5, 13, 33, 35, 48, 50, 52, \"\"],\n    [\"group\", -26, 8, 16, 18, 65, 201, 205, 209, 210, 212, 215, 218, 228, 230, 236, 238, 240, 242, 245, 251, 257, 259, 261, 263, 265, 267, 268, \"Statement\", -32, 12, 13, 28, 31, 32, 38, 48, 51, 52, 54, 59, 67, 75, 79, 81, 83, 84, 106, 107, 116, 117, 134, 137, 139, 140, 141, 142, 144, 145, 164, 165, 167, \"Expression\", -23, 27, 29, 33, 37, 39, 41, 168, 170, 172, 173, 175, 176, 177, 179, 180, 181, 183, 184, 185, 195, 197, 199, 200, \"Type\", -3, 87, 99, 105, \"ClassItem\"],\n    [\"openedBy\", 22, \"<\", 34, \"InterpolationStart\", 53, \"[\", 57, \"{\", 72, \"(\", 157, \"JSXStartCloseTag\"],\n    [\"closedBy\", 23, \">\", 36, \"InterpolationEnd\", 47, \"]\", 58, \"}\", 73, \")\", 162, \"JSXEndTag\"]\n  ],\n  propSources: [z3],\n  skippedNodes: [0, 4, 5, 271],\n  repeatNodeCount: 37,\n  tokenData: \"$Fj(CSR!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#8g!R![#:v![!]#Gv!]!^#IS!^!_#J^!_!`#Ns!`!a$#_!a!b$(l!b!c$,k!c!}Er!}#O$-u#O#P$/P#P#Q$4h#Q#R$5r#R#SEr#S#T$7P#T#o$8Z#o#p$<k#p#q$=a#q#r$>q#r#s$?}#s$f%Z$f$g+g$g#BYEr#BY#BZ$AX#BZ$ISEr$IS$I_$AX$I_$I|Er$I|$I}$Dd$I}$JO$Dd$JO$JTEr$JT$JU$AX$JU$KVEr$KV$KW$AX$KW&FUEr&FU&FV$AX&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$AX?HUOEr(n%d_$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$f&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$f&j(R!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(R!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$f&j(OpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(OpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z(CS+rq$f&j(Op(R!b't(;dOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z(CS.ST(P#S$f&j'u(;dO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c(CS.n_$f&j(Op(R!b'u(;dOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`/x`$f&j!o$Ip(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S1V`#t$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S2d_#t$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/|3l_'}$(n$f&j(R!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$f&j(R!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$f&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$a`$f&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$a``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$a`$f&j(R!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(R!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$a`(R!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k#%|:hh$f&j(Op(R!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__VS$f&j(Op(R!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]VS$f&j(R!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXVS$f&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSVSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWVS(R!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]VS$f&j(OpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWVS(OpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYVS(Op(R!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S#%|C}i$f&j(g!L^(Op(R!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr#%|EoP;=`<%lCr(CSFRk$f&j(Op(R!b$Y#t'{&;d([!LYOY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$f&j(Op(R!b$Y#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv(CSJPP;=`<%lEr%#SJ_`$f&j(Op(R!b#l$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SKl_$f&j$O$Id(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&COLva(p&;`$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SNW`$f&j#x$Id(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/|! c_(Q$)`$f&j(OpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$f&j(OpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$f&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$a`$f&j(OpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(OpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$a`(OpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b(*Q!'t_!k(!b$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'l!)O_!jM|$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h!*[b$f&j(Op(R!b'|#)d#m$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S!+o`$f&j(Op(R!b#j$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&-O!,|`$f&j(Op(R!bn&%`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&C[!.Z_!Y&;l$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!/ec$f&j(Op(R!b|'<nOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!0ya$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!2Z_!XMt$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!3eg$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!5Vg$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!6wc$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!8_c$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!9uf$f&j(Op(R!b#k$IdOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpxz!;Zz{#,f{!P!;Z!P!Q#-{!Q!^!;Z!^!_#'Z!_!`#5k!`!a#7Q!a!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z(r!;fb$f&j(Op(R!b!USOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z(Q!<w`$f&j(R!b!USOY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eb!Q!^!<n!^!_!GY!_!}!<n!}#O!Ja#O#P!Dj#P#o!<n#o#p!GY#p;'S!<n;'S;=`!Kj<%lO!<n&n!>Q^$f&j!USOY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@Y!_!}!=y!}#O!Bw#O#P!Dj#P#o!=y#o#p!@Y#p;'S!=y;'S;=`!E[<%lO!=y&n!?Ta$f&j!USO!^&c!_#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&cS!@_X!USOY!@YZ!P!@Y!P!Q!@z!Q!}!@Y!}#O!Ac#O#P!Bb#P;'S!@Y;'S;=`!Bq<%lO!@YS!APU!US#Z#[!@z#]#^!@z#a#b!@z#g#h!@z#i#j!@z#m#n!@zS!AfVOY!AcZ#O!Ac#O#P!A{#P#Q!@Y#Q;'S!Ac;'S;=`!B[<%lO!AcS!BOSOY!AcZ;'S!Ac;'S;=`!B[<%lO!AcS!B_P;=`<%l!AcS!BeSOY!@YZ;'S!@Y;'S;=`!Bq<%lO!@YS!BtP;=`<%l!@Y&n!B|[$f&jOY!BwYZ&cZ!^!Bw!^!_!Ac!_#O!Bw#O#P!Cr#P#Q!=y#Q#o!Bw#o#p!Ac#p;'S!Bw;'S;=`!Dd<%lO!Bw&n!CwX$f&jOY!BwYZ&cZ!^!Bw!^!_!Ac!_#o!Bw#o#p!Ac#p;'S!Bw;'S;=`!Dd<%lO!Bw&n!DgP;=`<%l!Bw&n!DoX$f&jOY!=yYZ&cZ!^!=y!^!_!@Y!_#o!=y#o#p!@Y#p;'S!=y;'S;=`!E[<%lO!=y&n!E_P;=`<%l!=y(Q!Eki$f&j(R!b!USOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#Z&}#Z#[!Eb#[#]&}#]#^!Eb#^#a&}#a#b!Eb#b#g&}#g#h!Eb#h#i&}#i#j!Eb#j#m&}#m#n!Eb#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!f!GaZ(R!b!USOY!GYZw!GYwx!@Yx!P!GY!P!Q!HS!Q!}!GY!}#O!Ic#O#P!Bb#P;'S!GY;'S;=`!JZ<%lO!GY!f!HZb(R!b!USOY'}Zw'}x#O'}#P#Z'}#Z#[!HS#[#]'}#]#^!HS#^#a'}#a#b!HS#b#g'}#g#h!HS#h#i'}#i#j!HS#j#m'}#m#n!HS#n;'S'};'S;=`(f<%lO'}!f!IhX(R!bOY!IcZw!Icwx!Acx#O!Ic#O#P!A{#P#Q!GY#Q;'S!Ic;'S;=`!JT<%lO!Ic!f!JWP;=`<%l!Ic!f!J^P;=`<%l!GY(Q!Jh^$f&j(R!bOY!JaYZ&cZw!Jawx!Bwx!^!Ja!^!_!Ic!_#O!Ja#O#P!Cr#P#Q!<n#Q#o!Ja#o#p!Ic#p;'S!Ja;'S;=`!Kd<%lO!Ja(Q!KgP;=`<%l!Ja(Q!KmP;=`<%l!<n'`!Ky`$f&j(Op!USOY!KpYZ&cZr!Kprs!=ys!P!Kp!P!Q!L{!Q!^!Kp!^!_!Ns!_!}!Kp!}#O##z#O#P!Dj#P#o!Kp#o#p!Ns#p;'S!Kp;'S;=`#%T<%lO!Kp'`!MUi$f&j(Op!USOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#Z(r#Z#[!L{#[#](r#]#^!L{#^#a(r#a#b!L{#b#g(r#g#h!L{#h#i(r#i#j!L{#j#m(r#m#n!L{#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rt!NzZ(Op!USOY!NsZr!Nsrs!@Ys!P!Ns!P!Q# m!Q!}!Ns!}#O#!|#O#P!Bb#P;'S!Ns;'S;=`##t<%lO!Nst# tb(Op!USOY)rZr)rs#O)r#P#Z)r#Z#[# m#[#])r#]#^# m#^#a)r#a#b# m#b#g)r#g#h# m#h#i)r#i#j# m#j#m)r#m#n# m#n;'S)r;'S;=`*Z<%lO)rt##RX(OpOY#!|Zr#!|rs!Acs#O#!|#O#P!A{#P#Q!Ns#Q;'S#!|;'S;=`##n<%lO#!|t##qP;=`<%l#!|t##wP;=`<%l!Ns'`#$R^$f&j(OpOY##zYZ&cZr##zrs!Bws!^##z!^!_#!|!_#O##z#O#P!Cr#P#Q!Kp#Q#o##z#o#p#!|#p;'S##z;'S;=`#$}<%lO##z'`#%QP;=`<%l##z'`#%WP;=`<%l!Kp(r#%fk$f&j(Op(R!b!USOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#Z%Z#Z#[#%Z#[#]%Z#]#^#%Z#^#a%Z#a#b#%Z#b#g%Z#g#h#%Z#h#i%Z#i#j#%Z#j#m%Z#m#n#%Z#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#W#'d](Op(R!b!USOY#'ZZr#'Zrs!GYsw#'Zwx!Nsx!P#'Z!P!Q#(]!Q!}#'Z!}#O#)w#O#P!Bb#P;'S#'Z;'S;=`#*w<%lO#'Z#W#(fe(Op(R!b!USOY*gZr*grs'}sw*gwx)rx#O*g#P#Z*g#Z#[#(]#[#]*g#]#^#(]#^#a*g#a#b#(]#b#g*g#g#h#(]#h#i*g#i#j#(]#j#m*g#m#n#(]#n;'S*g;'S;=`+Z<%lO*g#W#*OZ(Op(R!bOY#)wZr#)wrs!Icsw#)wwx#!|x#O#)w#O#P!A{#P#Q#'Z#Q;'S#)w;'S;=`#*q<%lO#)w#W#*tP;=`<%l#)w#W#*zP;=`<%l#'Z(r#+W`$f&j(Op(R!bOY#*}YZ&cZr#*}rs!Jasw#*}wx##zx!^#*}!^!_#)w!_#O#*}#O#P!Cr#P#Q!;Z#Q#o#*}#o#p#)w#p;'S#*};'S;=`#,Y<%lO#*}(r#,]P;=`<%l#*}(r#,cP;=`<%l!;Z(CS#,sb$f&j(Op(R!b'v(;d!USOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z(CS#.W_$f&j(Op(R!bS(;dOY#-{YZ&cZr#-{rs#/Vsw#-{wx#2gx!^#-{!^!_#4f!_#O#-{#O#P#0X#P#o#-{#o#p#4f#p;'S#-{;'S;=`#5e<%lO#-{(Bb#/`]$f&j(R!bS(;dOY#/VYZ&cZw#/Vwx#0Xx!^#/V!^!_#1j!_#O#/V#O#P#0X#P#o#/V#o#p#1j#p;'S#/V;'S;=`#2a<%lO#/V(AO#0`X$f&jS(;dOY#0XYZ&cZ!^#0X!^!_#0{!_#o#0X#o#p#0{#p;'S#0X;'S;=`#1d<%lO#0X(;d#1QSS(;dOY#0{Z;'S#0{;'S;=`#1^<%lO#0{(;d#1aP;=`<%l#0{(AO#1gP;=`<%l#0X(<v#1qW(R!bS(;dOY#1jZw#1jwx#0{x#O#1j#O#P#0{#P;'S#1j;'S;=`#2Z<%lO#1j(<v#2^P;=`<%l#1j(Bb#2dP;=`<%l#/V(Ap#2p]$f&j(OpS(;dOY#2gYZ&cZr#2grs#0Xs!^#2g!^!_#3i!_#O#2g#O#P#0X#P#o#2g#o#p#3i#p;'S#2g;'S;=`#4`<%lO#2g(<U#3pW(OpS(;dOY#3iZr#3irs#0{s#O#3i#O#P#0{#P;'S#3i;'S;=`#4Y<%lO#3i(<U#4]P;=`<%l#3i(Ap#4cP;=`<%l#2g(=h#4oY(Op(R!bS(;dOY#4fZr#4frs#1jsw#4fwx#3ix#O#4f#O#P#0{#P;'S#4f;'S;=`#5_<%lO#4f(=h#5bP;=`<%l#4f(CS#5hP;=`<%l#-{%#W#5xb$f&j$O$Id(Op(R!b!USOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z+h#7_b$W#t$f&j(Op(R!b!USOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z$/l#8rp$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#:v![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#:v#S#U%Z#U#V#>Q#V#X%Z#X#Y!4|#Y#b%Z#b#c#<v#c#d#AY#d#l%Z#l#m#D[#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#;Rk$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#:v![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#:v#S#X%Z#X#Y!4|#Y#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#=R_$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#>Zd$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#?i!R!S#?i!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#?i#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#?tf$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#?i!R!S#?i!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#?i#S#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#Acc$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#Bn!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#Bn#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#Bye$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#Bn!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#Bn#S#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#Deg$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#E|![!^%Z!^!_*g!_!c%Z!c!i#E|!i#O%Z#O#P&c#P#R%Z#R#S#E|#S#T%Z#T#Z#E|#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#FXi$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#E|![!^%Z!^!_*g!_!c%Z!c!i#E|!i#O%Z#O#P&c#P#R%Z#R#S#E|#S#T%Z#T#Z#E|#Z#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh#HT_!d$b$f&j#|%<f(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#I__`l$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(@^#Jk^g!*v!h'.r(Op(R!b(tSOY*gZr*grs'}sw*gwx)rx!P*g!P!Q#Kg!Q!^*g!^!_#L]!_!`#M}!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#KpX$h&j(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#LfZ#n$Id(Op(R!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#MX!`#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#MbX$O$Id(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#NWX#o$Id(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g%Gh$ Oa#[%?x$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$!T!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#W$!`_#g$Ih$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh$#nafBf#o$Id$c#|$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$$s!`!a$%}!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$%O_#o$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$&Ya#n$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$'_!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$'j`#n$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h$(wc(h$Ip$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P$*S!P!^%Z!^!_*g!_!a%Z!a!b$+^!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+`$*__}'#p$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$+i`$f&j#y$Id(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&^$,v_!{!Ln$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(@^$.Q_!P(8n$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/UZ$f&jO!^$/w!^!_$0_!_#i$/w#i#j$0d#j#l$/w#l#m$2V#m#o$/w#o#p$0_#p;'S$/w;'S;=`$4b<%lO$/w(n$0OT^#S$f&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0dO^#S(n$0i[$f&jO!Q&c!Q![$1_![!^&c!_!c&c!c!i$1_!i#T&c#T#Z$1_#Z#o&c#o#p$3u#p;'S&c;'S;=`&w<%lO&c(n$1dZ$f&jO!Q&c!Q![$2V![!^&c!_!c&c!c!i$2V!i#T&c#T#Z$2V#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2[Z$f&jO!Q&c!Q![$2}![!^&c!_!c&c!c!i$2}!i#T&c#T#Z$2}#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3SZ$f&jO!Q&c!Q![$/w![!^&c!_!c&c!c!i$/w!i#T&c#T#Z$/w#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$3xR!Q![$4R!c!i$4R#T#Z$4R#S$4US!Q![$4R!c!i$4R#T#Z$4R#q#r$0_(n$4eP;=`<%l$/w!2r$4s_!V!+S$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$5}`#v$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&,v$7[_$f&j(Op(R!b(X&%WOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$8jk$f&j(Op(R!b'{&;d$[#t([!LYOY%ZYZ&cZr%Zrs&}st%Ztu$8Zuw%Zwx(rx}%Z}!O$:_!O!Q%Z!Q![$8Z![!^%Z!^!_*g!_!c%Z!c!}$8Z!}#O%Z#O#P&c#P#R%Z#R#S$8Z#S#T%Z#T#o$8Z#o#p*g#p$g%Z$g;'S$8Z;'S;=`$<e<%lO$8Z+d$:jk$f&j(Op(R!b$[#tOY%ZYZ&cZr%Zrs&}st%Ztu$:_uw%Zwx(rx}%Z}!O$:_!O!Q%Z!Q![$:_![!^%Z!^!_*g!_!c%Z!c!}$:_!}#O%Z#O#P&c#P#R%Z#R#S$:_#S#T%Z#T#o$:_#o#p*g#p$g%Z$g;'S$:_;'S;=`$<_<%lO$:_+d$<bP;=`<%l$:_(CS$<hP;=`<%l$8Z!5p$<tX![!3l(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g&CO$=la(o&;`$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+^#q;'S%Z;'S;=`+a<%lO%Z%#`$?O_!Z$I`r`$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(r$@Y_!pS$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$Aj|$f&j(Op(R!b't(;d$Y#t'{&;d([!LYOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$AX#BZ$ISEr$IS$I_$AX$I_$JTEr$JT$JU$AX$JU$KVEr$KV$KW$AX$KW&FUEr&FU&FV$AX&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$AX?HUOEr(CS$Duk$f&j(Op(R!b'u(;d$Y#t'{&;d([!LYOY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr\",\n  tokenizers: [U3, q3, Y3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, L3, new Hu(\"$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOt~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!R~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(Z~~\", 141, 332), new Hu(\"j~RQYZXz{^~^O'x~~aP!P!Qd~iO'y~~\", 25, 315)],\n  topRules: { Script: [0, 6], SingleExpression: [1, 269], SingleClassItem: [2, 270] },\n  dialects: { jsx: 0, ts: 14614 },\n  dynamicPrecedences: { 69: 1, 79: 1, 81: 1, 165: 1, 193: 1 },\n  specialized: [{ term: 319, get: (t) => H3[t] || -1 }, { term: 334, get: (t) => F3[t] || -1 }, { term: 70, get: (t) => G3[t] || -1 }],\n  tokenPrec: 14638\n}), Gx = [\n  /* @__PURE__ */ vn(\"function ${name}(${params}) {\\n\t${}\\n}\", {\n    label: \"function\",\n    detail: \"definition\",\n    type: \"keyword\"\n  }),\n  /* @__PURE__ */ vn(\"for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\\n\t${}\\n}\", {\n    label: \"for\",\n    detail: \"loop\",\n    type: \"keyword\"\n  }),\n  /* @__PURE__ */ vn(\"for (let ${name} of ${collection}) {\\n\t${}\\n}\", {\n    label: \"for\",\n    detail: \"of loop\",\n    type: \"keyword\"\n  }),\n  /* @__PURE__ */ vn(\"do {\\n\t${}\\n} while (${})\", {\n    label: \"do\",\n    detail: \"loop\",\n    type: \"keyword\"\n  }),\n  /* @__PURE__ */ vn(\"while (${}) {\\n\t${}\\n}\", {\n    label: \"while\",\n    detail: \"loop\",\n    type: \"keyword\"\n  }),\n  /* @__PURE__ */ vn(`try {\n\t\\${}\n} catch (\\${error}) {\n\t\\${}\n}`, {\n    label: \"try\",\n    detail: \"/ catch block\",\n    type: \"keyword\"\n  }),\n  /* @__PURE__ */ vn(\"if (${}) {\\n\t${}\\n}\", {\n    label: \"if\",\n    detail: \"block\",\n    type: \"keyword\"\n  }),\n  /* @__PURE__ */ vn(`if (\\${}) {\n\t\\${}\n} else {\n\t\\${}\n}`, {\n    label: \"if\",\n    detail: \"/ else block\",\n    type: \"keyword\"\n  }),\n  /* @__PURE__ */ vn(`class \\${name} {\n\tconstructor(\\${params}) {\n\t\t\\${}\n\t}\n}`, {\n    label: \"class\",\n    detail: \"definition\",\n    type: \"keyword\"\n  }),\n  /* @__PURE__ */ vn('import {${names}} from \"${module}\"\\n${}', {\n    label: \"import\",\n    detail: \"named\",\n    type: \"keyword\"\n  }),\n  /* @__PURE__ */ vn('import ${name} from \"${module}\"\\n${}', {\n    label: \"import\",\n    detail: \"default\",\n    type: \"keyword\"\n  })\n], J3 = /* @__PURE__ */ Gx.concat([\n  /* @__PURE__ */ vn(\"interface ${name} {\\n\t${}\\n}\", {\n    label: \"interface\",\n    detail: \"definition\",\n    type: \"keyword\"\n  }),\n  /* @__PURE__ */ vn(\"type ${name} = ${type}\", {\n    label: \"type\",\n    detail: \"definition\",\n    type: \"keyword\"\n  }),\n  /* @__PURE__ */ vn(\"enum ${name} {\\n\t${}\\n}\", {\n    label: \"enum\",\n    detail: \"definition\",\n    type: \"keyword\"\n  })\n]), w0 = /* @__PURE__ */ new ex(), Kx = /* @__PURE__ */ new Set([\n  \"Script\",\n  \"Block\",\n  \"FunctionExpression\",\n  \"FunctionDeclaration\",\n  \"ArrowFunction\",\n  \"MethodDeclaration\",\n  \"ForStatement\"\n]);\nfunction ka(t) {\n  return (e, n) => {\n    let r = e.node.getChild(\"VariableDefinition\");\n    return r && n(r, t), !0;\n  };\n}\nconst eI = [\"FunctionDeclaration\"], tI = {\n  FunctionDeclaration: /* @__PURE__ */ ka(\"function\"),\n  ClassDeclaration: /* @__PURE__ */ ka(\"class\"),\n  ClassExpression: () => !0,\n  EnumDeclaration: /* @__PURE__ */ ka(\"constant\"),\n  TypeAliasDeclaration: /* @__PURE__ */ ka(\"type\"),\n  NamespaceDeclaration: /* @__PURE__ */ ka(\"namespace\"),\n  VariableDefinition(t, e) {\n    t.matchContext(eI) || e(t, \"variable\");\n  },\n  TypeDefinition(t, e) {\n    e(t, \"type\");\n  },\n  __proto__: null\n};\nfunction Jx(t, e) {\n  let n = w0.get(e);\n  if (n)\n    return n;\n  let r = [], i = !0;\n  function s(o, a) {\n    let l = t.sliceString(o.from, o.to);\n    r.push({ label: l, type: a });\n  }\n  return e.cursor(lt.IncludeAnonymous).iterate((o) => {\n    if (i)\n      i = !1;\n    else if (o.name) {\n      let a = tI[o.name];\n      if (a && a(o, s) || Kx.has(o.name))\n        return !1;\n    } else if (o.to - o.from > 8192) {\n      for (let a of Jx(t, o.node))\n        r.push(a);\n      return !1;\n    }\n  }), w0.set(e, r), r;\n}\nconst k0 = /^[\\w$\\xa1-\\uffff][\\w$\\d\\xa1-\\uffff]*$/, eP = [\n  \"TemplateString\",\n  \"String\",\n  \"RegExp\",\n  \"LineComment\",\n  \"BlockComment\",\n  \"VariableDefinition\",\n  \"TypeDefinition\",\n  \"Label\",\n  \"PropertyDefinition\",\n  \"PropertyName\",\n  \"PrivatePropertyDefinition\",\n  \"PrivatePropertyName\",\n  \".\",\n  \"?.\"\n];\nfunction nI(t) {\n  let e = un(t.state).resolveInner(t.pos, -1);\n  if (eP.indexOf(e.name) > -1)\n    return null;\n  let n = e.name == \"VariableName\" || e.to - e.from < 20 && k0.test(t.state.sliceDoc(e.from, e.to));\n  if (!n && !t.explicit)\n    return null;\n  let r = [];\n  for (let i = e; i; i = i.parent)\n    Kx.has(i.name) && (r = r.concat(Jx(t.state.doc, i)));\n  return {\n    options: r,\n    from: n ? e.from : t.pos,\n    validFor: k0\n  };\n}\nconst Ir = /* @__PURE__ */ cs.define({\n  name: \"javascript\",\n  parser: /* @__PURE__ */ K3.configure({\n    props: [\n      /* @__PURE__ */ sa.add({\n        IfStatement: /* @__PURE__ */ $o({ except: /^\\s*({|else\\b)/ }),\n        TryStatement: /* @__PURE__ */ $o({ except: /^\\s*({|catch\\b|finally\\b)/ }),\n        LabeledStatement: FD,\n        SwitchBody: (t) => {\n          let e = t.textAfter, n = /^\\s*\\}/.test(e), r = /^\\s*(case|default)\\b/.test(e);\n          return t.baseIndent + (n ? 0 : r ? 1 : 2) * t.unit;\n        },\n        Block: /* @__PURE__ */ xp({ closing: \"}\" }),\n        ArrowFunction: (t) => t.baseIndent + t.unit,\n        \"TemplateString BlockComment\": () => null,\n        \"Statement Property\": /* @__PURE__ */ $o({ except: /^{/ }),\n        JSXElement(t) {\n          let e = /^\\s*<\\//.test(t.textAfter);\n          return t.lineIndent(t.node.from) + (e ? 0 : t.unit);\n        },\n        JSXEscape(t) {\n          let e = /\\s*\\}/.test(t.textAfter);\n          return t.lineIndent(t.node.from) + (e ? 0 : t.unit);\n        },\n        \"JSXOpenTag JSXSelfClosingTag\"(t) {\n          return t.column(t.node.from) + t.unit;\n        }\n      }),\n      /* @__PURE__ */ Kl.add({\n        \"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType\": Hd,\n        BlockComment(t) {\n          return { from: t.from + 2, to: t.to - 2 };\n        }\n      })\n    ]\n  }),\n  languageData: {\n    closeBrackets: { brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"] },\n    commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n    indentOnInput: /^\\s*(?:case |default:|\\{|\\}|<\\/)$/,\n    wordChars: \"$\"\n  }\n}), tP = {\n  test: (t) => /^JSX/.test(t.name),\n  facet: /* @__PURE__ */ sx({ commentTokens: { block: { open: \"{/*\", close: \"*/}\" } } })\n}, nP = /* @__PURE__ */ Ir.configure({ dialect: \"ts\" }, \"typescript\"), rP = /* @__PURE__ */ Ir.configure({\n  dialect: \"jsx\",\n  props: [/* @__PURE__ */ gg.add((t) => t.isTop ? [tP] : void 0)]\n}), iP = /* @__PURE__ */ Ir.configure({\n  dialect: \"jsx ts\",\n  props: [/* @__PURE__ */ gg.add((t) => t.isTop ? [tP] : void 0)]\n}, \"typescript\");\nlet sP = (t) => ({ label: t, type: \"keyword\" });\nconst oP = /* @__PURE__ */ \"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield\".split(\" \").map(sP), rI = /* @__PURE__ */ oP.concat(/* @__PURE__ */ [\"declare\", \"implements\", \"private\", \"protected\", \"public\"].map(sP));\nfunction iI(t = {}) {\n  let e = t.jsx ? t.typescript ? iP : rP : t.typescript ? nP : Ir, n = t.typescript ? J3.concat(rI) : Gx.concat(oP);\n  return new Gl(e, [\n    Ir.data.of({\n      autocomplete: OZ(eP, vx(n))\n    }),\n    Ir.data.of({\n      autocomplete: nI\n    }),\n    t.jsx ? aI : []\n  ]);\n}\nfunction sI(t) {\n  for (; ; ) {\n    if (t.name == \"JSXOpenTag\" || t.name == \"JSXSelfClosingTag\" || t.name == \"JSXFragmentTag\")\n      return t;\n    if (t.name == \"JSXEscape\" || !t.parent)\n      return null;\n    t = t.parent;\n  }\n}\nfunction x0(t, e, n = t.length) {\n  for (let r = e == null ? void 0 : e.firstChild; r; r = r.nextSibling)\n    if (r.name == \"JSXIdentifier\" || r.name == \"JSXBuiltin\" || r.name == \"JSXNamespacedName\" || r.name == \"JSXMemberExpression\")\n      return t.sliceString(r.from, Math.min(r.to, n));\n  return \"\";\n}\nconst oI = typeof navigator == \"object\" && /* @__PURE__ */ /Android\\b/.test(navigator.userAgent), aI = /* @__PURE__ */ Se.inputHandler.of((t, e, n, r, i) => {\n  if ((oI ? t.composing : t.compositionStarted) || t.state.readOnly || e != n || r != \">\" && r != \"/\" || !Ir.isActiveAt(t.state, e, -1))\n    return !1;\n  let s = i(), { state: o } = s, a = o.changeByRange((l) => {\n    var c;\n    let { head: u } = l, d = un(o).resolveInner(u - 1, -1), f;\n    if (d.name == \"JSXStartTag\" && (d = d.parent), !(o.doc.sliceString(u - 1, u) != r || d.name == \"JSXAttributeValue\" && d.to > u)) {\n      if (r == \">\" && d.name == \"JSXFragmentTag\")\n        return { range: l, changes: { from: u, insert: \"</>\" } };\n      if (r == \"/\" && d.name == \"JSXStartCloseTag\") {\n        let h = d.parent, p = h.parent;\n        if (p && h.from == u - 2 && ((f = x0(o.doc, p.firstChild, u)) || ((c = p.firstChild) === null || c === void 0 ? void 0 : c.name) == \"JSXFragmentTag\")) {\n          let O = `${f}>`;\n          return { range: ae.cursor(u + O.length, -1), changes: { from: u, insert: O } };\n        }\n      } else if (r == \">\") {\n        let h = sI(d);\n        if (h && h.name == \"JSXOpenTag\" && !/^\\/?>|^<\\//.test(o.doc.sliceString(u, u + 2)) && (f = x0(o.doc, h, u)))\n          return { range: l, changes: { from: u, insert: `</${f}>` } };\n      }\n    }\n    return { range: l };\n  });\n  return a.changes.empty ? !1 : (t.dispatch([\n    s,\n    o.update(a, { userEvent: \"input.complete\", scrollIntoView: !0 })\n  ]), !0);\n}), xa = [\"_blank\", \"_self\", \"_top\", \"_parent\"], Hf = [\"ascii\", \"utf-8\", \"utf-16\", \"latin1\", \"latin1\"], Ff = [\"get\", \"post\", \"put\", \"delete\"], Gf = [\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"], Cn = [\"true\", \"false\"], fe = {}, lI = {\n  a: {\n    attrs: {\n      href: null,\n      ping: null,\n      type: null,\n      media: null,\n      target: xa,\n      hreflang: null\n    }\n  },\n  abbr: fe,\n  address: fe,\n  area: {\n    attrs: {\n      alt: null,\n      coords: null,\n      href: null,\n      target: null,\n      ping: null,\n      media: null,\n      hreflang: null,\n      type: null,\n      shape: [\"default\", \"rect\", \"circle\", \"poly\"]\n    }\n  },\n  article: fe,\n  aside: fe,\n  audio: {\n    attrs: {\n      src: null,\n      mediagroup: null,\n      crossorigin: [\"anonymous\", \"use-credentials\"],\n      preload: [\"none\", \"metadata\", \"auto\"],\n      autoplay: [\"autoplay\"],\n      loop: [\"loop\"],\n      controls: [\"controls\"]\n    }\n  },\n  b: fe,\n  base: { attrs: { href: null, target: xa } },\n  bdi: fe,\n  bdo: fe,\n  blockquote: { attrs: { cite: null } },\n  body: fe,\n  br: fe,\n  button: {\n    attrs: {\n      form: null,\n      formaction: null,\n      name: null,\n      value: null,\n      autofocus: [\"autofocus\"],\n      disabled: [\"autofocus\"],\n      formenctype: Gf,\n      formmethod: Ff,\n      formnovalidate: [\"novalidate\"],\n      formtarget: xa,\n      type: [\"submit\", \"reset\", \"button\"]\n    }\n  },\n  canvas: { attrs: { width: null, height: null } },\n  caption: fe,\n  center: fe,\n  cite: fe,\n  code: fe,\n  col: { attrs: { span: null } },\n  colgroup: { attrs: { span: null } },\n  command: {\n    attrs: {\n      type: [\"command\", \"checkbox\", \"radio\"],\n      label: null,\n      icon: null,\n      radiogroup: null,\n      command: null,\n      title: null,\n      disabled: [\"disabled\"],\n      checked: [\"checked\"]\n    }\n  },\n  data: { attrs: { value: null } },\n  datagrid: { attrs: { disabled: [\"disabled\"], multiple: [\"multiple\"] } },\n  datalist: { attrs: { data: null } },\n  dd: fe,\n  del: { attrs: { cite: null, datetime: null } },\n  details: { attrs: { open: [\"open\"] } },\n  dfn: fe,\n  div: fe,\n  dl: fe,\n  dt: fe,\n  em: fe,\n  embed: { attrs: { src: null, type: null, width: null, height: null } },\n  eventsource: { attrs: { src: null } },\n  fieldset: { attrs: { disabled: [\"disabled\"], form: null, name: null } },\n  figcaption: fe,\n  figure: fe,\n  footer: fe,\n  form: {\n    attrs: {\n      action: null,\n      name: null,\n      \"accept-charset\": Hf,\n      autocomplete: [\"on\", \"off\"],\n      enctype: Gf,\n      method: Ff,\n      novalidate: [\"novalidate\"],\n      target: xa\n    }\n  },\n  h1: fe,\n  h2: fe,\n  h3: fe,\n  h4: fe,\n  h5: fe,\n  h6: fe,\n  head: {\n    children: [\"title\", \"base\", \"link\", \"style\", \"meta\", \"script\", \"noscript\", \"command\"]\n  },\n  header: fe,\n  hgroup: fe,\n  hr: fe,\n  html: {\n    attrs: { manifest: null }\n  },\n  i: fe,\n  iframe: {\n    attrs: {\n      src: null,\n      srcdoc: null,\n      name: null,\n      width: null,\n      height: null,\n      sandbox: [\"allow-top-navigation\", \"allow-same-origin\", \"allow-forms\", \"allow-scripts\"],\n      seamless: [\"seamless\"]\n    }\n  },\n  img: {\n    attrs: {\n      alt: null,\n      src: null,\n      ismap: null,\n      usemap: null,\n      width: null,\n      height: null,\n      crossorigin: [\"anonymous\", \"use-credentials\"]\n    }\n  },\n  input: {\n    attrs: {\n      alt: null,\n      dirname: null,\n      form: null,\n      formaction: null,\n      height: null,\n      list: null,\n      max: null,\n      maxlength: null,\n      min: null,\n      name: null,\n      pattern: null,\n      placeholder: null,\n      size: null,\n      src: null,\n      step: null,\n      value: null,\n      width: null,\n      accept: [\"audio/*\", \"video/*\", \"image/*\"],\n      autocomplete: [\"on\", \"off\"],\n      autofocus: [\"autofocus\"],\n      checked: [\"checked\"],\n      disabled: [\"disabled\"],\n      formenctype: Gf,\n      formmethod: Ff,\n      formnovalidate: [\"novalidate\"],\n      formtarget: xa,\n      multiple: [\"multiple\"],\n      readonly: [\"readonly\"],\n      required: [\"required\"],\n      type: [\n        \"hidden\",\n        \"text\",\n        \"search\",\n        \"tel\",\n        \"url\",\n        \"email\",\n        \"password\",\n        \"datetime\",\n        \"date\",\n        \"month\",\n        \"week\",\n        \"time\",\n        \"datetime-local\",\n        \"number\",\n        \"range\",\n        \"color\",\n        \"checkbox\",\n        \"radio\",\n        \"file\",\n        \"submit\",\n        \"image\",\n        \"reset\",\n        \"button\"\n      ]\n    }\n  },\n  ins: { attrs: { cite: null, datetime: null } },\n  kbd: fe,\n  keygen: {\n    attrs: {\n      challenge: null,\n      form: null,\n      name: null,\n      autofocus: [\"autofocus\"],\n      disabled: [\"disabled\"],\n      keytype: [\"RSA\"]\n    }\n  },\n  label: { attrs: { for: null, form: null } },\n  legend: fe,\n  li: { attrs: { value: null } },\n  link: {\n    attrs: {\n      href: null,\n      type: null,\n      hreflang: null,\n      media: null,\n      sizes: [\"all\", \"16x16\", \"16x16 32x32\", \"16x16 32x32 64x64\"]\n    }\n  },\n  map: { attrs: { name: null } },\n  mark: fe,\n  menu: { attrs: { label: null, type: [\"list\", \"context\", \"toolbar\"] } },\n  meta: {\n    attrs: {\n      content: null,\n      charset: Hf,\n      name: [\"viewport\", \"application-name\", \"author\", \"description\", \"generator\", \"keywords\"],\n      \"http-equiv\": [\"content-language\", \"content-type\", \"default-style\", \"refresh\"]\n    }\n  },\n  meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },\n  nav: fe,\n  noscript: fe,\n  object: {\n    attrs: {\n      data: null,\n      type: null,\n      name: null,\n      usemap: null,\n      form: null,\n      width: null,\n      height: null,\n      typemustmatch: [\"typemustmatch\"]\n    }\n  },\n  ol: {\n    attrs: { reversed: [\"reversed\"], start: null, type: [\"1\", \"a\", \"A\", \"i\", \"I\"] },\n    children: [\"li\", \"script\", \"template\", \"ul\", \"ol\"]\n  },\n  optgroup: { attrs: { disabled: [\"disabled\"], label: null } },\n  option: { attrs: { disabled: [\"disabled\"], label: null, selected: [\"selected\"], value: null } },\n  output: { attrs: { for: null, form: null, name: null } },\n  p: fe,\n  param: { attrs: { name: null, value: null } },\n  pre: fe,\n  progress: { attrs: { value: null, max: null } },\n  q: { attrs: { cite: null } },\n  rp: fe,\n  rt: fe,\n  ruby: fe,\n  samp: fe,\n  script: {\n    attrs: {\n      type: [\"text/javascript\"],\n      src: null,\n      async: [\"async\"],\n      defer: [\"defer\"],\n      charset: Hf\n    }\n  },\n  section: fe,\n  select: {\n    attrs: {\n      form: null,\n      name: null,\n      size: null,\n      autofocus: [\"autofocus\"],\n      disabled: [\"disabled\"],\n      multiple: [\"multiple\"]\n    }\n  },\n  slot: { attrs: { name: null } },\n  small: fe,\n  source: { attrs: { src: null, type: null, media: null } },\n  span: fe,\n  strong: fe,\n  style: {\n    attrs: {\n      type: [\"text/css\"],\n      media: null,\n      scoped: null\n    }\n  },\n  sub: fe,\n  summary: fe,\n  sup: fe,\n  table: fe,\n  tbody: fe,\n  td: { attrs: { colspan: null, rowspan: null, headers: null } },\n  template: fe,\n  textarea: {\n    attrs: {\n      dirname: null,\n      form: null,\n      maxlength: null,\n      name: null,\n      placeholder: null,\n      rows: null,\n      cols: null,\n      autofocus: [\"autofocus\"],\n      disabled: [\"disabled\"],\n      readonly: [\"readonly\"],\n      required: [\"required\"],\n      wrap: [\"soft\", \"hard\"]\n    }\n  },\n  tfoot: fe,\n  th: { attrs: { colspan: null, rowspan: null, headers: null, scope: [\"row\", \"col\", \"rowgroup\", \"colgroup\"] } },\n  thead: fe,\n  time: { attrs: { datetime: null } },\n  title: fe,\n  tr: fe,\n  track: {\n    attrs: {\n      src: null,\n      label: null,\n      default: null,\n      kind: [\"subtitles\", \"captions\", \"descriptions\", \"chapters\", \"metadata\"],\n      srclang: null\n    }\n  },\n  ul: { children: [\"li\", \"script\", \"template\", \"ul\", \"ol\"] },\n  var: fe,\n  video: {\n    attrs: {\n      src: null,\n      poster: null,\n      width: null,\n      height: null,\n      crossorigin: [\"anonymous\", \"use-credentials\"],\n      preload: [\"auto\", \"metadata\", \"none\"],\n      autoplay: [\"autoplay\"],\n      mediagroup: [\"movie\"],\n      muted: [\"muted\"],\n      controls: [\"controls\"]\n    }\n  },\n  wbr: fe\n}, aP = {\n  accesskey: null,\n  class: null,\n  contenteditable: Cn,\n  contextmenu: null,\n  dir: [\"ltr\", \"rtl\", \"auto\"],\n  draggable: [\"true\", \"false\", \"auto\"],\n  dropzone: [\"copy\", \"move\", \"link\", \"string:\", \"file:\"],\n  hidden: [\"hidden\"],\n  id: null,\n  inert: [\"inert\"],\n  itemid: null,\n  itemprop: null,\n  itemref: null,\n  itemscope: [\"itemscope\"],\n  itemtype: null,\n  lang: [\"ar\", \"bn\", \"de\", \"en-GB\", \"en-US\", \"es\", \"fr\", \"hi\", \"id\", \"ja\", \"pa\", \"pt\", \"ru\", \"tr\", \"zh\"],\n  spellcheck: Cn,\n  autocorrect: Cn,\n  autocapitalize: Cn,\n  style: null,\n  tabindex: null,\n  title: null,\n  translate: [\"yes\", \"no\"],\n  rel: [\"stylesheet\", \"alternate\", \"author\", \"bookmark\", \"help\", \"license\", \"next\", \"nofollow\", \"noreferrer\", \"prefetch\", \"prev\", \"search\", \"tag\"],\n  role: /* @__PURE__ */ \"alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer\".split(\" \"),\n  \"aria-activedescendant\": null,\n  \"aria-atomic\": Cn,\n  \"aria-autocomplete\": [\"inline\", \"list\", \"both\", \"none\"],\n  \"aria-busy\": Cn,\n  \"aria-checked\": [\"true\", \"false\", \"mixed\", \"undefined\"],\n  \"aria-controls\": null,\n  \"aria-describedby\": null,\n  \"aria-disabled\": Cn,\n  \"aria-dropeffect\": null,\n  \"aria-expanded\": [\"true\", \"false\", \"undefined\"],\n  \"aria-flowto\": null,\n  \"aria-grabbed\": [\"true\", \"false\", \"undefined\"],\n  \"aria-haspopup\": Cn,\n  \"aria-hidden\": Cn,\n  \"aria-invalid\": [\"true\", \"false\", \"grammar\", \"spelling\"],\n  \"aria-label\": null,\n  \"aria-labelledby\": null,\n  \"aria-level\": null,\n  \"aria-live\": [\"off\", \"polite\", \"assertive\"],\n  \"aria-multiline\": Cn,\n  \"aria-multiselectable\": Cn,\n  \"aria-owns\": null,\n  \"aria-posinset\": null,\n  \"aria-pressed\": [\"true\", \"false\", \"mixed\", \"undefined\"],\n  \"aria-readonly\": Cn,\n  \"aria-relevant\": null,\n  \"aria-required\": Cn,\n  \"aria-selected\": [\"true\", \"false\", \"undefined\"],\n  \"aria-setsize\": null,\n  \"aria-sort\": [\"ascending\", \"descending\", \"none\", \"other\"],\n  \"aria-valuemax\": null,\n  \"aria-valuemin\": null,\n  \"aria-valuenow\": null,\n  \"aria-valuetext\": null\n}, lP = /* @__PURE__ */ \"beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload\".split(\" \").map((t) => \"on\" + t);\nfor (let t of lP)\n  aP[t] = null;\nclass Ju {\n  constructor(e, n) {\n    this.tags = Object.assign(Object.assign({}, lI), e), this.globalAttrs = Object.assign(Object.assign({}, aP), n), this.allTags = Object.keys(this.tags), this.globalAttrNames = Object.keys(this.globalAttrs);\n  }\n}\nJu.default = /* @__PURE__ */ new Ju();\nfunction qo(t, e, n = t.length) {\n  if (!e)\n    return \"\";\n  let r = e.firstChild, i = r && r.getChild(\"TagName\");\n  return i ? t.sliceString(i.from, Math.min(i.to, n)) : \"\";\n}\nfunction Yo(t, e = !1) {\n  for (; t; t = t.parent)\n    if (t.name == \"Element\")\n      if (e)\n        e = !1;\n      else\n        return t;\n  return null;\n}\nfunction cP(t, e, n) {\n  let r = n.tags[qo(t, Yo(e))];\n  return (r == null ? void 0 : r.children) || n.allTags;\n}\nfunction Pg(t, e) {\n  let n = [];\n  for (let r = Yo(e); r && !r.type.isTop; r = Yo(r.parent)) {\n    let i = qo(t, r);\n    if (i && r.lastChild.name == \"CloseTag\")\n      break;\n    i && n.indexOf(i) < 0 && (e.name == \"EndTag\" || e.from >= r.firstChild.to) && n.push(i);\n  }\n  return n;\n}\nconst uP = /^[:\\-\\.\\w\\u00b7-\\uffff]*$/;\nfunction P0(t, e, n, r, i) {\n  let s = /\\s*>/.test(t.sliceDoc(i, i + 5)) ? \"\" : \">\", o = Yo(n, !0);\n  return {\n    from: r,\n    to: i,\n    options: cP(t.doc, o, e).map((a) => ({ label: a, type: \"type\" })).concat(Pg(t.doc, n).map((a, l) => ({\n      label: \"/\" + a,\n      apply: \"/\" + a + s,\n      type: \"type\",\n      boost: 99 - l\n    }))),\n    validFor: /^\\/?[:\\-\\.\\w\\u00b7-\\uffff]*$/\n  };\n}\nfunction _0(t, e, n, r) {\n  let i = /\\s*>/.test(t.sliceDoc(r, r + 5)) ? \"\" : \">\";\n  return {\n    from: n,\n    to: r,\n    options: Pg(t.doc, e).map((s, o) => ({ label: s, apply: s + i, type: \"type\", boost: 99 - o })),\n    validFor: uP\n  };\n}\nfunction cI(t, e, n, r) {\n  let i = [], s = 0;\n  for (let o of cP(t.doc, n, e))\n    i.push({ label: \"<\" + o, type: \"type\" });\n  for (let o of Pg(t.doc, n))\n    i.push({ label: \"</\" + o + \">\", type: \"type\", boost: 99 - s++ });\n  return { from: r, to: r, options: i, validFor: /^<\\/?[:\\-\\.\\w\\u00b7-\\uffff]*$/ };\n}\nfunction uI(t, e, n, r, i) {\n  let s = Yo(n), o = s ? e.tags[qo(t.doc, s)] : null, a = o && o.attrs ? Object.keys(o.attrs) : [], l = o && o.globalAttrs === !1 ? a : a.length ? a.concat(e.globalAttrNames) : e.globalAttrNames;\n  return {\n    from: r,\n    to: i,\n    options: l.map((c) => ({ label: c, type: \"property\" })),\n    validFor: uP\n  };\n}\nfunction dI(t, e, n, r, i) {\n  var s;\n  let o = (s = n.parent) === null || s === void 0 ? void 0 : s.getChild(\"AttributeName\"), a = [], l;\n  if (o) {\n    let c = t.sliceDoc(o.from, o.to), u = e.globalAttrs[c];\n    if (!u) {\n      let d = Yo(n), f = d ? e.tags[qo(t.doc, d)] : null;\n      u = (f == null ? void 0 : f.attrs) && f.attrs[c];\n    }\n    if (u) {\n      let d = t.sliceDoc(r, i).toLowerCase(), f = '\"', h = '\"';\n      /^['\"]/.test(d) ? (l = d[0] == '\"' ? /^[^\"]*$/ : /^[^']*$/, f = \"\", h = t.sliceDoc(i, i + 1) == d[0] ? \"\" : d[0], d = d.slice(1), r++) : l = /^[^\\s<>='\"]*$/;\n      for (let p of u)\n        a.push({ label: p, apply: f + p + h, type: \"constant\" });\n    }\n  }\n  return { from: r, to: i, options: a, validFor: l };\n}\nfunction fI(t, e) {\n  let { state: n, pos: r } = e, i = un(n).resolveInner(r, -1), s = i.resolve(r);\n  for (let o = r, a; s == i && (a = i.childBefore(o)); ) {\n    let l = a.lastChild;\n    if (!l || !l.type.isError || l.from < l.to)\n      break;\n    s = i = a, o = l.from;\n  }\n  return i.name == \"TagName\" ? i.parent && /CloseTag$/.test(i.parent.name) ? _0(n, i, i.from, r) : P0(n, t, i, i.from, r) : i.name == \"StartTag\" ? P0(n, t, i, r, r) : i.name == \"StartCloseTag\" || i.name == \"IncompleteCloseTag\" ? _0(n, i, r, r) : i.name == \"OpenTag\" || i.name == \"SelfClosingTag\" || i.name == \"AttributeName\" ? uI(n, t, i, i.name == \"AttributeName\" ? i.from : r, r) : i.name == \"Is\" || i.name == \"AttributeValue\" || i.name == \"UnquotedAttributeValue\" ? dI(n, t, i, i.name == \"Is\" ? r : i.from, r) : e.explicit && (s.name == \"Element\" || s.name == \"Text\" || s.name == \"Document\") ? cI(n, t, i, r) : null;\n}\nfunction hI(t) {\n  let { extraTags: e, extraGlobalAttributes: n } = t, r = n || e ? new Ju(e, n) : Ju.default;\n  return (i) => fI(r, i);\n}\nconst pI = /* @__PURE__ */ Ir.parser.configure({ top: \"SingleExpression\" }), dP = [\n  {\n    tag: \"script\",\n    attrs: (t) => t.type == \"text/typescript\" || t.lang == \"ts\",\n    parser: nP.parser\n  },\n  {\n    tag: \"script\",\n    attrs: (t) => t.type == \"text/babel\" || t.type == \"text/jsx\",\n    parser: rP.parser\n  },\n  {\n    tag: \"script\",\n    attrs: (t) => t.type == \"text/typescript-jsx\",\n    parser: iP.parser\n  },\n  {\n    tag: \"script\",\n    attrs(t) {\n      return /^(importmap|speculationrules|application\\/(.+\\+)?json)$/i.test(t.type);\n    },\n    parser: pI\n  },\n  {\n    tag: \"script\",\n    attrs(t) {\n      return !t.type || /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(t.type);\n    },\n    parser: Ir.parser\n  },\n  {\n    tag: \"style\",\n    attrs(t) {\n      return (!t.lang || t.lang == \"css\") && (!t.type || /^(text\\/)?(x-)?(stylesheet|css)$/i.test(t.type));\n    },\n    parser: Fu.parser\n  }\n], fP = /* @__PURE__ */ [\n  {\n    name: \"style\",\n    parser: /* @__PURE__ */ Fu.parser.configure({ top: \"Styles\" })\n  }\n].concat(/* @__PURE__ */ lP.map((t) => ({ name: t, parser: Ir.parser }))), hP = /* @__PURE__ */ cs.define({\n  name: \"html\",\n  parser: /* @__PURE__ */ T3.configure({\n    props: [\n      /* @__PURE__ */ sa.add({\n        Element(t) {\n          let e = /^(\\s*)(<\\/)?/.exec(t.textAfter);\n          return t.node.to <= t.pos + e[0].length ? t.continue() : t.lineIndent(t.node.from) + (e[2] ? 0 : t.unit);\n        },\n        \"OpenTag CloseTag SelfClosingTag\"(t) {\n          return t.column(t.node.from) + t.unit;\n        },\n        Document(t) {\n          if (t.pos + /\\s*/.exec(t.textAfter)[0].length < t.node.to)\n            return t.continue();\n          let e = null, n;\n          for (let r = t.node; ; ) {\n            let i = r.lastChild;\n            if (!i || i.name != \"Element\" || i.to != r.to)\n              break;\n            e = r = i;\n          }\n          return e && !((n = e.lastChild) && (n.name == \"CloseTag\" || n.name == \"SelfClosingTag\")) ? t.lineIndent(e.from) + t.unit : null;\n        }\n      }),\n      /* @__PURE__ */ Kl.add({\n        Element(t) {\n          let e = t.firstChild, n = t.lastChild;\n          return !e || e.name != \"OpenTag\" ? null : { from: e.to, to: n.name == \"CloseTag\" ? n.from : t.to };\n        }\n      }),\n      /* @__PURE__ */ mx.add({\n        \"OpenTag CloseTag\": (t) => t.getChild(\"TagName\")\n      })\n    ]\n  }),\n  languageData: {\n    commentTokens: { block: { open: \"<!--\", close: \"-->\" } },\n    indentOnInput: /^\\s*<\\/\\w+\\W$/,\n    wordChars: \"-._\"\n  }\n}), du = /* @__PURE__ */ hP.configure({\n  wrap: /* @__PURE__ */ Hx(dP, fP)\n});\nfunction OI(t = {}) {\n  let e = \"\", n;\n  t.matchClosingTags === !1 && (e = \"noMatch\"), t.selfClosingTags === !0 && (e = (e ? e + \" \" : \"\") + \"selfClosing\"), (t.nestedLanguages && t.nestedLanguages.length || t.nestedAttributes && t.nestedAttributes.length) && (n = Hx((t.nestedLanguages || []).concat(dP), (t.nestedAttributes || []).concat(fP)));\n  let r = n ? hP.configure({ wrap: n, dialect: e }) : e ? du.configure({ dialect: e }) : du;\n  return new Gl(r, [\n    du.data.of({ autocomplete: hI(t) }),\n    t.autoCloseTags !== !1 ? gI : [],\n    iI().support,\n    Ix().support\n  ]);\n}\nconst T0 = /* @__PURE__ */ new Set(/* @__PURE__ */ \"area base br col command embed frame hr img input keygen link meta param source track wbr menuitem\".split(\" \")), gI = /* @__PURE__ */ Se.inputHandler.of((t, e, n, r, i) => {\n  if (t.composing || t.state.readOnly || e != n || r != \">\" && r != \"/\" || !du.isActiveAt(t.state, e, -1))\n    return !1;\n  let s = i(), { state: o } = s, a = o.changeByRange((l) => {\n    var c, u, d;\n    let f = o.doc.sliceString(l.from - 1, l.to) == r, { head: h } = l, p = un(o).resolveInner(h - 1, -1), O;\n    if ((p.name == \"TagName\" || p.name == \"StartTag\") && (p = p.parent), f && r == \">\" && p.name == \"OpenTag\") {\n      if (((u = (c = p.parent) === null || c === void 0 ? void 0 : c.lastChild) === null || u === void 0 ? void 0 : u.name) != \"CloseTag\" && (O = qo(o.doc, p.parent, h)) && !T0.has(O)) {\n        let m = h + (o.doc.sliceString(h, h + 1) === \">\" ? 1 : 0), y = `</${O}>`;\n        return { range: l, changes: { from: h, to: m, insert: y } };\n      }\n    } else if (f && r == \"/\" && p.name == \"IncompleteCloseTag\") {\n      let m = p.parent;\n      if (p.from == h - 2 && ((d = m.lastChild) === null || d === void 0 ? void 0 : d.name) != \"CloseTag\" && (O = qo(o.doc, m, h)) && !T0.has(O)) {\n        let y = h + (o.doc.sliceString(h, h + 1) === \">\" ? 1 : 0), b = `${O}>`;\n        return {\n          range: ae.cursor(h + b.length, -1),\n          changes: { from: h, to: y, insert: b }\n        };\n      }\n    }\n    return { range: l };\n  });\n  return a.changes.empty ? !1 : (t.dispatch([\n    s,\n    o.update(a, {\n      userEvent: \"input.complete\",\n      scrollIntoView: !0\n    })\n  ]), !0);\n}), mI = ia({\n  String: P.string,\n  Number: P.number,\n  \"True False\": P.bool,\n  PropertyName: P.propertyName,\n  Null: P.null,\n  \",\": P.separator,\n  \"[ ]\": P.squareBracket,\n  \"{ }\": P.brace\n}), bI = us.deserialize({\n  version: 14,\n  states: \"$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j\",\n  stateData: \"#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O\",\n  goto: \"!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R\",\n  nodeNames: \"⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array\",\n  maxTerm: 25,\n  nodeProps: [\n    [\"isolate\", -2, 6, 11, \"\"],\n    [\"openedBy\", 7, \"{\", 12, \"[\"],\n    [\"closedBy\", 8, \"}\", 13, \"]\"]\n  ],\n  propSources: [mI],\n  skippedNodes: [0],\n  repeatNodeCount: 2,\n  tokenData: \"(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oc~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Oe~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zOh~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yOg~~'OO]~~'TO[~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~\",\n  tokenizers: [0],\n  topRules: { JsonText: [0, 1] },\n  tokenPrec: 0\n}), vI = /* @__PURE__ */ cs.define({\n  name: \"json\",\n  parser: /* @__PURE__ */ bI.configure({\n    props: [\n      /* @__PURE__ */ sa.add({\n        Object: /* @__PURE__ */ $o({ except: /^\\s*\\}/ }),\n        Array: /* @__PURE__ */ $o({ except: /^\\s*\\]/ })\n      }),\n      /* @__PURE__ */ Kl.add({\n        \"Object Array\": Hd\n      })\n    ]\n  }),\n  languageData: {\n    closeBrackets: { brackets: [\"[\", \"{\", '\"'] },\n    indentOnInput: /^\\s*[\\}\\]]$/\n  }\n});\nfunction yI() {\n  return new Gl(vI);\n}\nconst fo = 63, E0 = 64, SI = 1, wI = 2, pP = 3, kI = 4, OP = 5, xI = 6, PI = 7, gP = 65, _I = 66, TI = 8, EI = 9, $I = 10, QI = 11, CI = 12, mP = 13, AI = 19, RI = 20, NI = 29, DI = 33, ZI = 34, VI = 47, II = 0, _g = 1, Rp = 2, Pl = 3, Np = 4, Dp = class {\n  constructor(e, n, r) {\n    this.parent = e, this.depth = n, this.type = r, this.hash = (e ? e.hash + e.hash << 8 : 0) + n + (n << 4) + r;\n  }\n};\n_w(Dp, \"top\", new Dp(null, -1, II));\nlet Pa = Dp;\nfunction Fa(t, e) {\n  for (let n = 0, r = e - t.pos - 1; ; r--, n++) {\n    let i = t.peek(r);\n    if (Oi(i) || i == -1)\n      return n;\n  }\n}\nfunction Zp(t) {\n  return t == 32 || t == 9;\n}\nfunction Oi(t) {\n  return t == 10 || t == 13;\n}\nfunction bP(t) {\n  return Zp(t) || Oi(t);\n}\nfunction Ts(t) {\n  return t < 0 || bP(t);\n}\nconst WI = new wg({\n  start: Pa.top,\n  reduce(t, e) {\n    return t.type == Pl && (e == RI || e == ZI) ? t.parent : t;\n  },\n  shift(t, e, n, r) {\n    if (e == pP)\n      return new Pa(t, Fa(r, r.pos), _g);\n    if (e == gP || e == OP)\n      return new Pa(t, Fa(r, r.pos), Rp);\n    if (e == fo)\n      return t.parent;\n    if (e == AI || e == DI)\n      return new Pa(t, 0, Pl);\n    if (e == mP && t.type == Np)\n      return t.parent;\n    if (e == VI) {\n      let i = /[1-9]/.exec(r.read(r.pos, n.pos));\n      if (i)\n        return new Pa(t, t.depth + +i[0], Np);\n    }\n    return t;\n  },\n  hash(t) {\n    return t.hash;\n  }\n});\nfunction zo(t, e, n = 0) {\n  return t.peek(n) == e && t.peek(n + 1) == e && t.peek(n + 2) == e && Ts(t.peek(n + 3));\n}\nconst MI = new gn((t, e) => {\n  if (t.next == -1 && e.canShift(E0))\n    return t.acceptToken(E0);\n  let n = t.peek(-1);\n  if ((Oi(n) || n < 0) && e.context.type != Pl) {\n    if (zo(\n      t,\n      45\n      /* '-' */\n    ))\n      if (e.canShift(fo))\n        t.acceptToken(fo);\n      else\n        return t.acceptToken(SI, 3);\n    if (zo(\n      t,\n      46\n      /* '.' */\n    ))\n      if (e.canShift(fo))\n        t.acceptToken(fo);\n      else\n        return t.acceptToken(wI, 3);\n    let r = 0;\n    for (; t.next == 32; )\n      r++, t.advance();\n    (r < e.context.depth || r == e.context.depth && e.context.type == _g && (t.next != 45 || !Ts(t.peek(1)))) && // Not blank\n    t.next != -1 && !Oi(t.next) && t.next != 35 && t.acceptToken(fo, -r);\n  }\n}, { contextual: !0 }), XI = new gn((t, e) => {\n  if (e.context.type == Pl) {\n    t.next == 63 && (t.advance(), Ts(t.next) && t.acceptToken(PI));\n    return;\n  }\n  if (t.next == 45)\n    t.advance(), Ts(t.next) && t.acceptToken(e.context.type == _g && e.context.depth == Fa(t, t.pos - 1) ? kI : pP);\n  else if (t.next == 63)\n    t.advance(), Ts(t.next) && t.acceptToken(e.context.type == Rp && e.context.depth == Fa(t, t.pos - 1) ? xI : OP);\n  else {\n    let n = t.pos;\n    for (; ; )\n      if (Zp(t.next)) {\n        if (t.pos == n)\n          return;\n        t.advance();\n      } else if (t.next == 33)\n        vP(t);\n      else if (t.next == 38)\n        Vp(t);\n      else if (t.next == 42) {\n        Vp(t);\n        break;\n      } else if (t.next == 39 || t.next == 34) {\n        if (Tg(t, !0))\n          break;\n        return;\n      } else if (t.next == 91 || t.next == 123) {\n        if (!BI(t))\n          return;\n        break;\n      } else {\n        yP(t, !0, !1, 0);\n        break;\n      }\n    for (; Zp(t.next); )\n      t.advance();\n    if (t.next == 58) {\n      if (t.pos == n && e.canShift(NI))\n        return;\n      let r = t.peek(1);\n      Ts(r) && t.acceptTokenTo(e.context.type == Rp && e.context.depth == Fa(t, n) ? _I : gP, n);\n    }\n  }\n}, { contextual: !0 });\nfunction jI(t) {\n  return t > 32 && t < 127 && t != 34 && t != 37 && t != 44 && t != 60 && t != 62 && t != 92 && t != 94 && t != 96 && t != 123 && t != 124 && t != 125;\n}\nfunction $0(t) {\n  return t >= 48 && t <= 57 || t >= 97 && t <= 102 || t >= 65 && t <= 70;\n}\nfunction Q0(t, e) {\n  return t.next == 37 ? (t.advance(), $0(t.next) && t.advance(), $0(t.next) && t.advance(), !0) : jI(t.next) || e && t.next == 44 ? (t.advance(), !0) : !1;\n}\nfunction vP(t) {\n  if (t.advance(), t.next == 60) {\n    for (t.advance(); ; )\n      if (!Q0(t, !0)) {\n        t.next == 62 && t.advance();\n        break;\n      }\n  } else\n    for (; Q0(t, !1); )\n      ;\n}\nfunction Vp(t) {\n  for (t.advance(); !Ts(t.next) && ed(t.tag) != \"f\"; )\n    t.advance();\n}\nfunction Tg(t, e) {\n  let n = t.next, r = !1, i = t.pos;\n  for (t.advance(); ; ) {\n    let s = t.next;\n    if (s < 0)\n      break;\n    if (t.advance(), s == n)\n      if (s == 39)\n        if (t.next == 39)\n          t.advance();\n        else\n          break;\n      else\n        break;\n    else if (s == 92 && n == 34)\n      t.next >= 0 && t.advance();\n    else if (Oi(s)) {\n      if (e)\n        return !1;\n      r = !0;\n    } else if (e && t.pos >= i + 1024)\n      return !1;\n  }\n  return !r;\n}\nfunction BI(t) {\n  for (let e = [], n = t.pos + 1024; ; )\n    if (t.next == 91 || t.next == 123)\n      e.push(t.next), t.advance();\n    else if (t.next == 39 || t.next == 34) {\n      if (!Tg(t, !0))\n        return !1;\n    } else if (t.next == 93 || t.next == 125) {\n      if (e[e.length - 1] != t.next - 2)\n        return !1;\n      if (e.pop(), t.advance(), !e.length)\n        return !0;\n    } else {\n      if (t.next < 0 || t.pos > n || Oi(t.next))\n        return !1;\n      t.advance();\n    }\n}\nconst LI = \"iiisiiissisfissssssssssssisssiiissssssssssssssssssssssssssfsfssissssssssssssssssssssssssssfif\";\nfunction ed(t) {\n  return t < 33 ? \"u\" : t > 125 ? \"s\" : LI[t - 33];\n}\nfunction Kf(t, e) {\n  let n = ed(t);\n  return n != \"u\" && !(e && n == \"f\");\n}\nfunction yP(t, e, n, r) {\n  if (ed(t.next) == \"s\" || (t.next == 63 || t.next == 58 || t.next == 45) && Kf(t.peek(1), n))\n    t.advance();\n  else\n    return !1;\n  let i = t.pos;\n  for (; ; ) {\n    let s = t.next, o = 0, a = r + 1;\n    for (; bP(s); ) {\n      if (Oi(s)) {\n        if (e)\n          return !1;\n        a = 0;\n      } else\n        a++;\n      s = t.peek(++o);\n    }\n    if (!(s >= 0 && (s == 58 ? Kf(t.peek(o + 1), n) : s == 35 ? t.peek(o - 1) != 32 : Kf(s, n))) || !n && a <= r || a == 0 && !n && (zo(t, 45, o) || zo(t, 46, o)))\n      break;\n    if (e && ed(s) == \"f\")\n      return !1;\n    for (let c = o; c >= 0; c--)\n      t.advance();\n    if (e && t.pos > i + 1024)\n      return !1;\n  }\n  return !0;\n}\nconst UI = new gn((t, e) => {\n  if (t.next == 33)\n    vP(t), t.acceptToken(CI);\n  else if (t.next == 38 || t.next == 42) {\n    let n = t.next == 38 ? $I : QI;\n    Vp(t), t.acceptToken(n);\n  } else\n    t.next == 39 || t.next == 34 ? (Tg(t, !1), t.acceptToken(EI)) : yP(t, !1, e.context.type == Pl, e.context.depth) && t.acceptToken(TI);\n}), qI = new gn((t, e) => {\n  let n = e.context.type == Np ? e.context.depth : -1, r = t.pos;\n  e:\n    for (; ; ) {\n      let i = 0, s = t.next;\n      for (; s == 32; )\n        s = t.peek(++i);\n      if (!i && (zo(t, 45, i) || zo(t, 46, i)) || !Oi(s) && (n < 0 && (n = Math.max(e.context.depth + 1, i)), i < n))\n        break;\n      for (; ; ) {\n        if (t.next < 0)\n          break e;\n        let o = Oi(t.next);\n        if (t.advance(), o)\n          continue e;\n        r = t.pos;\n      }\n    }\n  t.acceptTokenTo(mP, r);\n}), YI = ia({\n  DirectiveName: P.keyword,\n  DirectiveContent: P.attributeValue,\n  \"DirectiveEnd DocEnd\": P.meta,\n  QuotedLiteral: P.string,\n  BlockLiteralHeader: P.special(P.string),\n  BlockLiteralContent: P.content,\n  Literal: P.content,\n  \"Key/Literal Key/QuotedLiteral\": P.definition(P.propertyName),\n  \"Anchor Alias\": P.labelName,\n  Tag: P.typeName,\n  Comment: P.lineComment,\n  \": , -\": P.separator,\n  \"?\": P.punctuation,\n  \"[ ]\": P.squareBracket,\n  \"{ }\": P.brace\n}), zI = us.deserialize({\n  version: 14,\n  states: \"5lQ!ZQgOOO#PQfO'#CpO#uQfO'#DOOOQR'#Dv'#DvO$qQgO'#DRO%gQdO'#DUO%nQgO'#DUO&ROaO'#D[OOQR'#Du'#DuO&{QgO'#D^O'rQgO'#D`OOQR'#Dt'#DtO(iOqO'#DbOOQP'#Dj'#DjO(zQaO'#CmO)YQgO'#CmOOQP'#Cm'#CmQ)jQaOOQ)uQgOOQ]QgOOO*PQdO'#CrO*nQdO'#CtOOQO'#Dw'#DwO+]Q`O'#CxO+hQdO'#CwO+rQ`O'#CwOOQO'#Cv'#CvO+wQdO'#CvOOQO'#Cq'#CqO,UQ`O,59[O,^QfO,59[OOQR,59[,59[OOQO'#Cx'#CxO,eQ`O'#DPO,pQdO'#DPOOQO'#Dx'#DxO,zQdO'#DxO-XQ`O,59jO-aQfO,59jOOQR,59j,59jOOQR'#DS'#DSO-hQcO,59mO-sQgO'#DVO.TQ`O'#DVO.YQcO,59pOOQR'#DX'#DXO#|QfO'#DWO.hQcO'#DWOOQR,59v,59vO.yOWO,59vO/OOaO,59vO/WOaO,59vO/cQgO'#D_OOQR,59x,59xO0VQgO'#DaOOQR,59z,59zOOQP,59|,59|O0yOaO,59|O1ROaO,59|O1aOqO,59|OOQP-E7h-E7hO1oQgO,59XOOQP,59X,59XO2PQaO'#DeO2_QgO'#DeO2oQgO'#DkOOQP'#Dk'#DkQ)jQaOOO3PQdO'#CsOOQO,59^,59^O3kQdO'#CuOOQO,59`,59`OOQO,59c,59cO4VQdO,59cO4aQdO'#CzO4kQ`O'#CzOOQO,59b,59bOOQU,5:Q,5:QOOQR1G.v1G.vO4pQ`O1G.vOOQU-E7d-E7dO4xQdO,59kOOQO,59k,59kO5SQdO'#DQO5^Q`O'#DQOOQO,5:d,5:dOOQU,5:R,5:ROOQR1G/U1G/UO5cQ`O1G/UOOQU-E7e-E7eO5kQgO'#DhO5xQcO1G/XOOQR1G/X1G/XOOQR,59q,59qO6TQgO,59qO6eQdO'#DiO6lQgO'#DiO7PQcO1G/[OOQR1G/[1G/[OOQR,59r,59rO#|QfO,59rOOQR1G/b1G/bO7_OWO1G/bO7dOaO1G/bOOQR,59y,59yOOQR,59{,59{OOQP1G/h1G/hO7lOaO1G/hO7tOaO1G/hO8POaO1G/hOOQP1G.s1G.sO8_QgO,5:POOQP,5:P,5:POOQP,5:V,5:VOOQP-E7i-E7iOOQO,59_,59_OOQO,59a,59aOOQO1G.}1G.}OOQO,59f,59fO8oQdO,59fOOQR7+$b7+$bP,XQ`O'#DfOOQO1G/V1G/VOOQO,59l,59lO8yQdO,59lOOQR7+$p7+$pP9TQ`O'#DgOOQR'#DT'#DTOOQR,5:S,5:SOOQR-E7f-E7fOOQR7+$s7+$sOOQR1G/]1G/]O9YQgO'#DYO9jQ`O'#DYOOQR,5:T,5:TO#|QfO'#DZO9oQcO'#DZOOQR-E7g-E7gOOQR7+$v7+$vOOQR1G/^1G/^OOQR7+$|7+$|O:QOWO7+$|OOQP7+%S7+%SO:VOaO7+%SO:_OaO7+%SOOQP1G/k1G/kOOQO1G/Q1G/QOOQO1G/W1G/WOOQR,59t,59tO:jQgO,59tOOQR,59u,59uO#|QfO,59uOOQR<<Hh<<HhOOQP<<Hn<<HnO:zOaO<<HnOOQR1G/`1G/`OOQR1G/a1G/aOOQPAN>YAN>Y\",\n  stateData: \";S~O!fOS!gOS^OS~OP_OQbORSOTUOWROXROYYOZZO[XOcPOqQO!PVO!V[O!cTO~O`cO~P]OVkOWROXROYeOZfO[dOcPOmhOqQO~OboO~P!bOVtOWROXROYeOZfO[dOcPOmrOqQO~OpwO~P#WORSOTUOWROXROYYOZZO[XOcPOqQO!PVO!cTO~OSvP!avP!bvP~P#|OWROXROYeOZfO[dOcPOqQO~OmzO~P%OOm!OOUzP!azP!bzP!dzP~P#|O^!SO!b!QO!f!TO!g!RO~ORSOTUOWROXROcPOqQO!PVO!cTO~OY!UOP!QXQ!QX!V!QX!`!QXS!QX!a!QX!b!QXU!QXm!QX!d!QX~P&aO[!WOP!SXQ!SX!V!SX!`!SXS!SX!a!SX!b!SXU!SXm!SX!d!SX~P&aO^!ZO!W![O!b!YO!f!]O!g!YO~OP!_O!V[OQaX!`aX~OPaXQaX!VaX!`aX~P#|OP!bOQ!cO!V[O~OP_O!V[O~P#|OWROXROY!fOcPOqQObfXmfXofXpfX~OWROXRO[!hOcPOqQObhXmhXohXphX~ObeXmlXoeX~ObkXokX~P%OOm!kO~Om!lObnPonP~P%OOb!pOo!oO~Ob!pO~P!bOm!sOosXpsX~OosXpsX~P%OOm!uOotPptP~P%OOo!xOp!yO~Op!yO~P#WOS!|O!a#OO!b#OO~OUyX!ayX!byX!dyX~P#|Om#QO~OU#SO!a#UO!b#UO!d#RO~Om#WOUzX!azX!bzX!dzX~O]#XO~O!b#XO!g#YO~O^#ZO!b#XO!g#YO~OP!RXQ!RX!V!RX!`!RXS!RX!a!RX!b!RXU!RXm!RX!d!RX~P&aOP!TXQ!TX!V!TX!`!TXS!TX!a!TX!b!TXU!TXm!TX!d!TX~P&aO!b#^O!g#^O~O^#_O!b#^O!f#`O!g#^O~O^#_O!W#aO!b#^O!g#^O~OPaaQaa!Vaa!`aa~P#|OP#cO!V[OQ!XX!`!XX~OP!XXQ!XX!V!XX!`!XX~P#|OP_O!V[OQ!_X!`!_X~P#|OWROXROcPOqQObgXmgXogXpgX~OWROXROcPOqQObiXmiXoiXpiX~Obkaoka~P%OObnXonX~P%OOm#kO~Ob#lOo!oO~Oosapsa~P%OOotXptX~P%OOm#pO~Oo!xOp#qO~OSwP!awP!bwP~P#|OS!|O!a#vO!b#vO~OUya!aya!bya!dya~P#|Om#xO~P%OOm#{OU}P!a}P!b}P!d}P~P#|OU#SO!a$OO!b$OO!d#RO~O]$QO~O!b$QO!g$RO~O!b$SO!g$SO~O^$TO!b$SO!g$SO~O^$TO!b$SO!f$UO!g$SO~OP!XaQ!Xa!V!Xa!`!Xa~P#|Obnaona~P%OOotapta~P%OOo!xO~OU|X!a|X!b|X!d|X~P#|Om$ZO~Om$]OU}X!a}X!b}X!d}X~O]$^O~O!b$_O!g$_O~O^$`O!b$_O!g$_O~OU|a!a|a!b|a!d|a~P#|O!b$cO!g$cO~O\",\n  goto: \",]!mPPPPPPPPPPPPPPPPP!nPP!v#v#|$`#|$c$f$j$nP%VPPP!v%Y%^%a%{&O%a&R&U&X&_&b%aP&e&{&e'O'RPP']'a'g'm's'y(XPPPPPPPP(_)e*X+c,VUaObcR#e!c!{ROPQSTUXY_bcdehknrtvz!O!U!W!_!b!c!f!h!k!l!s!u!|#Q#R#S#W#c#k#p#x#{$Z$]QmPR!qnqfPQThknrtv!k!l!s!u#R#k#pR!gdR!ieTlPnTjPnSiPnSqQvQ{TQ!mkQ!trQ!vtR#y#RR!nkTsQvR!wt!RWOSUXY_bcz!O!U!W!_!b!c!|#Q#S#W#c#x#{$Z$]RySR#t!|R|TR|UQ!PUR#|#SR#z#RR#z#SyZOSU_bcz!O!_!b!c!|#Q#S#W#c#x#{$Z$]R!VXR!XYa]O^abc!a!c!eT!da!eQnPR!rnQvQR!{vQ!}yR#u!}Q#T|R#}#TW^Obc!cS!^^!aT!aa!eQ!eaR#f!eW`Obc!cQxSS}U#SQ!`_Q#PzQ#V!OQ#b!_Q#d!bQ#s!|Q#w#QQ$P#WQ$V#cQ$Y#xQ$[#{Q$a$ZR$b$]xZOSU_bcz!O!_!b!c!|#Q#S#W#c#x#{$Z$]Q!VXQ!XYQ#[!UR#]!W!QWOSUXY_bcz!O!U!W!_!b!c!|#Q#S#W#c#x#{$Z$]pfPQThknrtv!k!l!s!u#R#k#pQ!gdQ!ieQ#g!fR#h!hSgPn^pQTkrtv#RQ!jhQ#i!kQ#j!lQ#n!sQ#o!uQ$W#kR$X#pQuQR!zv\",\n  nodeNames: \"⚠ DirectiveEnd DocEnd - - ? ? ? Literal QuotedLiteral Anchor Alias Tag BlockLiteralContent Comment Stream BOM Document ] [ FlowSequence Item Tagged Anchored Anchored Tagged FlowMapping Pair Key : Pair , } { FlowMapping Pair Pair BlockSequence Item Item BlockMapping Pair Pair Key Pair Pair BlockLiteral BlockLiteralHeader Tagged Anchored Anchored Tagged Directive DirectiveName DirectiveContent Document\",\n  maxTerm: 74,\n  context: WI,\n  nodeProps: [\n    [\"isolate\", -3, 8, 9, 14, \"\"],\n    [\"openedBy\", 18, \"[\", 32, \"{\"],\n    [\"closedBy\", 19, \"]\", 33, \"}\"]\n  ],\n  propSources: [YI],\n  skippedNodes: [0],\n  repeatNodeCount: 6,\n  tokenData: \"-Y~RnOX#PXY$QYZ$]Z]#P]^$]^p#Ppq$Qqs#Pst$btu#Puv$yv|#P|}&e}![#P![!]'O!]!`#P!`!a'i!a!}#P!}#O*g#O#P#P#P#Q+Q#Q#o#P#o#p+k#p#q'i#q#r,U#r;'S#P;'S;=`#z<%l?HT#P?HT?HU,o?HUO#PQ#UU!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PQ#kTOY#PZs#Pt;'S#P;'S;=`#z<%lO#PQ#}P;=`<%l#P~$VQ!f~XY$Qpq$Q~$bO!g~~$gS^~OY$bZ;'S$b;'S;=`$s<%lO$b~$vP;=`<%l$bR%OX!WQOX%kXY#PZ]%k]^#P^p%kpq#hq;'S%k;'S;=`&_<%lO%kR%rX!WQ!VPOX%kXY#PZ]%k]^#P^p%kpq#hq;'S%k;'S;=`&_<%lO%kR&bP;=`<%l%kR&lUoP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR'VUmP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR'p[!PP!WQOY#PZp#Ppq#hq{#P{|(f|}#P}!O(f!O!R#P!R![)p![;'S#P;'S;=`#z<%lO#PR(mW!PP!WQOY#PZp#Ppq#hq!R#P!R![)V![;'S#P;'S;=`#z<%lO#PR)^U!PP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR)wY!PP!WQOY#PZp#Ppq#hq{#P{|)V|}#P}!O)V!O;'S#P;'S;=`#z<%lO#PR*nUcP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR+XUbP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR+rUqP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR,]UpP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR,vU`P!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#P\",\n  tokenizers: [MI, XI, UI, qI, 0, 1],\n  topRules: { Stream: [0, 15] },\n  tokenPrec: 0\n}), HI = /* @__PURE__ */ cs.define({\n  name: \"yaml\",\n  parser: /* @__PURE__ */ zI.configure({\n    props: [\n      /* @__PURE__ */ sa.add({\n        Stream: (t) => {\n          for (let e = t.node.resolve(t.pos, -1); e && e.to >= t.pos; e = e.parent) {\n            if (e.name == \"BlockLiteralContent\" && e.from < e.to)\n              return t.baseIndentFor(e);\n            if (e.name == \"BlockLiteral\")\n              return t.baseIndentFor(e) + t.unit;\n            if (e.name == \"BlockSequence\" || e.name == \"BlockMapping\")\n              return t.column(e.from, 1);\n            if (e.name == \"QuotedLiteral\")\n              return null;\n            if (e.name == \"Literal\") {\n              let n = t.column(e.from, 1);\n              if (n == t.lineIndent(e.from, 1))\n                return n;\n              if (e.to > t.pos)\n                return null;\n            }\n          }\n          return null;\n        },\n        FlowMapping: /* @__PURE__ */ xp({ closing: \"}\" }),\n        FlowSequence: /* @__PURE__ */ xp({ closing: \"]\" })\n      }),\n      /* @__PURE__ */ Kl.add({\n        \"FlowMapping FlowSequence\": Hd,\n        \"BlockSequence BlockMapping BlockLiteral\": (t, e) => ({ from: e.doc.lineAt(t.from).to, to: t.to })\n      })\n    ]\n  }),\n  languageData: {\n    commentTokens: { line: \"#\" },\n    indentOnInput: /^\\s*[\\]\\}]$/\n  }\n});\nfunction FI() {\n  return new Gl(HI);\n}\nvar GI = (t) => {\n  var {\n    theme: e,\n    settings: n = {},\n    styles: r = []\n  } = t, i = {\n    \".cm-gutters\": {}\n  }, s = {};\n  n.background && (s.backgroundColor = n.background), n.backgroundImage && (s.backgroundImage = n.backgroundImage), n.foreground && (s.color = n.foreground), (n.background || n.foreground) && (i[\"&\"] = s), n.fontFamily && (i[\"&.cm-editor .cm-scroller\"] = {\n    fontFamily: n.fontFamily\n  }), n.gutterBackground && (i[\".cm-gutters\"].backgroundColor = n.gutterBackground), n.gutterForeground && (i[\".cm-gutters\"].color = n.gutterForeground), n.gutterBorder && (i[\".cm-gutters\"].borderRightColor = n.gutterBorder), n.caret && (i[\".cm-content\"] = {\n    caretColor: n.caret\n  }, i[\".cm-cursor, .cm-dropCursor\"] = {\n    borderLeftColor: n.caret\n  });\n  var o = {};\n  n.gutterActiveForeground && (o.color = n.gutterActiveForeground), n.lineHighlight && (i[\".cm-activeLine\"] = {\n    backgroundColor: n.lineHighlight\n  }, o.backgroundColor = n.lineHighlight), i[\".cm-activeLineGutter\"] = o, n.selection && (i[\"&.cm-focused .cm-selectionBackground, & .cm-line::selection, & .cm-selectionLayer .cm-selectionBackground, .cm-content ::selection\"] = {\n    background: n.selection + \" !important\"\n  }), n.selectionMatch && (i[\"& .cm-selectionMatch\"] = {\n    backgroundColor: n.selectionMatch\n  });\n  var a = Se.theme(i, {\n    dark: e === \"dark\"\n  }), l = Jl.define(r), c = [a, hx(l)];\n  return c;\n};\nconst KI = GI({\n  theme: \"light\",\n  settings: {\n    background: \"var(--scalar-background-2)\",\n    foreground: \"var(--scalar-color-1)\",\n    caret: \"var(--scalar-color-1)\",\n    // Selection likely needs a hardcoded color due to it not accepting variables\n    selection: \"rgba(151, 183, 205, 0.2)\",\n    selectionMatch: \"#e3dcce\",\n    gutterBackground: \"var(--scalar-background-2)\",\n    gutterForeground: \"var(--scalar-color-3)\",\n    gutterBorder: \"transparent\",\n    lineHighlight: \"var(--scalar-background-3)\",\n    fontFamily: \"var(--scalar-font-code)\"\n  },\n  styles: [\n    {\n      tag: [P.standard(P.tagName), P.tagName],\n      color: \"var(--scalar-color-purple)\"\n    },\n    {\n      tag: [P.comment],\n      color: \"var(--scalar-color-3)\"\n    },\n    {\n      tag: [P.className],\n      color: \"var(--scalar-color-orange)\"\n    },\n    {\n      tag: [P.variableName, P.propertyName, P.attributeName],\n      color: \"var(--scalar-color-1)\"\n    },\n    {\n      tag: [P.operator],\n      color: \"var(--scalar-color-2)\"\n    },\n    {\n      tag: [P.keyword, P.typeName, P.typeOperator],\n      color: \"var(--scalar-color-green)\"\n    },\n    {\n      tag: [P.string],\n      color: \"var(--scalar-color-blue)\"\n    },\n    {\n      tag: [P.bracket, P.regexp, P.meta],\n      color: \"var(--scalar-color-3)\"\n    },\n    {\n      tag: [P.number],\n      color: \"var(--scalar-color-blue)\"\n    },\n    {\n      tag: [P.name, P.quote],\n      color: \"var(--scalar-color-3)\"\n    },\n    {\n      tag: [P.heading],\n      color: \"var(--scalar-color-3)\",\n      fontWeight: \"bold\"\n    },\n    {\n      tag: [P.emphasis],\n      color: \"var(--scalar-color-3)\",\n      fontStyle: \"italic\"\n    },\n    {\n      tag: [P.deleted],\n      color: \"var(--scalar-color-3)\",\n      backgroundColor: \"transparent\"\n    },\n    {\n      tag: [P.atom, P.bool, P.special(P.variableName)],\n      color: \"var(--scalar-color-3)\"\n    },\n    {\n      tag: [P.url, P.escape, P.regexp, P.link],\n      color: \"var(--scalar-color-1)\"\n    },\n    { tag: P.link, textDecoration: \"underline\" },\n    { tag: P.strikethrough, textDecoration: \"line-through\" },\n    {\n      tag: P.invalid,\n      color: \"var(--scalar-color-3)\"\n    }\n  ]\n}), C0 = new Uk({\n  regexp: /(\\{[^}]+\\})/g,\n  decoration: () => Je.mark({\n    attributes: {\n      class: \"api-client-url-variable\"\n    }\n  })\n}), JI = () => rr.fromClass(\n  class {\n    constructor(t) {\n      _w(this, \"variables\"), this.variables = C0.createDeco(t);\n    }\n    update(t) {\n      this.variables = C0.updateDeco(\n        t,\n        this.variables\n      );\n    }\n  },\n  {\n    decorations: (t) => t.variables,\n    provide: (t) => Se.atomicRanges.of(\n      (e) => {\n        var n;\n        return ((n = e.plugin(t)) == null ? void 0 : n.variables) || Je.none;\n      }\n    )\n  }\n), ao = (t) => \"provider\" in t && !!Jt(t.provider), eW = {\n  key: \"Mod-a\",\n  run: (t) => (t.dispatch({\n    selection: { anchor: 0, head: t.state.doc.length },\n    scrollIntoView: !1\n  }), !0)\n}, tW = (t) => {\n  const e = G(null);\n  ht(\n    t.codeMirrorRef,\n    () => {\n      var s;\n      (s = e.value) == null || s.destroy(), n();\n    },\n    { immediate: !0 }\n  ), Il(() => {\n    var s;\n    return (s = e.value) == null ? void 0 : s.destroy();\n  });\n  function n() {\n    if (t.codeMirrorRef.value) {\n      const s = ao(t) ? Jt(t.provider) : null, o = R0({\n        ...r.value,\n        provider: s\n      });\n      e.value = new Se({\n        parent: t.codeMirrorRef.value,\n        extensions: o\n      }), ao(t) || i(Jt(t.content));\n    }\n  }\n  const r = j(() => ({\n    onChange: t.onChange,\n    onBlur: t.onBlur,\n    onFocus: t.onFocus,\n    language: Jt(t.language),\n    classes: Jt(t.classes),\n    readOnly: Jt(t.readOnly),\n    lineNumbers: Jt(t.lineNumbers),\n    withVariables: Jt(t.withVariables),\n    disableEnter: Jt(t.withVariables),\n    withoutTheme: Jt(t.withoutTheme),\n    additionalExtensions: Jt(t.extensions)\n  }));\n  ht(\n    () => ao(t) ? Jt(t.provider) : null,\n    () => {\n      var s;\n      ao(t) && ((s = e.value) == null || s.destroy(), n());\n    }\n  ), ht(\n    r,\n    () => {\n      if (e.value) {\n        const s = ao(t) ? Jt(t.provider) : null, o = R0({\n          ...r.value,\n          provider: s\n        });\n        e.value.dispatch({\n          effects: ot.reconfigure.of(o)\n        });\n      } else\n        return;\n    },\n    { immediate: !0 }\n  );\n  const i = (s = \"\") => {\n    e.value && e.value.state.doc.toString() !== s && e.value.dispatch({\n      changes: {\n        from: 0,\n        to: e.value.state.doc.length,\n        insert: s\n      },\n      selection: {\n        anchor: Math.min(\n          e.value.state.selection.main.anchor,\n          s.length\n        )\n      }\n    });\n  };\n  return ht(\n    () => Jt(t.content),\n    () => {\n      ao(t) || i(Jt(t.content));\n    },\n    { immediate: !0 }\n  ), {\n    /** Replaces the current content with the given value. */\n    setCodeMirrorContent: i,\n    /** Codemirror instance */\n    codeMirror: e\n  };\n}, A0 = {\n  html: OI,\n  json: yI,\n  yaml: FI,\n  css: Ix\n};\nfunction R0({\n  onChange: t,\n  onBlur: e,\n  onFocus: n,\n  provider: r,\n  language: i,\n  classes: s = [],\n  readOnly: o = !1,\n  lineNumbers: a = !1,\n  withVariables: l = !1,\n  disableEnter: c = !1,\n  withoutTheme: u = !1,\n  additionalExtensions: d = []\n}) {\n  const f = [\n    tD(),\n    hx(tZ, { fallback: !0 }),\n    Se.theme({\n      \".cm-line\": {\n        lineHeight: \"20px\"\n      },\n      \".cm-gutterElement\": {\n        lineHeight: \"20px\"\n      }\n    }),\n    // Listen to updates\n    Se.updateListener.of((h) => {\n      h.docChanged && (t == null || t(h.state.doc.toString()));\n    }),\n    Se.domEventHandlers({\n      blur: (h, p) => {\n        e == null || e(p.state.doc.toString());\n      },\n      focus: (h, p) => {\n        n == null || n(p.state.doc.toString());\n      }\n    }),\n    // Add Classes\n    Se.editorAttributes.of({ class: s.join(\" \") }),\n    ...d\n  ];\n  return r && f.push(r), u || f.push(KI), o ? f.push(Se.editable.of(!1)) : f.push(\n    KD(),\n    lZ(),\n    sV(),\n    zZ(),\n    bl.of([\n      ...Cx,\n      ...KZ,\n      cV,\n      eW\n    ])\n  ), i && A0[i] && f.push(A0[i]()), a && f.push(mD()), l && f.push(JI()), c && f.push(\n    bl.of([\n      {\n        key: \"Enter\",\n        run: () => !0\n      },\n      {\n        key: \"Ctrl-Enter\",\n        mac: \"Cmd-Enter\",\n        run: () => !0\n      },\n      {\n        key: \"Shift-Enter\",\n        run: () => !0\n      }\n    ])\n  ), f;\n}\nconst nW = /* @__PURE__ */ le({\n  __name: \"CodeMirror\",\n  props: {\n    content: {},\n    readOnly: { type: Boolean },\n    language: {},\n    withVariables: { type: Boolean },\n    lineNumbers: { type: Boolean },\n    withoutTheme: { type: Boolean },\n    disableEnter: { type: Boolean, default: !1 }\n  },\n  emits: [\"change\"],\n  setup(t, { emit: e }) {\n    const n = t, r = e, i = G(null);\n    return tW({\n      content: Ei(() => n.content),\n      readOnly: Ei(() => n.readOnly),\n      language: Ei(() => n.language),\n      withVariables: Ei(() => n.withVariables),\n      lineNumbers: Ei(() => n.lineNumbers),\n      withoutTheme: Ei(() => n.withoutTheme),\n      disableEnter: Ei(() => n.disableEnter),\n      onChange: (s) => r(\"change\", s || \"\"),\n      codeMirrorRef: i,\n      classes: [\"codemirror\"]\n    }), (s, o) => (Z(), ne(\"div\", {\n      ref_key: \"codeMirrorRef\",\n      ref: i,\n      class: \"codemirror-container\"\n    }, null, 512));\n  }\n}), SP = /* @__PURE__ */ ct(nW, [[\"__scopeId\", \"data-v-0abaf2d9\"]]), rW = { class: \"scalar-modal-layout modal-layout\" }, iW = /* @__PURE__ */ le({\n  __name: \"FlowModal\",\n  props: {\n    state: {},\n    title: {},\n    bodyClass: {},\n    maxWidth: {},\n    variant: { default: \"normal\" }\n  },\n  setup(t) {\n    return (e, n) => (Z(), ke(R(fC), {\n      open: e.state.open,\n      onClose: n[0] || (n[0] = (r) => e.state.hide())\n    }, {\n      default: ce(() => [\n        D(\"div\", rW, [\n          J(R(hC), {\n            class: Ke([\"modal\", {\n              \"modal-content-large\": e.variant === \"large\",\n              \"modal-content-normal\": e.variant === \"normal\",\n              \"modal-content-small\": e.variant === \"small\",\n              \"modal-content-search\": e.variant === \"search\",\n              \"modal-content-history\": e.variant === \"history\"\n            }]),\n            style: Br({ maxWidth: e.maxWidth })\n          }, {\n            default: ce(() => [\n              e.title ? (Z(), ke(R(pC), {\n                key: 0,\n                class: \"modal-header\"\n              }, {\n                default: ce(() => [\n                  He(De(e.title), 1)\n                ]),\n                _: 1\n              })) : st(\"\", !0),\n              J(R(OC), {\n                class: Ke([\"modal-body custom-scroll\", [e.bodyClass]])\n              }, {\n                default: ce(() => [\n                  pt(e.$slots, \"default\", {}, void 0, !0)\n                ]),\n                _: 3\n              }, 8, [\"class\"])\n            ]),\n            _: 3\n          }, 8, [\"class\", \"style\"])\n        ])\n      ]),\n      _: 3\n    }, 8, [\"open\"]));\n  }\n}), sW = /* @__PURE__ */ ct(iW, [[\"__scopeId\", \"data-v-4aafbf68\"]]), oW = () => Xn({\n  open: !1,\n  show() {\n    this.open = !0;\n  },\n  hide() {\n    this.open = !1;\n  }\n});\nfunction aW() {\n  return typeof navigator < \"u\" ? /Mac/.test(navigator.platform) : !1;\n}\nconst lW = (t, e) => {\n  if (typeof e != \"string\" || !e.length)\n    return t;\n  const n = t.endsWith(\"/\") ? t : `${t}/`, r = e.startsWith(\"/\") ? e.slice(1) : e;\n  return [n, r].join(\"\");\n};\nfunction cW(t) {\n  return typeof window > \"u\" ? Buffer.from(t).toString(\"base64\") : btoa(t);\n}\nfunction uW(t) {\n  return !(!t || Array.isArray(t) && !t.length || (t ?? []).some(\n    (e) => !Object.keys(e).length\n  ));\n}\nfunction wP(t, e) {\n  var n, r;\n  const i = [], s = [], o = [];\n  if (!t.customSecurity && (!t.preferredSecurityScheme || !uW(e)))\n    return { headers: i, queryString: s, cookies: o };\n  const l = (e == null ? void 0 : e.some(\n    (u) => t.preferredSecurityScheme && Object.keys(u).includes(\n      t.preferredSecurityScheme\n    )\n  )) || t.customSecurity ? t.preferredSecurityScheme : Object.keys((e == null ? void 0 : e[0]) ?? {}).pop(), c = (n = t.securitySchemes) == null ? void 0 : n[l ?? \"\"];\n  if (c) {\n    if (\"type\" in c && c.type === \"apiKey\") {\n      if (\"in\" in c && c.in === \"header\") {\n        const u = (r = t.apiKey.token) != null && r.length ? t.apiKey.token : \"YOUR_TOKEN\";\n        i.push({\n          name: \"name\" in c ? c.name : \"\",\n          value: u\n        });\n      } else if (\"in\" in c && c.in === \"cookie\") {\n        const u = t.apiKey.token.length ? t.apiKey.token : \"YOUR_TOKEN\";\n        o.push({\n          name: c.name,\n          value: u\n        });\n      } else if (\"in\" in c && c.in === \"query\") {\n        const u = t.apiKey.token.length ? t.apiKey.token : \"YOUR_TOKEN\";\n        s.push({\n          name: c.name,\n          value: u\n        });\n      }\n    } else if (\"type\" in c && // @ts-ignore\n    (c.type === \"http\" || c.type === \"basic\")) {\n      if (\"type\" in c && // @ts-ignore\n      (c.type === \"basic\" || c.type === \"http\" && c.scheme === \"basic\")) {\n        const { username: u, password: d } = t.http.basic, f = dW(u, d);\n        i.push({\n          name: \"Authorization\",\n          value: `Basic ${f}`.trim()\n        });\n      } else if (\"type\" in c && c.type === \"http\" && c.scheme === \"bearer\") {\n        const u = t.http.bearer.token.length ? t.http.bearer.token : \"YOUR_SECRET_TOKEN\";\n        i.push({\n          name: \"Authorization\",\n          value: `Bearer ${u}`\n        });\n      }\n    } else if (\"type\" in c && c.type.toLowerCase() === \"oauth2\") {\n      const u = t.oAuth2.accessToken || \"YOUR_SECRET_TOKEN\";\n      i.push({\n        name: \"Authorization\",\n        value: `Bearer ${u}`\n      });\n    }\n  }\n  return { headers: i, queryString: s, cookies: o };\n}\nfunction dW(t, e) {\n  return t != null && t.length || e != null && e.length ? cW(`${t}:${e}`) : \"\";\n}\nfunction fW(t) {\n  const e = Math.floor(((/* @__PURE__ */ new Date()).getTime() - t) / 1e3);\n  if (e < 45)\n    return \"just now\";\n  if (e < 60)\n    return `${e} seconds ago`;\n  const n = Math.floor(e / 60);\n  if (n < 60)\n    return `${n} minute${n === 1 ? \"\" : \"s\"} ago`;\n  const r = Math.floor(n / 60);\n  if (r < 24)\n    return `${r} hour${r === 1 ? \"\" : \"s\"} ago`;\n  const i = Math.floor(r / 24);\n  if (i < 30)\n    return `${i} day${i === 1 ? \"\" : \"s\"} ago`;\n  const s = Math.floor(i / 30);\n  return s < 12 ? `${s} month${s === 1 ? \"\" : \"s\"} ago` : \"more than a year ago\";\n}\nfunction Mc(t, e, n) {\n  const r = {};\n  return t.forEach((i) => {\n    r[i[e]] = i[n];\n  }), r;\n}\nconst hW = (t) => {\n  if (typeof t != \"string\")\n    return \"\";\n  let e = t.trim();\n  return e.length > 1 && e.startsWith(\"/\") && (e = e.slice(1)), e;\n}, Xc = \"GET\", pW = (t) => {\n  if (typeof t != \"string\")\n    return console.warn(\n      `[sendRequest] Request method is not a string. Using ${Xc} as the default.`\n    ), Xc;\n  const e = t.trim().toUpperCase();\n  return jh(e) ? e : (console.warn(\n    `[sendRequest] ${t} is not a valid request method. Using ${Xc} as the default.`\n  ), Xc);\n}, OW = (t) => {\n  if (typeof t != \"string\")\n    return console.warn(\n      \"[sendRequest] URL is not a string. Using an empty string as the default.\"\n    ), \"\";\n  let e = t;\n  e.startsWith(\"http\") || (console.warn(\n    \"[sendRequest] URL does not start with http. Adding http:// as the default prefix.\"\n  ), e = `http://${e}`);\n  const n = new URL(e);\n  return n.hostname = n.hostname.trim().toLowerCase(), n.toString();\n};\nfunction jc(t) {\n  return (t ?? []).map((e) => ({ ...e, enabled: !0 }));\n}\nconst gW = (t) => {\n  var e, n;\n  const { request: r } = t, { authentication: i } = Yl(), {\n    openApi: { operation: s, globalSecurity: o }\n  } = Cw(), a = wP(\n    i,\n    ((e = s == null ? void 0 : s.information) == null ? void 0 : e.security) ?? o\n  );\n  return r.headers = [\n    ...r.headers ?? [],\n    ...jc(a.headers)\n  ], r.cookies = [\n    ...r.cookies ?? [],\n    ...jc(a.cookies)\n  ], r.query = [\n    ...r.query ?? [],\n    ...jc(a.queryString)\n  ], r.body && Xh(r.body) && ((n = r.headers) != null && n.some(\n    (c) => c.name.toLowerCase() === \"content-type\"\n  ) || (r.headers = [\n    ...r.headers ?? [],\n    ...jc([\n      {\n        name: \"Content-Type\",\n        value: \"application/json; charset=utf-8\"\n      }\n    ])\n  ]), r.body = JSON.parse(r.body)), {\n    ...r\n  };\n}, mW = (t, e) => Object.entries(e).reduce((n, [r, i]) => n.replace(`{${r}}`, i.toString()), t);\nasync function bW(t, e) {\n  var n;\n  const r = pW(t.type), i = Mc(\n    (t.headers ?? []).filter((b) => b.enabled),\n    \"name\",\n    \"value\"\n  ), s = OW(t.url), o = hW(t.path), [a, ...l] = lW(\n    s,\n    o\n  ).split(\"?\"), c = mW(\n    a,\n    Mc(\n      (t.variables ?? []).filter((b) => b.enabled),\n      \"name\",\n      \"value\"\n    )\n  ), u = [];\n  l.forEach((b) => {\n    new URLSearchParams(b ?? \"\").forEach((g, v) => {\n      u.push({\n        name: v,\n        value: g,\n        enabled: !0\n      });\n    });\n  });\n  const d = new URLSearchParams(\n    // TODO: No type-casting\n    Mc(\n      [\n        ...(t.query ?? []).filter((b) => b.enabled),\n        ...u\n      ],\n      \"name\",\n      \"value\"\n    )\n  ).toString(), f = `${c}${d ? \"?\" + d : \"\"}`, h = {\n    type: \"none\"\n  }, p = Date.now();\n  if (t.cookies && ((n = t.cookies) == null ? void 0 : n.length) > 0) {\n    const b = Mc(\n      (t.cookies ?? []).filter((g) => g.enabled),\n      \"name\",\n      \"value\"\n    );\n    i.Cookie = Object.keys(b).map((g) => `${g}=${b[g]}`).join(\"; \");\n  }\n  const O = {\n    method: r,\n    url: f,\n    auth: h,\n    headers: i,\n    data: t.body\n  }, m = e ? {\n    method: \"POST\",\n    url: e,\n    data: O\n  } : {\n    method: O.method,\n    url: O.url,\n    headers: O.headers,\n    data: O.data\n  };\n  i.cookies && (m.withCredentials = !0), console.info(e ? `${O.method} ${e} → ${O.url}` : `${O.method} ${O.url}`);\n  const y = await At(m).then((b) => e ? {\n    ...b.data,\n    error: !1\n  } : {\n    ...b,\n    statusCode: b.status,\n    data: JSON.stringify(b.data),\n    error: !1\n  }).catch((b) => {\n    const { response: g } = b;\n    return {\n      headers: {\n        \"content-type\": \"application/json; charset=utf-8\"\n      },\n      ...g,\n      statusCode: (g == null ? void 0 : g.status) ?? 0,\n      data: JSON.stringify((g == null ? void 0 : g.data) ?? { error: b.code })\n    };\n  });\n  return {\n    sentTime: Date.now(),\n    request: {\n      ...t,\n      type: r,\n      url: s,\n      path: o\n    },\n    response: {\n      ...y,\n      duration: Date.now() - p\n    },\n    responseId: u2()\n  };\n}\nconst vW = { class: \"navtable-item-40 navtable-item-request\" }, yW = { class: \"navtable-item-40 navtable-item-response\" }, SW = { class: \"navtable-item-20 navtable-item-time\" }, wW = /* @__PURE__ */ le({\n  __name: \"RequestHistoryItem\",\n  props: {\n    history: {}\n  },\n  setup(t) {\n    const { requestHistory: e, activeRequestId: n, setActiveResponse: r } = sr(), i = (s) => {\n      var o;\n      return (o = s == null ? void 0 : s.headers) != null && o[\"X-API-Client-Content-Length\"] ? Cu(\n        parseFloat(s.headers[\"X-API-Client-Content-Length\"])\n      ) : Cu(0);\n    };\n    return (s, o) => (Z(), ne(\"div\", {\n      class: Ke([\"navtable-item\", { \"navtable-item__active\": R(n) === s.history }]),\n      onClick: o[0] || (o[0] = (a) => R(r)(s.history))\n    }, [\n      D(\"div\", vW, [\n        D(\"button\", {\n          class: Ke([\"radio\", R(e)[s.history].request.type.toLowerCase()]),\n          type: \"button\"\n        }, null, 2),\n        D(\"span\", null, [\n          D(\"em\", null, De(R(e)[s.history].request.type), 1),\n          He(\" \" + De(R(e)[s.history].request.url), 1)\n        ])\n      ]),\n      D(\"div\", yW, [\n        D(\"span\", null, De(R(dw)(R(e)[s.history].response.duration)), 1),\n        D(\"span\", {\n          class: Ke(`scalar-api-client__status--${String(\n            R(e)[s.history].response.statusCode\n          ).charAt(0)}xx`)\n        }, De(R(e)[s.history].response.statusCode), 3),\n        D(\"span\", null, De(i(R(e)[s.history].response)), 1)\n      ]),\n      D(\"div\", SW, [\n        D(\"span\", null, De(R(fW)(R(e)[s.history].sentTime)), 1)\n      ])\n    ], 2));\n  }\n}), kW = /* @__PURE__ */ ct(wW, [[\"__scopeId\", \"data-v-353c6d86\"]]), xW = { class: \"navigation-content-item\" }, PW = { class: \"navtable\" }, _W = { class: \"navtable-table\" }, TW = /* @__PURE__ */ Wl('<div class=\"navtable-item navtable-item__top\"><div class=\"navtable-item-40\"><label for=\"\">Request</label></div><div class=\"navtable-item-40\"><label for=\"\">Response</label></div><div class=\"navtable-item-20\"><label for=\"\">TIME</label></div></div>', 1), EW = { class: \"navtable-radios\" }, $W = /* @__PURE__ */ Wl('<div class=\"navtable-mock\"><div class=\"navtable-item\"><div class=\"navtable-item-40\"></div><div class=\"navtable-item-40\"></div><div class=\"navtable-item-20\"></div></div></div>', 1), QW = /* @__PURE__ */ le({\n  __name: \"RequestHistory\",\n  emits: [\"toggle\"],\n  setup(t) {\n    const { requestHistoryOrder: e } = sr();\n    return (n, r) => (Z(), ne(\"div\", xW, [\n      D(\"div\", PW, [\n        D(\"div\", _W, [\n          TW,\n          D(\"div\", EW, [\n            (Z(!0), ne(Pe, null, Xr(R(e), (i) => (Z(), ke(kW, {\n              key: i,\n              history: i\n            }, null, 8, [\"history\"]))), 128))\n          ]),\n          $W\n        ])\n      ])\n    ]));\n  }\n}), CW = { class: \"request-method-select\" }, AW = [\"disabled\", \"value\"], RW = [\"value\"], NW = /* @__PURE__ */ le({\n  __name: \"RequestMethodSelect\",\n  props: {\n    requestMethod: {},\n    readOnly: { type: Boolean, default: !0 }\n  },\n  emits: [\"change\"],\n  setup(t) {\n    const e = [\n      \"GET\",\n      \"POST\",\n      \"PUT\",\n      // 'HEAD',\n      \"DELETE\",\n      \"PATCH\"\n      // 'OPTIONS',\n      // 'CONNECT',\n      // 'TRACE',\n    ];\n    return (n, r) => (Z(), ne(\"div\", CW, [\n      D(\"span\", {\n        class: Ke([\"request-method\", { \"request-method--disabled\": n.readOnly }])\n      }, [\n        D(\"span\", null, De(n.requestMethod), 1)\n      ], 2),\n      D(\"select\", {\n        disabled: n.readOnly,\n        value: n.requestMethod.toLowerCase(),\n        onInput: r[0] || (r[0] = (i) => n.$emit(\"change\", i.target.value))\n      }, [\n        (Z(), ne(Pe, null, Xr(e, (i) => D(\"option\", {\n          key: i,\n          value: i.toLocaleLowerCase()\n        }, De(i), 9, RW)), 64))\n      ], 40, AW)\n    ]));\n  }\n}), DW = /* @__PURE__ */ ct(NW, [[\"__scopeId\", \"data-v-0f1e5bdc\"]]), tc = (t) => (Ks(\"data-v-2967e07a\"), t = t(), Js(), t), ZW = {\n  key: 0,\n  class: \"loader\"\n}, VW = { class: \"url-form\" }, IW = { class: \"url-form-field\" }, WW = { class: \"url-form-input-wrapper cm-scroller\" }, MW = /* @__PURE__ */ tc(() => /* @__PURE__ */ D(\"div\", { class: \"url-form-input-fade__left\" }, null, -1)), XW = /* @__PURE__ */ tc(() => /* @__PURE__ */ D(\"div\", { class: \"url-form-input-fade__right\" }, null, -1)), jW = {\n  key: 0,\n  class: \"history\"\n}, BW = /* @__PURE__ */ tc(() => /* @__PURE__ */ D(\"svg\", {\n  fill: \"none\",\n  height: \"48\",\n  viewBox: \"0 0 14 14\",\n  width: \"48\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, [\n  /* @__PURE__ */ D(\"g\", { id: \"rewind-clock--back-return-clock-timer-countdown\" }, [\n    /* @__PURE__ */ D(\"path\", {\n      id: \"Vector 1561 (Stroke)\",\n      \"clip-rule\": \"evenodd\",\n      d: \"M6.99999 2.75C7.4142 2.75 7.74999 3.08579 7.74999 3.5V7.5C7.74999 7.76345 7.61177 8.00758 7.38586 8.14312L4.88586 9.64312C4.53068 9.85623 4.06998 9.74106 3.85687 9.38587C3.64376 9.03069 3.75893 8.56999 4.11412 8.35688L6.24999 7.07536V3.5C6.24999 3.08579 6.58578 2.75 6.99999 2.75Z\",\n      fill: \"currentColor\",\n      \"fill-rule\": \"evenodd\"\n    }),\n    /* @__PURE__ */ D(\"path\", {\n      id: \"Union\",\n      \"clip-rule\": \"evenodd\",\n      d: \"M12.5 7C12.5 3.96243 10.0376 1.5 7 1.5C5.24916 1.5 3.68853 2.31796 2.68066 3.59456L3.64645 4.56034C3.96143 4.87533 3.73835 5.4139 3.29289 5.4139H0.5C0.223857 5.4139 0 5.19004 0 4.9139V2.121C0 1.67555 0.53857 1.45247 0.853553 1.76745L1.61439 2.52829C2.89781 0.984301 4.83356 0 7 0C10.866 0 14 3.13401 14 7C14 10.866 10.866 14 7 14C3.68902 14 0.916591 11.702 0.187329 8.61473C0.0921059 8.21161 0.341704 7.80762 0.744824 7.7124C1.14794 7.61717 1.55193 7.86677 1.64715 8.26989C2.22013 10.6955 4.40025 12.5 7 12.5C10.0376 12.5 12.5 10.0376 12.5 7Z\",\n      fill: \"currentColor\",\n      \"fill-rule\": \"evenodd\"\n    })\n  ])\n], -1)), LW = [\n  BW\n], UW = [\"disabled\"], qW = /* @__PURE__ */ tc(() => /* @__PURE__ */ D(\"svg\", {\n  fill: \"none\",\n  height: \"48\",\n  viewBox: \"0 0 14 14\",\n  width: \"48\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, [\n  /* @__PURE__ */ D(\"g\", { id: \"send-email--mail-send-email-paper-airplane\" }, [\n    /* @__PURE__ */ D(\"path\", {\n      id: \"Subtract\",\n      \"clip-rule\": \"evenodd\",\n      d: \"M11.8215 0.0977331C12.1097 -0.0075178 12.422 -0.0287134 12.7219 0.0367172C13.0248 0.102803 13.3024 0.254481 13.5216 0.473719C13.7409 0.692957 13.8926 0.970537 13.9586 1.27346C14.0241 1.57338 14.0029 1.88566 13.8976 2.17389L10.3236 12.8859L10.3234 12.8866C10.2363 13.15 10.083 13.3867 9.87813 13.5739C9.67383 13.7606 9.42512 13.8917 9.15575 13.9549C8.88633 14.0206 8.60444 14.015 8.33777 13.9388C8.07134 13.8627 7.82929 13.7187 7.63532 13.5209L5.71798 11.6123L3.70392 12.6538C3.54687 12.735 3.3586 12.7272 3.20877 12.6333C3.05895 12.5395 2.96984 12.3734 2.97443 12.1967L3.057 9.01294L10.102 3.89553C10.3812 3.69267 10.4432 3.30182 10.2403 3.02255C10.0375 2.74327 9.64662 2.68133 9.36734 2.88419L2.20286 8.0884L0.473156 6.35869L0.473098 6.35864L0.472971 6.35851C0.285648 6.17132 0.147746 5.94054 0.0716498 5.68688C-0.00390565 5.43503 -0.016181 5.16847 0.0358684 4.91079C0.087985 4.62928 0.213827 4.36658 0.400607 4.14951C0.588668 3.93095 0.831681 3.76658 1.10453 3.67339L1.1079 3.67224L1.1079 3.67225L11.8215 0.0977331Z\",\n      fill: \"currentColor\",\n      \"fill-rule\": \"evenodd\"\n    })\n  ])\n], -1)), YW = /* @__PURE__ */ tc(() => /* @__PURE__ */ D(\"span\", null, \"Send\", -1)), zW = [\n  qW,\n  YW\n], HW = { class: \"address-bar-content\" }, FW = /* @__PURE__ */ le({\n  __name: \"AddressBar\",\n  props: {\n    proxyUrl: {}\n  },\n  emits: [\"onSend\"],\n  setup(t, { emit: e }) {\n    const n = t, r = e, i = BS();\n    Nh(aW() ? i.meta_enter : i.ctrl_enter, b);\n    const s = G(!1), o = G(!1), {\n      activeRequest: a,\n      addRequestToHistory: l,\n      requestHistory: c,\n      requestHistoryOrder: u,\n      readOnly: d,\n      setActiveRequest: f\n    } = sr(), h = oW(), p = j(() => a.url), O = j(() => a.type), m = j(() => a.path), y = j(() => `${p.value}${m.value}`);\n    async function b() {\n      const S = gW({\n        request: { ...a }\n      });\n      o.value = !0, r(\"onSend\");\n      const w = await bW(S, n.proxyUrl);\n      w && l(w), o.value = !1;\n    }\n    const g = (S) => {\n      d.value || a.url + a.path !== S && f({ ...a, url: S, path: \"\" });\n    }, v = (S) => {\n      S && f({\n        ...a,\n        type: S.toLocaleLowerCase()\n      });\n    };\n    return (S, w) => (Z(), ne(Pe, null, [\n      o.value ? (Z(), ne(\"div\", ZW)) : st(\"\", !0),\n      D(\"div\", {\n        class: Ke([\"address-bar\", { \"address-bar--with-history\": s.value }])\n      }, [\n        D(\"div\", VW, [\n          D(\"div\", IW, [\n            J(DW, {\n              readOnly: R(d),\n              requestMethod: O.value,\n              onChange: v\n            }, null, 8, [\"readOnly\", \"requestMethod\"]),\n            D(\"div\", WW, [\n              MW,\n              J(R(SP), {\n                class: \"url-form-input\",\n                content: y.value,\n                disableEnter: \"\",\n                readOnly: R(d),\n                withoutTheme: \"\",\n                withVariables: \"\",\n                onChange: g\n              }, null, 8, [\"content\", \"readOnly\"]),\n              XW\n            ]),\n            R(u).length ? (Z(), ne(\"div\", jW, [\n              D(\"div\", {\n                class: \"history-toggle\",\n                onClick: w[0] || (w[0] = (k) => R(h).show())\n              }, LW)\n            ])) : st(\"\", !0),\n            D(\"button\", {\n              class: \"send-button\",\n              disabled: !y.value.trim().length,\n              type: \"submit\",\n              onClick: b\n            }, zW, 8, UW)\n          ])\n        ]),\n        D(\"div\", {\n          class: \"address-bar-close\",\n          onClick: w[1] || (w[1] = (k) => s.value = !1)\n        }),\n        D(\"div\", HW, [\n          J(R(sW), {\n            state: R(h),\n            title: \"Request History\",\n            variant: \"history\"\n          }, {\n            default: ce(() => [\n              J(QW, {\n                showHistory: s.value,\n                onToggle: w[2] || (w[2] = (k) => s.value = !s.value)\n              }, null, 8, [\"showHistory\"])\n            ]),\n            _: 1\n          }, 8, [\"state\"])\n        ])\n      ], 2)\n    ], 64));\n  }\n}), GW = /* @__PURE__ */ ct(FW, [[\"__scopeId\", \"data-v-2967e07a\"]]), kP = UC(Symbol()), KW = { class: \"scalar-api-client__toggle-container\" }, JW = { class: \"scalar-api-client__item__title\" }, eM = {\n  key: 0,\n  class: \"scalar-api-client__item__options\"\n}, tM = /* @__PURE__ */ D(\"svg\", {\n  class: \"scalar-api-client__toggle__icon\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  viewBox: \"0 0 12 12\"\n}, [\n  /* @__PURE__ */ D(\"path\", {\n    stroke: \"currentColor\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\",\n    d: \"M2.2 4.1 6 7.9l3.8-3.8\"\n  })\n], -1), nM = { class: \"scalar-api-client__item__content\" }, bi = /* @__PURE__ */ le({\n  __name: \"CollapsibleSection\",\n  props: {\n    title: {},\n    defaultOpen: { type: Boolean, default: !0 }\n  },\n  setup(t) {\n    const e = t, n = G(null), r = G(null), i = G(e.defaultOpen);\n    return ht(\n      () => e.defaultOpen,\n      (s, o) => {\n        var a;\n        s !== o && s !== i.value && ((a = n.value) == null || a.el.click());\n      }\n    ), (s, o) => (Z(), ke(R(bC), {\n      ref_key: \"disclosureButton\",\n      ref: r,\n      defaultOpen: s.defaultOpen\n    }, {\n      default: ce(({ open: a }) => [\n        D(\"div\", {\n          class: Ke([\"scalar-api-client__item\", { \"scalar-api-client__item--open\": a }])\n        }, [\n          J(R(vC), {\n            ref_key: \"collapseButton\",\n            ref: n,\n            class: \"scalar-api-client__toggle\",\n            onClick: o[0] || (o[0] = (l) => i.value = !i.value)\n          }, {\n            default: ce(() => [\n              D(\"div\", KW, [\n                D(\"span\", JW, De(s.title), 1),\n                s.$slots.options && a ? (Z(), ne(\"div\", eM, [\n                  pt(s.$slots, \"options\")\n                ])) : st(\"\", !0)\n              ]),\n              tM\n            ]),\n            _: 2\n          }, 1536),\n          J(R(yC), null, {\n            default: ce(() => [\n              D(\"div\", nM, [\n                pt(s.$slots, \"default\")\n              ])\n            ]),\n            _: 3\n          })\n        ], 2)\n      ]),\n      _: 3\n    }, 8, [\"defaultOpen\"]));\n  }\n}), rM = {}, iM = { class: \"card-form\" };\nfunction sM(t, e) {\n  return Z(), ne(\"form\", iM, [\n    pt(t.$slots, \"default\", {}, void 0, !0)\n  ]);\n}\nconst oM = /* @__PURE__ */ ct(rM, [[\"render\", sM], [\"__scopeId\", \"data-v-bc8cea71\"]]), aM = /* @__PURE__ */ le({\n  __name: \"CardFormButton\",\n  setup(t, { expose: e }) {\n    const n = G();\n    return e({ el: n }), (r, i) => (Z(), ne(\"button\", {\n      ref_key: \"el\",\n      ref: n,\n      class: \"card-form-button\",\n      type: \"button\"\n    }, [\n      pt(r.$slots, \"default\", {}, void 0, !0)\n    ], 512));\n  }\n}), xP = /* @__PURE__ */ ct(aM, [[\"__scopeId\", \"data-v-6ae053e9\"]]), lM = {}, cM = { class: \"card-form-group\" };\nfunction uM(t, e) {\n  return Z(), ne(\"div\", cM, [\n    pt(t.$slots, \"default\", {}, void 0, !0)\n  ]);\n}\nconst N0 = /* @__PURE__ */ ct(lM, [[\"render\", uM], [\"__scopeId\", \"data-v-6b5d2194\"]]);\nfunction PP(t) {\n  var e, n, r = \"\";\n  if (typeof t == \"string\" || typeof t == \"number\")\n    r += t;\n  else if (typeof t == \"object\")\n    if (Array.isArray(t))\n      for (e = 0; e < t.length; e++)\n        t[e] && (n = PP(t[e])) && (r && (r += \" \"), r += n);\n    else\n      for (e in t)\n        t[e] && (r && (r += \" \"), r += e);\n  return r;\n}\nfunction Jf() {\n  for (var t, e, n = 0, r = \"\"; n < arguments.length; )\n    (t = arguments[n++]) && (e = PP(t)) && (r && (r += \" \"), r += e);\n  return r;\n}\nconst D0 = (t) => typeof t == \"boolean\" ? \"\".concat(t) : t === 0 ? \"0\" : t, dM = (t) => {\n  const e = function() {\n    for (var i = arguments.length, s = new Array(i), o = 0; o < i; o++)\n      s[o] = arguments[o];\n    var a, l;\n    return typeof (t == null || (a = t.hooks) === null || a === void 0 ? void 0 : a[\"cx:done\"]) < \"u\" ? t == null ? void 0 : t.hooks[\"cx:done\"](Jf(s)) : typeof (t == null || (l = t.hooks) === null || l === void 0 ? void 0 : l.onComplete) < \"u\" ? t == null ? void 0 : t.hooks.onComplete(Jf(s)) : Jf(s);\n  };\n  return { compose: function() {\n    for (var i = arguments.length, s = new Array(i), o = 0; o < i; o++)\n      s[o] = arguments[o];\n    return (a) => {\n      const l = Object.fromEntries(Object.entries(a || {}).filter((c) => {\n        let [u] = c;\n        return ![\"class\", \"className\"].includes(u);\n      }));\n      return e(s.map((c) => c(l)), a == null ? void 0 : a.class, a == null ? void 0 : a.className);\n    };\n  }, cva: (i) => (s) => {\n    var o;\n    if ((i == null ? void 0 : i.variants) == null)\n      return e(i == null ? void 0 : i.base, s == null ? void 0 : s.class, s == null ? void 0 : s.className);\n    const { variants: a, defaultVariants: l } = i, c = Object.keys(a).map((f) => {\n      const h = s == null ? void 0 : s[f], p = l == null ? void 0 : l[f], O = D0(h) || D0(p);\n      return a[f][O];\n    }), u = { ...l, ...s && Object.entries(s).reduce((f, h) => {\n      let [p, O] = h;\n      return typeof O > \"u\" ? f : { ...f, [p]: O };\n    }, {}) }, d = i == null || (o = i.compoundVariants) === null || o === void 0 ? void 0 : o.reduce((f, h) => {\n      let { class: p, className: O, ...m } = h;\n      return Object.entries(m).every((y) => {\n        let [b, g] = y;\n        const v = u[b];\n        return Array.isArray(g) ? g.includes(v) : v === g;\n      }) ? [...f, p, O] : f;\n    }, []);\n    return e(i == null ? void 0 : i.base, c, d, s == null ? void 0 : s.class, s == null ? void 0 : s.className);\n  }, cx: e };\n}, Eg = \"-\";\nfunction fM(t) {\n  const e = pM(t), {\n    conflictingClassGroups: n,\n    conflictingClassGroupModifiers: r\n  } = t;\n  function i(o) {\n    const a = o.split(Eg);\n    return a[0] === \"\" && a.length !== 1 && a.shift(), _P(a, e) || hM(o);\n  }\n  function s(o, a) {\n    const l = n[o] || [];\n    return a && r[o] ? [...l, ...r[o]] : l;\n  }\n  return {\n    getClassGroupId: i,\n    getConflictingClassGroupIds: s\n  };\n}\nfunction _P(t, e) {\n  var n;\n  if (t.length === 0)\n    return e.classGroupId;\n  const r = t[0], i = e.nextPart.get(r), s = i ? _P(t.slice(1), i) : void 0;\n  if (s)\n    return s;\n  if (e.validators.length === 0)\n    return;\n  const o = t.join(Eg);\n  return (n = e.validators.find(({\n    validator: a\n  }) => a(o))) == null ? void 0 : n.classGroupId;\n}\nconst Z0 = /^\\[(.+)\\]$/;\nfunction hM(t) {\n  if (Z0.test(t)) {\n    const e = Z0.exec(t)[1], n = e == null ? void 0 : e.substring(0, e.indexOf(\":\"));\n    if (n)\n      return \"arbitrary..\" + n;\n  }\n}\nfunction pM(t) {\n  const {\n    theme: e,\n    prefix: n\n  } = t, r = {\n    nextPart: /* @__PURE__ */ new Map(),\n    validators: []\n  };\n  return gM(Object.entries(t.classGroups), n).forEach(([s, o]) => {\n    Ip(o, r, s, e);\n  }), r;\n}\nfunction Ip(t, e, n, r) {\n  t.forEach((i) => {\n    if (typeof i == \"string\") {\n      const s = i === \"\" ? e : V0(e, i);\n      s.classGroupId = n;\n      return;\n    }\n    if (typeof i == \"function\") {\n      if (OM(i)) {\n        Ip(i(r), e, n, r);\n        return;\n      }\n      e.validators.push({\n        validator: i,\n        classGroupId: n\n      });\n      return;\n    }\n    Object.entries(i).forEach(([s, o]) => {\n      Ip(o, V0(e, s), n, r);\n    });\n  });\n}\nfunction V0(t, e) {\n  let n = t;\n  return e.split(Eg).forEach((r) => {\n    n.nextPart.has(r) || n.nextPart.set(r, {\n      nextPart: /* @__PURE__ */ new Map(),\n      validators: []\n    }), n = n.nextPart.get(r);\n  }), n;\n}\nfunction OM(t) {\n  return t.isThemeGetter;\n}\nfunction gM(t, e) {\n  return e ? t.map(([n, r]) => {\n    const i = r.map((s) => typeof s == \"string\" ? e + s : typeof s == \"object\" ? Object.fromEntries(Object.entries(s).map(([o, a]) => [e + o, a])) : s);\n    return [n, i];\n  }) : t;\n}\nfunction mM(t) {\n  if (t < 1)\n    return {\n      get: () => {\n      },\n      set: () => {\n      }\n    };\n  let e = 0, n = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Map();\n  function i(s, o) {\n    n.set(s, o), e++, e > t && (e = 0, r = n, n = /* @__PURE__ */ new Map());\n  }\n  return {\n    get(s) {\n      let o = n.get(s);\n      if (o !== void 0)\n        return o;\n      if ((o = r.get(s)) !== void 0)\n        return i(s, o), o;\n    },\n    set(s, o) {\n      n.has(s) ? n.set(s, o) : i(s, o);\n    }\n  };\n}\nconst TP = \"!\";\nfunction bM(t) {\n  const e = t.separator, n = e.length === 1, r = e[0], i = e.length;\n  return function(o) {\n    const a = [];\n    let l = 0, c = 0, u;\n    for (let O = 0; O < o.length; O++) {\n      let m = o[O];\n      if (l === 0) {\n        if (m === r && (n || o.slice(O, O + i) === e)) {\n          a.push(o.slice(c, O)), c = O + i;\n          continue;\n        }\n        if (m === \"/\") {\n          u = O;\n          continue;\n        }\n      }\n      m === \"[\" ? l++ : m === \"]\" && l--;\n    }\n    const d = a.length === 0 ? o : o.substring(c), f = d.startsWith(TP), h = f ? d.substring(1) : d, p = u && u > c ? u - c : void 0;\n    return {\n      modifiers: a,\n      hasImportantModifier: f,\n      baseClassName: h,\n      maybePostfixModifierPosition: p\n    };\n  };\n}\nfunction vM(t) {\n  if (t.length <= 1)\n    return t;\n  const e = [];\n  let n = [];\n  return t.forEach((r) => {\n    r[0] === \"[\" ? (e.push(...n.sort(), r), n = []) : n.push(r);\n  }), e.push(...n.sort()), e;\n}\nfunction yM(t) {\n  return {\n    cache: mM(t.cacheSize),\n    splitModifiers: bM(t),\n    ...fM(t)\n  };\n}\nconst SM = /\\s+/;\nfunction wM(t, e) {\n  const {\n    splitModifiers: n,\n    getClassGroupId: r,\n    getConflictingClassGroupIds: i\n  } = e, s = /* @__PURE__ */ new Set();\n  return t.trim().split(SM).map((o) => {\n    const {\n      modifiers: a,\n      hasImportantModifier: l,\n      baseClassName: c,\n      maybePostfixModifierPosition: u\n    } = n(o);\n    let d = r(u ? c.substring(0, u) : c), f = !!u;\n    if (!d) {\n      if (!u)\n        return {\n          isTailwindClass: !1,\n          originalClassName: o\n        };\n      if (d = r(c), !d)\n        return {\n          isTailwindClass: !1,\n          originalClassName: o\n        };\n      f = !1;\n    }\n    const h = vM(a).join(\":\");\n    return {\n      isTailwindClass: !0,\n      modifierId: l ? h + TP : h,\n      classGroupId: d,\n      originalClassName: o,\n      hasPostfixModifier: f\n    };\n  }).reverse().filter((o) => {\n    if (!o.isTailwindClass)\n      return !0;\n    const {\n      modifierId: a,\n      classGroupId: l,\n      hasPostfixModifier: c\n    } = o, u = a + l;\n    return s.has(u) ? !1 : (s.add(u), i(l, c).forEach((d) => s.add(a + d)), !0);\n  }).reverse().map((o) => o.originalClassName).join(\" \");\n}\nfunction kM() {\n  let t = 0, e, n, r = \"\";\n  for (; t < arguments.length; )\n    (e = arguments[t++]) && (n = EP(e)) && (r && (r += \" \"), r += n);\n  return r;\n}\nfunction EP(t) {\n  if (typeof t == \"string\")\n    return t;\n  let e, n = \"\";\n  for (let r = 0; r < t.length; r++)\n    t[r] && (e = EP(t[r])) && (n && (n += \" \"), n += e);\n  return n;\n}\nfunction I0(t, ...e) {\n  let n, r, i, s = o;\n  function o(l) {\n    const c = e.reduce((u, d) => d(u), t());\n    return n = yM(c), r = n.cache.get, i = n.cache.set, s = a, a(l);\n  }\n  function a(l) {\n    const c = r(l);\n    if (c)\n      return c;\n    const u = wM(l, n);\n    return i(l, u), u;\n  }\n  return function() {\n    return s(kM.apply(null, arguments));\n  };\n}\nfunction ut(t) {\n  const e = (n) => n[t] || [];\n  return e.isThemeGetter = !0, e;\n}\nconst $P = /^\\[(?:([a-z-]+):)?(.+)\\]$/i, xM = /^\\d+\\/\\d+$/, PM = /* @__PURE__ */ new Set([\"px\", \"full\", \"screen\"]), _M = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/, TM = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/, EM = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/, $M = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/, QM = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\nfunction zr(t) {\n  return Es(t) || PM.has(t) || xM.test(t);\n}\nfunction Pi(t) {\n  return aa(t, \"length\", IM);\n}\nfunction Es(t) {\n  return !!t && !Number.isNaN(Number(t));\n}\nfunction Bc(t) {\n  return aa(t, \"number\", Es);\n}\nfunction _a(t) {\n  return !!t && Number.isInteger(Number(t));\n}\nfunction CM(t) {\n  return t.endsWith(\"%\") && Es(t.slice(0, -1));\n}\nfunction Te(t) {\n  return $P.test(t);\n}\nfunction _i(t) {\n  return _M.test(t);\n}\nconst AM = /* @__PURE__ */ new Set([\"length\", \"size\", \"percentage\"]);\nfunction RM(t) {\n  return aa(t, AM, QP);\n}\nfunction NM(t) {\n  return aa(t, \"position\", QP);\n}\nconst DM = /* @__PURE__ */ new Set([\"image\", \"url\"]);\nfunction ZM(t) {\n  return aa(t, DM, MM);\n}\nfunction VM(t) {\n  return aa(t, \"\", WM);\n}\nfunction Ta() {\n  return !0;\n}\nfunction aa(t, e, n) {\n  const r = $P.exec(t);\n  return r ? r[1] ? typeof e == \"string\" ? r[1] === e : e.has(r[1]) : n(r[2]) : !1;\n}\nfunction IM(t) {\n  return TM.test(t) && !EM.test(t);\n}\nfunction QP() {\n  return !1;\n}\nfunction WM(t) {\n  return $M.test(t);\n}\nfunction MM(t) {\n  return QM.test(t);\n}\nfunction W0() {\n  const t = ut(\"colors\"), e = ut(\"spacing\"), n = ut(\"blur\"), r = ut(\"brightness\"), i = ut(\"borderColor\"), s = ut(\"borderRadius\"), o = ut(\"borderSpacing\"), a = ut(\"borderWidth\"), l = ut(\"contrast\"), c = ut(\"grayscale\"), u = ut(\"hueRotate\"), d = ut(\"invert\"), f = ut(\"gap\"), h = ut(\"gradientColorStops\"), p = ut(\"gradientColorStopPositions\"), O = ut(\"inset\"), m = ut(\"margin\"), y = ut(\"opacity\"), b = ut(\"padding\"), g = ut(\"saturate\"), v = ut(\"scale\"), S = ut(\"sepia\"), w = ut(\"skew\"), k = ut(\"space\"), _ = ut(\"translate\"), T = () => [\"auto\", \"contain\", \"none\"], C = () => [\"auto\", \"hidden\", \"clip\", \"visible\", \"scroll\"], A = () => [\"auto\", Te, e], Q = () => [Te, e], W = () => [\"\", zr, Pi], L = () => [\"auto\", Es, Te], re = () => [\"bottom\", \"center\", \"left\", \"left-bottom\", \"left-top\", \"right\", \"right-bottom\", \"right-top\", \"top\"], Y = () => [\"solid\", \"dashed\", \"dotted\", \"double\", \"none\"], K = () => [\"normal\", \"multiply\", \"screen\", \"overlay\", \"darken\", \"lighten\", \"color-dodge\", \"color-burn\", \"hard-light\", \"soft-light\", \"difference\", \"exclusion\", \"hue\", \"saturation\", \"color\", \"luminosity\"], B = () => [\"start\", \"end\", \"center\", \"between\", \"around\", \"evenly\", \"stretch\"], _e = () => [\"\", \"0\", Te], Ce = () => [\"auto\", \"avoid\", \"all\", \"avoid-page\", \"page\", \"left\", \"right\", \"column\"], ue = () => [Es, Bc], ge = () => [Es, Te];\n  return {\n    cacheSize: 500,\n    separator: \":\",\n    theme: {\n      colors: [Ta],\n      spacing: [zr, Pi],\n      blur: [\"none\", \"\", _i, Te],\n      brightness: ue(),\n      borderColor: [t],\n      borderRadius: [\"none\", \"\", \"full\", _i, Te],\n      borderSpacing: Q(),\n      borderWidth: W(),\n      contrast: ue(),\n      grayscale: _e(),\n      hueRotate: ge(),\n      invert: _e(),\n      gap: Q(),\n      gradientColorStops: [t],\n      gradientColorStopPositions: [CM, Pi],\n      inset: A(),\n      margin: A(),\n      opacity: ue(),\n      padding: Q(),\n      saturate: ue(),\n      scale: ue(),\n      sepia: _e(),\n      skew: ge(),\n      space: Q(),\n      translate: Q()\n    },\n    classGroups: {\n      // Layout\n      /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */\n      aspect: [{\n        aspect: [\"auto\", \"square\", \"video\", Te]\n      }],\n      /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       */\n      container: [\"container\"],\n      /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */\n      columns: [{\n        columns: [_i]\n      }],\n      /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */\n      \"break-after\": [{\n        \"break-after\": Ce()\n      }],\n      /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */\n      \"break-before\": [{\n        \"break-before\": Ce()\n      }],\n      /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */\n      \"break-inside\": [{\n        \"break-inside\": [\"auto\", \"avoid\", \"avoid-page\", \"avoid-column\"]\n      }],\n      /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */\n      \"box-decoration\": [{\n        \"box-decoration\": [\"slice\", \"clone\"]\n      }],\n      /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */\n      box: [{\n        box: [\"border\", \"content\"]\n      }],\n      /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */\n      display: [\"block\", \"inline-block\", \"inline\", \"flex\", \"inline-flex\", \"table\", \"inline-table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row-group\", \"table-row\", \"flow-root\", \"grid\", \"inline-grid\", \"contents\", \"list-item\", \"hidden\"],\n      /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */\n      float: [{\n        float: [\"right\", \"left\", \"none\", \"start\", \"end\"]\n      }],\n      /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */\n      clear: [{\n        clear: [\"left\", \"right\", \"both\", \"none\", \"start\", \"end\"]\n      }],\n      /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */\n      isolation: [\"isolate\", \"isolation-auto\"],\n      /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */\n      \"object-fit\": [{\n        object: [\"contain\", \"cover\", \"fill\", \"none\", \"scale-down\"]\n      }],\n      /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */\n      \"object-position\": [{\n        object: [...re(), Te]\n      }],\n      /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      overflow: [{\n        overflow: C()\n      }],\n      /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      \"overflow-x\": [{\n        \"overflow-x\": C()\n      }],\n      /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      \"overflow-y\": [{\n        \"overflow-y\": C()\n      }],\n      /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      overscroll: [{\n        overscroll: T()\n      }],\n      /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      \"overscroll-x\": [{\n        \"overscroll-x\": T()\n      }],\n      /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      \"overscroll-y\": [{\n        \"overscroll-y\": T()\n      }],\n      /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */\n      position: [\"static\", \"fixed\", \"absolute\", \"relative\", \"sticky\"],\n      /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      inset: [{\n        inset: [O]\n      }],\n      /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      \"inset-x\": [{\n        \"inset-x\": [O]\n      }],\n      /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      \"inset-y\": [{\n        \"inset-y\": [O]\n      }],\n      /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      start: [{\n        start: [O]\n      }],\n      /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      end: [{\n        end: [O]\n      }],\n      /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      top: [{\n        top: [O]\n      }],\n      /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      right: [{\n        right: [O]\n      }],\n      /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      bottom: [{\n        bottom: [O]\n      }],\n      /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      left: [{\n        left: [O]\n      }],\n      /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */\n      visibility: [\"visible\", \"invisible\", \"collapse\"],\n      /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */\n      z: [{\n        z: [\"auto\", _a, Te]\n      }],\n      // Flexbox and Grid\n      /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */\n      basis: [{\n        basis: A()\n      }],\n      /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */\n      \"flex-direction\": [{\n        flex: [\"row\", \"row-reverse\", \"col\", \"col-reverse\"]\n      }],\n      /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */\n      \"flex-wrap\": [{\n        flex: [\"wrap\", \"wrap-reverse\", \"nowrap\"]\n      }],\n      /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */\n      flex: [{\n        flex: [\"1\", \"auto\", \"initial\", \"none\", Te]\n      }],\n      /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */\n      grow: [{\n        grow: _e()\n      }],\n      /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */\n      shrink: [{\n        shrink: _e()\n      }],\n      /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */\n      order: [{\n        order: [\"first\", \"last\", \"none\", _a, Te]\n      }],\n      /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */\n      \"grid-cols\": [{\n        \"grid-cols\": [Ta]\n      }],\n      /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-start-end\": [{\n        col: [\"auto\", {\n          span: [\"full\", _a, Te]\n        }, Te]\n      }],\n      /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-start\": [{\n        \"col-start\": L()\n      }],\n      /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-end\": [{\n        \"col-end\": L()\n      }],\n      /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */\n      \"grid-rows\": [{\n        \"grid-rows\": [Ta]\n      }],\n      /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-start-end\": [{\n        row: [\"auto\", {\n          span: [_a, Te]\n        }, Te]\n      }],\n      /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-start\": [{\n        \"row-start\": L()\n      }],\n      /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-end\": [{\n        \"row-end\": L()\n      }],\n      /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */\n      \"grid-flow\": [{\n        \"grid-flow\": [\"row\", \"col\", \"dense\", \"row-dense\", \"col-dense\"]\n      }],\n      /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */\n      \"auto-cols\": [{\n        \"auto-cols\": [\"auto\", \"min\", \"max\", \"fr\", Te]\n      }],\n      /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */\n      \"auto-rows\": [{\n        \"auto-rows\": [\"auto\", \"min\", \"max\", \"fr\", Te]\n      }],\n      /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */\n      gap: [{\n        gap: [f]\n      }],\n      /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */\n      \"gap-x\": [{\n        \"gap-x\": [f]\n      }],\n      /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */\n      \"gap-y\": [{\n        \"gap-y\": [f]\n      }],\n      /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */\n      \"justify-content\": [{\n        justify: [\"normal\", ...B()]\n      }],\n      /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */\n      \"justify-items\": [{\n        \"justify-items\": [\"start\", \"end\", \"center\", \"stretch\"]\n      }],\n      /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */\n      \"justify-self\": [{\n        \"justify-self\": [\"auto\", \"start\", \"end\", \"center\", \"stretch\"]\n      }],\n      /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */\n      \"align-content\": [{\n        content: [\"normal\", ...B(), \"baseline\"]\n      }],\n      /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */\n      \"align-items\": [{\n        items: [\"start\", \"end\", \"center\", \"baseline\", \"stretch\"]\n      }],\n      /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */\n      \"align-self\": [{\n        self: [\"auto\", \"start\", \"end\", \"center\", \"stretch\", \"baseline\"]\n      }],\n      /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */\n      \"place-content\": [{\n        \"place-content\": [...B(), \"baseline\"]\n      }],\n      /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */\n      \"place-items\": [{\n        \"place-items\": [\"start\", \"end\", \"center\", \"baseline\", \"stretch\"]\n      }],\n      /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */\n      \"place-self\": [{\n        \"place-self\": [\"auto\", \"start\", \"end\", \"center\", \"stretch\"]\n      }],\n      // Spacing\n      /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */\n      p: [{\n        p: [b]\n      }],\n      /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */\n      px: [{\n        px: [b]\n      }],\n      /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */\n      py: [{\n        py: [b]\n      }],\n      /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */\n      ps: [{\n        ps: [b]\n      }],\n      /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pe: [{\n        pe: [b]\n      }],\n      /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pt: [{\n        pt: [b]\n      }],\n      /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pr: [{\n        pr: [b]\n      }],\n      /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pb: [{\n        pb: [b]\n      }],\n      /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pl: [{\n        pl: [b]\n      }],\n      /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */\n      m: [{\n        m: [m]\n      }],\n      /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mx: [{\n        mx: [m]\n      }],\n      /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */\n      my: [{\n        my: [m]\n      }],\n      /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ms: [{\n        ms: [m]\n      }],\n      /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */\n      me: [{\n        me: [m]\n      }],\n      /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mt: [{\n        mt: [m]\n      }],\n      /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mr: [{\n        mr: [m]\n      }],\n      /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mb: [{\n        mb: [m]\n      }],\n      /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ml: [{\n        ml: [m]\n      }],\n      /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/space\n       */\n      \"space-x\": [{\n        \"space-x\": [k]\n      }],\n      /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/space\n       */\n      \"space-x-reverse\": [\"space-x-reverse\"],\n      /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/space\n       */\n      \"space-y\": [{\n        \"space-y\": [k]\n      }],\n      /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/space\n       */\n      \"space-y-reverse\": [\"space-y-reverse\"],\n      // Sizing\n      /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */\n      w: [{\n        w: [\"auto\", \"min\", \"max\", \"fit\", \"svw\", \"lvw\", \"dvw\", Te, e]\n      }],\n      /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */\n      \"min-w\": [{\n        \"min-w\": [Te, e, \"min\", \"max\", \"fit\"]\n      }],\n      /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */\n      \"max-w\": [{\n        \"max-w\": [Te, e, \"none\", \"full\", \"min\", \"max\", \"fit\", \"prose\", {\n          screen: [_i]\n        }, _i]\n      }],\n      /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */\n      h: [{\n        h: [Te, e, \"auto\", \"min\", \"max\", \"fit\", \"svh\", \"lvh\", \"dvh\"]\n      }],\n      /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */\n      \"min-h\": [{\n        \"min-h\": [Te, e, \"min\", \"max\", \"fit\", \"svh\", \"lvh\", \"dvh\"]\n      }],\n      /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */\n      \"max-h\": [{\n        \"max-h\": [Te, e, \"min\", \"max\", \"fit\", \"svh\", \"lvh\", \"dvh\"]\n      }],\n      /**\n       * Size\n       * @see https://tailwindcss.com/docs/size\n       */\n      size: [{\n        size: [Te, e, \"auto\", \"min\", \"max\", \"fit\"]\n      }],\n      // Typography\n      /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */\n      \"font-size\": [{\n        text: [\"base\", _i, Pi]\n      }],\n      /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */\n      \"font-smoothing\": [\"antialiased\", \"subpixel-antialiased\"],\n      /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */\n      \"font-style\": [\"italic\", \"not-italic\"],\n      /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */\n      \"font-weight\": [{\n        font: [\"thin\", \"extralight\", \"light\", \"normal\", \"medium\", \"semibold\", \"bold\", \"extrabold\", \"black\", Bc]\n      }],\n      /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */\n      \"font-family\": [{\n        font: [Ta]\n      }],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-normal\": [\"normal-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-ordinal\": [\"ordinal\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-slashed-zero\": [\"slashed-zero\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-figure\": [\"lining-nums\", \"oldstyle-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-spacing\": [\"proportional-nums\", \"tabular-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-fraction\": [\"diagonal-fractions\", \"stacked-fractons\"],\n      /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */\n      tracking: [{\n        tracking: [\"tighter\", \"tight\", \"normal\", \"wide\", \"wider\", \"widest\", Te]\n      }],\n      /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */\n      \"line-clamp\": [{\n        \"line-clamp\": [\"none\", Es, Bc]\n      }],\n      /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */\n      leading: [{\n        leading: [\"none\", \"tight\", \"snug\", \"normal\", \"relaxed\", \"loose\", zr, Te]\n      }],\n      /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */\n      \"list-image\": [{\n        \"list-image\": [\"none\", Te]\n      }],\n      /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */\n      \"list-style-type\": [{\n        list: [\"none\", \"disc\", \"decimal\", Te]\n      }],\n      /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */\n      \"list-style-position\": [{\n        list: [\"inside\", \"outside\"]\n      }],\n      /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/placeholder-color\n       */\n      \"placeholder-color\": [{\n        placeholder: [t]\n      }],\n      /**\n       * Placeholder Opacity\n       * @see https://tailwindcss.com/docs/placeholder-opacity\n       */\n      \"placeholder-opacity\": [{\n        \"placeholder-opacity\": [y]\n      }],\n      /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */\n      \"text-alignment\": [{\n        text: [\"left\", \"center\", \"right\", \"justify\", \"start\", \"end\"]\n      }],\n      /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */\n      \"text-color\": [{\n        text: [t]\n      }],\n      /**\n       * Text Opacity\n       * @see https://tailwindcss.com/docs/text-opacity\n       */\n      \"text-opacity\": [{\n        \"text-opacity\": [y]\n      }],\n      /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */\n      \"text-decoration\": [\"underline\", \"overline\", \"line-through\", \"no-underline\"],\n      /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */\n      \"text-decoration-style\": [{\n        decoration: [...Y(), \"wavy\"]\n      }],\n      /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */\n      \"text-decoration-thickness\": [{\n        decoration: [\"auto\", \"from-font\", zr, Pi]\n      }],\n      /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */\n      \"underline-offset\": [{\n        \"underline-offset\": [\"auto\", zr, Te]\n      }],\n      /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */\n      \"text-decoration-color\": [{\n        decoration: [t]\n      }],\n      /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */\n      \"text-transform\": [\"uppercase\", \"lowercase\", \"capitalize\", \"normal-case\"],\n      /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */\n      \"text-overflow\": [\"truncate\", \"text-ellipsis\", \"text-clip\"],\n      /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */\n      \"text-wrap\": [{\n        text: [\"wrap\", \"nowrap\", \"balance\", \"pretty\"]\n      }],\n      /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */\n      indent: [{\n        indent: Q()\n      }],\n      /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */\n      \"vertical-align\": [{\n        align: [\"baseline\", \"top\", \"middle\", \"bottom\", \"text-top\", \"text-bottom\", \"sub\", \"super\", Te]\n      }],\n      /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */\n      whitespace: [{\n        whitespace: [\"normal\", \"nowrap\", \"pre\", \"pre-line\", \"pre-wrap\", \"break-spaces\"]\n      }],\n      /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */\n      break: [{\n        break: [\"normal\", \"words\", \"all\", \"keep\"]\n      }],\n      /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */\n      hyphens: [{\n        hyphens: [\"none\", \"manual\", \"auto\"]\n      }],\n      /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */\n      content: [{\n        content: [\"none\", Te]\n      }],\n      // Backgrounds\n      /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */\n      \"bg-attachment\": [{\n        bg: [\"fixed\", \"local\", \"scroll\"]\n      }],\n      /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */\n      \"bg-clip\": [{\n        \"bg-clip\": [\"border\", \"padding\", \"content\", \"text\"]\n      }],\n      /**\n       * Background Opacity\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/background-opacity\n       */\n      \"bg-opacity\": [{\n        \"bg-opacity\": [y]\n      }],\n      /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */\n      \"bg-origin\": [{\n        \"bg-origin\": [\"border\", \"padding\", \"content\"]\n      }],\n      /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */\n      \"bg-position\": [{\n        bg: [...re(), NM]\n      }],\n      /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */\n      \"bg-repeat\": [{\n        bg: [\"no-repeat\", {\n          repeat: [\"\", \"x\", \"y\", \"round\", \"space\"]\n        }]\n      }],\n      /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */\n      \"bg-size\": [{\n        bg: [\"auto\", \"cover\", \"contain\", RM]\n      }],\n      /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */\n      \"bg-image\": [{\n        bg: [\"none\", {\n          \"gradient-to\": [\"t\", \"tr\", \"r\", \"br\", \"b\", \"bl\", \"l\", \"tl\"]\n        }, ZM]\n      }],\n      /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */\n      \"bg-color\": [{\n        bg: [t]\n      }],\n      /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-from-pos\": [{\n        from: [p]\n      }],\n      /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-via-pos\": [{\n        via: [p]\n      }],\n      /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-to-pos\": [{\n        to: [p]\n      }],\n      /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-from\": [{\n        from: [h]\n      }],\n      /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-via\": [{\n        via: [h]\n      }],\n      /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-to\": [{\n        to: [h]\n      }],\n      // Borders\n      /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      rounded: [{\n        rounded: [s]\n      }],\n      /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-s\": [{\n        \"rounded-s\": [s]\n      }],\n      /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-e\": [{\n        \"rounded-e\": [s]\n      }],\n      /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-t\": [{\n        \"rounded-t\": [s]\n      }],\n      /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-r\": [{\n        \"rounded-r\": [s]\n      }],\n      /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-b\": [{\n        \"rounded-b\": [s]\n      }],\n      /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-l\": [{\n        \"rounded-l\": [s]\n      }],\n      /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-ss\": [{\n        \"rounded-ss\": [s]\n      }],\n      /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-se\": [{\n        \"rounded-se\": [s]\n      }],\n      /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-ee\": [{\n        \"rounded-ee\": [s]\n      }],\n      /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-es\": [{\n        \"rounded-es\": [s]\n      }],\n      /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-tl\": [{\n        \"rounded-tl\": [s]\n      }],\n      /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-tr\": [{\n        \"rounded-tr\": [s]\n      }],\n      /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-br\": [{\n        \"rounded-br\": [s]\n      }],\n      /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-bl\": [{\n        \"rounded-bl\": [s]\n      }],\n      /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w\": [{\n        border: [a]\n      }],\n      /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-x\": [{\n        \"border-x\": [a]\n      }],\n      /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-y\": [{\n        \"border-y\": [a]\n      }],\n      /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-s\": [{\n        \"border-s\": [a]\n      }],\n      /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-e\": [{\n        \"border-e\": [a]\n      }],\n      /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-t\": [{\n        \"border-t\": [a]\n      }],\n      /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-r\": [{\n        \"border-r\": [a]\n      }],\n      /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-b\": [{\n        \"border-b\": [a]\n      }],\n      /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-l\": [{\n        \"border-l\": [a]\n      }],\n      /**\n       * Border Opacity\n       * @see https://tailwindcss.com/docs/border-opacity\n       */\n      \"border-opacity\": [{\n        \"border-opacity\": [y]\n      }],\n      /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */\n      \"border-style\": [{\n        border: [...Y(), \"hidden\"]\n      }],\n      /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      \"divide-x\": [{\n        \"divide-x\": [a]\n      }],\n      /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      \"divide-x-reverse\": [\"divide-x-reverse\"],\n      /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      \"divide-y\": [{\n        \"divide-y\": [a]\n      }],\n      /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      \"divide-y-reverse\": [\"divide-y-reverse\"],\n      /**\n       * Divide Opacity\n       * @see https://tailwindcss.com/docs/divide-opacity\n       */\n      \"divide-opacity\": [{\n        \"divide-opacity\": [y]\n      }],\n      /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/divide-style\n       */\n      \"divide-style\": [{\n        divide: Y()\n      }],\n      /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color\": [{\n        border: [i]\n      }],\n      /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-x\": [{\n        \"border-x\": [i]\n      }],\n      /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-y\": [{\n        \"border-y\": [i]\n      }],\n      /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-t\": [{\n        \"border-t\": [i]\n      }],\n      /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-r\": [{\n        \"border-r\": [i]\n      }],\n      /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-b\": [{\n        \"border-b\": [i]\n      }],\n      /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-l\": [{\n        \"border-l\": [i]\n      }],\n      /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */\n      \"divide-color\": [{\n        divide: [i]\n      }],\n      /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */\n      \"outline-style\": [{\n        outline: [\"\", ...Y()]\n      }],\n      /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */\n      \"outline-offset\": [{\n        \"outline-offset\": [zr, Te]\n      }],\n      /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */\n      \"outline-w\": [{\n        outline: [zr, Pi]\n      }],\n      /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */\n      \"outline-color\": [{\n        outline: [t]\n      }],\n      /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/ring-width\n       */\n      \"ring-w\": [{\n        ring: W()\n      }],\n      /**\n       * Ring Width Inset\n       * @see https://tailwindcss.com/docs/ring-width\n       */\n      \"ring-w-inset\": [\"ring-inset\"],\n      /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/ring-color\n       */\n      \"ring-color\": [{\n        ring: [t]\n      }],\n      /**\n       * Ring Opacity\n       * @see https://tailwindcss.com/docs/ring-opacity\n       */\n      \"ring-opacity\": [{\n        \"ring-opacity\": [y]\n      }],\n      /**\n       * Ring Offset Width\n       * @see https://tailwindcss.com/docs/ring-offset-width\n       */\n      \"ring-offset-w\": [{\n        \"ring-offset\": [zr, Pi]\n      }],\n      /**\n       * Ring Offset Color\n       * @see https://tailwindcss.com/docs/ring-offset-color\n       */\n      \"ring-offset-color\": [{\n        \"ring-offset\": [t]\n      }],\n      // Effects\n      /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */\n      shadow: [{\n        shadow: [\"\", \"inner\", \"none\", _i, VM]\n      }],\n      /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow-color\n       */\n      \"shadow-color\": [{\n        shadow: [Ta]\n      }],\n      /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */\n      opacity: [{\n        opacity: [y]\n      }],\n      /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */\n      \"mix-blend\": [{\n        \"mix-blend\": [...K(), \"plus-lighter\", \"plus-darker\"]\n      }],\n      /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */\n      \"bg-blend\": [{\n        \"bg-blend\": K()\n      }],\n      // Filters\n      /**\n       * Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/filter\n       */\n      filter: [{\n        filter: [\"\", \"none\"]\n      }],\n      /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */\n      blur: [{\n        blur: [n]\n      }],\n      /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */\n      brightness: [{\n        brightness: [r]\n      }],\n      /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */\n      contrast: [{\n        contrast: [l]\n      }],\n      /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */\n      \"drop-shadow\": [{\n        \"drop-shadow\": [\"\", \"none\", _i, Te]\n      }],\n      /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */\n      grayscale: [{\n        grayscale: [c]\n      }],\n      /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */\n      \"hue-rotate\": [{\n        \"hue-rotate\": [u]\n      }],\n      /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */\n      invert: [{\n        invert: [d]\n      }],\n      /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */\n      saturate: [{\n        saturate: [g]\n      }],\n      /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */\n      sepia: [{\n        sepia: [S]\n      }],\n      /**\n       * Backdrop Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */\n      \"backdrop-filter\": [{\n        \"backdrop-filter\": [\"\", \"none\"]\n      }],\n      /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */\n      \"backdrop-blur\": [{\n        \"backdrop-blur\": [n]\n      }],\n      /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */\n      \"backdrop-brightness\": [{\n        \"backdrop-brightness\": [r]\n      }],\n      /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */\n      \"backdrop-contrast\": [{\n        \"backdrop-contrast\": [l]\n      }],\n      /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */\n      \"backdrop-grayscale\": [{\n        \"backdrop-grayscale\": [c]\n      }],\n      /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */\n      \"backdrop-hue-rotate\": [{\n        \"backdrop-hue-rotate\": [u]\n      }],\n      /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */\n      \"backdrop-invert\": [{\n        \"backdrop-invert\": [d]\n      }],\n      /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */\n      \"backdrop-opacity\": [{\n        \"backdrop-opacity\": [y]\n      }],\n      /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */\n      \"backdrop-saturate\": [{\n        \"backdrop-saturate\": [g]\n      }],\n      /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */\n      \"backdrop-sepia\": [{\n        \"backdrop-sepia\": [S]\n      }],\n      // Tables\n      /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */\n      \"border-collapse\": [{\n        border: [\"collapse\", \"separate\"]\n      }],\n      /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing\": [{\n        \"border-spacing\": [o]\n      }],\n      /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing-x\": [{\n        \"border-spacing-x\": [o]\n      }],\n      /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing-y\": [{\n        \"border-spacing-y\": [o]\n      }],\n      /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */\n      \"table-layout\": [{\n        table: [\"auto\", \"fixed\"]\n      }],\n      /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */\n      caption: [{\n        caption: [\"top\", \"bottom\"]\n      }],\n      // Transitions and Animation\n      /**\n       * Tranisition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */\n      transition: [{\n        transition: [\"none\", \"all\", \"\", \"colors\", \"opacity\", \"shadow\", \"transform\", Te]\n      }],\n      /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */\n      duration: [{\n        duration: ge()\n      }],\n      /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */\n      ease: [{\n        ease: [\"linear\", \"in\", \"out\", \"in-out\", Te]\n      }],\n      /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */\n      delay: [{\n        delay: ge()\n      }],\n      /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */\n      animate: [{\n        animate: [\"none\", \"spin\", \"ping\", \"pulse\", \"bounce\", Te]\n      }],\n      // Transforms\n      /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */\n      transform: [{\n        transform: [\"\", \"gpu\", \"none\"]\n      }],\n      /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */\n      scale: [{\n        scale: [v]\n      }],\n      /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-x\": [{\n        \"scale-x\": [v]\n      }],\n      /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-y\": [{\n        \"scale-y\": [v]\n      }],\n      /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      rotate: [{\n        rotate: [_a, Te]\n      }],\n      /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-x\": [{\n        \"translate-x\": [_]\n      }],\n      /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-y\": [{\n        \"translate-y\": [_]\n      }],\n      /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */\n      \"skew-x\": [{\n        \"skew-x\": [w]\n      }],\n      /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */\n      \"skew-y\": [{\n        \"skew-y\": [w]\n      }],\n      /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */\n      \"transform-origin\": [{\n        origin: [\"center\", \"top\", \"top-right\", \"right\", \"bottom-right\", \"bottom\", \"bottom-left\", \"left\", \"top-left\", Te]\n      }],\n      // Interactivity\n      /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */\n      accent: [{\n        accent: [\"auto\", t]\n      }],\n      /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */\n      appearance: [{\n        appearance: [\"none\", \"auto\"]\n      }],\n      /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */\n      cursor: [{\n        cursor: [\"auto\", \"default\", \"pointer\", \"wait\", \"text\", \"move\", \"help\", \"not-allowed\", \"none\", \"context-menu\", \"progress\", \"cell\", \"crosshair\", \"vertical-text\", \"alias\", \"copy\", \"no-drop\", \"grab\", \"grabbing\", \"all-scroll\", \"col-resize\", \"row-resize\", \"n-resize\", \"e-resize\", \"s-resize\", \"w-resize\", \"ne-resize\", \"nw-resize\", \"se-resize\", \"sw-resize\", \"ew-resize\", \"ns-resize\", \"nesw-resize\", \"nwse-resize\", \"zoom-in\", \"zoom-out\", Te]\n      }],\n      /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */\n      \"caret-color\": [{\n        caret: [t]\n      }],\n      /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */\n      \"pointer-events\": [{\n        \"pointer-events\": [\"none\", \"auto\"]\n      }],\n      /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */\n      resize: [{\n        resize: [\"none\", \"y\", \"x\", \"\"]\n      }],\n      /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */\n      \"scroll-behavior\": [{\n        scroll: [\"auto\", \"smooth\"]\n      }],\n      /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-m\": [{\n        \"scroll-m\": Q()\n      }],\n      /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mx\": [{\n        \"scroll-mx\": Q()\n      }],\n      /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-my\": [{\n        \"scroll-my\": Q()\n      }],\n      /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-ms\": [{\n        \"scroll-ms\": Q()\n      }],\n      /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-me\": [{\n        \"scroll-me\": Q()\n      }],\n      /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mt\": [{\n        \"scroll-mt\": Q()\n      }],\n      /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mr\": [{\n        \"scroll-mr\": Q()\n      }],\n      /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mb\": [{\n        \"scroll-mb\": Q()\n      }],\n      /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-ml\": [{\n        \"scroll-ml\": Q()\n      }],\n      /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-p\": [{\n        \"scroll-p\": Q()\n      }],\n      /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-px\": [{\n        \"scroll-px\": Q()\n      }],\n      /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-py\": [{\n        \"scroll-py\": Q()\n      }],\n      /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-ps\": [{\n        \"scroll-ps\": Q()\n      }],\n      /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pe\": [{\n        \"scroll-pe\": Q()\n      }],\n      /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pt\": [{\n        \"scroll-pt\": Q()\n      }],\n      /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pr\": [{\n        \"scroll-pr\": Q()\n      }],\n      /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pb\": [{\n        \"scroll-pb\": Q()\n      }],\n      /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pl\": [{\n        \"scroll-pl\": Q()\n      }],\n      /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */\n      \"snap-align\": [{\n        snap: [\"start\", \"end\", \"center\", \"align-none\"]\n      }],\n      /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */\n      \"snap-stop\": [{\n        snap: [\"normal\", \"always\"]\n      }],\n      /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      \"snap-type\": [{\n        snap: [\"none\", \"x\", \"y\", \"both\"]\n      }],\n      /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      \"snap-strictness\": [{\n        snap: [\"mandatory\", \"proximity\"]\n      }],\n      /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      touch: [{\n        touch: [\"auto\", \"none\", \"manipulation\"]\n      }],\n      /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-x\": [{\n        \"touch-pan\": [\"x\", \"left\", \"right\"]\n      }],\n      /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-y\": [{\n        \"touch-pan\": [\"y\", \"up\", \"down\"]\n      }],\n      /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-pz\": [\"touch-pinch-zoom\"],\n      /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */\n      select: [{\n        select: [\"none\", \"text\", \"all\", \"auto\"]\n      }],\n      /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */\n      \"will-change\": [{\n        \"will-change\": [\"auto\", \"scroll\", \"contents\", \"transform\", Te]\n      }],\n      // SVG\n      /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */\n      fill: [{\n        fill: [t, \"none\"]\n      }],\n      /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */\n      \"stroke-w\": [{\n        stroke: [zr, Pi, Bc]\n      }],\n      /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */\n      stroke: [{\n        stroke: [t, \"none\"]\n      }],\n      // Accessibility\n      /**\n       * Screen Readers\n       * @see https://tailwindcss.com/docs/screen-readers\n       */\n      sr: [\"sr-only\", \"not-sr-only\"],\n      /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */\n      \"forced-color-adjust\": [{\n        \"forced-color-adjust\": [\"auto\", \"none\"]\n      }]\n    },\n    conflictingClassGroups: {\n      overflow: [\"overflow-x\", \"overflow-y\"],\n      overscroll: [\"overscroll-x\", \"overscroll-y\"],\n      inset: [\"inset-x\", \"inset-y\", \"start\", \"end\", \"top\", \"right\", \"bottom\", \"left\"],\n      \"inset-x\": [\"right\", \"left\"],\n      \"inset-y\": [\"top\", \"bottom\"],\n      flex: [\"basis\", \"grow\", \"shrink\"],\n      gap: [\"gap-x\", \"gap-y\"],\n      p: [\"px\", \"py\", \"ps\", \"pe\", \"pt\", \"pr\", \"pb\", \"pl\"],\n      px: [\"pr\", \"pl\"],\n      py: [\"pt\", \"pb\"],\n      m: [\"mx\", \"my\", \"ms\", \"me\", \"mt\", \"mr\", \"mb\", \"ml\"],\n      mx: [\"mr\", \"ml\"],\n      my: [\"mt\", \"mb\"],\n      size: [\"w\", \"h\"],\n      \"font-size\": [\"leading\"],\n      \"fvn-normal\": [\"fvn-ordinal\", \"fvn-slashed-zero\", \"fvn-figure\", \"fvn-spacing\", \"fvn-fraction\"],\n      \"fvn-ordinal\": [\"fvn-normal\"],\n      \"fvn-slashed-zero\": [\"fvn-normal\"],\n      \"fvn-figure\": [\"fvn-normal\"],\n      \"fvn-spacing\": [\"fvn-normal\"],\n      \"fvn-fraction\": [\"fvn-normal\"],\n      \"line-clamp\": [\"display\", \"overflow\"],\n      rounded: [\"rounded-s\", \"rounded-e\", \"rounded-t\", \"rounded-r\", \"rounded-b\", \"rounded-l\", \"rounded-ss\", \"rounded-se\", \"rounded-ee\", \"rounded-es\", \"rounded-tl\", \"rounded-tr\", \"rounded-br\", \"rounded-bl\"],\n      \"rounded-s\": [\"rounded-ss\", \"rounded-es\"],\n      \"rounded-e\": [\"rounded-se\", \"rounded-ee\"],\n      \"rounded-t\": [\"rounded-tl\", \"rounded-tr\"],\n      \"rounded-r\": [\"rounded-tr\", \"rounded-br\"],\n      \"rounded-b\": [\"rounded-br\", \"rounded-bl\"],\n      \"rounded-l\": [\"rounded-tl\", \"rounded-bl\"],\n      \"border-spacing\": [\"border-spacing-x\", \"border-spacing-y\"],\n      \"border-w\": [\"border-w-s\", \"border-w-e\", \"border-w-t\", \"border-w-r\", \"border-w-b\", \"border-w-l\"],\n      \"border-w-x\": [\"border-w-r\", \"border-w-l\"],\n      \"border-w-y\": [\"border-w-t\", \"border-w-b\"],\n      \"border-color\": [\"border-color-t\", \"border-color-r\", \"border-color-b\", \"border-color-l\"],\n      \"border-color-x\": [\"border-color-r\", \"border-color-l\"],\n      \"border-color-y\": [\"border-color-t\", \"border-color-b\"],\n      \"scroll-m\": [\"scroll-mx\", \"scroll-my\", \"scroll-ms\", \"scroll-me\", \"scroll-mt\", \"scroll-mr\", \"scroll-mb\", \"scroll-ml\"],\n      \"scroll-mx\": [\"scroll-mr\", \"scroll-ml\"],\n      \"scroll-my\": [\"scroll-mt\", \"scroll-mb\"],\n      \"scroll-p\": [\"scroll-px\", \"scroll-py\", \"scroll-ps\", \"scroll-pe\", \"scroll-pt\", \"scroll-pr\", \"scroll-pb\", \"scroll-pl\"],\n      \"scroll-px\": [\"scroll-pr\", \"scroll-pl\"],\n      \"scroll-py\": [\"scroll-pt\", \"scroll-pb\"],\n      touch: [\"touch-x\", \"touch-y\", \"touch-pz\"],\n      \"touch-x\": [\"touch\"],\n      \"touch-y\": [\"touch\"],\n      \"touch-pz\": [\"touch\"]\n    },\n    conflictingClassGroupModifiers: {\n      \"font-size\": [\"leading\"]\n    }\n  };\n}\nfunction XM(t, {\n  cacheSize: e,\n  prefix: n,\n  separator: r,\n  extend: i = {},\n  override: s = {}\n}) {\n  fu(t, \"cacheSize\", e), fu(t, \"prefix\", n), fu(t, \"separator\", r);\n  for (const o in s)\n    jM(t[o], s[o]);\n  for (const o in i)\n    BM(t[o], i[o]);\n  return t;\n}\nfunction fu(t, e, n) {\n  n !== void 0 && (t[e] = n);\n}\nfunction jM(t, e) {\n  if (e)\n    for (const n in e)\n      fu(t, n, e[n]);\n}\nfunction BM(t, e) {\n  if (e)\n    for (const n in e) {\n      const r = e[n];\n      r !== void 0 && (t[n] = (t[n] || []).concat(r));\n    }\n}\nfunction LM(t, ...e) {\n  return typeof t == \"function\" ? I0(W0, t, ...e) : I0(() => XM(W0(), t), ...e);\n}\nvar M0 = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction UM(t) {\n  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, \"default\") ? t.default : t;\n}\nvar CP = { exports: {} };\n(function(t) {\n  var e = typeof window < \"u\" ? window : typeof WorkerGlobalScope < \"u\" && self instanceof WorkerGlobalScope ? self : {};\n  /**\n   * Prism: Lightweight, robust, elegant syntax highlighting\n   *\n   * @license MIT <https://opensource.org/licenses/MIT>\n   * @author Lea Verou <https://lea.verou.me>\n   * @namespace\n   * @public\n   */\n  var n = function(r) {\n    var i = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i, s = 0, o = {}, a = {\n      /**\n       * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n       * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n       * additional languages or plugins yourself.\n       *\n       * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n       *\n       * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n       * empty Prism object into the global scope before loading the Prism script like this:\n       *\n       * ```js\n       * window.Prism = window.Prism || {};\n       * Prism.manual = true;\n       * // add a new <script> to load Prism's script\n       * ```\n       *\n       * @default false\n       * @type {boolean}\n       * @memberof Prism\n       * @public\n       */\n      manual: r.Prism && r.Prism.manual,\n      /**\n       * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n       * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n       * own worker, you don't want it to do this.\n       *\n       * By setting this value to `true`, Prism will not add its own listeners to the worker.\n       *\n       * You obviously have to change this value before Prism executes. To do this, you can add an\n       * empty Prism object into the global scope before loading the Prism script like this:\n       *\n       * ```js\n       * window.Prism = window.Prism || {};\n       * Prism.disableWorkerMessageHandler = true;\n       * // Load Prism's script\n       * ```\n       *\n       * @default false\n       * @type {boolean}\n       * @memberof Prism\n       * @public\n       */\n      disableWorkerMessageHandler: r.Prism && r.Prism.disableWorkerMessageHandler,\n      /**\n       * A namespace for utility methods.\n       *\n       * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n       * change or disappear at any time.\n       *\n       * @namespace\n       * @memberof Prism\n       */\n      util: {\n        encode: function b(g) {\n          return g instanceof l ? new l(g.type, b(g.content), g.alias) : Array.isArray(g) ? g.map(b) : g.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        /**\n         * Returns the name of the type of the given value.\n         *\n         * @param {any} o\n         * @returns {string}\n         * @example\n         * type(null)      === 'Null'\n         * type(undefined) === 'Undefined'\n         * type(123)       === 'Number'\n         * type('foo')     === 'String'\n         * type(true)      === 'Boolean'\n         * type([1, 2])    === 'Array'\n         * type({})        === 'Object'\n         * type(String)    === 'Function'\n         * type(/abc+/)    === 'RegExp'\n         */\n        type: function(b) {\n          return Object.prototype.toString.call(b).slice(8, -1);\n        },\n        /**\n         * Returns a unique number for the given object. Later calls will still return the same number.\n         *\n         * @param {Object} obj\n         * @returns {number}\n         */\n        objId: function(b) {\n          return b.__id || Object.defineProperty(b, \"__id\", { value: ++s }), b.__id;\n        },\n        /**\n         * Creates a deep clone of the given object.\n         *\n         * The main intended use of this function is to clone language definitions.\n         *\n         * @param {T} o\n         * @param {Record<number, any>} [visited]\n         * @returns {T}\n         * @template T\n         */\n        clone: function b(g, v) {\n          v = v || {};\n          var S, w;\n          switch (a.util.type(g)) {\n            case \"Object\":\n              if (w = a.util.objId(g), v[w])\n                return v[w];\n              S = /** @type {Record<string, any>} */\n              {}, v[w] = S;\n              for (var k in g)\n                g.hasOwnProperty(k) && (S[k] = b(g[k], v));\n              return (\n                /** @type {any} */\n                S\n              );\n            case \"Array\":\n              return w = a.util.objId(g), v[w] ? v[w] : (S = [], v[w] = S, g.forEach(function(_, T) {\n                S[T] = b(_, v);\n              }), /** @type {any} */\n              S);\n            default:\n              return g;\n          }\n        },\n        /**\n         * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n         *\n         * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n         *\n         * @param {Element} element\n         * @returns {string}\n         */\n        getLanguage: function(b) {\n          for (; b; ) {\n            var g = i.exec(b.className);\n            if (g)\n              return g[1].toLowerCase();\n            b = b.parentElement;\n          }\n          return \"none\";\n        },\n        /**\n         * Sets the Prism `language-xxxx` class of the given element.\n         *\n         * @param {Element} element\n         * @param {string} language\n         * @returns {void}\n         */\n        setLanguage: function(b, g) {\n          b.className = b.className.replace(RegExp(i, \"gi\"), \"\"), b.classList.add(\"language-\" + g);\n        },\n        /**\n         * Returns the script element that is currently executing.\n         *\n         * This does __not__ work for line script element.\n         *\n         * @returns {HTMLScriptElement | null}\n         */\n        currentScript: function() {\n          if (typeof document > \"u\")\n            return null;\n          if (\"currentScript\" in document)\n            return (\n              /** @type {any} */\n              document.currentScript\n            );\n          try {\n            throw new Error();\n          } catch (S) {\n            var b = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(S.stack) || [])[1];\n            if (b) {\n              var g = document.getElementsByTagName(\"script\");\n              for (var v in g)\n                if (g[v].src == b)\n                  return g[v];\n            }\n            return null;\n          }\n        },\n        /**\n         * Returns whether a given class is active for `element`.\n         *\n         * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n         * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n         * given class is just the given class with a `no-` prefix.\n         *\n         * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n         * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n         * ancestors have the given class or the negated version of it, then the default activation will be returned.\n         *\n         * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n         * version of it, the class is considered active.\n         *\n         * @param {Element} element\n         * @param {string} className\n         * @param {boolean} [defaultActivation=false]\n         * @returns {boolean}\n         */\n        isActive: function(b, g, v) {\n          for (var S = \"no-\" + g; b; ) {\n            var w = b.classList;\n            if (w.contains(g))\n              return !0;\n            if (w.contains(S))\n              return !1;\n            b = b.parentElement;\n          }\n          return !!v;\n        }\n      },\n      /**\n       * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n       *\n       * @namespace\n       * @memberof Prism\n       * @public\n       */\n      languages: {\n        /**\n         * The grammar for plain, unformatted text.\n         */\n        plain: o,\n        plaintext: o,\n        text: o,\n        txt: o,\n        /**\n         * Creates a deep copy of the language with the given id and appends the given tokens.\n         *\n         * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n         * will be overwritten at its original position.\n         *\n         * ## Best practices\n         *\n         * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n         * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n         * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n         *\n         * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n         * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n         *\n         * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n         * @param {Grammar} redef The new tokens to append.\n         * @returns {Grammar} The new language created.\n         * @public\n         * @example\n         * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n         *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n         *     // at its original position\n         *     'comment': { ... },\n         *     // CSS doesn't have a 'color' token, so this token will be appended\n         *     'color': /\\b(?:red|green|blue)\\b/\n         * });\n         */\n        extend: function(b, g) {\n          var v = a.util.clone(a.languages[b]);\n          for (var S in g)\n            v[S] = g[S];\n          return v;\n        },\n        /**\n         * Inserts tokens _before_ another token in a language definition or any other grammar.\n         *\n         * ## Usage\n         *\n         * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n         * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n         * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n         * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n         * this:\n         *\n         * ```js\n         * Prism.languages.markup.style = {\n         *     // token\n         * };\n         * ```\n         *\n         * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n         * before existing tokens. For the CSS example above, you would use it like this:\n         *\n         * ```js\n         * Prism.languages.insertBefore('markup', 'cdata', {\n         *     'style': {\n         *         // token\n         *     }\n         * });\n         * ```\n         *\n         * ## Special cases\n         *\n         * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n         * will be ignored.\n         *\n         * This behavior can be used to insert tokens after `before`:\n         *\n         * ```js\n         * Prism.languages.insertBefore('markup', 'comment', {\n         *     'comment': Prism.languages.markup.comment,\n         *     // tokens after 'comment'\n         * });\n         * ```\n         *\n         * ## Limitations\n         *\n         * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n         * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n         * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n         * deleting properties which is necessary to insert at arbitrary positions.\n         *\n         * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n         * Instead, it will create a new object and replace all references to the target object with the new one. This\n         * can be done without temporarily deleting properties, so the iteration order is well-defined.\n         *\n         * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n         * you hold the target object in a variable, then the value of the variable will not change.\n         *\n         * ```js\n         * var oldMarkup = Prism.languages.markup;\n         * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n         *\n         * assert(oldMarkup !== Prism.languages.markup);\n         * assert(newMarkup === Prism.languages.markup);\n         * ```\n         *\n         * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n         * object to be modified.\n         * @param {string} before The key to insert before.\n         * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n         * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n         * object to be modified.\n         *\n         * Defaults to `Prism.languages`.\n         * @returns {Grammar} The new grammar object.\n         * @public\n         */\n        insertBefore: function(b, g, v, S) {\n          S = S || /** @type {any} */\n          a.languages;\n          var w = S[b], k = {};\n          for (var _ in w)\n            if (w.hasOwnProperty(_)) {\n              if (_ == g)\n                for (var T in v)\n                  v.hasOwnProperty(T) && (k[T] = v[T]);\n              v.hasOwnProperty(_) || (k[_] = w[_]);\n            }\n          var C = S[b];\n          return S[b] = k, a.languages.DFS(a.languages, function(A, Q) {\n            Q === C && A != b && (this[A] = k);\n          }), k;\n        },\n        // Traverse a language definition with Depth First Search\n        DFS: function b(g, v, S, w) {\n          w = w || {};\n          var k = a.util.objId;\n          for (var _ in g)\n            if (g.hasOwnProperty(_)) {\n              v.call(g, _, g[_], S || _);\n              var T = g[_], C = a.util.type(T);\n              C === \"Object\" && !w[k(T)] ? (w[k(T)] = !0, b(T, v, null, w)) : C === \"Array\" && !w[k(T)] && (w[k(T)] = !0, b(T, v, _, w));\n            }\n        }\n      },\n      plugins: {},\n      /**\n       * This is the most high-level function in Prism’s API.\n       * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n       * each one of them.\n       *\n       * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n       *\n       * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n       * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n       * @memberof Prism\n       * @public\n       */\n      highlightAll: function(b, g) {\n        a.highlightAllUnder(document, b, g);\n      },\n      /**\n       * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n       * {@link Prism.highlightElement} on each one of them.\n       *\n       * The following hooks will be run:\n       * 1. `before-highlightall`\n       * 2. `before-all-elements-highlight`\n       * 3. All hooks of {@link Prism.highlightElement} for each element.\n       *\n       * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n       * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n       * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n       * @memberof Prism\n       * @public\n       */\n      highlightAllUnder: function(b, g, v) {\n        var S = {\n          callback: v,\n          container: b,\n          selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n        };\n        a.hooks.run(\"before-highlightall\", S), S.elements = Array.prototype.slice.apply(S.container.querySelectorAll(S.selector)), a.hooks.run(\"before-all-elements-highlight\", S);\n        for (var w = 0, k; k = S.elements[w++]; )\n          a.highlightElement(k, g === !0, S.callback);\n      },\n      /**\n       * Highlights the code inside a single element.\n       *\n       * The following hooks will be run:\n       * 1. `before-sanity-check`\n       * 2. `before-highlight`\n       * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n       * 4. `before-insert`\n       * 5. `after-highlight`\n       * 6. `complete`\n       *\n       * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n       * the element's language.\n       *\n       * @param {Element} element The element containing the code.\n       * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n       * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n       * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n       * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n       *\n       * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n       * asynchronous highlighting to work. You can build your own bundle on the\n       * [Download page](https://prismjs.com/download.html).\n       * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n       * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n       * @memberof Prism\n       * @public\n       */\n      highlightElement: function(b, g, v) {\n        var S = a.util.getLanguage(b), w = a.languages[S];\n        a.util.setLanguage(b, S);\n        var k = b.parentElement;\n        k && k.nodeName.toLowerCase() === \"pre\" && a.util.setLanguage(k, S);\n        var _ = b.textContent, T = {\n          element: b,\n          language: S,\n          grammar: w,\n          code: _\n        };\n        function C(Q) {\n          T.highlightedCode = Q, a.hooks.run(\"before-insert\", T), T.element.innerHTML = T.highlightedCode, a.hooks.run(\"after-highlight\", T), a.hooks.run(\"complete\", T), v && v.call(T.element);\n        }\n        if (a.hooks.run(\"before-sanity-check\", T), k = T.element.parentElement, k && k.nodeName.toLowerCase() === \"pre\" && !k.hasAttribute(\"tabindex\") && k.setAttribute(\"tabindex\", \"0\"), !T.code) {\n          a.hooks.run(\"complete\", T), v && v.call(T.element);\n          return;\n        }\n        if (a.hooks.run(\"before-highlight\", T), !T.grammar) {\n          C(a.util.encode(T.code));\n          return;\n        }\n        if (g && r.Worker) {\n          var A = new Worker(a.filename);\n          A.onmessage = function(Q) {\n            C(Q.data);\n          }, A.postMessage(JSON.stringify({\n            language: T.language,\n            code: T.code,\n            immediateClose: !0\n          }));\n        } else\n          C(a.highlight(T.code, T.grammar, T.language));\n      },\n      /**\n       * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n       * and the language definitions to use, and returns a string with the HTML produced.\n       *\n       * The following hooks will be run:\n       * 1. `before-tokenize`\n       * 2. `after-tokenize`\n       * 3. `wrap`: On each {@link Token}.\n       *\n       * @param {string} text A string with the code to be highlighted.\n       * @param {Grammar} grammar An object containing the tokens to use.\n       *\n       * Usually a language definition like `Prism.languages.markup`.\n       * @param {string} language The name of the language definition passed to `grammar`.\n       * @returns {string} The highlighted HTML.\n       * @memberof Prism\n       * @public\n       * @example\n       * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n       */\n      highlight: function(b, g, v) {\n        var S = {\n          code: b,\n          grammar: g,\n          language: v\n        };\n        if (a.hooks.run(\"before-tokenize\", S), !S.grammar)\n          throw new Error('The language \"' + S.language + '\" has no grammar.');\n        return S.tokens = a.tokenize(S.code, S.grammar), a.hooks.run(\"after-tokenize\", S), l.stringify(a.util.encode(S.tokens), S.language);\n      },\n      /**\n       * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n       * and the language definitions to use, and returns an array with the tokenized code.\n       *\n       * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n       *\n       * This method could be useful in other contexts as well, as a very crude parser.\n       *\n       * @param {string} text A string with the code to be highlighted.\n       * @param {Grammar} grammar An object containing the tokens to use.\n       *\n       * Usually a language definition like `Prism.languages.markup`.\n       * @returns {TokenStream} An array of strings and tokens, a token stream.\n       * @memberof Prism\n       * @public\n       * @example\n       * let code = `var foo = 0;`;\n       * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n       * tokens.forEach(token => {\n       *     if (token instanceof Prism.Token && token.type === 'number') {\n       *         console.log(`Found numeric literal: ${token.content}`);\n       *     }\n       * });\n       */\n      tokenize: function(b, g) {\n        var v = g.rest;\n        if (v) {\n          for (var S in v)\n            g[S] = v[S];\n          delete g.rest;\n        }\n        var w = new d();\n        return f(w, w.head, b), u(b, w, g, w.head, 0), p(w);\n      },\n      /**\n       * @namespace\n       * @memberof Prism\n       * @public\n       */\n      hooks: {\n        all: {},\n        /**\n         * Adds the given callback to the list of callbacks for the given hook.\n         *\n         * The callback will be invoked when the hook it is registered for is run.\n         * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n         *\n         * One callback function can be registered to multiple hooks and the same hook multiple times.\n         *\n         * @param {string} name The name of the hook.\n         * @param {HookCallback} callback The callback function which is given environment variables.\n         * @public\n         */\n        add: function(b, g) {\n          var v = a.hooks.all;\n          v[b] = v[b] || [], v[b].push(g);\n        },\n        /**\n         * Runs a hook invoking all registered callbacks with the given environment variables.\n         *\n         * Callbacks will be invoked synchronously and in the order in which they were registered.\n         *\n         * @param {string} name The name of the hook.\n         * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n         * @public\n         */\n        run: function(b, g) {\n          var v = a.hooks.all[b];\n          if (!(!v || !v.length))\n            for (var S = 0, w; w = v[S++]; )\n              w(g);\n        }\n      },\n      Token: l\n    };\n    r.Prism = a;\n    function l(b, g, v, S) {\n      this.type = b, this.content = g, this.alias = v, this.length = (S || \"\").length | 0;\n    }\n    l.stringify = function b(g, v) {\n      if (typeof g == \"string\")\n        return g;\n      if (Array.isArray(g)) {\n        var S = \"\";\n        return g.forEach(function(C) {\n          S += b(C, v);\n        }), S;\n      }\n      var w = {\n        type: g.type,\n        content: b(g.content, v),\n        tag: \"span\",\n        classes: [\"token\", g.type],\n        attributes: {},\n        language: v\n      }, k = g.alias;\n      k && (Array.isArray(k) ? Array.prototype.push.apply(w.classes, k) : w.classes.push(k)), a.hooks.run(\"wrap\", w);\n      var _ = \"\";\n      for (var T in w.attributes)\n        _ += \" \" + T + '=\"' + (w.attributes[T] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n      return \"<\" + w.tag + ' class=\"' + w.classes.join(\" \") + '\"' + _ + \">\" + w.content + \"</\" + w.tag + \">\";\n    };\n    function c(b, g, v, S) {\n      b.lastIndex = g;\n      var w = b.exec(v);\n      if (w && S && w[1]) {\n        var k = w[1].length;\n        w.index += k, w[0] = w[0].slice(k);\n      }\n      return w;\n    }\n    function u(b, g, v, S, w, k) {\n      for (var _ in v)\n        if (!(!v.hasOwnProperty(_) || !v[_])) {\n          var T = v[_];\n          T = Array.isArray(T) ? T : [T];\n          for (var C = 0; C < T.length; ++C) {\n            if (k && k.cause == _ + \",\" + C)\n              return;\n            var A = T[C], Q = A.inside, W = !!A.lookbehind, L = !!A.greedy, re = A.alias;\n            if (L && !A.pattern.global) {\n              var Y = A.pattern.toString().match(/[imsuy]*$/)[0];\n              A.pattern = RegExp(A.pattern.source, Y + \"g\");\n            }\n            for (var K = A.pattern || A, B = S.next, _e = w; B !== g.tail && !(k && _e >= k.reach); _e += B.value.length, B = B.next) {\n              var Ce = B.value;\n              if (g.length > b.length)\n                return;\n              if (!(Ce instanceof l)) {\n                var ue = 1, ge;\n                if (L) {\n                  if (ge = c(K, _e, b, W), !ge || ge.index >= b.length)\n                    break;\n                  var Vt = ge.index, Be = ge.index + ge[0].length, Le = _e;\n                  for (Le += B.value.length; Vt >= Le; )\n                    B = B.next, Le += B.value.length;\n                  if (Le -= B.value.length, _e = Le, B.value instanceof l)\n                    continue;\n                  for (var Zt = B; Zt !== g.tail && (Le < Be || typeof Zt.value == \"string\"); Zt = Zt.next)\n                    ue++, Le += Zt.value.length;\n                  ue--, Ce = b.slice(_e, Le), ge.index -= _e;\n                } else if (ge = c(K, 0, Ce, W), !ge)\n                  continue;\n                var Vt = ge.index, It = ge[0], Tn = Ce.slice(0, Vt), Sr = Ce.slice(Vt + It.length), or = _e + Ce.length;\n                k && or > k.reach && (k.reach = or);\n                var En = B.prev;\n                Tn && (En = f(g, En, Tn), _e += Tn.length), h(g, En, ue);\n                var vi = new l(_, Q ? a.tokenize(It, Q) : It, re, It);\n                if (B = f(g, En, vi), Sr && f(g, B, Sr), ue > 1) {\n                  var Ur = {\n                    cause: _ + \",\" + C,\n                    reach: or\n                  };\n                  u(b, g, v, B.prev, _e, Ur), k && Ur.reach > k.reach && (k.reach = Ur.reach);\n                }\n              }\n            }\n          }\n        }\n    }\n    function d() {\n      var b = { value: null, prev: null, next: null }, g = { value: null, prev: b, next: null };\n      b.next = g, this.head = b, this.tail = g, this.length = 0;\n    }\n    function f(b, g, v) {\n      var S = g.next, w = { value: v, prev: g, next: S };\n      return g.next = w, S.prev = w, b.length++, w;\n    }\n    function h(b, g, v) {\n      for (var S = g.next, w = 0; w < v && S !== b.tail; w++)\n        S = S.next;\n      g.next = S, S.prev = g, b.length -= w;\n    }\n    function p(b) {\n      for (var g = [], v = b.head.next; v !== b.tail; )\n        g.push(v.value), v = v.next;\n      return g;\n    }\n    if (!r.document)\n      return r.addEventListener && (a.disableWorkerMessageHandler || r.addEventListener(\"message\", function(b) {\n        var g = JSON.parse(b.data), v = g.language, S = g.code, w = g.immediateClose;\n        r.postMessage(a.highlight(S, a.languages[v], v)), w && r.close();\n      }, !1)), a;\n    var O = a.util.currentScript();\n    O && (a.filename = O.src, O.hasAttribute(\"data-manual\") && (a.manual = !0));\n    function m() {\n      a.manual || a.highlightAll();\n    }\n    if (!a.manual) {\n      var y = document.readyState;\n      y === \"loading\" || y === \"interactive\" && O && O.defer ? document.addEventListener(\"DOMContentLoaded\", m) : window.requestAnimationFrame ? window.requestAnimationFrame(m) : window.setTimeout(m, 16);\n    }\n    return a;\n  }(e);\n  t.exports && (t.exports = n), typeof M0 < \"u\" && (M0.Prism = n), n.languages.markup = {\n    comment: {\n      pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n      greedy: !0\n    },\n    prolog: {\n      pattern: /<\\?[\\s\\S]+?\\?>/,\n      greedy: !0\n    },\n    doctype: {\n      // https://www.w3.org/TR/xml/#NT-doctypedecl\n      pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n      greedy: !0,\n      inside: {\n        \"internal-subset\": {\n          pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n          lookbehind: !0,\n          greedy: !0,\n          inside: null\n          // see below\n        },\n        string: {\n          pattern: /\"[^\"]*\"|'[^']*'/,\n          greedy: !0\n        },\n        punctuation: /^<!|>$|[[\\]]/,\n        \"doctype-tag\": /^DOCTYPE/i,\n        name: /[^\\s<>'\"]+/\n      }\n    },\n    cdata: {\n      pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n      greedy: !0\n    },\n    tag: {\n      pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n      greedy: !0,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        \"special-attr\": [],\n        \"attr-value\": {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n          inside: {\n            punctuation: [\n              {\n                pattern: /^=/,\n                alias: \"attr-equals\"\n              },\n              {\n                pattern: /^(\\s*)[\"']|[\"']$/,\n                lookbehind: !0\n              }\n            ]\n          }\n        },\n        punctuation: /\\/?>/,\n        \"attr-name\": {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: [\n      {\n        pattern: /&[\\da-z]{1,8};/i,\n        alias: \"named-entity\"\n      },\n      /&#x?[\\da-f]{1,8};/i\n    ]\n  }, n.languages.markup.tag.inside[\"attr-value\"].inside.entity = n.languages.markup.entity, n.languages.markup.doctype.inside[\"internal-subset\"].inside = n.languages.markup, n.hooks.add(\"wrap\", function(r) {\n    r.type === \"entity\" && (r.attributes.title = r.content.replace(/&amp;/, \"&\"));\n  }), Object.defineProperty(n.languages.markup.tag, \"addInlined\", {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function(i, s) {\n      var o = {};\n      o[\"language-\" + s] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: !0,\n        inside: n.languages[s]\n      }, o.cdata = /^<!\\[CDATA\\[|\\]\\]>$/i;\n      var a = {\n        \"included-cdata\": {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: o\n        }\n      };\n      a[\"language-\" + s] = {\n        pattern: /[\\s\\S]+/,\n        inside: n.languages[s]\n      };\n      var l = {};\n      l[i] = {\n        pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function() {\n          return i;\n        }), \"i\"),\n        lookbehind: !0,\n        greedy: !0,\n        inside: a\n      }, n.languages.insertBefore(\"markup\", \"cdata\", l);\n    }\n  }), Object.defineProperty(n.languages.markup.tag, \"addAttribute\", {\n    /**\n     * Adds an pattern to highlight languages embedded in HTML attributes.\n     *\n     * An example of an inlined language is CSS with `style` attributes.\n     *\n     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addAttribute('style', 'css');\n     */\n    value: function(r, i) {\n      n.languages.markup.tag.inside[\"special-attr\"].push({\n        pattern: RegExp(\n          /(^|[\"'\\s])/.source + \"(?:\" + r + \")\" + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n          \"i\"\n        ),\n        lookbehind: !0,\n        inside: {\n          \"attr-name\": /^[^\\s=]+/,\n          \"attr-value\": {\n            pattern: /=[\\s\\S]+/,\n            inside: {\n              value: {\n                pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                lookbehind: !0,\n                alias: [i, \"language-\" + i],\n                inside: n.languages[i]\n              },\n              punctuation: [\n                {\n                  pattern: /^=/,\n                  alias: \"attr-equals\"\n                },\n                /\"|'/\n              ]\n            }\n          }\n        }\n      });\n    }\n  }), n.languages.html = n.languages.markup, n.languages.mathml = n.languages.markup, n.languages.svg = n.languages.markup, n.languages.xml = n.languages.extend(\"markup\", {}), n.languages.ssml = n.languages.xml, n.languages.atom = n.languages.xml, n.languages.rss = n.languages.xml, function(r) {\n    var i = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n    r.languages.css = {\n      comment: /\\/\\*[\\s\\S]*?\\*\\//,\n      atrule: {\n        pattern: RegExp(\"@[\\\\w-](?:\" + /[^;{\\s\"']|\\s+(?!\\s)/.source + \"|\" + i.source + \")*?\" + /(?:;|(?=\\s*\\{))/.source),\n        inside: {\n          rule: /^@[\\w-]+/,\n          \"selector-function-argument\": {\n            pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n            lookbehind: !0,\n            alias: \"selector\"\n          },\n          keyword: {\n            pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n            lookbehind: !0\n          }\n          // See rest below\n        }\n      },\n      url: {\n        // https://drafts.csswg.org/css-values-3/#urls\n        pattern: RegExp(\"\\\\burl\\\\((?:\" + i.source + \"|\" + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + \")\\\\)\", \"i\"),\n        greedy: !0,\n        inside: {\n          function: /^url/i,\n          punctuation: /^\\(|\\)$/,\n          string: {\n            pattern: RegExp(\"^\" + i.source + \"$\"),\n            alias: \"url\"\n          }\n        }\n      },\n      selector: {\n        pattern: RegExp(`(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"'\\\\s]|\\\\s+(?![\\\\s{])|` + i.source + \")*(?=\\\\s*\\\\{)\"),\n        lookbehind: !0\n      },\n      string: {\n        pattern: i,\n        greedy: !0\n      },\n      property: {\n        pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n        lookbehind: !0\n      },\n      important: /!important\\b/i,\n      function: {\n        pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n        lookbehind: !0\n      },\n      punctuation: /[(){};:,]/\n    }, r.languages.css.atrule.inside.rest = r.languages.css;\n    var s = r.languages.markup;\n    s && (s.tag.addInlined(\"style\", \"css\"), s.tag.addAttribute(\"style\", \"css\"));\n  }(n), n.languages.clike = {\n    comment: [\n      {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: !0,\n        greedy: !0\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: !0,\n        greedy: !0\n      }\n    ],\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: !0\n    },\n    \"class-name\": {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n      lookbehind: !0,\n      inside: {\n        punctuation: /[.\\\\]/\n      }\n    },\n    keyword: /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    function: /\\b\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n    punctuation: /[{}[\\];(),.:]/\n  }, n.languages.javascript = n.languages.extend(\"clike\", {\n    \"class-name\": [\n      n.languages.clike[\"class-name\"],\n      {\n        pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n        lookbehind: !0\n      }\n    ],\n    keyword: [\n      {\n        pattern: /((?:^|\\})\\s*)catch\\b/,\n        lookbehind: !0\n      },\n      {\n        pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n        lookbehind: !0\n      }\n    ],\n    // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n    function: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    number: {\n      pattern: RegExp(\n        /(^|[^\\w$])/.source + \"(?:\" + // constant\n        (/NaN|Infinity/.source + \"|\" + // binary integer\n        /0[bB][01]+(?:_[01]+)*n?/.source + \"|\" + // octal integer\n        /0[oO][0-7]+(?:_[0-7]+)*n?/.source + \"|\" + // hexadecimal integer\n        /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + \"|\" + // decimal bigint\n        /\\d+(?:_\\d+)*n/.source + \"|\" + // decimal number (integer or float) but no bigint\n        /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + \")\" + /(?![\\w$])/.source\n      ),\n      lookbehind: !0\n    },\n    operator: /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n  }), n.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/, n.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n      pattern: RegExp(\n        // lookbehind\n        // eslint-disable-next-line regexp/no-dupe-characters-character-class\n        /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source + // Regex pattern:\n        // There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\n        // classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\n        // with the only syntax, so we have to define 2 different regex patterns.\n        /\\//.source + \"(?:\" + /(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source + \"|\" + // `v` flag syntax. This supports 3 levels of nested character classes.\n        /(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + \")\" + // lookahead\n        /(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source\n      ),\n      lookbehind: !0,\n      greedy: !0,\n      inside: {\n        \"regex-source\": {\n          pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n          lookbehind: !0,\n          alias: \"language-regex\",\n          inside: n.languages.regex\n        },\n        \"regex-delimiter\": /^\\/|\\/$/,\n        \"regex-flags\": /^[a-z]+$/\n      }\n    },\n    // This must be declared before keyword because we use \"function\" inside the look-forward\n    \"function-variable\": {\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n      alias: \"function\"\n    },\n    parameter: [\n      {\n        pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n        lookbehind: !0,\n        inside: n.languages.javascript\n      },\n      {\n        pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n        lookbehind: !0,\n        inside: n.languages.javascript\n      },\n      {\n        pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n        lookbehind: !0,\n        inside: n.languages.javascript\n      },\n      {\n        pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n        lookbehind: !0,\n        inside: n.languages.javascript\n      }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n  }), n.languages.insertBefore(\"javascript\", \"string\", {\n    hashbang: {\n      pattern: /^#!.*/,\n      greedy: !0,\n      alias: \"comment\"\n    },\n    \"template-string\": {\n      pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n      greedy: !0,\n      inside: {\n        \"template-punctuation\": {\n          pattern: /^`|`$/,\n          alias: \"string\"\n        },\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: !0,\n          inside: {\n            \"interpolation-punctuation\": {\n              pattern: /^\\$\\{|\\}$/,\n              alias: \"punctuation\"\n            },\n            rest: n.languages.javascript\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    \"string-property\": {\n      pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"property\"\n    }\n  }), n.languages.insertBefore(\"javascript\", \"operator\", {\n    \"literal-property\": {\n      pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n      lookbehind: !0,\n      alias: \"property\"\n    }\n  }), n.languages.markup && (n.languages.markup.tag.addInlined(\"script\", \"javascript\"), n.languages.markup.tag.addAttribute(\n    /on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n    \"javascript\"\n  )), n.languages.js = n.languages.javascript, function() {\n    if (typeof n > \"u\" || typeof document > \"u\")\n      return;\n    Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector);\n    var r = \"Loading…\", i = function(O, m) {\n      return \"✖ Error \" + O + \" while fetching file: \" + m;\n    }, s = \"✖ Error: File does not exist or is empty\", o = {\n      js: \"javascript\",\n      py: \"python\",\n      rb: \"ruby\",\n      ps1: \"powershell\",\n      psm1: \"powershell\",\n      sh: \"bash\",\n      bat: \"batch\",\n      h: \"c\",\n      tex: \"latex\"\n    }, a = \"data-src-status\", l = \"loading\", c = \"loaded\", u = \"failed\", d = \"pre[data-src]:not([\" + a + '=\"' + c + '\"]):not([' + a + '=\"' + l + '\"])';\n    function f(O, m, y) {\n      var b = new XMLHttpRequest();\n      b.open(\"GET\", O, !0), b.onreadystatechange = function() {\n        b.readyState == 4 && (b.status < 400 && b.responseText ? m(b.responseText) : b.status >= 400 ? y(i(b.status, b.statusText)) : y(s));\n      }, b.send(null);\n    }\n    function h(O) {\n      var m = /^\\s*(\\d+)\\s*(?:(,)\\s*(?:(\\d+)\\s*)?)?$/.exec(O || \"\");\n      if (m) {\n        var y = Number(m[1]), b = m[2], g = m[3];\n        return b ? g ? [y, Number(g)] : [y, void 0] : [y, y];\n      }\n    }\n    n.hooks.add(\"before-highlightall\", function(O) {\n      O.selector += \", \" + d;\n    }), n.hooks.add(\"before-sanity-check\", function(O) {\n      var m = (\n        /** @type {HTMLPreElement} */\n        O.element\n      );\n      if (m.matches(d)) {\n        O.code = \"\", m.setAttribute(a, l);\n        var y = m.appendChild(document.createElement(\"CODE\"));\n        y.textContent = r;\n        var b = m.getAttribute(\"data-src\"), g = O.language;\n        if (g === \"none\") {\n          var v = (/\\.(\\w+)$/.exec(b) || [, \"none\"])[1];\n          g = o[v] || v;\n        }\n        n.util.setLanguage(y, g), n.util.setLanguage(m, g);\n        var S = n.plugins.autoloader;\n        S && S.loadLanguages(g), f(\n          b,\n          function(w) {\n            m.setAttribute(a, c);\n            var k = h(m.getAttribute(\"data-range\"));\n            if (k) {\n              var _ = w.split(/\\r\\n?|\\n/g), T = k[0], C = k[1] == null ? _.length : k[1];\n              T < 0 && (T += _.length), T = Math.max(0, Math.min(T - 1, _.length)), C < 0 && (C += _.length), C = Math.max(0, Math.min(C, _.length)), w = _.slice(T, C).join(`\n`), m.hasAttribute(\"data-start\") || m.setAttribute(\"data-start\", String(T + 1));\n            }\n            y.textContent = w, n.highlightElement(y);\n          },\n          function(w) {\n            m.setAttribute(a, u), y.textContent = w;\n          }\n        );\n      }\n    }), n.plugins.fileHighlight = {\n      /**\n       * Executes the File Highlight plugin for all matching `pre` elements under the given container.\n       *\n       * Note: Elements which are already loaded or currently loading will not be touched by this method.\n       *\n       * @param {ParentNode} [container=document]\n       */\n      highlight: function(m) {\n        for (var y = (m || document).querySelectorAll(d), b = 0, g; g = y[b++]; )\n          n.highlightElement(g);\n      }\n    };\n    var p = !1;\n    n.fileHighlight = function() {\n      p || (console.warn(\"Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.\"), p = !0), n.plugins.fileHighlight.highlight.apply(this, arguments);\n    };\n  }();\n})(CP);\nvar qM = CP.exports;\nconst Ea = /* @__PURE__ */ UM(qM), Wp = \"scalar-component\", YM = LM({\n  extend: {\n    classGroups: {\n      \"font-size\": [\"text-xxs\"],\n      // Add the scalar class prefix as a custom class to be deduped by tailwind-merge\n      [Wp]: [Wp]\n    }\n  }\n}), { cva: $g, cx: Gd, compose: Vj } = dM({\n  hooks: {\n    onComplete: (t) => `${YM(t, Wp)}`\n  }\n}), zM = /* @__PURE__ */ Wl('<path class=\"svg-path svg-check-mark\" d=\"m 0 60 l 30 30 l 70 -80\" data-v-47faceda></path><path class=\"svg-path svg-x-mark\" d=\"m 50 50 l 40 -40\" data-v-47faceda></path><path class=\"svg-path svg-x-mark\" d=\"m 50 50 l 40 40\" data-v-47faceda></path><path class=\"svg-path svg-x-mark\" d=\"m 50 50 l -40 -40\" data-v-47faceda></path><path class=\"svg-path svg-x-mark\" d=\"m 50 50 l -40 40\" data-v-47faceda></path>', 5), HM = {\n  key: 0,\n  class: \"circular-loader\"\n}, FM = /* @__PURE__ */ le({\n  __name: \"ScalarLoading\",\n  props: {\n    loadingState: {},\n    size: { default: \"24px\" }\n  },\n  setup(t) {\n    return G1((e) => ({\n      d6cae758: e.size\n    })), (e, n) => e.loadingState ? (Z(), ne(\"div\", {\n      key: 0,\n      class: Ke(R(Gd)(\"loader-wrapper\"))\n    }, [\n      (Z(), ne(\"svg\", {\n        class: Ke([\"svg-loader\", {\n          \"icon-is-valid\": e.loadingState.isValid,\n          \"icon-is-invalid\": e.loadingState.isInvalid\n        }]),\n        viewBox: \"0 0 100 100\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n      }, [\n        zM,\n        e.loadingState.isLoading ? (Z(), ne(\"g\", HM, [\n          D(\"circle\", {\n            class: Ke([\"loader-path\", {\n              \"loader-path-off\": e.loadingState.isValid || e.loadingState.isInvalid\n            }]),\n            cx: \"50\",\n            cy: \"50\",\n            fill: \"none\",\n            r: \"20\",\n            \"stroke-width\": \"2\"\n          }, null, 2)\n        ])) : st(\"\", !0)\n      ], 2))\n    ], 2)) : st(\"\", !0);\n  }\n}), GM = (t, e) => {\n  const n = t.__vccOpts || t;\n  for (const [r, i] of e)\n    n[r] = i;\n  return n;\n}, KM = /* @__PURE__ */ GM(FM, [[\"__scopeId\", \"data-v-47faceda\"]]), AP = {\n  solid: [\n    \"scalar-button-solid\",\n    \"bg-back-btn-1 text-fore-btn-1 shadow-sm active:bg-back-btn-1 active:shadow-none hocus:bg-hover-btn-1\"\n  ],\n  outlined: [\n    \"scalar-button-outlined\",\n    \"active:bg-btn-1 border border-solid border-border bg-transparent text-fore-1 hocus:bg-border\"\n  ],\n  ghost: [\n    \"scalar-button-ghost\",\n    \"bg-transparent text-fore-3 active:text-fore-2 hocus:text-fore-2\"\n  ],\n  danger: [\n    \"scalar-button-danger\",\n    \"bg-error text-white active:brightness-90 hocus:brightness-90\"\n  ]\n}, JM = $g({\n  base: \"scalar-button row cursor-pointer items-center justify-center rounded font-medium\",\n  variants: {\n    disabled: {\n      true: \"bg-background-2 text-color-3 cursor-not-allowed shadow-none\"\n    },\n    fullWidth: { true: \"w-full\" },\n    size: { sm: \"px-2 py-1 text-xs\", md: \"h-10 px-6 text-sm\" },\n    variant: AP\n  },\n  compoundVariants: [\n    {\n      disabled: !0,\n      variant: \"ghost\",\n      class: \"bg-transparent text-ghost\"\n    }\n  ]\n}), eX = [\"ariaDisabled\"], tX = {\n  key: 0,\n  class: \"mr-2 h-4 w-4\"\n}, nX = {\n  key: 1,\n  class: \"ml-2\"\n}, rX = /* @__PURE__ */ le({\n  inheritAttrs: !1,\n  __name: \"ScalarButton\",\n  props: {\n    disabled: { type: Boolean },\n    fullWidth: { type: Boolean, default: !1 },\n    loading: {},\n    size: { default: \"md\" },\n    variant: { default: \"solid\" }\n  },\n  setup(t) {\n    const e = j(() => {\n      const { class: n, ...r } = xO();\n      return { class: n || \"\", rest: r };\n    });\n    return (n, r) => (Z(), ne(\"button\", Ml(e.value.rest, {\n      ariaDisabled: n.disabled || void 0,\n      class: R(Gd)(\n        R(JM)({ fullWidth: n.fullWidth, disabled: n.disabled, size: n.size, variant: n.variant }),\n        { \"pl-9 pr-3\": n.loading },\n        `${e.value.class}`\n      ),\n      type: \"button\"\n    }), [\n      n.$slots.icon ? (Z(), ne(\"div\", tX, [\n        pt(n.$slots, \"icon\")\n      ])) : st(\"\", !0),\n      pt(n.$slots, \"default\"),\n      n.loading ? (Z(), ne(\"div\", nX, [\n        J(R(KM), {\n          loadingState: n.loading,\n          size: \"20px\"\n        }, null, 8, [\"loadingState\"])\n      ])) : st(\"\", !0)\n    ], 16, eX));\n  }\n});\n(function(t) {\n  var e = \"\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b\", n = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: !0,\n    alias: \"punctuation\",\n    // this looks reasonably well in all themes\n    inside: null\n    // see below\n  }, r = {\n    bash: n,\n    environment: {\n      pattern: RegExp(\"\\\\$\" + e),\n      alias: \"constant\"\n    },\n    variable: [\n      // [0]: Arithmetic Environment\n      {\n        pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n        greedy: !0,\n        inside: {\n          // If there is a $ sign at the beginning highlight $(( and )) as variable\n          variable: [\n            {\n              pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n              lookbehind: !0\n            },\n            /^\\$\\(\\(/\n          ],\n          number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n          // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n          operator: /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n          // If there is no $ sign at the beginning highlight (( and )) as punctuation\n          punctuation: /\\(\\(?|\\)\\)?|,|;/\n        }\n      },\n      // [1]: Command Substitution\n      {\n        pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n        greedy: !0,\n        inside: {\n          variable: /^\\$\\(|^`|\\)$|`$/\n        }\n      },\n      // [2]: Brace expansion\n      {\n        pattern: /\\$\\{[^}]+\\}/,\n        greedy: !0,\n        inside: {\n          operator: /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n          punctuation: /[\\[\\]]/,\n          environment: {\n            pattern: RegExp(\"(\\\\{)\" + e),\n            lookbehind: !0,\n            alias: \"constant\"\n          }\n        }\n      },\n      /\\$(?:\\w+|[#?*!@$])/\n    ],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    entity: /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n  };\n  t.languages.bash = {\n    shebang: {\n      pattern: /^#!\\s*\\/.*/,\n      alias: \"important\"\n    },\n    comment: {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: !0\n    },\n    \"function-name\": [\n      // a) function foo {\n      // b) foo() {\n      // c) function foo() {\n      // but not “foo {”\n      {\n        // a) and c)\n        pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n        lookbehind: !0,\n        alias: \"function\"\n      },\n      {\n        // b)\n        pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n        alias: \"function\"\n      }\n    ],\n    // Highlight variable names as variables in for and select beginnings.\n    \"for-or-select\": {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: \"variable\",\n      lookbehind: !0\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    \"assign-left\": {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?:\\.\\w+)*(?=\\+?=)/,\n      inside: {\n        environment: {\n          pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + e),\n          lookbehind: !0,\n          alias: \"constant\"\n        }\n      },\n      alias: \"variable\",\n      lookbehind: !0\n    },\n    // Highlight parameter names as variables\n    parameter: {\n      pattern: /(^|\\s)-{1,2}(?:\\w+:[+-]?)?\\w+(?:\\.\\w+)*(?=[=\\s]|$)/,\n      alias: \"variable\",\n      lookbehind: !0\n    },\n    string: [\n      // Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n      {\n        pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n        lookbehind: !0,\n        greedy: !0,\n        inside: r\n      },\n      // Here-document with quotes around the tag\n      // → No expansion (so no “inside”).\n      {\n        pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n        lookbehind: !0,\n        greedy: !0,\n        inside: {\n          bash: n\n        }\n      },\n      // “Normal” string\n      {\n        // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n        pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n        lookbehind: !0,\n        greedy: !0,\n        inside: r\n      },\n      {\n        // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n        pattern: /(^|[^$\\\\])'[^']*'/,\n        lookbehind: !0,\n        greedy: !0\n      },\n      {\n        // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n        pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n        greedy: !0,\n        inside: {\n          entity: r.entity\n        }\n      }\n    ],\n    environment: {\n      pattern: RegExp(\"\\\\$?\" + e),\n      alias: \"constant\"\n    },\n    variable: r.variable,\n    function: {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: !0\n    },\n    keyword: {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n      lookbehind: !0\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    builtin: {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n      lookbehind: !0,\n      // Alias added to make those easier to distinguish from strings.\n      alias: \"class-name\"\n    },\n    boolean: {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n      lookbehind: !0\n    },\n    \"file-descriptor\": {\n      pattern: /\\B&\\d\\b/,\n      alias: \"important\"\n    },\n    operator: {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n      inside: {\n        \"file-descriptor\": {\n          pattern: /^\\d/,\n          alias: \"important\"\n        }\n      }\n    },\n    punctuation: /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    number: {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: !0\n    }\n  }, n.inside = t.languages.bash;\n  for (var i = [\n    \"comment\",\n    \"function-name\",\n    \"for-or-select\",\n    \"assign-left\",\n    \"parameter\",\n    \"string\",\n    \"environment\",\n    \"function\",\n    \"keyword\",\n    \"builtin\",\n    \"boolean\",\n    \"file-descriptor\",\n    \"operator\",\n    \"punctuation\",\n    \"number\"\n  ], s = r.variable[1].inside, o = 0; o < i.length; o++)\n    s[i[o]] = t.languages.bash[i[o]];\n  t.languages.sh = t.languages.bash, t.languages.shell = t.languages.bash;\n})(Prism);\nPrism.languages.json = {\n  property: {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    lookbehind: !0,\n    greedy: !0\n  },\n  string: {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    lookbehind: !0,\n    greedy: !0\n  },\n  comment: {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: !0\n  },\n  number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  punctuation: /[{}[\\],]/,\n  operator: /:/,\n  boolean: /\\b(?:false|true)\\b/,\n  null: {\n    pattern: /\\bnull\\b/,\n    alias: \"keyword\"\n  }\n};\nPrism.languages.webmanifest = Prism.languages.json;\n(function() {\n  if (typeof Prism > \"u\" || typeof document > \"u\")\n    return;\n  var t = \"line-numbers\", e = /\\n(?!$)/g, n = Prism.plugins.lineNumbers = {\n    /**\n     * Get node for provided line number\n     *\n     * @param {Element} element pre element\n     * @param {number} number line number\n     * @returns {Element|undefined}\n     */\n    getLine: function(o, a) {\n      if (!(o.tagName !== \"PRE\" || !o.classList.contains(t))) {\n        var l = o.querySelector(\".line-numbers-rows\");\n        if (l) {\n          var c = parseInt(o.getAttribute(\"data-start\"), 10) || 1, u = c + (l.children.length - 1);\n          a < c && (a = c), a > u && (a = u);\n          var d = a - c;\n          return l.children[d];\n        }\n      }\n    },\n    /**\n     * Resizes the line numbers of the given element.\n     *\n     * This function will not add line numbers. It will only resize existing ones.\n     *\n     * @param {HTMLElement} element A `<pre>` element with line numbers.\n     * @returns {void}\n     */\n    resize: function(o) {\n      r([o]);\n    },\n    /**\n     * Whether the plugin can assume that the units font sizes and margins are not depended on the size of\n     * the current viewport.\n     *\n     * Setting this to `true` will allow the plugin to do certain optimizations for better performance.\n     *\n     * Set this to `false` if you use any of the following CSS units: `vh`, `vw`, `vmin`, `vmax`.\n     *\n     * @type {boolean}\n     */\n    assumeViewportIndependence: !0\n  };\n  function r(o) {\n    if (o = o.filter(function(l) {\n      var c = i(l), u = c[\"white-space\"];\n      return u === \"pre-wrap\" || u === \"pre-line\";\n    }), o.length != 0) {\n      var a = o.map(function(l) {\n        var c = l.querySelector(\"code\"), u = l.querySelector(\".line-numbers-rows\");\n        if (!(!c || !u)) {\n          var d = l.querySelector(\".line-numbers-sizer\"), f = c.textContent.split(e);\n          d || (d = document.createElement(\"span\"), d.className = \"line-numbers-sizer\", c.appendChild(d)), d.innerHTML = \"0\", d.style.display = \"block\";\n          var h = d.getBoundingClientRect().height;\n          return d.innerHTML = \"\", {\n            element: l,\n            lines: f,\n            lineHeights: [],\n            oneLinerHeight: h,\n            sizer: d\n          };\n        }\n      }).filter(Boolean);\n      a.forEach(function(l) {\n        var c = l.sizer, u = l.lines, d = l.lineHeights, f = l.oneLinerHeight;\n        d[u.length - 1] = void 0, u.forEach(function(h, p) {\n          if (h && h.length > 1) {\n            var O = c.appendChild(document.createElement(\"span\"));\n            O.style.display = \"block\", O.textContent = h;\n          } else\n            d[p] = f;\n        });\n      }), a.forEach(function(l) {\n        for (var c = l.sizer, u = l.lineHeights, d = 0, f = 0; f < u.length; f++)\n          u[f] === void 0 && (u[f] = c.children[d++].getBoundingClientRect().height);\n      }), a.forEach(function(l) {\n        var c = l.sizer, u = l.element.querySelector(\".line-numbers-rows\");\n        c.style.display = \"none\", c.innerHTML = \"\", l.lineHeights.forEach(function(d, f) {\n          u.children[f].style.height = d + \"px\";\n        });\n      });\n    }\n  }\n  function i(o) {\n    return o ? window.getComputedStyle ? getComputedStyle(o) : o.currentStyle || null : null;\n  }\n  var s = void 0;\n  window.addEventListener(\"resize\", function() {\n    n.assumeViewportIndependence && s === window.innerWidth || (s = window.innerWidth, r(Array.prototype.slice.call(document.querySelectorAll(\"pre.\" + t))));\n  }), Prism.hooks.add(\"complete\", function(o) {\n    if (o.code) {\n      var a = (\n        /** @type {Element} */\n        o.element\n      ), l = (\n        /** @type {HTMLElement} */\n        a.parentNode\n      );\n      if (!(!l || !/pre/i.test(l.nodeName)) && !a.querySelector(\".line-numbers-rows\") && Prism.util.isActive(a, t)) {\n        a.classList.remove(t), l.classList.add(t);\n        var c = o.code.match(e), u = c ? c.length + 1 : 1, d, f = new Array(u + 1).join(\"<span></span>\");\n        d = document.createElement(\"span\"), d.setAttribute(\"aria-hidden\", \"true\"), d.className = \"line-numbers-rows\", d.innerHTML = f, l.hasAttribute(\"data-start\") && (l.style.counterReset = \"linenumber \" + (parseInt(l.getAttribute(\"data-start\"), 10) - 1)), o.element.appendChild(d), r([l]), Prism.hooks.run(\"line-numbers\", o);\n      }\n    }\n  }), Prism.hooks.add(\"line-numbers\", function(o) {\n    o.plugins = o.plugins || {}, o.plugins.lineNumbers = !0;\n  });\n})();\nfunction iX(t) {\n  const e = /* @__PURE__ */ new Set();\n  return JSON.stringify(\n    t,\n    (n, r) => {\n      if (typeof r == \"object\" && r !== null) {\n        if (e.has(r))\n          return \"[Circular]\";\n        e.add(r);\n      }\n      return r;\n    },\n    2\n  );\n}\nfunction Lc(t) {\n  if (typeof t == \"string\")\n    return t;\n  if (typeof t == \"object\")\n    try {\n      return JSON.stringify(t, null, 2);\n    } catch {\n      return iX(t);\n    }\n  return t;\n}\nconst sX = [\"innerHTML\"], oX = /* @__PURE__ */ le({\n  __name: \"ScalarCodeBlock\",\n  props: {\n    content: {},\n    lang: { default: \"js\" },\n    lineNumbers: { type: Boolean, default: !1 },\n    hideCredentials: {}\n  },\n  setup(t) {\n    const e = t, n = AR(Lc(e.content)), r = `components-scalar-code-block${n}`, { plugins: i, highlightElement: s } = Ea;\n    e.hideCredentials && Ea.hooks.add(\"wrap\", function(d) {\n      if (!e.hideCredentials)\n        return;\n      let f = !1;\n      typeof e.hideCredentials == \"string\" ? d.content.includes(e.hideCredentials) && (f = !0) : Array.isArray(e.hideCredentials) && (f = e.hideCredentials.some(\n        (h) => d.content.includes(h)\n      )), f && (d.content = d.content.replace(\n        /<span class=\"credentials\">.*?<\\/span>/g,\n        (h) => h.replace(/<span class=\"credentials\">|<\\/span>/g, \"\")\n      ), d.content = d.content.replace(\n        new RegExp(\n          typeof e.hideCredentials == \"string\" ? e.hideCredentials : e.hideCredentials.join(\"|\"),\n          \"g\"\n        ),\n        (h) => `<span class=\"credentials\">${h}</span>`\n      ));\n    });\n    const o = G(null), a = G($w[r] ?? \"\"), l = j(() => e.lang === \"node\" ? \"js\" : e.lang), c = e.lang;\n    ht(\n      [() => e.lang, () => e.content, o],\n      () => {\n        o.value && e.content && (!a.value || e.lang !== c) && (a.value = \"\", Pn(() => s(o.value)));\n      },\n      { immediate: !0 }\n    );\n    const u = /\\n(?!$)/g;\n    return xd(async () => {\n      let d = \"\";\n      e.lineNumbers && Ea.hooks.add(\"after-tokenize\", (h) => {\n        const p = h.code.match(u), O = p ? p.length + 1 : 1;\n        d = `<span aria-hidden=\"true\" class=\"line-numbers-rows\">${new Array(O + 1).join(\"<span></span>\")}</span>`;\n      });\n      const f = Ea.highlight(\n        Lc(e.content),\n        Ea.languages[l.value],\n        l.value\n      );\n      if (a.value = f + d, n !== 0) {\n        const h = yO();\n        h.payload.data[r] = f + d;\n      }\n    }), et(async () => {\n      await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_prism-autoloader-Dlh8Vzlw-BR-Zk3-5a0cc8\").then(__webpack_require__.bind(__webpack_require__, /*! ./prism-autoloader-Dlh8Vzlw-BR-Zk31i-C2nJnyDy.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/prism-autoloader-Dlh8Vzlw-BR-Zk31i-C2nJnyDy.js\")), i.autoloader.languages_path = \"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/\";\n    }), (d, f) => (Z(), ne(\"pre\", {\n      class: Ke([\n        `scalar-component scalar-codeblock-pre language-${l.value}`,\n        {\n          \"line-numbers\": d.lineNumbers\n        }\n      ])\n    }, [\n      a.value ? (Z(), ne(\"code\", {\n        key: 0,\n        class: Ke(`scalar-codeblock-code language-${l.value}`),\n        innerHTML: R(Lc)(a.value)\n      }, null, 10, sX)) : (Z(), ne(\"code\", {\n        key: 1,\n        ref_key: \"el\",\n        ref: o,\n        class: Ke(`scalar-codeblock-code language-${l.value}`)\n      }, De(R(Lc)(d.content)), 3))\n    ], 2));\n  }\n}), X0 = /* @__PURE__ */ Object.assign({ \"./Add.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Add-ngyZgYXx-DzyQwJvS-Dg6m4uBe_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Add-ngyZgYXx-DzyQwJvS-Dg6m4uBe.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Add-ngyZgYXx-DzyQwJvS-Dg6m4uBe.js\")), \"./ArrowLeft.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_ArrowLeft-aY17W2aS-DFSAtOMh-stY--31eff6\").then(__webpack_require__.bind(__webpack_require__, /*! ./ArrowLeft-aY17W2aS-DFSAtOMh-stY-2ROs.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/ArrowLeft-aY17W2aS-DFSAtOMh-stY-2ROs.js\")), \"./ArrowRight.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_ArrowRight-DEMtdoE7-D3Vz1S5q-BQd-9272b4\").then(__webpack_require__.bind(__webpack_require__, /*! ./ArrowRight-DEMtdoE7-D3Vz1S5q-BQdfZT8d.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/ArrowRight-DEMtdoE7-D3Vz1S5q-BQdfZT8d.js\")), \"./Background.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Background-DcRhSHgf-DMULXelH-Bad-247414\").then(__webpack_require__.bind(__webpack_require__, /*! ./Background-DcRhSHgf-DMULXelH-BadxgX0W.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Background-DcRhSHgf-DMULXelH-BadxgX0W.js\")), \"./Brackets.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Brackets-4I8OKomf-BdIXlrTs-CWvEbqbD_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Brackets-4I8OKomf-BdIXlrTs-CWvEbqbD.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Brackets-4I8OKomf-BdIXlrTs-CWvEbqbD.js\")), \"./Branch.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Branch-CXwj8YuG-IxKqRWkx-CXQBAf51_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Branch-CXwj8YuG-IxKqRWkx-CXQBAf51.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Branch-CXwj8YuG-IxKqRWkx-CXQBAf51.js\")), \"./CallToAction.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_CallToAction-EyQKkvbg-D5UsQ4YH-h-0e0ed3\").then(__webpack_require__.bind(__webpack_require__, /*! ./CallToAction-EyQKkvbg-D5UsQ4YH-haXAiOPT.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/CallToAction-EyQKkvbg-D5UsQ4YH-haXAiOPT.js\")), \"./Checkmark.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Checkmark-De7nq6cG-CenVOav7-D9Bu-a32faf\").then(__webpack_require__.bind(__webpack_require__, /*! ./Checkmark-De7nq6cG-CenVOav7-D9Bu5fxd.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Checkmark-De7nq6cG-CenVOav7-D9Bu5fxd.js\")), \"./ChevronDown.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_ChevronDown-Co7EAKAv-DHNwXUbS-CQ-55a8bd\").then(__webpack_require__.bind(__webpack_require__, /*! ./ChevronDown-Co7EAKAv-DHNwXUbS-CQlQw4WY.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/ChevronDown-Co7EAKAv-DHNwXUbS-CQlQw4WY.js\")), \"./ChevronLeft.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_ChevronLeft-DYt0idAu-DAzCtmws-tD-92efe4\").then(__webpack_require__.bind(__webpack_require__, /*! ./ChevronLeft-DYt0idAu-DAzCtmws-tDA-xdvZ.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/ChevronLeft-DYt0idAu-DAzCtmws-tDA-xdvZ.js\")), \"./ChevronRight.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_ChevronRight-ylxToVWl-CDFDuBE1-B-5d6636\").then(__webpack_require__.bind(__webpack_require__, /*! ./ChevronRight-ylxToVWl-CDFDuBE1-B0mYXf5d.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/ChevronRight-ylxToVWl-CDFDuBE1-B0mYXf5d.js\")), \"./ChevronUp.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_ChevronUp-xAnukIfj-CuKFLVD3-DWVS-513a86\").then(__webpack_require__.bind(__webpack_require__, /*! ./ChevronUp-xAnukIfj-CuKFLVD3-DWVSR3Ez.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/ChevronUp-xAnukIfj-CuKFLVD3-DWVSR3Ez.js\")), \"./Clipboard.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Clipboard-CU_KxGEv-DWrQtWVi-BZDm-8b1f84\").then(__webpack_require__.bind(__webpack_require__, /*! ./Clipboard-CU_KxGEv-DWrQtWVi-BZDm5vfi.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Clipboard-CU_KxGEv-DWrQtWVi-BZDm5vfi.js\")), \"./Close.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Close-CW3z42qZ-CeX6s3FA-BJZZp11j_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Close-CW3z42qZ-CeX6s3FA-BJZZp11j.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Close-CW3z42qZ-CeX6s3FA-BJZZp11j.js\")), \"./CodeFolder.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_CodeFolder-Cv_igzJE-CoWfaY0Z-BoW-faa948\").then(__webpack_require__.bind(__webpack_require__, /*! ./CodeFolder-Cv_igzJE-CoWfaY0Z-BoWe0LHP.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/CodeFolder-Cv_igzJE-CoWfaY0Z-BoWe0LHP.js\")), \"./Cookie.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Cookie-CEHvXpqB-D960ImBy-DVHF-7rf_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Cookie-CEHvXpqB-D960ImBy-DVHF-7rf.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Cookie-CEHvXpqB-D960ImBy-DVHF-7rf.js\")), \"./DarkMode.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_DarkMode-CBsV8Q_I-DHPfucpm-DyzfSyYR_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./DarkMode-CBsV8Q_I-DHPfucpm-DyzfSyYR.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/DarkMode-CBsV8Q_I-DHPfucpm-DyzfSyYR.js\")), \"./Delete.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Delete-BCZmxrDD-BHoCf_u4-CZesZajO_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Delete-BCZmxrDD-BHoCf_u4-CZesZajO.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Delete-BCZmxrDD-BHoCf_u4-CZesZajO.js\")), \"./Discord.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Discord-BHYOFBB2-NYBGYy-_-BgUYmbEK_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Discord-BHYOFBB2-NYBGYy-_-BgUYmbEK.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Discord-BHYOFBB2-NYBGYy-_-BgUYmbEK.js\")), \"./DocsPage.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_DocsPage-rh2xwxKN-BP1Vagfm-Dpj3kpsI_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./DocsPage-rh2xwxKN-BP1Vagfm-Dpj3kpsI.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/DocsPage-rh2xwxKN-BP1Vagfm-Dpj3kpsI.js\")), \"./Duplicate.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Duplicate-BPlzNpcf-DbmFK0XC-Bp1A-198470\").then(__webpack_require__.bind(__webpack_require__, /*! ./Duplicate-BPlzNpcf-DbmFK0XC-Bp1AbZYR.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Duplicate-BPlzNpcf-DbmFK0XC-Bp1AbZYR.js\")), \"./Edit.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Edit-Br04RNYb-BhCyac4t-DXlzqBnQ_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Edit-Br04RNYb-BhCyac4t-DXlzqBnQ.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Edit-Br04RNYb-BhCyac4t-DXlzqBnQ.js\")), \"./Ellipses.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Ellipses-Bo_X36Hx-CsJmKvlE-oSCkNmOf_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Ellipses-Bo_X36Hx-CsJmKvlE-oSCkNmOf.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Ellipses-Bo_X36Hx-CsJmKvlE-oSCkNmOf.js\")), \"./Error.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Error-B_RGtWJI-D9KV-EvG-at1B0s_M_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Error-B_RGtWJI-D9KV-EvG-at1B0s_M.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Error-B_RGtWJI-D9KV-EvG-at1B0s_M.js\")), \"./ExternalLink.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_ExternalLink-DK8L-EH7-ANJEzoHO-C-1ddad8\").then(__webpack_require__.bind(__webpack_require__, /*! ./ExternalLink-DK8L-EH7-ANJEzoHO-CY0vPfof.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/ExternalLink-DK8L-EH7-ANJEzoHO-CY0vPfof.js\")), \"./FilterList.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_FilterList-CsAcE9em-aybThY1V-BK3-5b94f6\").then(__webpack_require__.bind(__webpack_require__, /*! ./FilterList-CsAcE9em-aybThY1V-BK3-DHse.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/FilterList-CsAcE9em-aybThY1V-BK3-DHse.js\")), \"./Folder.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Folder-Cdcj4evh-B-g7TtzK-YjWkUkgE_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Folder-Cdcj4evh-B-g7TtzK-YjWkUkgE.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Folder-Cdcj4evh-B-g7TtzK-YjWkUkgE.js\")), \"./GitHub.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_GitHub-NdE6Zs9k-BAGzgXH_-DTEyWCw8_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./GitHub-NdE6Zs9k-BAGzgXH_-DTEyWCw8.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/GitHub-NdE6Zs9k-BAGzgXH_-DTEyWCw8.js\")), \"./Hide.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Hide-Q3GPkIKH-40aIsLtN-DnMvHBax_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Hide-Q3GPkIKH-40aIsLtN-DnMvHBax.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Hide-Q3GPkIKH-40aIsLtN-DnMvHBax.js\")), \"./History.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_History-D9nmhNIn-BU9mR55a-CbY6899A_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./History-D9nmhNIn-BU9mR55a-CbY6899A.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/History-D9nmhNIn-BU9mR55a-CbY6899A.js\")), \"./JsonObject.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_JsonObject-hGdHUQ4M-Cm1hXgAn-eNa-1aa7f2\").then(__webpack_require__.bind(__webpack_require__, /*! ./JsonObject-hGdHUQ4M-Cm1hXgAn-eNaco2Er.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/JsonObject-hGdHUQ4M-Cm1hXgAn-eNaco2Er.js\")), \"./Key.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Key-CWXJqX28-DdNUhB11-D43hFYBY_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Key-CWXJqX28-DdNUhB11-D43hFYBY.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Key-CWXJqX28-DdNUhB11-D43hFYBY.js\")), \"./Leave.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Leave-K1J3uwoG-WgTmlwgs-B1G7AUx7_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Leave-K1J3uwoG-WgTmlwgs-B1G7AUx7.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Leave-K1J3uwoG-WgTmlwgs-B1G7AUx7.js\")), \"./LightDarkModeToggle.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_LightDarkModeToggle-BkvMimDa-Dk6-c3ab05\").then(__webpack_require__.bind(__webpack_require__, /*! ./LightDarkModeToggle-BkvMimDa-Dk64Z-UE-Did1cpzH.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/LightDarkModeToggle-BkvMimDa-Dk64Z-UE-Did1cpzH.js\")), \"./LightMode.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_LightMode-Btz6vyT_-JpKLPzdT-CYBS-2b1f21\").then(__webpack_require__.bind(__webpack_require__, /*! ./LightMode-Btz6vyT_-JpKLPzdT-CYBSGo5W.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/LightMode-Btz6vyT_-JpKLPzdT-CYBSGo5W.js\")), \"./Link.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Link-Bzuc__Nc-Bvtx0HZG-BsxoTRLF_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Link-Bzuc__Nc-Bvtx0HZG-BsxoTRLF.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Link-Bzuc__Nc-Bvtx0HZG-BsxoTRLF.js\")), \"./Lock.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Lock-xhiH1mKz-Rrlr3fGv-CHHWJxm8_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Lock-xhiH1mKz-Rrlr3fGv-CHHWJxm8.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Lock-xhiH1mKz-Rrlr3fGv-CHHWJxm8.js\")), \"./Logo.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Logo-mtzeKD8M-LQcor9RM-DUH9106q_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Logo-mtzeKD8M-LQcor9RM-DUH9106q.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Logo-mtzeKD8M-LQcor9RM-DUH9106q.js\")), \"./LogoAPI.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_LogoAPI-CaU5E6FK-Bzb5EbnZ-BCO3e5BR_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./LogoAPI-CaU5E6FK-Bzb5EbnZ-BCO3e5BR.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/LogoAPI-CaU5E6FK-Bzb5EbnZ-BCO3e5BR.js\")), \"./LogoClient.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_LogoClient-DdC-t_7P-B_rZ91PC-eaZ-f1be67\").then(__webpack_require__.bind(__webpack_require__, /*! ./LogoClient-DdC-t_7P-B_rZ91PC-eaZ6WmOf.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/LogoClient-DdC-t_7P-B_rZ91PC-eaZ6WmOf.js\")), \"./LogoMarket.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_LogoMarket-DwlApcab-_INRDSLs-Cu9-75d49a\").then(__webpack_require__.bind(__webpack_require__, /*! ./LogoMarket-DwlApcab-_INRDSLs-Cu92Ek1V.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/LogoMarket-DwlApcab-_INRDSLs-Cu92Ek1V.js\")), \"./LogoSwagger.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_LogoSwagger-CH60H5qW-DFEpFXIU-CR-3372fd\").then(__webpack_require__.bind(__webpack_require__, /*! ./LogoSwagger-CH60H5qW-DFEpFXIU-CRLIWk3k.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/LogoSwagger-CH60H5qW-DFEpFXIU-CRLIWk3k.js\")), \"./Magic.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Magic-Dsi9_bEc-BYN42_eH-DJ7jvqlp_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Magic-Dsi9_bEc-BYN42_eH-DJ7jvqlp.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Magic-Dsi9_bEc-BYN42_eH-DJ7jvqlp.js\")), \"./Menu.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Menu-CFK5cOsm-CqE9Tsgr-DMt-L6ON_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Menu-CFK5cOsm-CqE9Tsgr-DMt-L6ON.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Menu-CFK5cOsm-CqE9Tsgr-DMt-L6ON.js\")), \"./Page.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Page-B7rVuhpl-BUIogUij-BB671Km1_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Page-B7rVuhpl-BUIogUij-BB671Km1.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Page-B7rVuhpl-BUIogUij-BB671Km1.js\")), \"./PaperAirplane.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_PaperAirplane-BC-4mGEB-BrV5fX8s--868db8\").then(__webpack_require__.bind(__webpack_require__, /*! ./PaperAirplane-BC-4mGEB-BrV5fX8s-gFDG4LcF.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/PaperAirplane-BC-4mGEB-BrV5fX8s-gFDG4LcF.js\")), \"./Payment.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Payment-hzcXP1Xb-B2G1p4-i-DqyNxSKF_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Payment-hzcXP1Xb-B2G1p4-i-DqyNxSKF.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Payment-hzcXP1Xb-B2G1p4-i-DqyNxSKF.js\")), \"./Play.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Play-BrVagRQA-DBrajcXb-Bdk-5U3i_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Play-BrVagRQA-DBrajcXb-Bdk-5U3i.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Play-BrVagRQA-DBrajcXb-Bdk-5U3i.js\")), \"./Refresh.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Refresh-Be6vHEEi-C6lRqFiM-C73Hcs1e_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Refresh-Be6vHEEi-C6lRqFiM-C73Hcs1e.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Refresh-Be6vHEEi-C6lRqFiM-C73Hcs1e.js\")), \"./Response.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Response-Dq9pM-ZU-DcYb8u84-D9VGLZcz_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Response-Dq9pM-ZU-DcYb8u84-D9VGLZcz.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Response-Dq9pM-ZU-DcYb8u84-D9VGLZcz.js\")), \"./Search.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Search-DqtlswRG-D-hprEk0-CI4GoK9h_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Search-DqtlswRG-D-hprEk0-CI4GoK9h.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Search-DqtlswRG-D-hprEk0-CI4GoK9h.js\")), \"./Show.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Show-D86hKz5y-CF9Pv7FS-Cdyd48_g_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Show-D86hKz5y-CF9Pv7FS-Cdyd48_g.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Show-D86hKz5y-CF9Pv7FS-Cdyd48_g.js\")), \"./SideBarClosed.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_SideBarClosed-CYUNS2XM-CyAn6Mp2--b8fac5\").then(__webpack_require__.bind(__webpack_require__, /*! ./SideBarClosed-CYUNS2XM-CyAn6Mp2-Cqf4vais.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/SideBarClosed-CYUNS2XM-CyAn6Mp2-Cqf4vais.js\")), \"./SideBarOpen.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_SideBarOpen-BOxW49_U-D5IKtkfP-CZ-71dbe1\").then(__webpack_require__.bind(__webpack_require__, /*! ./SideBarOpen-BOxW49_U-D5IKtkfP-CZzPiP8r.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/SideBarOpen-BOxW49_U-D5IKtkfP-CZzPiP8r.js\")), \"./Sort.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Sort-oTjBhJFQ-yW_ZNUnN-wz3cyKgT_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Sort-oTjBhJFQ-yW_ZNUnN-wz3cyKgT.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Sort-oTjBhJFQ-yW_ZNUnN-wz3cyKgT.js\")), \"./Terminal.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Terminal-CKp--su5-vWaGU4_z-DAMBesXv_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Terminal-CKp--su5-vWaGU4_z-DAMBesXv.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Terminal-CKp--su5-vWaGU4_z-DAMBesXv.js\")), \"./ThumbsDown.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_ThumbsDown-BMgnsASL-B2YFxB8i-DAM-96e599\").then(__webpack_require__.bind(__webpack_require__, /*! ./ThumbsDown-BMgnsASL-B2YFxB8i-DAMNXbYe.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/ThumbsDown-BMgnsASL-B2YFxB8i-DAMNXbYe.js\")), \"./ThumbsUp.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_ThumbsUp-C1j6zY2j-DKqh3z1D-B2U8zRVy_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./ThumbsUp-C1j6zY2j-DKqh3z1D-B2U8zRVy.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/ThumbsUp-C1j6zY2j-DKqh3z1D-B2U8zRVy.js\")), \"./Trash.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Trash-BpA3zWPD-BAjuQdys-52CVss0x_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Trash-BpA3zWPD-BAjuQdys-52CVss0x.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Trash-BpA3zWPD-BAjuQdys-52CVss0x.js\")), \"./Unlock.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Unlock-CY8UqJoE-CrwInjK9-CY8TLnAu_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Unlock-CY8UqJoE-CrwInjK9-CY8TLnAu.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Unlock-CY8UqJoE-CrwInjK9-CY8TLnAu.js\")), \"./Upload.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_Upload-REIdL7RI-CsfWPmbV-f02ZddMX_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Upload-REIdL7RI-CsfWPmbV-f02ZddMX.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/Upload-REIdL7RI-CsfWPmbV-f02ZddMX.js\")), \"./User.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_User-Df5svMQ3-BD7IWPQQ-BkNE0D2v_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./User-Df5svMQ3-BD7IWPQQ-BkNE0D2v.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/User-Df5svMQ3-BD7IWPQQ-BkNE0D2v.js\")), \"./programming-framework-angular.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-framework-angular-DD-5ec3d6\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-framework-angular-DD4Vjgbk-Bzc9D9am-BfucK3vS.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-framework-angular-DD4Vjgbk-Bzc9D9am-BfucK3vS.js\")), \"./programming-framework-astro.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-framework-astro-CLfr-d57967\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-framework-astro-CLfrRt19-CfPlyy6T-BU0bW3NV.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-framework-astro-CLfrRt19-CfPlyy6T-BU0bW3NV.js\")), \"./programming-framework-laravel.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-framework-laravel-kA-3d228b\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-framework-laravel-kAy2wVLy-Cty_4oXq-6X0nmwVS.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-framework-laravel-kAy2wVLy-Cty_4oXq-6X0nmwVS.js\")), \"./programming-framework-nextdotjs.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-framework-nextdotjs--7d7d0c\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-framework-nextdotjs-BKdd_DY_-DUTv-t1Q-CAy_JLEW.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-framework-nextdotjs-BKdd_DY_-DUTv-t1Q-CAy_JLEW.js\")), \"./programming-framework-react.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-framework-react-PDgm-d29556\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-framework-react-PDgmtZuN-DdUogL85-ByXgrJSG.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-framework-react-PDgmtZuN-DdUogL85-ByXgrJSG.js\")), \"./programming-framework-vuedotjs.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-framework-vuedotjs-C-41950b\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-framework-vuedotjs-Cv46W2aB-Dt_I9pcj-D6Gfv_pK.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-framework-vuedotjs-Cv46W2aB-Dt_I9pcj-D6Gfv_pK.js\")), \"./programming-language-c.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-c-hPGu2Zvg--5ea200\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-c-hPGu2Zvg-QG1pSdJG-DTfK1BNb.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-c-hPGu2Zvg-QG1pSdJG-DTfK1BNb.js\")), \"./programming-language-clojure.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-clojure-Cvm-bd7923\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-clojure-Cvmzky8x-D6Gs-6Ol-utvq4WVq.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-clojure-Cvmzky8x-D6Gs-6Ol-utvq4WVq.js\")), \"./programming-language-csharp.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-csharp-lqX1-9c5822\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-csharp-lqX1oWgb-B1_8fYG9-PBpXEXzJ.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-csharp-lqX1oWgb-B1_8fYG9-PBpXEXzJ.js\")), \"./programming-language-css3.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-css3-Dpp4Cr-826f01\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-css3-Dpp4Cr6b-Bf5XF7-p-DVlPBQze.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-css3-Dpp4Cr6b-Bf5XF7-p-DVlPBQze.js\")), \"./programming-language-go.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-go-DoJxWwT6-45fadc\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-go-DoJxWwT6-BUgfSlg1-CRIlBxOd.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-go-DoJxWwT6-BUgfSlg1-CRIlBxOd.js\")), \"./programming-language-html5.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-html5-DlqJK-c4b8bd\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-html5-DlqJK4EL-Bl9dTA-D-Bm2S1Mxu.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-html5-DlqJK4EL-Bl9dTA-D-Bm2S1Mxu.js\")), \"./programming-language-http.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-http-wMYwFS-7620e0\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-http-wMYwFS1I-BWQXI44M-iHjdjQXg.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-http-wMYwFS1I-BWQXI44M-iHjdjQXg.js\")), \"./programming-language-java.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-java-BCxG2T-9eaa53\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-java-BCxG2T_w-CWqBHVz_-CJEKWrCU.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-java-BCxG2T_w-CWqBHVz_-CJEKWrCU.js\")), \"./programming-language-javascript.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-javascript--f29377\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-javascript-VxLvi1QG-DFjYF_MP-C1wMy3zE.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-javascript-VxLvi1QG-DFjYF_MP-C1wMy3zE.js\")), \"./programming-language-json.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-json-vEX_g7-81192d\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-json-vEX_g7Zi-BMZrSR1t-cb3fP4sM.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-json-vEX_g7Zi-BMZrSR1t-cb3fP4sM.js\")), \"./programming-language-kotlin.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-kotlin-DKV8-255b1a\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-kotlin-DKV8vP9h-C1Zi89NZ-BYHnI6tu.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-kotlin-DKV8vP9h-C1Zi89NZ-BYHnI6tu.js\")), \"./programming-language-node.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-node-Xsgx38-6184c2\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-node-Xsgx38lm-DZhaOPIJ-Djs6vRkK.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-node-Xsgx38lm-DZhaOPIJ-Djs6vRkK.js\")), \"./programming-language-objc.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-objc-BQXSOB-e8754d\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-objc-BQXSOBsX-BR-B91By-BYHsOgZu.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-objc-BQXSOBsX-BR-B91By-BYHsOgZu.js\")), \"./programming-language-ocaml.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-ocaml-BEz7g-399e53\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-ocaml-BEz7gGv7-ip3_Zuhb-DiPRv8mq.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-ocaml-BEz7gGv7-ip3_Zuhb-DiPRv8mq.js\")), \"./programming-language-php.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-php-GY38f8r-018ab6\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-php-GY38f8r4-DQ_8EMFH-DTwDEWc2.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-php-GY38f8r4-DQ_8EMFH-DTwDEWc2.js\")), \"./programming-language-powershell.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-powershell--ea1142\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-powershell-C9DkSp36-S3xix_dw-Cc-MMQ5C.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-powershell-C9DkSp36-S3xix_dw-Cc-MMQ5C.js\")), \"./programming-language-python.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-python-Ct-_-82d9d1\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-python-Ct-_kNjo-BCrlyfv0-BNyrCiVV.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-python-Ct-_kNjo-BCrlyfv0-BNyrCiVV.js\")), \"./programming-language-r.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-r-BGoKwua9--cf886b\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-r-BGoKwua9-BWGOKD9M-CULKUPDn.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-r-BGoKwua9-BWGOKD9M-CULKUPDn.js\")), \"./programming-language-ruby.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-ruby-DhdM4d-71fcf3\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-ruby-DhdM4d7g-Dd3La6Kn-DZ9-eGad.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-ruby-DhdM4d7g-Dd3La6Kn-DZ9-eGad.js\")), \"./programming-language-scala.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-scala-BVg0d-f497ff\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-scala-BVg0dToJ-Bz_n-CNw-DGqXnT_Z.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-scala-BVg0dToJ-Bz_n-CNw-DGqXnT_Z.js\")), \"./programming-language-shell.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-shell-BsTa1-ea3cc2\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-shell-BsTa1xI7-XJbYjh7O-DbTJPwRl.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-shell-BsTa1xI7-XJbYjh7O-DbTJPwRl.js\")), \"./programming-language-swift.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-swift-Dn72x-93a53c\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-swift-Dn72xPjg-BUvu5_SV-Bb-nGdda.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-swift-Dn72xPjg-BUvu5_SV-Bb-nGdda.js\")), \"./programming-language-typescript.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-language-typescript--616bf6\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-language-typescript-CdF-HuRi-CaDO02MW-BBuO0KlG.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-language-typescript-CdF-HuRi-CaDO02MW-BBuO0KlG.js\")), \"./programming-script-code.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-script-code-DQN1veb2-cf9b51\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-script-code-DQN1veb2-BPFALXVk-BqO-0d_V.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-script-code-DQN1veb2-BPFALXVk-BqO-0d_V.js\")), \"./programming-tool-git.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-tool-git-DDnQ1zGD-Cz-68e011\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-tool-git-DDnQ1zGD-Cz6Yj0wj-DqovFqOq.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-tool-git-DDnQ1zGD-Cz6Yj0wj-DqovFqOq.js\")), \"./programming-tool-tailwindcss.svg\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_scalar_api-client-react_dist_programming-tool-tailwindcss-xjX-a2f87b\").then(__webpack_require__.bind(__webpack_require__, /*! ./programming-tool-tailwindcss-xjXi0E6g-ky2wbsII-DZfSzBnh.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/programming-tool-tailwindcss-xjXi0E6g-ky2wbsII-DZfSzBnh.js\")) }), j0 = (t) => {\n  const e = `./${t}.svg`;\n  return X0[e] ? /* @__PURE__ */ a1(X0[e]) : (console.warn(`Could not find icon: ${t}`), null);\n}, aX = [\"src\"], _l = /* @__PURE__ */ le({\n  __name: \"ScalarIcon\",\n  props: {\n    icon: {},\n    size: {}\n  },\n  setup(t) {\n    const e = t, n = $g({\n      variants: {\n        size: {\n          xs: \"size-3 stroke-[1.4]\",\n          sm: \"size-3.5 stroke-[1.2]\",\n          md: \"size-4 stroke-[1.1]\",\n          lg: \"size-5\",\n          xl: \"size-6 stroke-[0.96]\",\n          \"2xl\": \"size-8 stroke-[0.92]\",\n          \"3xl\": \"size-10 stroke-[0.9]\",\n          full: \"size-full\"\n        }\n      },\n      defaultVariants: {\n        size: \"full\"\n      }\n    }), r = j0(e.icon);\n    return (i, s) => R(r) ? (Z(), ke(Zl(R(j0)(i.icon)), {\n      key: 0,\n      class: Ke(R(Gd)(\"scalar-icon\", R(n)({ size: i.size })))\n    }, null, 8, [\"class\"])) : (Z(), ne(\"img\", {\n      key: 1,\n      src: i.icon\n    }, null, 8, aX));\n  }\n}), lX = [\"ariaDisabled\"], cX = { class: \"sr-only\" }, uX = /* @__PURE__ */ le({\n  __name: \"ScalarIconButton\",\n  props: {\n    label: {},\n    icon: {},\n    disabled: { type: Boolean },\n    variant: { default: \"ghost\" },\n    size: { default: \"md\" }\n  },\n  setup(t) {\n    const e = $g({\n      base: \"scalar-icon-button grid aspect-square cursor-pointer rounded\",\n      variants: {\n        size: {\n          xs: \"size-3.5 p-0.5\",\n          sm: \"size-6 p-1\",\n          md: \"size-10 p-3\",\n          full: \"h-full w-full\"\n        },\n        disabled: {\n          true: \"cursor-not-allowed shadow-none\"\n        },\n        variant: AP\n      }\n    }), n = j(() => {\n      const { class: r, ...i } = xO();\n      return { class: r || \"\", rest: i };\n    });\n    return (r, i) => (Z(), ne(\"button\", Ml(n.value.rest, {\n      ariaDisabled: r.disabled || void 0,\n      class: R(Gd)(R(e)({ size: r.size, variant: r.variant, disabled: r.disabled }), n.value.class),\n      type: \"button\"\n    }), [\n      J(R(_l), { icon: r.icon }, null, 8, [\"icon\"]),\n      D(\"span\", cX, De(r.label), 1)\n    ], 16, lX));\n  }\n}), dX = { class: \"card-form-input\" }, fX = [\"for\"], hX = [\"id\", \"type\"], pX = /* @__PURE__ */ le({\n  inheritAttrs: !1,\n  __name: \"CardFormTextInput\",\n  props: {\n    id: {},\n    type: {}\n  },\n  setup(t) {\n    const e = t, n = G(!0), r = j(\n      () => e.type === \"password\" ? n.value ? \"password\" : \"text\" : e.type ?? \"text\"\n    );\n    return (i, s) => (Z(), ne(\"div\", dX, [\n      D(\"label\", { for: i.id }, [\n        pt(i.$slots, \"default\", {}, void 0, !0)\n      ], 8, fX),\n      D(\"input\", Ml(i.$attrs, {\n        id: i.id,\n        autocomplete: \"off\",\n        \"data-1p-ignore\": \"\",\n        spellcheck: \"false\",\n        type: r.value\n      }), null, 16, hX),\n      i.type === \"password\" ? (Z(), ke(R(uX), {\n        key: 0,\n        class: \"password-mask\",\n        icon: n.value ? \"Show\" : \"Hide\",\n        label: n.value ? \"Show Password\" : \"Hide Password\",\n        onClick: s[0] || (s[0] = (o) => n.value = !n.value)\n      }, null, 8, [\"icon\", \"label\"])) : st(\"\", !0)\n    ]));\n  }\n}), lo = /* @__PURE__ */ ct(pX, [[\"__scopeId\", \"data-v-b36c2dca\"]]), OX = (t) => (Ks(\"data-v-2c0182f1\"), t = t(), Js(), t), gX = { class: \"scopes-label\" }, mX = /* @__PURE__ */ OX(() => /* @__PURE__ */ D(\"em\", null, \"/\", -1)), bX = [\"checked\"], vX = { class: \"dropdown-item-title\" }, yX = { class: \"dropdown-item-description\" }, SX = /* @__PURE__ */ le({\n  __name: \"SecuritySchemeScopes\",\n  props: {\n    scopes: {},\n    selected: {}\n  },\n  emits: [\"update:selected\"],\n  setup(t, { emit: e }) {\n    const n = t, r = e, i = G(), s = G(), { floatingStyles: o } = eR(i, s, {\n      placement: \"bottom-end\",\n      whileElementsMounted: H2,\n      middleware: [$2(5), G2(), F2()]\n    }), a = j({\n      get: () => n.selected,\n      set: (l) => r(\"update:selected\", l)\n    });\n    return (l, c) => (Z(), ke(R(EC), {\n      modelValue: a.value,\n      \"onUpdate:modelValue\": c[0] || (c[0] = (u) => a.value = u),\n      multiple: \"\"\n    }, {\n      default: ce(({ open: u }) => [\n        D(\"div\", {\n          ref_key: \"trigger\",\n          ref: i,\n          class: Ke([\"wrapper\", { \"wrapper-open\": u }])\n        }, [\n          J(R($C), { as: xP }, {\n            default: ce(() => [\n              D(\"div\", gX, [\n                He(\" Scopes \" + De(a.value.length), 1),\n                mX,\n                He(De(Object.entries(l.scopes).length) + \" \", 1),\n                J(R(_l), {\n                  icon: u ? \"ChevronUp\" : \"ChevronDown\",\n                  size: \"sm\"\n                }, null, 8, [\"icon\"])\n              ])\n            ]),\n            _: 2\n          }, 1024)\n        ], 2),\n        (Z(), ke(TO, { to: \"body\" }, [\n          J(R(ER), null, {\n            default: ce(({ styles: d }) => [\n              D(\"div\", {\n                ref_key: \"dropdown\",\n                ref: s,\n                class: Ke([\"floating\", d]),\n                style: Br(R(o))\n              }, [\n                J(R(QC), {\n                  as: \"dl\",\n                  class: \"dropdown\"\n                }, {\n                  default: ce(() => [\n                    (Z(!0), ne(Pe, null, Xr(Object.entries(l.scopes), ([f, h]) => (Z(), ke(R(CC), {\n                      key: f,\n                      as: \"div\",\n                      class: \"dropdown-item\",\n                      value: f\n                    }, {\n                      default: ce(({ selected: p }) => [\n                        D(\"input\", {\n                          checked: p,\n                          class: \"dropdown-item-check\",\n                          tabindex: \"-1\",\n                          type: \"checkbox\"\n                        }, null, 8, bX),\n                        D(\"dt\", vX, De(f), 1),\n                        D(\"dd\", yX, De(h), 1)\n                      ]),\n                      _: 2\n                    }, 1032, [\"value\"]))), 128))\n                  ]),\n                  _: 1\n                })\n              ], 6)\n            ]),\n            _: 1\n          })\n        ]))\n      ]),\n      _: 1\n    }, 8, [\"modelValue\"]));\n  }\n}), wX = /* @__PURE__ */ ct(SX, [[\"__scopeId\", \"data-v-2c0182f1\"]]), kX = /* @__PURE__ */ le({\n  __name: \"SecurityScheme\",\n  props: {\n    value: {}\n  },\n  setup(t) {\n    const { authentication: e, setAuthentication: n } = Yl(), r = (d) => {\n      n({\n        apiKey: {\n          ...e.apiKey,\n          token: d.target.value\n        }\n      });\n    }, i = (d) => {\n      n({\n        http: {\n          ...e.http,\n          basic: {\n            ...e.http.basic,\n            username: d.target.value\n          }\n        }\n      });\n    }, s = (d) => {\n      n({\n        http: {\n          ...e.http,\n          basic: {\n            ...e.http.basic,\n            password: d.target.value\n          }\n        }\n      });\n    }, o = (d) => {\n      n({\n        http: {\n          ...e.http,\n          bearer: {\n            ...e.http.bearer,\n            token: d.target.value\n          }\n        }\n      });\n    }, a = (d) => {\n      n({\n        oAuth2: {\n          ...e.oAuth2,\n          clientId: d.target.value\n        }\n      });\n    }, l = (d) => {\n      const f = e.oAuth2.scopes.join(\" \"), h = (Math.random() + 1).toString(36).substring(7), p = new URL(d.authorizationUrl);\n      return n({\n        oAuth2: { ...e.oAuth2, state: h }\n      }), p.searchParams.set(\"response_type\", \"token\"), p.searchParams.set(\"client_id\", e.oAuth2.clientId), p.searchParams.set(\"redirect_uri\", window.location.href), p.searchParams.set(\"scope\", f), p.searchParams.set(\"state\", h), p.toString();\n    }, c = j({\n      get: () => e.oAuth2.scopes,\n      set: (d) => n({ oAuth2: { ...e.oAuth2, scopes: d } })\n    }), u = (d) => {\n      const h = window.open(d, \"openAuth2Window\", \"left=100,top=100,width=800,height=600\");\n      if (h) {\n        const p = setInterval(function() {\n          var O;\n          try {\n            const y = new URLSearchParams(h.location.href).get(\"access_token\");\n            if (h.closed || y) {\n              clearInterval(p);\n              const b = (O = h.location.href.match(/state=([^&]*)/)) == null ? void 0 : O[1];\n              y && e.oAuth2.state === b && n({\n                oAuth2: { ...e.oAuth2, accessToken: y }\n              }), h.close();\n            }\n          } catch {\n          }\n        }, 200);\n      }\n    };\n    return (d, f) => {\n      var h;\n      return d.value && ((h = d.value) != null && h.type) ? (Z(), ke(oM, { key: 0 }, {\n        default: ce(() => [\n          d.value.type === \"apiKey\" ? (Z(), ke(lo, {\n            key: 0,\n            id: `security-scheme-${d.value.name}`,\n            placeholder: \"Token\",\n            type: \"password\",\n            value: R(e).apiKey.token,\n            onInput: r\n          }, {\n            default: ce(() => [\n              He(De(d.value.in.charAt(0).toUpperCase() + d.value.in.slice(1)) + \" API \", 1)\n            ]),\n            _: 1\n          }, 8, [\"id\", \"value\"])) : d.value.type === \"http\" || d.value.type === \"basic\" ? (Z(), ne(Pe, { key: 1 }, [\n            d.value.type === \"basic\" || d.value.scheme === \"basic\" ? (Z(), ke(N0, { key: 0 }, {\n              default: ce(() => [\n                J(lo, {\n                  id: \"http.basic.username\",\n                  placeholder: \"Username\",\n                  value: R(e).http.basic.username,\n                  onInput: i\n                }, {\n                  default: ce(() => [\n                    He(\" Username \")\n                  ]),\n                  _: 1\n                }, 8, [\"value\"]),\n                J(lo, {\n                  id: \"http.basic.password\",\n                  placeholder: \"Password\",\n                  type: \"password\",\n                  value: R(e).http.basic.password,\n                  onInput: s\n                }, {\n                  default: ce(() => [\n                    He(\" Password \")\n                  ]),\n                  _: 1\n                }, 8, [\"value\"])\n              ]),\n              _: 1\n            })) : d.value.type === \"http\" && d.value.scheme === \"bearer\" ? (Z(), ke(lo, {\n              key: 1,\n              id: \"http.bearer.token\",\n              placeholder: \"Token\",\n              type: \"password\",\n              value: R(e).http.bearer.token,\n              onInput: o\n            }, {\n              default: ce(() => [\n                He(\" Bearer Token \")\n              ]),\n              _: 1\n            }, 8, [\"value\"])) : st(\"\", !0)\n          ], 64)) : d.value.type.toLowerCase() === \"oauth2\" && d.value.flows && d.value.flows.implicit ? (Z(), ke(N0, { key: 2 }, {\n            default: ce(() => [\n              R(e).oAuth2.accessToken ? (Z(), ne(Pe, { key: 0 }, [\n                J(lo, {\n                  id: \"oAuth2.accessToken\",\n                  placeholder: \"xxxxx\",\n                  type: \"password\",\n                  value: R(e).oAuth2.accessToken\n                }, {\n                  default: ce(() => [\n                    He(\" Access Token \")\n                  ]),\n                  _: 1\n                }, 8, [\"value\"]),\n                J(xP, {\n                  onClick: f[0] || (f[0] = () => R(n)({\n                    oAuth2: {\n                      ...R(e).oAuth2,\n                      accessToken: \"\",\n                      state: \"\"\n                    }\n                  }))\n                }, {\n                  default: ce(() => [\n                    He(\" Reset \")\n                  ]),\n                  _: 1\n                })\n              ], 64)) : (Z(), ne(Pe, { key: 1 }, [\n                J(lo, {\n                  id: \"oAuth2.clientId\",\n                  placeholder: \"12345\",\n                  type: \"text\",\n                  value: R(e).oAuth2.clientId,\n                  onInput: a\n                }, {\n                  default: ce(() => [\n                    He(\" Client ID \")\n                  ]),\n                  _: 1\n                }, 8, [\"value\"]),\n                d.value !== void 0 ? (Z(), ke(wX, {\n                  key: 0,\n                  selected: c.value,\n                  \"onUpdate:selected\": f[1] || (f[1] = (p) => c.value = p),\n                  scopes: d.value.flows.implicit.scopes\n                }, null, 8, [\"selected\", \"scopes\"])) : st(\"\", !0),\n                D(\"button\", {\n                  class: \"cardform-auth-button\",\n                  onClick: f[2] || (f[2] = () => {\n                    var p;\n                    return u(\n                      l(\n                        //@ts-ignore\n                        (p = d.value) == null ? void 0 : p.flows.implicit\n                      )\n                    );\n                  })\n                }, \" Authorize \")\n              ], 64))\n            ]),\n            _: 1\n          })) : st(\"\", !0)\n        ]),\n        _: 1\n      })) : st(\"\", !0);\n    };\n  }\n}), xX = /* @__PURE__ */ ct(kX, [[\"__scopeId\", \"data-v-3eb93ac9\"]]), PX = (t) => (Ks(\"data-v-d4d0c979\"), t = t(), Js(), t), _X = {\n  key: 0,\n  class: \"security-scheme-label\"\n}, TX = {\n  key: 1,\n  class: \"security-scheme-selector\"\n}, EX = { class: \"security-scheme-label\" }, $X = [\"value\"], QX = /* @__PURE__ */ PX(() => /* @__PURE__ */ D(\"option\", { value: \"\" }, \"None\", -1)), CX = [\"value\"], AX = /* @__PURE__ */ le({\n  __name: \"SecuritySchemeSelector\",\n  props: {\n    value: {}\n  },\n  emits: [\"input\"],\n  setup(t, { emit: e }) {\n    const n = t, r = e, { authentication: i, setAuthentication: s } = Yl(), o = (m) => {\n      a(m.target.value);\n    };\n    et(() => {\n      i.preferredSecurityScheme || a(Object.keys(n.value ?? {})[0] ?? null);\n    });\n    const a = (m) => {\n      s({\n        preferredSecurityScheme: m\n      }), r(\"input\", m);\n    };\n    xd(\n      () => a(Object.keys(n.value ?? {})[0] ?? null)\n    );\n    const l = (m) => !(m != null && m.type), c = (m) => m.type.toLowerCase() === \"apikey\", u = (m) => m.type === \"http\" && m.scheme.toLowerCase() === \"basic\" || m.type.toLowerCase() === \"basic\", d = (m) => m.type === \"http\" && m.scheme.toLowerCase() === \"bearer\", f = (m) => m.type.toLowerCase() === \"oauth2\", h = (m, y) => `${p(m)} (${y})`, p = (m) => l(m) ? \"No Authentication\" : c(m) ? \"API Key\" : u(m) ? \"Basic Authentication\" : d(m) ? \"Bearer Authentication\" : f(m) ? \"OAuth 2.0\" : `${m.type} (not yet supported)`, O = j(() => Object.keys(n.value ?? {}));\n    return (m, y) => {\n      var b, g;\n      return O.value.length === 1 ? (Z(), ne(\"div\", _X, De(h((b = m.value) == null ? void 0 : b[O.value[0]], O.value[0])), 1)) : O.value.length > 1 ? (Z(), ne(\"div\", TX, [\n        D(\"span\", EX, De(R(i).preferredSecurityScheme ? h(\n          (g = m.value) == null ? void 0 : g[R(i).preferredSecurityScheme],\n          R(i).preferredSecurityScheme\n        ) : \"None\"), 1),\n        J(R(_l), { icon: \"ChevronDown\" }),\n        D(\"select\", {\n          value: R(i).preferredSecurityScheme,\n          onClick: y[0] || (y[0] = aS(() => {\n          }, [\"prevent\"])),\n          onInput: o\n        }, [\n          QX,\n          (Z(!0), ne(Pe, null, Xr(O.value, (v) => {\n            var S;\n            return Z(), ne(\"option\", {\n              key: v,\n              value: v ?? null\n            }, De(h((S = m.value) == null ? void 0 : S[v], v)), 9, CX);\n          }), 128))\n        ], 40, $X)\n      ])) : st(\"\", !0);\n    };\n  }\n}), RX = /* @__PURE__ */ ct(AX, [[\"__scopeId\", \"data-v-d4d0c979\"]]), NX = {\n  key: 0,\n  class: \"preferred-security-scheme\"\n}, DX = {\n  key: 1,\n  class: \"security-scheme-empty-state\"\n}, ZX = /* @__PURE__ */ le({\n  __name: \"RequestAuthentication\",\n  setup(t) {\n    const e = G(null);\n    kP.on(() => {\n      if (!e.value)\n        return;\n      e.value.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"center\"\n      });\n    });\n    const { authentication: n, setAuthentication: r } = Yl(), i = (s) => {\n      r({\n        customSecurity: !0,\n        preferredSecurityScheme: s,\n        securitySchemes: {\n          apiKey: { type: \"apiKey\", name: \"apiKey\", in: \"header\" },\n          httpBasic: { type: \"http\", scheme: \"basic\" },\n          httpBearer: { type: \"http\", scheme: \"bearer\" }\n          // TODO oauth2\n        }\n      });\n    };\n    return (s, o) => (Z(), ne(\"div\", {\n      ref_key: \"requestAuthenticationRef\",\n      ref: e\n    }, [\n      J(R(bi), { title: \"Authentication\" }, {\n        options: ce(() => [\n          J(RX, {\n            value: R(n).securitySchemes\n          }, null, 8, [\"value\"])\n        ]),\n        default: ce(() => {\n          var a;\n          return [\n            R(n).preferredSecurityScheme ? (Z(), ne(\"div\", NX, [\n              J(xX, {\n                value: (a = R(n).securitySchemes) == null ? void 0 : a[R(n).preferredSecurityScheme]\n              }, null, 8, [\"value\"])\n            ])) : st(\"\", !0),\n            R(n).securitySchemes ? st(\"\", !0) : (Z(), ne(\"div\", DX, [\n              D(\"div\", {\n                class: \"scalar-api-client-add\",\n                variant: \"outlined\",\n                onClick: o[0] || (o[0] = (l) => i(\"apiKey\"))\n              }, \" ApiKey \"),\n              D(\"div\", {\n                class: \"scalar-api-client-add\",\n                variant: \"outlined\",\n                onClick: o[1] || (o[1] = (l) => i(\"httpBasic\"))\n              }, \" Basic \"),\n              D(\"div\", {\n                class: \"scalar-api-client-add\",\n                variant: \"outlined\",\n                onClick: o[2] || (o[2] = (l) => i(\"httpBearer\"))\n              }, \" Bearer \")\n            ]))\n          ];\n        }),\n        _: 1\n      })\n    ], 512));\n  }\n}), VX = /* @__PURE__ */ ct(ZX, [[\"__scopeId\", \"data-v-d34c7f0c\"]]), IX = { class: \"table-row\" }, WX = { class: \"table-row-item\" }, MX = { class: \"table-row-item\" }, XX = {\n  key: 0,\n  class: \"table-row-item\"\n}, jX = { class: \"table-row-meta\" }, BX = /* @__PURE__ */ le({\n  __name: \"GridRow\",\n  props: {\n    showDescription: { type: Boolean }\n  },\n  setup(t) {\n    return (e, n) => (Z(), ne(\"div\", IX, [\n      D(\"div\", WX, [\n        pt(e.$slots, \"key\", {}, void 0, !0)\n      ]),\n      D(\"div\", MX, [\n        pt(e.$slots, \"value\", {}, void 0, !0)\n      ]),\n      e.showDescription ? (Z(), ne(\"div\", XX, [\n        pt(e.$slots, \"description\", {}, void 0, !0)\n      ])) : st(\"\", !0),\n      D(\"div\", jX, [\n        pt(e.$slots, \"meta\", {}, void 0, !0)\n      ])\n    ]));\n  }\n}), Qg = /* @__PURE__ */ ct(BX, [[\"__scopeId\", \"data-v-d0f28f6e\"]]), Kd = (t) => (Ks(\"data-v-1fd79202\"), t = t(), Js(), t), LX = /* @__PURE__ */ Kd(() => /* @__PURE__ */ D(\"label\", { class: \"table-column-header\" }, \"Key\", -1)), UX = /* @__PURE__ */ Kd(() => /* @__PURE__ */ D(\"label\", { class: \"table-column-header\" }, \"Value\", -1)), qX = /* @__PURE__ */ Kd(() => /* @__PURE__ */ D(\"label\", { class: \"table-column-header\" }, \"Description\", -1)), YX = /* @__PURE__ */ Kd(() => /* @__PURE__ */ D(\"svg\", {\n  fill: \"currentColor\",\n  height: \"12\",\n  viewBox: \"0 0 18 12\",\n  width: \"18\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, [\n  /* @__PURE__ */ D(\"path\", {\n    d: \"M0 12h12v-2H0v2zM0 0v2h18V0H0zm0 7h18V5H0v2z\",\n    \"fill-rule\": \"nonzero\"\n  })\n], -1)), zX = /* @__PURE__ */ le({\n  __name: \"GridHeader\",\n  props: {\n    showDescription: { type: Boolean }\n  },\n  emits: [\"update:showDescription\"],\n  setup(t) {\n    return (e, n) => (Z(), ke(Qg, { showDescription: e.showDescription }, {\n      key: ce(() => [\n        LX\n      ]),\n      value: ce(() => [\n        UX\n      ]),\n      description: ce(() => [\n        qX\n      ]),\n      meta: ce(() => [\n        J(R(rX), {\n          class: \"table-description-toggle\",\n          variant: \"text\",\n          onClick: n[0] || (n[0] = (r) => e.$emit(\"update:showDescription\", !e.showDescription))\n        }, {\n          default: ce(() => [\n            YX\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }, 8, [\"showDescription\"]));\n  }\n}), HX = /* @__PURE__ */ ct(zX, [[\"__scopeId\", \"data-v-1fd79202\"]]), RP = (t) => (Ks(\"data-v-c042b839\"), t = t(), Js(), t), FX = { class: \"meta-check\" }, GX = /* @__PURE__ */ RP(() => /* @__PURE__ */ D(\"span\", { class: \"meta-checkmark\" }, null, -1)), KX = /* @__PURE__ */ RP(() => /* @__PURE__ */ D(\"svg\", {\n  fill: \"none\",\n  height: \"10\",\n  viewBox: \"-0.5 -0.5 10 10\",\n  width: \"10\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, [\n  /* @__PURE__ */ D(\"path\", {\n    d: \"m8.55 0.45 -8.1 8.1\",\n    stroke: \"currentColor\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\",\n    \"stroke-width\": \"1.5\"\n  }),\n  /* @__PURE__ */ D(\"path\", {\n    d: \"m0.45 0.45 8.1 8.1\",\n    stroke: \"currentColor\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\",\n    \"stroke-width\": \"1.5\"\n  })\n], -1)), JX = [\n  KX\n], e8 = /* @__PURE__ */ le({\n  __name: \"GridRowEditable\",\n  props: {\n    name: {},\n    description: {},\n    value: {},\n    required: { type: Boolean },\n    enabled: { type: Boolean }\n  },\n  emits: [\"update:name\", \"update:value\", \"update:description\", \"update:enabled\", \"delete\"],\n  setup(t, { emit: e }) {\n    const n = t, r = e, i = j({\n      get: () => n.name,\n      set: (l) => {\n        r(\"update:enabled\", !0), r(\"update:name\", l);\n      }\n    }), s = j({\n      get: () => `${n.value}`,\n      set: (l) => {\n        r(\"update:enabled\", !0), r(\"update:value\", l);\n      }\n    }), o = j({\n      get: () => n.description ?? \"\",\n      set: (l) => r(\"update:description\", l)\n    }), a = j({\n      get: () => n.enabled,\n      set: (l) => r(\"update:enabled\", l)\n    });\n    return (l, c) => (Z(), ke(Qg, {\n      class: Ke([\"table-row-editable\", { \"required-parameter\": l.required }])\n    }, {\n      key: ce(() => [\n        Xi(D(\"input\", {\n          \"onUpdate:modelValue\": c[0] || (c[0] = (u) => i.value = u),\n          placeholder: \"Key\"\n        }, null, 512), [\n          [Gi, i.value]\n        ])\n      ]),\n      value: ce(() => [\n        Xi(D(\"input\", {\n          \"onUpdate:modelValue\": c[1] || (c[1] = (u) => s.value = u),\n          placeholder: \"Value\"\n        }, null, 512), [\n          [Gi, s.value]\n        ])\n      ]),\n      description: ce(() => [\n        Xi(D(\"input\", {\n          \"onUpdate:modelValue\": c[2] || (c[2] = (u) => o.value = u),\n          placeholder: \"Description\"\n        }, null, 512), [\n          [Gi, o.value]\n        ])\n      ]),\n      meta: ce(() => [\n        D(\"label\", FX, [\n          Xi(D(\"input\", {\n            \"onUpdate:modelValue\": c[3] || (c[3] = (u) => a.value = u),\n            type: \"checkbox\"\n          }, null, 512), [\n            [$d, a.value]\n          ]),\n          GX\n        ]),\n        l.required ? st(\"\", !0) : (Z(), ne(\"button\", {\n          key: 0,\n          class: \"meta-delete\",\n          type: \"button\",\n          onClick: c[4] || (c[4] = (u) => l.$emit(\"delete\"))\n        }, JX))\n      ]),\n      _: 1\n    }, 8, [\"class\"]));\n  }\n}), t8 = /* @__PURE__ */ ct(e8, [[\"__scopeId\", \"data-v-c042b839\"]]), n8 = (t) => (Ks(\"data-v-78bcd93d\"), t = t(), Js(), t), r8 = [\"value\"], i8 = [\"value\"], s8 = /* @__PURE__ */ n8(() => /* @__PURE__ */ D(\"input\", {\n  disabled: \"\",\n  value: \"Read-only\"\n}, null, -1)), o8 = /* @__PURE__ */ le({\n  __name: \"GridRowGenerated\",\n  props: {\n    item: {}\n  },\n  setup(t) {\n    return (e, n) => (Z(), ke(Qg, { class: \"table-row-generated\" }, {\n      key: ce(() => [\n        D(\"input\", {\n          disabled: \"\",\n          placeholder: \"key\",\n          value: e.item.name\n        }, null, 8, r8)\n      ]),\n      value: ce(() => [\n        D(\"input\", {\n          disabled: \"\",\n          placeholder: \"value\",\n          type: \"password\",\n          value: e.item.value\n        }, null, 8, i8)\n      ]),\n      description: ce(() => [\n        s8\n      ]),\n      _: 1\n    }));\n  }\n}), a8 = /* @__PURE__ */ ct(o8, [[\"__scopeId\", \"data-v-78bcd93d\"]]), l8 = { class: \"table\" }, c8 = { class: \"meta-actions\" }, u8 = { class: \"meta-actions-item-icon\" }, d8 = { class: \"meta-actions-item-icon\" }, f8 = /* @__PURE__ */ le({\n  __name: \"Grid\",\n  props: {\n    items: {},\n    generatedItems: {},\n    addLabel: {},\n    showMoreFilter: { type: Boolean }\n  },\n  emits: [\"deleteIndex\", \"addAnother\"],\n  setup(t, { emit: e }) {\n    const n = e, r = G(!1), i = G(!1);\n    function s() {\n      n(\"addAnother\"), i.value = !0;\n    }\n    return (o, a) => (Z(), ne(\"div\", l8, [\n      J(HX, {\n        showDescription: r.value,\n        \"onUpdate:showDescription\": a[0] || (a[0] = (l) => r.value = l)\n      }, null, 8, [\"showDescription\"]),\n      (Z(!0), ne(Pe, null, Xr(o.generatedItems, (l) => (Z(), ke(a8, {\n        key: l.name,\n        item: l,\n        showDescription: r.value,\n        onClick: a[1] || (a[1] = (c) => R(kP).emit())\n      }, null, 8, [\"item\", \"showDescription\"]))), 128)),\n      (Z(!0), ne(Pe, null, Xr(o.items, (l, c) => Xi((Z(), ke(t8, {\n        key: c,\n        description: l.description,\n        \"onUpdate:description\": (u) => l.description = u,\n        enabled: l.enabled,\n        \"onUpdate:enabled\": (u) => l.enabled = u,\n        name: l.name,\n        \"onUpdate:name\": (u) => l.name = u,\n        value: l.value,\n        \"onUpdate:value\": (u) => l.value = u,\n        required: l.required,\n        showDescription: r.value,\n        onDelete: (u) => o.$emit(\"deleteIndex\", c)\n      }, null, 8, [\"description\", \"onUpdate:description\", \"enabled\", \"onUpdate:enabled\", \"name\", \"onUpdate:name\", \"value\", \"onUpdate:value\", \"required\", \"showDescription\", \"onDelete\"])), [\n        [jl, !o.showMoreFilter || o.showMoreFilter && c < 5 || i.value]\n      ])), 128)),\n      D(\"div\", c8, [\n        o.addLabel ? (Z(), ne(\"button\", {\n          key: 0,\n          class: \"meta-actions-item\",\n          type: \"button\",\n          onClick: s\n        }, [\n          D(\"i\", u8, [\n            J(R(_l), { icon: \"Add\" })\n          ]),\n          He(\" \" + De(o.addLabel), 1)\n        ])) : st(\"\", !0),\n        o.showMoreFilter && o.items && o.items.length > 5 && !i.value ? (Z(), ne(\"button\", {\n          key: 1,\n          class: \"meta-actions-item\",\n          type: \"button\",\n          onClick: a[2] || (a[2] = (l) => i.value = !0)\n        }, [\n          He(\" Show More \"),\n          D(\"i\", d8, [\n            J(R(_l), { icon: \"ChevronDown\" })\n          ])\n        ])) : st(\"\", !0)\n      ])\n    ]));\n  }\n}), nc = /* @__PURE__ */ ct(f8, [[\"__scopeId\", \"data-v-af1138c8\"]]), h8 = { class: \"navtable simpletable\" }, p8 = { class: \"navtable-table\" }, O8 = /* @__PURE__ */ Wl('<div class=\"navtable-item navtable-item__top\" data-v-5ba40e52><div class=\"navtable-item-33\" data-v-5ba40e52><label for=\"\" data-v-5ba40e52>Name</label></div><div class=\"navtable-item-66\" data-v-5ba40e52><label for=\"\" data-v-5ba40e52>Value</label></div></div>', 1), g8 = { class: \"navtable-item-33\" }, m8 = { class: \"navtable-item-66\" }, b8 = /* @__PURE__ */ le({\n  __name: \"SimpleGrid\",\n  props: {\n    items: {}\n  },\n  setup(t) {\n    return (e, n) => (Z(), ne(\"div\", h8, [\n      D(\"div\", p8, [\n        O8,\n        (Z(!0), ne(Pe, null, Xr(e.items, (r) => (Z(), ne(\"div\", {\n          key: r.id,\n          class: \"navtable-item\"\n        }, [\n          D(\"div\", g8, [\n            D(\"p\", null, De(r.name), 1)\n          ]),\n          D(\"div\", m8, [\n            D(\"p\", null, De(r.value), 1)\n          ])\n        ]))), 128))\n      ])\n    ]));\n  }\n}), v8 = /* @__PURE__ */ ct(b8, [[\"__scopeId\", \"data-v-5ba40e52\"]]), y8 = { key: 0 }, S8 = /* @__PURE__ */ le({\n  __name: \"RequestBody\",\n  props: {\n    body: {},\n    formData: {}\n  },\n  setup(t) {\n    const { activeRequest: e, setActiveRequest: n } = sr(), r = (i) => {\n      e.body !== i && n({\n        ...e,\n        body: i\n      });\n    };\n    return (i, s) => (Z(), ke(R(bi), { title: \"Body\" }, {\n      default: ce(() => [\n        i.body && i.body.length === 0 && i.formData && i.formData.length === 0 ? (Z(), ne(\"span\", y8, \"No Body\")) : i.formData && i.formData.length > 0 ? (Z(), ke(R(nc), {\n          key: 1,\n          items: i.formData\n        }, null, 8, [\"items\"])) : (Z(), ke(R(SP), {\n          key: 2,\n          content: R(e).body,\n          language: \"json\",\n          lineNumbers: \"\",\n          onChange: r\n        }, null, 8, [\"content\"]))\n      ]),\n      _: 1\n    }));\n  }\n}), w8 = {\n  key: 0,\n  class: \"scalar-api-client__empty-state\"\n}, k8 = /* @__PURE__ */ D(\"svg\", {\n  class: \"flow-icon\",\n  \"data-v-aa4fbd2d\": \"\",\n  height: \"100%\",\n  viewBox: \"0 0 48 48\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, [\n  /* @__PURE__ */ D(\"path\", {\n    d: \"M24 1.714v44.572M1.714 24h44.572\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\",\n    \"stroke-width\": \"3.429\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  })\n], -1), x8 = /* @__PURE__ */ le({\n  __name: \"RequestCookies\",\n  props: {\n    cookies: {},\n    generatedCookies: {}\n  },\n  setup(t) {\n    const e = t, { activeRequest: n } = sr();\n    function r(o) {\n      var a;\n      (a = n.cookies) == null || a.splice(o, 1);\n    }\n    function i() {\n      var o;\n      n.cookies === void 0 && (n.cookies = []), (o = n.cookies) == null || o.push({ name: \"\", value: \"\", enabled: !0 });\n    }\n    const s = j(() => {\n      var o, a;\n      return !!((o = e.cookies) != null && o.length || (a = e.generatedCookies) != null && a.length);\n    });\n    return (o, a) => (Z(), ke(R(bi), {\n      defaultOpen: s.value,\n      title: \"Cookies\"\n    }, {\n      default: ce(() => [\n        s.value ? (Z(), ke(R(nc), {\n          key: 1,\n          addLabel: \"Cookie\",\n          generatedItems: o.generatedCookies,\n          items: o.cookies,\n          onAddAnother: i,\n          onDeleteIndex: r\n        }, null, 8, [\"generatedItems\", \"items\"])) : (Z(), ne(\"div\", w8, [\n          D(\"button\", {\n            class: \"scalar-api-client-add\",\n            type: \"button\",\n            onClick: i\n          }, [\n            k8,\n            He(\" Cookies \")\n          ])\n        ]))\n      ]),\n      _: 1\n    }, 8, [\"defaultOpen\"]));\n  }\n}), P8 = {\n  key: 0,\n  class: \"scalar-api-client__empty-state\"\n}, _8 = /* @__PURE__ */ D(\"svg\", {\n  class: \"flow-icon\",\n  \"data-v-aa4fbd2d\": \"\",\n  height: \"100%\",\n  viewBox: \"0 0 48 48\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, [\n  /* @__PURE__ */ D(\"path\", {\n    d: \"M24 1.714v44.572M1.714 24h44.572\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\",\n    \"stroke-width\": \"3.429\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  })\n], -1), T8 = /* @__PURE__ */ le({\n  __name: \"RequestHeaders\",\n  props: {\n    headers: {},\n    generatedHeaders: {}\n  },\n  setup(t) {\n    const e = t, { activeRequest: n } = sr();\n    function r(o) {\n      var a;\n      (a = n.headers) == null || a.splice(o, 1);\n    }\n    function i() {\n      var o;\n      n.headers === void 0 && (n.headers = []), (o = n.headers) == null || o.push({ name: \"\", value: \"\", enabled: !0 });\n    }\n    const s = j(() => {\n      var o, a;\n      return !!((o = e.headers) != null && o.length || (a = e.generatedHeaders) != null && a.length);\n    });\n    return (o, a) => (Z(), ke(R(bi), {\n      defaultOpen: s.value,\n      title: \"Headers\"\n    }, {\n      default: ce(() => [\n        s.value ? (Z(), ke(R(nc), {\n          key: 1,\n          addLabel: \"Header\",\n          generatedItems: o.generatedHeaders,\n          items: o.headers,\n          onAddAnother: i,\n          onDeleteIndex: r\n        }, null, 8, [\"generatedItems\", \"items\"])) : (Z(), ne(\"div\", P8, [\n          D(\"button\", {\n            class: \"scalar-api-client-add\",\n            type: \"button\",\n            onClick: i\n          }, [\n            _8,\n            He(\" Headers \")\n          ])\n        ]))\n      ]),\n      _: 1\n    }, 8, [\"defaultOpen\"]));\n  }\n}), E8 = {\n  key: 0,\n  class: \"scalar-api-client__empty-state\"\n}, $8 = /* @__PURE__ */ D(\"svg\", {\n  class: \"flow-icon\",\n  \"data-v-aa4fbd2d\": \"\",\n  height: \"100%\",\n  viewBox: \"0 0 48 48\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, [\n  /* @__PURE__ */ D(\"path\", {\n    d: \"M24 1.714v44.572M1.714 24h44.572\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\",\n    \"stroke-width\": \"3.429\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  })\n], -1), Q8 = /* @__PURE__ */ le({\n  __name: \"RequestQuery\",\n  props: {\n    queries: {},\n    generatedQueries: {}\n  },\n  setup(t) {\n    const e = t, { activeRequest: n } = sr();\n    function r(o) {\n      var a;\n      (a = n.query) == null || a.splice(o, 1);\n    }\n    function i() {\n      var o;\n      n.query === void 0 && (n.query = []), (o = n.query) == null || o.push({ name: \"\", value: \"\", enabled: !0 });\n    }\n    const s = j(() => {\n      var o, a;\n      return !!((o = e.queries) != null && o.length || (a = e.generatedQueries) != null && a.length);\n    });\n    return (o, a) => (Z(), ke(R(bi), {\n      defaultOpen: s.value,\n      title: \"Query Parameters\"\n    }, {\n      default: ce(() => [\n        s.value ? (Z(), ke(R(nc), {\n          key: 1,\n          addLabel: \"Query Parameter\",\n          generatedItems: o.generatedQueries,\n          items: o.queries,\n          showMoreFilter: !0,\n          onAddAnother: i,\n          onDeleteIndex: r\n        }, null, 8, [\"generatedItems\", \"items\"])) : (Z(), ne(\"div\", E8, [\n          D(\"button\", {\n            class: \"scalar-api-client-add\",\n            type: \"button\",\n            onClick: i\n          }, [\n            $8,\n            He(\" Query Parameter \")\n          ])\n        ]))\n      ]),\n      _: 1\n    }, 8, [\"defaultOpen\"]));\n  }\n}), C8 = {\n  key: 0,\n  class: \"scalar-api-client__empty-state\"\n}, A8 = /* @__PURE__ */ D(\"svg\", {\n  class: \"flow-icon\",\n  \"data-v-aa4fbd2d\": \"\",\n  height: \"100%\",\n  viewBox: \"0 0 48 48\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, [\n  /* @__PURE__ */ D(\"path\", {\n    d: \"M24 1.714v44.572M1.714 24h44.572\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\",\n    \"stroke-width\": \"3.429\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  })\n], -1), R8 = /* @__PURE__ */ le({\n  __name: \"RequestVariables\",\n  props: {\n    variables: {}\n  },\n  setup(t) {\n    const { activeRequest: e } = sr();\n    function n(i) {\n      var s;\n      (s = e.variables) == null || s.splice(i, 1);\n    }\n    function r() {\n      var i;\n      e.variables === void 0 && (e.variables = []), (i = e.variables) == null || i.push({ name: \"\", value: \"\", enabled: !0 });\n    }\n    return (i, s) => (Z(), ke(R(bi), {\n      defaultOpen: R(e).variables && R(e).variables.length > 0,\n      title: \"Variables\"\n    }, {\n      default: ce(() => [\n        !i.variables || i.variables.length === 0 ? (Z(), ne(\"div\", C8, [\n          D(\"button\", {\n            class: \"scalar-api-client-add\",\n            type: \"button\",\n            onClick: r\n          }, [\n            A8,\n            He(\" Variable \")\n          ])\n        ])) : (Z(), ke(R(nc), {\n          key: 1,\n          addLabel: \"Variable\",\n          items: i.variables,\n          showMoreFilter: !0,\n          onAddAnother: r,\n          onDeleteIndex: n\n        }, null, 8, [\"items\"]))\n      ]),\n      _: 1\n    }, 8, [\"defaultOpen\"]));\n  }\n}), N8 = { class: \"scalar-api-client__main__left custom-scroll\" }, D8 = { class: \"scalar-api-client__main__content\" }, Z8 = { class: \"scalar-api-client__main__content__header\" }, V8 = /* @__PURE__ */ D(\"label\", null, \"Request\", -1), I8 = { class: \"meta\" }, W8 = { class: \"meta-item meta-item__input\" }, M8 = { class: \"scalar-api-client__main__content__body\" }, X8 = /* @__PURE__ */ D(\"div\", { class: \"scalar-api-client__main__scroll-container\" }, null, -1), j8 = !0, B0 = /* @__PURE__ */ le({\n  __name: \"Request\",\n  setup(t) {\n    const { activeRequest: e } = sr(), { authentication: n } = Yl(), {\n      openApi: { operation: r, globalSecurity: i }\n    } = Cw(), s = j(\n      () => {\n        var a;\n        return wP(\n          n,\n          ((a = r == null ? void 0 : r.information) == null ? void 0 : a.security) ?? i\n        );\n      }\n    ), o = j(() => {\n      const a = e.type.toLowerCase();\n      return a === \"put\" || a === \"post\" || a === \"patch\";\n    });\n    return (a, l) => (Z(), ne(\"div\", N8, [\n      D(\"div\", D8, [\n        D(\"div\", Z8, [\n          V8,\n          D(\"div\", I8, [\n            D(\"div\", W8, [\n              Xi(D(\"input\", {\n                \"onUpdate:modelValue\": l[0] || (l[0] = (c) => R(e).name = c),\n                class: \"scalar-api-client__request-name\",\n                disabled: j8,\n                placeholder: \"Request Name\",\n                type: \"text\"\n              }, null, 512), [\n                [Gi, R(e).name]\n              ])\n            ])\n          ])\n        ]),\n        D(\"div\", M8, [\n          J(R8, {\n            variables: R(e).variables\n          }, null, 8, [\"variables\"]),\n          J(R(VX)),\n          J(x8, {\n            cookies: R(e).cookies,\n            generatedCookies: s.value.cookies\n          }, null, 8, [\"cookies\", \"generatedCookies\"]),\n          J(T8, {\n            generatedHeaders: s.value.headers,\n            headers: R(e).headers\n          }, null, 8, [\"generatedHeaders\", \"headers\"]),\n          J(Q8, {\n            generatedQueries: s.value.queryString,\n            queries: R(e).query\n          }, null, 8, [\"generatedQueries\", \"queries\"]),\n          o.value ? (Z(), ke(S8, {\n            key: 0,\n            body: R(e).body,\n            formData: R(e).formData,\n            requestBody: R(e).body\n          }, null, 8, [\"body\", \"formData\", \"requestBody\"])) : st(\"\", !0),\n          X8\n        ])\n      ])\n    ]));\n  }\n}), B8 = `                         .,,uod8B8bou,,.\n                ..,uod8BBBBBBBBBBBBBBBBRPFT?l!i:.\n           ||||||||||||||!?TFPRBBBBBBBBBBBBBBB8m=,\n           ||||   '\"\"^^!!||||||||||TFPRBBBVT!:...!\n           ||||            '\"\"^^!!|||||?!:.......!\n           ||||                     ||||.........!\n           ||||                     ||||.........!\n           ||||                     ||||.........!\n           ||||                     ||||.........!\n           ||||                     ||||.........!\n           ||||                     ||||.........!\n           ||||,                    ||||.........\\`\n           |||||!!-._               ||||.......;.\n           ':!|||||||||!!-._        ||||.....bBBBBWdou,.\n         bBBBBB86foi!|||||||!!-..:|||!..bBBBBBBBBBBBBBBY!\n         ::!?TFPRBBBBBB86foi!||||||||!!bBBBBBBBBBBBBBBY..!\n         :::::::::!?TFPRBBBBBB86ftiaabBBBBBBBBBBBBBBY....!\n         :::;\\`\"^!:;::::::!?TFPRBBBBBBBBBBBBBBBBBBBY......!\n         ;::::::...''^::::::::::!?TFPRBBBBBBBBBBY........!\n     .ob86foi;::::::::::::::::::::::::!?TFPRBY..........\\`\n    .b888888888886foi;:::::::::::::::::::::::..........\\`\n .b888888888888888888886foi;::::::::::::::::..........\n.b888888888888888888888888888886foi;:::::::::......\\`\n!Tf998888888888888888888888888888888886foi;:::....\\`\n  '\"^!|Tf9988888888888888888888888888888888!::..\\`\n       '\"^!|Tf998888888888888888888888889!! '\\`\n             '\"^!|Tf9988888888888888888!!\\`            iBBbo.\n                  '\"^!|Tf998888888889!\\`             WBBBBbo.\n                        '\"^!|Tf9989!\\`              YBBBP^'\n                              '\"^!\\`               \\`\n`, L8 = { class: \"ascii-art\" }, U8 = { class: \"ascii-art-line\" }, q8 = /* @__PURE__ */ le({\n  __name: \"ScalarAsciiArt\",\n  props: {\n    art: {}\n  },\n  setup(t) {\n    const e = t, n = j(() => e.art.split(`\n`));\n    return (r, i) => (Z(), ne(\"div\", L8, [\n      (Z(!0), ne(Pe, null, Xr(n.value, (s, o) => (Z(), ne(\"span\", {\n        key: o,\n        class: \"ascii-art-line-wrapper\",\n        style: Br({ width: `calc(${s.length + 1}ch)` })\n      }, [\n        D(\"span\", U8, De(s), 1)\n      ], 4))), 128))\n    ]));\n  }\n}), Y8 = /* @__PURE__ */ ct(q8, [[\"__scopeId\", \"data-v-c706348d\"]]), z8 = {\n  key: 1,\n  class: \"scalar-api-client__empty-state\"\n}, H8 = {\n  key: 1,\n  class: \"scalar-api-client__empty-state\"\n}, F8 = /* @__PURE__ */ le({\n  __name: \"ResponseBody\",\n  props: {\n    active: { type: Boolean, default: !1 },\n    data: { default: null },\n    headers: {}\n  },\n  setup(t) {\n    const e = t, n = j(() => {\n      const i = e.headers.find(\n        (s) => s.name.toLowerCase() === \"content-type\"\n      );\n      if (!i)\n        return null;\n      try {\n        return JO.parse(i.value).type;\n      } catch {\n        return null;\n      }\n    }), r = j(() => n.value === \"application/json\" || n.value === \"application/problem+json\" || n.value === \"application/vnd.api+json\" ? \"json\" : n.value === \"text/html\" || n.value === \"text/plain\" ? \"html\" : null);\n    return (i, s) => (Z(), ke(R(bi), { title: \"Body\" }, {\n      default: ce(() => [\n        i.active ? (Z(), ne(Pe, { key: 0 }, [\n          r.value ? (Z(), ke(R(oX), {\n            key: 0,\n            class: \"custom-scroll\",\n            content: i.data,\n            lang: r.value\n          }, null, 8, [\"content\", \"lang\"])) : (Z(), ne(\"div\", z8, [\n            n.value ? (Z(), ne(Pe, { key: 0 }, [\n              He(\" No Preview Available (\" + De(n.value) + \") \", 1)\n            ], 64)) : (Z(), ne(Pe, { key: 1 }, [\n              He(\" Can’t render a preview. The Content-Type header is missing or unknown. \")\n            ], 64))\n          ]))\n        ], 64)) : (Z(), ne(\"div\", H8, \" No Response \"))\n      ]),\n      _: 1\n    }));\n  }\n}), G8 = [\"href\"], K8 = /* @__PURE__ */ le({\n  __name: \"HelpfulLink\",\n  props: {\n    href: {}\n  },\n  setup(t) {\n    return (e, n) => (Z(), ne(\"a\", {\n      href: e.href,\n      rel: \"noopener noreferrer\",\n      target: \"_blank\"\n    }, [\n      pt(e.$slots, \"default\", {}, void 0, !0)\n    ], 8, G8));\n  }\n}), NP = /* @__PURE__ */ ct(K8, [[\"__scopeId\", \"data-v-88788c44\"]]), J8 = /* @__PURE__ */ le({\n  __name: \"SimpleCell\",\n  props: {\n    wrap: { type: Boolean, default: !0 },\n    strong: { type: Boolean, default: !1 },\n    href: { default: null }\n  },\n  setup(t) {\n    return (e, n) => (Z(), ne(\"td\", {\n      class: Ke([\"simple-cell\", { wrap: e.wrap, strong: e.strong }])\n    }, [\n      e.href ? (Z(), ke(NP, {\n        key: 0,\n        href: e.href\n      }, {\n        default: ce(() => [\n          pt(e.$slots, \"default\", {}, void 0, !0)\n        ]),\n        _: 3\n      }, 8, [\"href\"])) : pt(e.$slots, \"default\", { key: 1 }, void 0, !0)\n    ], 2));\n  }\n}), Mp = /* @__PURE__ */ ct(J8, [[\"__scopeId\", \"data-v-7e64a8bf\"]]), e4 = /* @__PURE__ */ le({\n  __name: \"SimpleHeader\",\n  setup(t) {\n    return (e, n) => (Z(), ke(Mp, {\n      as: \"th\",\n      class: \"simple-header\"\n    }, {\n      default: ce(() => [\n        pt(e.$slots, \"default\", {}, void 0, !0)\n      ]),\n      _: 3\n    }));\n  }\n}), L0 = /* @__PURE__ */ ct(e4, [[\"__scopeId\", \"data-v-afa8d6ba\"]]), t4 = {}, n4 = { class: \"simple-row\" };\nfunction r4(t, e) {\n  return Z(), ne(\"tr\", n4, [\n    pt(t.$slots, \"default\", {}, void 0, !0)\n  ]);\n}\nconst U0 = /* @__PURE__ */ ct(t4, [[\"render\", r4], [\"__scopeId\", \"data-v-5d742611\"]]), i4 = {}, s4 = { class: \"simple-table-container\" }, o4 = { class: \"simple-table\" };\nfunction a4(t, e) {\n  return Z(), ne(\"div\", s4, [\n    D(\"table\", o4, [\n      pt(t.$slots, \"default\", {}, void 0, !0)\n    ])\n  ]);\n}\nconst l4 = /* @__PURE__ */ ct(i4, [[\"render\", a4], [\"__scopeId\", \"data-v-16749ce2\"]]), c4 = {\n  key: 1,\n  class: \"scalar-api-client__empty-state\"\n}, u4 = /* @__PURE__ */ le({\n  __name: \"ResponseHeaders\",\n  props: {\n    headers: {}\n  },\n  setup(t) {\n    const e = (r) => {\n      var i;\n      return (i = qR.find((s) => s.name.toLowerCase() === r.toLowerCase())) == null ? void 0 : i.url;\n    }, n = (r) => r.split(\"-\").map((i) => i.charAt(0).toUpperCase() + i.slice(1)).join(\"-\");\n    return (r, i) => (Z(), ke(R(bi), { title: \"Headers\" }, {\n      default: ce(() => [\n        r.headers.length > 0 ? (Z(), ke(R(l4), { key: 0 }, {\n          default: ce(() => [\n            J(R(U0), null, {\n              default: ce(() => [\n                J(R(L0), null, {\n                  default: ce(() => [\n                    He(\"Key\")\n                  ]),\n                  _: 1\n                }),\n                J(R(L0), null, {\n                  default: ce(() => [\n                    He(\"Value\")\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            }),\n            (Z(!0), ne(Pe, null, Xr(r.headers, (s) => (Z(), ke(R(U0), {\n              key: s.name\n            }, {\n              default: ce(() => [\n                J(R(Mp), {\n                  href: e(s.name),\n                  strong: !0,\n                  wrap: !1\n                }, {\n                  default: ce(() => [\n                    He(De(n(s.name)), 1)\n                  ]),\n                  _: 2\n                }, 1032, [\"href\"]),\n                J(R(Mp), null, {\n                  default: ce(() => [\n                    He(De(s.value), 1)\n                  ]),\n                  _: 2\n                }, 1024)\n              ]),\n              _: 2\n            }, 1024))), 128))\n          ]),\n          _: 1\n        })) : (Z(), ne(\"div\", c4, \"No Headers\"))\n      ]),\n      _: 1\n    }));\n  }\n}), d4 = { class: \"meta-item\" }, f4 = { class: \"meta-item\" }, h4 = { class: \"meta-item\" }, p4 = /* @__PURE__ */ le({\n  __name: \"ResponseMetaInformation\",\n  props: {\n    response: {}\n  },\n  setup(t) {\n    const e = t, n = (i) => {\n      var s;\n      return (s = i == null ? void 0 : i.headers) != null && s[\"X-API-Client-Content-Length\"] ? Cu(\n        parseFloat(i.headers[\"X-API-Client-Content-Length\"])\n      ) : Cu(0);\n    }, r = j(() => {\n      const i = e.response.statusCode;\n      if (i)\n        return RR[i] ?? void 0;\n    });\n    return (i, s) => {\n      var o, a;\n      return Z(), ne(Pe, null, [\n        D(\"div\", d4, [\n          D(\"span\", null, De(R(dw)(i.response.duration)), 1)\n        ]),\n        D(\"div\", f4, [\n          D(\"span\", null, De(n(i.response)), 1)\n        ]),\n        D(\"div\", h4, [\n          D(\"span\", {\n            class: Ke(`scalar-api-client__status scalar-api-client__status--${String(\n              i.response.statusCode\n            ).charAt(0)}xx`)\n          }, [\n            (o = r.value) != null && o.url ? (Z(), ke(NP, {\n              key: 0,\n              href: r.value.url\n            }, {\n              default: ce(() => [\n                He(De(i.response.statusCode) + \" \" + De(r.value.name), 1)\n              ]),\n              _: 1\n            }, 8, [\"href\"])) : (Z(), ne(Pe, { key: 1 }, [\n              He(De(i.response.statusCode) + \" \" + De((a = r.value) == null ? void 0 : a.name), 1)\n            ], 64))\n          ], 2)\n        ])\n      ], 64);\n    };\n  }\n}), O4 = { class: \"scalar-api-client__main__right custom-scroll\" }, g4 = { class: \"scalar-api-client__main__content\" }, m4 = { class: \"scalar-api-client__main__content__header\" }, b4 = /* @__PURE__ */ D(\"label\", null, \"Response\", -1), v4 = {\n  key: 0,\n  class: \"meta\"\n}, y4 = {\n  key: 0,\n  class: \"scalar-api-client__main__content__body\"\n}, S4 = {\n  key: 0,\n  class: \"scalar-api-client__empty-state\"\n}, w4 = /* @__PURE__ */ D(\"div\", { class: \"scalar-api-client__main__scroll-container\" }, null, -1), k4 = {\n  key: 1,\n  class: \"scalar-api-client__main__content empty-state\"\n}, x4 = /* @__PURE__ */ D(\"p\", null, \"Fill the void and send your request\", -1), q0 = /* @__PURE__ */ le({\n  __name: \"Response\",\n  setup(t) {\n    const { activeResponse: e, activeRequestId: n } = sr(), r = j(() => {\n      var o;\n      const a = (o = e.value) == null ? void 0 : o.headers;\n      return a ? Object.keys(a).map((l) => ({ name: l, value: a[l] })).filter(\n        (l) => ![\n          \"rest-api-client-content-length\",\n          \"X-API-Client-Content-Length\"\n        ].includes(l.name)\n      ) : [];\n    }), i = j(() => {\n      var o;\n      const a = (o = e.value) == null ? void 0 : o.cookies;\n      return a ? Object.keys(a).map((l) => ({ name: l, value: a[l] })) : [];\n    }), s = j(() => {\n      var o;\n      const a = (o = e.value) == null ? void 0 : o.data;\n      return a && Xh(a) ? JSON.stringify(JSON.parse(a), null, 2) : a && typeof Oe(a) == \"object\" || a && !Xh(a) ? JSON.stringify(a, null, 2) : a;\n    });\n    return (o, a) => (Z(), ne(\"div\", O4, [\n      D(\"div\", g4, [\n        D(\"div\", m4, [\n          b4,\n          R(n) && R(e) ? (Z(), ne(\"div\", v4, [\n            J(p4, { response: R(e) }, null, 8, [\"response\"])\n          ])) : st(\"\", !0)\n        ]),\n        R(n) && R(e) ? (Z(), ne(\"div\", y4, [\n          J(F8, {\n            active: !!R(e),\n            data: s.value,\n            headers: r.value\n          }, null, 8, [\"active\", \"data\", \"headers\"]),\n          J(u4, { headers: r.value }, null, 8, [\"headers\"]),\n          J(R(bi), { title: \"Cookies\" }, {\n            default: ce(() => [\n              Xi(J(R(v8), { items: i.value }, null, 8, [\"items\"]), [\n                [jl, i.value.length > 0]\n              ]),\n              i.value.length === 0 ? (Z(), ne(\"div\", S4, \"No Cookies\")) : st(\"\", !0)\n            ]),\n            _: 1\n          }),\n          w4\n        ])) : (Z(), ne(\"div\", k4, [\n          J(Y8, { art: R(B8) }, null, 8, [\"art\"]),\n          x4\n        ]))\n      ])\n    ]));\n  }\n}), P4 = { class: \"scalar-api-client__main\" }, _4 = /* @__PURE__ */ le({\n  __name: \"ApiClient\",\n  props: {\n    proxyUrl: {},\n    readOnly: { type: Boolean, default: !1 },\n    theme: {},\n    withDefaultFonts: { type: Boolean, default: !0 },\n    showSideBar: { type: Boolean, default: !1 }\n  },\n  emits: [\"escapeKeyPress\", \"toggleSidebar\"],\n  setup(t, { emit: e }) {\n    const n = t, r = e, i = BS();\n    Nh(i.escape, () => r(\"escapeKeyPress\")), Nh(i.meta_b, () => r(\"toggleSidebar\"));\n    const { activeRequest: s, readOnly: o } = sr(), a = LC(\"(max-width: 820px)\"), l = G(0), c = {\n      Request: 0,\n      Response: 1\n    };\n    function u(d) {\n      l.value = d;\n    }\n    return ht(\n      () => n.readOnly,\n      () => {\n        o.value = n.readOnly;\n      },\n      { immediate: !0 }\n    ), (d, f) => (Z(), ne(Pe, null, [\n      J(R(wR), {\n        id: d.theme,\n        withDefaultFonts: d.withDefaultFonts\n      }, null, 8, [\"id\", \"withDefaultFonts\"]),\n      J(FR, {\n        class: \"scalar-api-client\",\n        method: R(s).type ?? \"get\",\n        property: \"--scalar-api-client-color\",\n        onKeydown: f[1] || (f[1] = lS((h) => r(\"escapeKeyPress\"), [\"esc\"]))\n      }, {\n        default: ce(() => [\n          D(\"div\", null, [\n            pt(d.$slots, \"address-bar-controls\"),\n            J(GW, {\n              proxyUrl: d.proxyUrl,\n              onOnSend: f[0] || (f[0] = (h) => u(c.Response))\n            }, null, 8, [\"proxyUrl\"])\n          ]),\n          D(\"div\", P4, [\n            d.showSideBar ? pt(d.$slots, \"sidebar\", { key: 0 }) : st(\"\", !0),\n            R(a) ? (Z(), ke(R(DC), {\n              key: 2,\n              selectedIndex: l.value,\n              onChange: u\n            }, {\n              default: ce(() => [\n                J(R(ZC), { class: \"scalar-api-client__mobile-navigation\" }, {\n                  default: ce(() => [\n                    J(R(cb), { class: \"scalar-api-client__mobile-navigation__toggle\" }, {\n                      default: ce(({ selected: h }) => [\n                        D(\"span\", {\n                          class: Ke({\n                            \"scalar-api-client__mobile-navigation--active\": h\n                          })\n                        }, \" Request \", 2)\n                      ]),\n                      _: 1\n                    }),\n                    J(R(cb), { class: \"scalar-api-client__mobile-navigation__toggle\" }, {\n                      default: ce(({ selected: h }) => [\n                        D(\"span\", {\n                          class: Ke({\n                            \"scalar-api-client__mobile-navigation--active\": h\n                          })\n                        }, \" Response \", 2)\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                }),\n                J(R(VC), { as: \"template\" }, {\n                  default: ce(() => [\n                    J(R(ub), { as: \"template\" }, {\n                      default: ce(() => [\n                        J(R(B0))\n                      ]),\n                      _: 1\n                    }),\n                    J(R(ub), { as: \"template\" }, {\n                      default: ce(() => [\n                        J(R(q0))\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            }, 8, [\"selectedIndex\"])) : (Z(), ne(Pe, { key: 1 }, [\n              J(R(B0)),\n              J(R(q0))\n            ], 64))\n          ])\n        ]),\n        _: 3\n      }, 8, [\"method\"])\n    ], 64));\n  }\n});\n/**\n* @vue/compiler-core v3.4.21\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\nconst Tl = Symbol( true ? \"Fragment\" : 0), Ga = Symbol( true ? \"Teleport\" : 0), Cg = Symbol( true ? \"Suspense\" : 0), td = Symbol( true ? \"KeepAlive\" : 0), DP = Symbol( true ? \"BaseTransition\" : 0), Fs = Symbol( true ? \"openBlock\" : 0), ZP = Symbol( true ? \"createBlock\" : 0), VP = Symbol( true ? \"createElementBlock\" : 0), Ag = Symbol( true ? \"createVNode\" : 0), Rg = Symbol( true ? \"createElementVNode\" : 0), rc = Symbol( true ? \"createCommentVNode\" : 0), Ng = Symbol( true ? \"createTextVNode\" : 0), IP = Symbol( true ? \"createStaticVNode\" : 0), Dg = Symbol( true ? \"resolveComponent\" : 0), Zg = Symbol(\n   true ? \"resolveDynamicComponent\" : 0\n), Vg = Symbol( true ? \"resolveDirective\" : 0), Ig = Symbol( true ? \"resolveFilter\" : 0), Wg = Symbol( true ? \"withDirectives\" : 0), Mg = Symbol( true ? \"renderList\" : 0), WP = Symbol( true ? \"renderSlot\" : 0), MP = Symbol( true ? \"createSlots\" : 0), Jd = Symbol( true ? \"toDisplayString\" : 0), nd = Symbol( true ? \"mergeProps\" : 0), Xg = Symbol( true ? \"normalizeClass\" : 0), jg = Symbol( true ? \"normalizeStyle\" : 0), El = Symbol( true ? \"normalizeProps\" : 0), ic = Symbol( true ? \"guardReactiveProps\" : 0), Bg = Symbol( true ? \"toHandlers\" : 0), Xp = Symbol( true ? \"camelize\" : 0), T4 = Symbol( true ? \"capitalize\" : 0), jp = Symbol( true ? \"toHandlerKey\" : 0), rd = Symbol( true ? \"setBlockTracking\" : 0), E4 = Symbol( true ? \"pushScopeId\" : 0), $4 = Symbol( true ? \"popScopeId\" : 0), Lg = Symbol( true ? \"withCtx\" : 0), Q4 = Symbol( true ? \"unref\" : 0), C4 = Symbol( true ? \"isRef\" : 0), Ug = Symbol( true ? \"withMemo\" : 0), XP = Symbol( true ? \"isMemoSame\" : 0), Ho = {\n  [Tl]: \"Fragment\",\n  [Ga]: \"Teleport\",\n  [Cg]: \"Suspense\",\n  [td]: \"KeepAlive\",\n  [DP]: \"BaseTransition\",\n  [Fs]: \"openBlock\",\n  [ZP]: \"createBlock\",\n  [VP]: \"createElementBlock\",\n  [Ag]: \"createVNode\",\n  [Rg]: \"createElementVNode\",\n  [rc]: \"createCommentVNode\",\n  [Ng]: \"createTextVNode\",\n  [IP]: \"createStaticVNode\",\n  [Dg]: \"resolveComponent\",\n  [Zg]: \"resolveDynamicComponent\",\n  [Vg]: \"resolveDirective\",\n  [Ig]: \"resolveFilter\",\n  [Wg]: \"withDirectives\",\n  [Mg]: \"renderList\",\n  [WP]: \"renderSlot\",\n  [MP]: \"createSlots\",\n  [Jd]: \"toDisplayString\",\n  [nd]: \"mergeProps\",\n  [Xg]: \"normalizeClass\",\n  [jg]: \"normalizeStyle\",\n  [El]: \"normalizeProps\",\n  [ic]: \"guardReactiveProps\",\n  [Bg]: \"toHandlers\",\n  [Xp]: \"camelize\",\n  [T4]: \"capitalize\",\n  [jp]: \"toHandlerKey\",\n  [rd]: \"setBlockTracking\",\n  [E4]: \"pushScopeId\",\n  [$4]: \"popScopeId\",\n  [Lg]: \"withCtx\",\n  [Q4]: \"unref\",\n  [C4]: \"isRef\",\n  [Ug]: \"withMemo\",\n  [XP]: \"isMemoSame\"\n};\nfunction A4(t) {\n  Object.getOwnPropertySymbols(t).forEach((e) => {\n    Ho[e] = t[e];\n  });\n}\nconst Ln = {\n  start: { line: 1, column: 1, offset: 0 },\n  end: { line: 1, column: 1, offset: 0 },\n  source: \"\"\n};\nfunction R4(t, e = \"\") {\n  return {\n    type: 0,\n    source: e,\n    children: t,\n    helpers: /* @__PURE__ */ new Set(),\n    components: [],\n    directives: [],\n    hoists: [],\n    imports: [],\n    cached: 0,\n    temps: 0,\n    codegenNode: void 0,\n    loc: Ln\n  };\n}\nfunction $l(t, e, n, r, i, s, o, a = !1, l = !1, c = !1, u = Ln) {\n  return t && (a ? (t.helper(Fs), t.helper(Ko(t.inSSR, c))) : t.helper(Go(t.inSSR, c)), o && t.helper(Wg)), {\n    type: 13,\n    tag: e,\n    props: n,\n    children: r,\n    patchFlag: i,\n    dynamicProps: s,\n    directives: o,\n    isBlock: a,\n    disableTracking: l,\n    isComponent: c,\n    loc: u\n  };\n}\nfunction sc(t, e = Ln) {\n  return {\n    type: 17,\n    loc: e,\n    elements: t\n  };\n}\nfunction Gn(t, e = Ln) {\n  return {\n    type: 15,\n    loc: e,\n    properties: t\n  };\n}\nfunction yt(t, e) {\n  return {\n    type: 16,\n    loc: Ln,\n    key: we(t) ? Ee(t, !0) : t,\n    value: e\n  };\n}\nfunction Ee(t, e = !1, n = Ln, r = 0) {\n  return {\n    type: 4,\n    loc: n,\n    content: t,\n    isStatic: e,\n    constType: e ? 3 : r\n  };\n}\nfunction pr(t, e = Ln) {\n  return {\n    type: 8,\n    loc: e,\n    children: t\n  };\n}\nfunction Dt(t, e = [], n = Ln) {\n  return {\n    type: 14,\n    loc: n,\n    callee: t,\n    arguments: e\n  };\n}\nfunction Fo(t, e = void 0, n = !1, r = !1, i = Ln) {\n  return {\n    type: 18,\n    params: t,\n    returns: e,\n    newline: n,\n    isSlot: r,\n    loc: i\n  };\n}\nfunction Bp(t, e, n, r = !0) {\n  return {\n    type: 19,\n    test: t,\n    consequent: e,\n    alternate: n,\n    newline: r,\n    loc: Ln\n  };\n}\nfunction N4(t, e, n = !1) {\n  return {\n    type: 20,\n    index: t,\n    value: e,\n    isVNode: n,\n    loc: Ln\n  };\n}\nfunction D4(t) {\n  return {\n    type: 21,\n    body: t,\n    loc: Ln\n  };\n}\nfunction Go(t, e) {\n  return t || e ? Ag : Rg;\n}\nfunction Ko(t, e) {\n  return t || e ? ZP : VP;\n}\nfunction qg(t, { helper: e, removeHelper: n, inSSR: r }) {\n  t.isBlock || (t.isBlock = !0, n(Go(r, t.isComponent)), e(Fs), e(Ko(r, t.isComponent)));\n}\nconst Y0 = new Uint8Array([123, 123]), z0 = new Uint8Array([125, 125]);\nfunction H0(t) {\n  return t >= 97 && t <= 122 || t >= 65 && t <= 90;\n}\nfunction Nn(t) {\n  return t === 32 || t === 10 || t === 9 || t === 12 || t === 13;\n}\nfunction Ti(t) {\n  return t === 47 || t === 62 || Nn(t);\n}\nfunction id(t) {\n  const e = new Uint8Array(t.length);\n  for (let n = 0; n < t.length; n++)\n    e[n] = t.charCodeAt(n);\n  return e;\n}\nconst Ut = {\n  Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),\n  // CDATA[\n  CdataEnd: new Uint8Array([93, 93, 62]),\n  // ]]>\n  CommentEnd: new Uint8Array([45, 45, 62]),\n  // `-->`\n  ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),\n  // `<\\/script`\n  StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),\n  // `</style`\n  TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),\n  // `</title`\n  TextareaEnd: new Uint8Array([\n    60,\n    47,\n    116,\n    101,\n    120,\n    116,\n    97,\n    114,\n    101,\n    97\n  ])\n  // `</textarea\n};\nclass Z4 {\n  constructor(e, n) {\n    this.stack = e, this.cbs = n, this.state = 1, this.buffer = \"\", this.sectionStart = 0, this.index = 0, this.entityStart = 0, this.baseState = 1, this.inRCDATA = !1, this.inXML = !1, this.inVPre = !1, this.newlines = [], this.mode = 0, this.delimiterOpen = Y0, this.delimiterClose = z0, this.delimiterIndex = -1, this.currentSequence = void 0, this.sequenceIndex = 0;\n  }\n  get inSFCRoot() {\n    return this.mode === 2 && this.stack.length === 0;\n  }\n  reset() {\n    this.state = 1, this.mode = 0, this.buffer = \"\", this.sectionStart = 0, this.index = 0, this.baseState = 1, this.inRCDATA = !1, this.currentSequence = void 0, this.newlines.length = 0, this.delimiterOpen = Y0, this.delimiterClose = z0;\n  }\n  /**\n   * Generate Position object with line / column information using recorded\n   * newline positions. We know the index is always going to be an already\n   * processed index, so all the newlines up to this index should have been\n   * recorded.\n   */\n  getPos(e) {\n    let n = 1, r = e + 1;\n    for (let i = this.newlines.length - 1; i >= 0; i--) {\n      const s = this.newlines[i];\n      if (e > s) {\n        n = i + 2, r = e - s;\n        break;\n      }\n    }\n    return {\n      column: r,\n      line: n,\n      offset: e\n    };\n  }\n  peek() {\n    return this.buffer.charCodeAt(this.index + 1);\n  }\n  stateText(e) {\n    e === 60 ? (this.index > this.sectionStart && this.cbs.ontext(this.sectionStart, this.index), this.state = 5, this.sectionStart = this.index) : !this.inVPre && e === this.delimiterOpen[0] && (this.state = 2, this.delimiterIndex = 0, this.stateInterpolationOpen(e));\n  }\n  stateInterpolationOpen(e) {\n    if (e === this.delimiterOpen[this.delimiterIndex])\n      if (this.delimiterIndex === this.delimiterOpen.length - 1) {\n        const n = this.index + 1 - this.delimiterOpen.length;\n        n > this.sectionStart && this.cbs.ontext(this.sectionStart, n), this.state = 3, this.sectionStart = n;\n      } else\n        this.delimiterIndex++;\n    else\n      this.inRCDATA ? (this.state = 32, this.stateInRCDATA(e)) : (this.state = 1, this.stateText(e));\n  }\n  stateInterpolation(e) {\n    e === this.delimiterClose[0] && (this.state = 4, this.delimiterIndex = 0, this.stateInterpolationClose(e));\n  }\n  stateInterpolationClose(e) {\n    e === this.delimiterClose[this.delimiterIndex] ? this.delimiterIndex === this.delimiterClose.length - 1 ? (this.cbs.oninterpolation(this.sectionStart, this.index + 1), this.inRCDATA ? this.state = 32 : this.state = 1, this.sectionStart = this.index + 1) : this.delimiterIndex++ : (this.state = 3, this.stateInterpolation(e));\n  }\n  stateSpecialStartSequence(e) {\n    const n = this.sequenceIndex === this.currentSequence.length;\n    if (!(n ? (\n      // If we are at the end of the sequence, make sure the tag name has ended\n      Ti(e)\n    ) : (\n      // Otherwise, do a case-insensitive comparison\n      (e | 32) === this.currentSequence[this.sequenceIndex]\n    )))\n      this.inRCDATA = !1;\n    else if (!n) {\n      this.sequenceIndex++;\n      return;\n    }\n    this.sequenceIndex = 0, this.state = 6, this.stateInTagName(e);\n  }\n  /** Look for an end tag. For <title> and <textarea>, also decode entities. */\n  stateInRCDATA(e) {\n    if (this.sequenceIndex === this.currentSequence.length) {\n      if (e === 62 || Nn(e)) {\n        const n = this.index - this.currentSequence.length;\n        if (this.sectionStart < n) {\n          const r = this.index;\n          this.index = n, this.cbs.ontext(this.sectionStart, n), this.index = r;\n        }\n        this.sectionStart = n + 2, this.stateInClosingTagName(e), this.inRCDATA = !1;\n        return;\n      }\n      this.sequenceIndex = 0;\n    }\n    (e | 32) === this.currentSequence[this.sequenceIndex] ? this.sequenceIndex += 1 : this.sequenceIndex === 0 ? this.currentSequence === Ut.TitleEnd || this.currentSequence === Ut.TextareaEnd && !this.inSFCRoot ? e === this.delimiterOpen[0] && (this.state = 2, this.delimiterIndex = 0, this.stateInterpolationOpen(e)) : this.fastForwardTo(60) && (this.sequenceIndex = 1) : this.sequenceIndex = +(e === 60);\n  }\n  stateCDATASequence(e) {\n    e === Ut.Cdata[this.sequenceIndex] ? ++this.sequenceIndex === Ut.Cdata.length && (this.state = 28, this.currentSequence = Ut.CdataEnd, this.sequenceIndex = 0, this.sectionStart = this.index + 1) : (this.sequenceIndex = 0, this.state = 23, this.stateInDeclaration(e));\n  }\n  /**\n   * When we wait for one specific character, we can speed things up\n   * by skipping through the buffer until we find it.\n   *\n   * @returns Whether the character was found.\n   */\n  fastForwardTo(e) {\n    for (; ++this.index < this.buffer.length; ) {\n      const n = this.buffer.charCodeAt(this.index);\n      if (n === 10 && this.newlines.push(this.index), n === e)\n        return !0;\n    }\n    return this.index = this.buffer.length - 1, !1;\n  }\n  /**\n   * Comments and CDATA end with `-->` and `]]>`.\n   *\n   * Their common qualities are:\n   * - Their end sequences have a distinct character they start with.\n   * - That character is then repeated, so we have to check multiple repeats.\n   * - All characters but the start character of the sequence can be skipped.\n   */\n  stateInCommentLike(e) {\n    e === this.currentSequence[this.sequenceIndex] ? ++this.sequenceIndex === this.currentSequence.length && (this.currentSequence === Ut.CdataEnd ? this.cbs.oncdata(this.sectionStart, this.index - 2) : this.cbs.oncomment(this.sectionStart, this.index - 2), this.sequenceIndex = 0, this.sectionStart = this.index + 1, this.state = 1) : this.sequenceIndex === 0 ? this.fastForwardTo(this.currentSequence[0]) && (this.sequenceIndex = 1) : e !== this.currentSequence[this.sequenceIndex - 1] && (this.sequenceIndex = 0);\n  }\n  startSpecial(e, n) {\n    this.enterRCDATA(e, n), this.state = 31;\n  }\n  enterRCDATA(e, n) {\n    this.inRCDATA = !0, this.currentSequence = e, this.sequenceIndex = n;\n  }\n  stateBeforeTagName(e) {\n    e === 33 ? (this.state = 22, this.sectionStart = this.index + 1) : e === 63 ? (this.state = 24, this.sectionStart = this.index + 1) : H0(e) ? (this.sectionStart = this.index, this.mode === 0 ? this.state = 6 : this.inSFCRoot ? this.state = 34 : this.inXML ? this.state = 6 : e === 116 ? this.state = 30 : this.state = e === 115 ? 29 : 6) : e === 47 ? this.state = 8 : (this.state = 1, this.stateText(e));\n  }\n  stateInTagName(e) {\n    Ti(e) && this.handleTagName(e);\n  }\n  stateInSFCRootTagName(e) {\n    if (Ti(e)) {\n      const n = this.buffer.slice(this.sectionStart, this.index);\n      n !== \"template\" && this.enterRCDATA(id(\"</\" + n), 0), this.handleTagName(e);\n    }\n  }\n  handleTagName(e) {\n    this.cbs.onopentagname(this.sectionStart, this.index), this.sectionStart = -1, this.state = 11, this.stateBeforeAttrName(e);\n  }\n  stateBeforeClosingTagName(e) {\n    Nn(e) || (e === 62 ? ( true && this.cbs.onerr(14, this.index), this.state = 1, this.sectionStart = this.index + 1) : (this.state = H0(e) ? 9 : 27, this.sectionStart = this.index));\n  }\n  stateInClosingTagName(e) {\n    (e === 62 || Nn(e)) && (this.cbs.onclosetag(this.sectionStart, this.index), this.sectionStart = -1, this.state = 10, this.stateAfterClosingTagName(e));\n  }\n  stateAfterClosingTagName(e) {\n    e === 62 && (this.state = 1, this.sectionStart = this.index + 1);\n  }\n  stateBeforeAttrName(e) {\n    e === 62 ? (this.cbs.onopentagend(this.index), this.inRCDATA ? this.state = 32 : this.state = 1, this.sectionStart = this.index + 1) : e === 47 ? (this.state = 7,  true && this.peek() !== 62 && this.cbs.onerr(22, this.index)) : e === 60 && this.peek() === 47 ? (this.cbs.onopentagend(this.index), this.state = 5, this.sectionStart = this.index) : Nn(e) || ( true && e === 61 && this.cbs.onerr(\n      19,\n      this.index\n    ), this.handleAttrStart(e));\n  }\n  handleAttrStart(e) {\n    e === 118 && this.peek() === 45 ? (this.state = 13, this.sectionStart = this.index) : e === 46 || e === 58 || e === 64 || e === 35 ? (this.cbs.ondirname(this.index, this.index + 1), this.state = 14, this.sectionStart = this.index + 1) : (this.state = 12, this.sectionStart = this.index);\n  }\n  stateInSelfClosingTag(e) {\n    e === 62 ? (this.cbs.onselfclosingtag(this.index), this.state = 1, this.sectionStart = this.index + 1, this.inRCDATA = !1) : Nn(e) || (this.state = 11, this.stateBeforeAttrName(e));\n  }\n  stateInAttrName(e) {\n    e === 61 || Ti(e) ? (this.cbs.onattribname(this.sectionStart, this.index), this.handleAttrNameEnd(e)) :  true && (e === 34 || e === 39 || e === 60) && this.cbs.onerr(\n      17,\n      this.index\n    );\n  }\n  stateInDirName(e) {\n    e === 61 || Ti(e) ? (this.cbs.ondirname(this.sectionStart, this.index), this.handleAttrNameEnd(e)) : e === 58 ? (this.cbs.ondirname(this.sectionStart, this.index), this.state = 14, this.sectionStart = this.index + 1) : e === 46 && (this.cbs.ondirname(this.sectionStart, this.index), this.state = 16, this.sectionStart = this.index + 1);\n  }\n  stateInDirArg(e) {\n    e === 61 || Ti(e) ? (this.cbs.ondirarg(this.sectionStart, this.index), this.handleAttrNameEnd(e)) : e === 91 ? this.state = 15 : e === 46 && (this.cbs.ondirarg(this.sectionStart, this.index), this.state = 16, this.sectionStart = this.index + 1);\n  }\n  stateInDynamicDirArg(e) {\n    e === 93 ? this.state = 14 : (e === 61 || Ti(e)) && (this.cbs.ondirarg(this.sectionStart, this.index + 1), this.handleAttrNameEnd(e),  true && this.cbs.onerr(\n      27,\n      this.index\n    ));\n  }\n  stateInDirModifier(e) {\n    e === 61 || Ti(e) ? (this.cbs.ondirmodifier(this.sectionStart, this.index), this.handleAttrNameEnd(e)) : e === 46 && (this.cbs.ondirmodifier(this.sectionStart, this.index), this.sectionStart = this.index + 1);\n  }\n  handleAttrNameEnd(e) {\n    this.sectionStart = this.index, this.state = 17, this.cbs.onattribnameend(this.index), this.stateAfterAttrName(e);\n  }\n  stateAfterAttrName(e) {\n    e === 61 ? this.state = 18 : e === 47 || e === 62 ? (this.cbs.onattribend(0, this.sectionStart), this.sectionStart = -1, this.state = 11, this.stateBeforeAttrName(e)) : Nn(e) || (this.cbs.onattribend(0, this.sectionStart), this.handleAttrStart(e));\n  }\n  stateBeforeAttrValue(e) {\n    e === 34 ? (this.state = 19, this.sectionStart = this.index + 1) : e === 39 ? (this.state = 20, this.sectionStart = this.index + 1) : Nn(e) || (this.sectionStart = this.index, this.state = 21, this.stateInAttrValueNoQuotes(e));\n  }\n  handleInAttrValue(e, n) {\n    (e === n || this.fastForwardTo(n)) && (this.cbs.onattribdata(this.sectionStart, this.index), this.sectionStart = -1, this.cbs.onattribend(\n      n === 34 ? 3 : 2,\n      this.index + 1\n    ), this.state = 11);\n  }\n  stateInAttrValueDoubleQuotes(e) {\n    this.handleInAttrValue(e, 34);\n  }\n  stateInAttrValueSingleQuotes(e) {\n    this.handleInAttrValue(e, 39);\n  }\n  stateInAttrValueNoQuotes(e) {\n    Nn(e) || e === 62 ? (this.cbs.onattribdata(this.sectionStart, this.index), this.sectionStart = -1, this.cbs.onattribend(1, this.index), this.state = 11, this.stateBeforeAttrName(e)) : ( true && e === 34 || e === 39 || e === 60 || e === 61 || e === 96) && this.cbs.onerr(\n      18,\n      this.index\n    );\n  }\n  stateBeforeDeclaration(e) {\n    e === 91 ? (this.state = 26, this.sequenceIndex = 0) : this.state = e === 45 ? 25 : 23;\n  }\n  stateInDeclaration(e) {\n    (e === 62 || this.fastForwardTo(62)) && (this.state = 1, this.sectionStart = this.index + 1);\n  }\n  stateInProcessingInstruction(e) {\n    (e === 62 || this.fastForwardTo(62)) && (this.cbs.onprocessinginstruction(this.sectionStart, this.index), this.state = 1, this.sectionStart = this.index + 1);\n  }\n  stateBeforeComment(e) {\n    e === 45 ? (this.state = 28, this.currentSequence = Ut.CommentEnd, this.sequenceIndex = 2, this.sectionStart = this.index + 1) : this.state = 23;\n  }\n  stateInSpecialComment(e) {\n    (e === 62 || this.fastForwardTo(62)) && (this.cbs.oncomment(this.sectionStart, this.index), this.state = 1, this.sectionStart = this.index + 1);\n  }\n  stateBeforeSpecialS(e) {\n    e === Ut.ScriptEnd[3] ? this.startSpecial(Ut.ScriptEnd, 4) : e === Ut.StyleEnd[3] ? this.startSpecial(Ut.StyleEnd, 4) : (this.state = 6, this.stateInTagName(e));\n  }\n  stateBeforeSpecialT(e) {\n    e === Ut.TitleEnd[3] ? this.startSpecial(Ut.TitleEnd, 4) : e === Ut.TextareaEnd[3] ? this.startSpecial(Ut.TextareaEnd, 4) : (this.state = 6, this.stateInTagName(e));\n  }\n  startEntity() {\n  }\n  stateInEntity() {\n  }\n  /**\n   * Iterates through the buffer, calling the function corresponding to the current state.\n   *\n   * States that are more likely to be hit are higher up, as a performance improvement.\n   */\n  parse(e) {\n    for (this.buffer = e; this.index < this.buffer.length; ) {\n      const n = this.buffer.charCodeAt(this.index);\n      switch (n === 10 && this.newlines.push(this.index), this.state) {\n        case 1: {\n          this.stateText(n);\n          break;\n        }\n        case 2: {\n          this.stateInterpolationOpen(n);\n          break;\n        }\n        case 3: {\n          this.stateInterpolation(n);\n          break;\n        }\n        case 4: {\n          this.stateInterpolationClose(n);\n          break;\n        }\n        case 31: {\n          this.stateSpecialStartSequence(n);\n          break;\n        }\n        case 32: {\n          this.stateInRCDATA(n);\n          break;\n        }\n        case 26: {\n          this.stateCDATASequence(n);\n          break;\n        }\n        case 19: {\n          this.stateInAttrValueDoubleQuotes(n);\n          break;\n        }\n        case 12: {\n          this.stateInAttrName(n);\n          break;\n        }\n        case 13: {\n          this.stateInDirName(n);\n          break;\n        }\n        case 14: {\n          this.stateInDirArg(n);\n          break;\n        }\n        case 15: {\n          this.stateInDynamicDirArg(n);\n          break;\n        }\n        case 16: {\n          this.stateInDirModifier(n);\n          break;\n        }\n        case 28: {\n          this.stateInCommentLike(n);\n          break;\n        }\n        case 27: {\n          this.stateInSpecialComment(n);\n          break;\n        }\n        case 11: {\n          this.stateBeforeAttrName(n);\n          break;\n        }\n        case 6: {\n          this.stateInTagName(n);\n          break;\n        }\n        case 34: {\n          this.stateInSFCRootTagName(n);\n          break;\n        }\n        case 9: {\n          this.stateInClosingTagName(n);\n          break;\n        }\n        case 5: {\n          this.stateBeforeTagName(n);\n          break;\n        }\n        case 17: {\n          this.stateAfterAttrName(n);\n          break;\n        }\n        case 20: {\n          this.stateInAttrValueSingleQuotes(n);\n          break;\n        }\n        case 18: {\n          this.stateBeforeAttrValue(n);\n          break;\n        }\n        case 8: {\n          this.stateBeforeClosingTagName(n);\n          break;\n        }\n        case 10: {\n          this.stateAfterClosingTagName(n);\n          break;\n        }\n        case 29: {\n          this.stateBeforeSpecialS(n);\n          break;\n        }\n        case 30: {\n          this.stateBeforeSpecialT(n);\n          break;\n        }\n        case 21: {\n          this.stateInAttrValueNoQuotes(n);\n          break;\n        }\n        case 7: {\n          this.stateInSelfClosingTag(n);\n          break;\n        }\n        case 23: {\n          this.stateInDeclaration(n);\n          break;\n        }\n        case 22: {\n          this.stateBeforeDeclaration(n);\n          break;\n        }\n        case 25: {\n          this.stateBeforeComment(n);\n          break;\n        }\n        case 24: {\n          this.stateInProcessingInstruction(n);\n          break;\n        }\n        case 33: {\n          this.stateInEntity();\n          break;\n        }\n      }\n      this.index++;\n    }\n    this.cleanup(), this.finish();\n  }\n  /**\n   * Remove data that has already been consumed from the buffer.\n   */\n  cleanup() {\n    this.sectionStart !== this.index && (this.state === 1 || this.state === 32 && this.sequenceIndex === 0 ? (this.cbs.ontext(this.sectionStart, this.index), this.sectionStart = this.index) : (this.state === 19 || this.state === 20 || this.state === 21) && (this.cbs.onattribdata(this.sectionStart, this.index), this.sectionStart = this.index));\n  }\n  finish() {\n    this.handleTrailingData(), this.cbs.onend();\n  }\n  /** Handle any trailing data. */\n  handleTrailingData() {\n    const e = this.buffer.length;\n    this.sectionStart >= e || (this.state === 28 ? this.currentSequence === Ut.CdataEnd ? this.cbs.oncdata(this.sectionStart, e) : this.cbs.oncomment(this.sectionStart, e) : this.state === 6 || this.state === 11 || this.state === 18 || this.state === 17 || this.state === 12 || this.state === 13 || this.state === 14 || this.state === 15 || this.state === 16 || this.state === 20 || this.state === 19 || this.state === 21 || this.state === 9 || this.cbs.ontext(this.sectionStart, e));\n  }\n  emitCodePoint(e, n) {\n  }\n}\nconst V4 = {\n  COMPILER_IS_ON_ELEMENT: {\n    message: 'Platform-native elements with \"is\" prop will no longer be treated as components in Vue 3 unless the \"is\" value is explicitly prefixed with \"vue:\".',\n    link: \"https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html\"\n  },\n  COMPILER_V_BIND_SYNC: {\n    message: (t) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \\`v-bind:${t}.sync\\` should be changed to \\`v-model:${t}\\`.`,\n    link: \"https://v3-migration.vuejs.org/breaking-changes/v-model.html\"\n  },\n  COMPILER_V_BIND_OBJECT_ORDER: {\n    message: 'v-bind=\"obj\" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.',\n    link: \"https://v3-migration.vuejs.org/breaking-changes/v-bind.html\"\n  },\n  COMPILER_V_ON_NATIVE: {\n    message: \".native modifier for v-on has been removed as is no longer necessary.\",\n    link: \"https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html\"\n  },\n  COMPILER_V_IF_V_FOR_PRECEDENCE: {\n    message: \"v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.\",\n    link: \"https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html\"\n  },\n  COMPILER_NATIVE_TEMPLATE: {\n    message: \"<template> with no special directives will render as a native template element instead of its inner content in Vue 3.\"\n  },\n  COMPILER_INLINE_TEMPLATE: {\n    message: '\"inline-template\" has been removed in Vue 3.',\n    link: \"https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html\"\n  },\n  COMPILER_FILTERS: {\n    message: 'filters have been removed in Vue 3. The \"|\" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.',\n    link: \"https://v3-migration.vuejs.org/breaking-changes/filters.html\"\n  }\n};\nfunction Lp(t, { compatConfig: e }) {\n  const n = e && e[t];\n  return t === \"MODE\" ? n || 3 : n;\n}\nfunction es(t, e) {\n  const n = Lp(\"MODE\", e), r = Lp(t, e);\n  return n === 3 ? r === !0 : r !== !1;\n}\nfunction Jo(t, e, n, ...r) {\n  const i = es(t, e);\n  return  true && i && sd(t, e, n, ...r), i;\n}\nfunction sd(t, e, n, ...r) {\n  if (Lp(t, e) === \"suppress-warning\")\n    return;\n  const { message: s, link: o } = V4[t], a = `(deprecation ${t}) ${typeof s == \"function\" ? s(...r) : s}${o ? `\n  Details: ${o}` : \"\"}`, l = new SyntaxError(a);\n  l.code = t, n && (l.loc = n), e.onWarn(l);\n}\nfunction Yg(t) {\n  throw t;\n}\nfunction jP(t) {\n   true && console.warn(`[Vue warn] ${t.message}`);\n}\nfunction Ge(t, e, n, r) {\n  const i =  true ? (n || I4)[t] + (r || \"\") : 0, s = new SyntaxError(String(i));\n  return s.code = t, s.loc = e, s;\n}\nconst I4 = {\n  // parse errors\n  0: \"Illegal comment.\",\n  1: \"CDATA section is allowed only in XML context.\",\n  2: \"Duplicate attribute.\",\n  3: \"End tag cannot have attributes.\",\n  4: \"Illegal '/' in tags.\",\n  5: \"Unexpected EOF in tag.\",\n  6: \"Unexpected EOF in CDATA section.\",\n  7: \"Unexpected EOF in comment.\",\n  8: \"Unexpected EOF in script.\",\n  9: \"Unexpected EOF in tag.\",\n  10: \"Incorrectly closed comment.\",\n  11: \"Incorrectly opened comment.\",\n  12: \"Illegal tag name. Use '&lt;' to print '<'.\",\n  13: \"Attribute value was expected.\",\n  14: \"End tag name was expected.\",\n  15: \"Whitespace was expected.\",\n  16: \"Unexpected '<!--' in comment.\",\n  17: `Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C (<).`,\n  18: \"Unquoted attribute value cannot contain U+0022 (\\\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).\",\n  19: \"Attribute name cannot start with '='.\",\n  21: \"'<?' is allowed only in XML context.\",\n  20: \"Unexpected null character.\",\n  22: \"Illegal '/' in tags.\",\n  // Vue-specific parse errors\n  23: \"Invalid end tag.\",\n  24: \"Element is missing end tag.\",\n  25: \"Interpolation end sign was not found.\",\n  27: \"End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.\",\n  26: \"Legal directive name was expected.\",\n  // transform errors\n  28: \"v-if/v-else-if is missing expression.\",\n  29: \"v-if/else branches must use unique keys.\",\n  30: \"v-else/v-else-if has no adjacent v-if or v-else-if.\",\n  31: \"v-for is missing expression.\",\n  32: \"v-for has invalid expression.\",\n  33: \"<template v-for> key should be placed on the <template> tag.\",\n  34: \"v-bind is missing expression.\",\n  52: \"v-bind with same-name shorthand only allows static argument.\",\n  35: \"v-on is missing expression.\",\n  36: \"Unexpected custom directive on <slot> outlet.\",\n  37: \"Mixed v-slot usage on both the component and nested <template>. When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.\",\n  38: \"Duplicate slot names found. \",\n  39: \"Extraneous children found when component already has explicitly named default slot. These children will be ignored.\",\n  40: \"v-slot can only be used on components or <template> tags.\",\n  41: \"v-model is missing expression.\",\n  42: \"v-model value must be a valid JavaScript member expression.\",\n  43: \"v-model cannot be used on v-for or v-slot scope variables because they are not writable.\",\n  44: `v-model cannot be used on a prop, because local prop bindings are not writable.\nUse a v-bind binding combined with a v-on listener that emits update:x event instead.`,\n  45: \"Error parsing JavaScript expression: \",\n  46: \"<KeepAlive> expects exactly one child component.\",\n  51: \"@vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, @vnode-mounted should be changed to @vue:mounted. @vnode-* hooks support has been removed in 3.4.\",\n  // generic errors\n  47: '\"prefixIdentifiers\" option is not supported in this build of compiler.',\n  48: \"ES module mode is not supported in this build of compiler.\",\n  49: '\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled.',\n  50: '\"scopeId\" option is only supported in module mode.',\n  // just to fulfill types\n  53: \"\"\n}, xn = (t) => t.type === 4 && t.isStatic;\nfunction BP(t) {\n  switch (t) {\n    case \"Teleport\":\n    case \"teleport\":\n      return Ga;\n    case \"Suspense\":\n    case \"suspense\":\n      return Cg;\n    case \"KeepAlive\":\n    case \"keep-alive\":\n      return td;\n    case \"BaseTransition\":\n    case \"base-transition\":\n      return DP;\n  }\n}\nconst W4 = /^\\d|[^\\$\\w]/, zg = (t) => !W4.test(t), M4 = /[A-Za-z_$\\xA0-\\uFFFF]/, X4 = /[\\.\\?\\w$\\xA0-\\uFFFF]/, j4 = /\\s+[.[]\\s*|\\s*[.[]\\s+/g, B4 = (t) => {\n  t = t.trim().replace(j4, (o) => o.trim());\n  let e = 0, n = [], r = 0, i = 0, s = null;\n  for (let o = 0; o < t.length; o++) {\n    const a = t.charAt(o);\n    switch (e) {\n      case 0:\n        if (a === \"[\")\n          n.push(e), e = 1, r++;\n        else if (a === \"(\")\n          n.push(e), e = 2, i++;\n        else if (!(o === 0 ? M4 : X4).test(a))\n          return !1;\n        break;\n      case 1:\n        a === \"'\" || a === '\"' || a === \"`\" ? (n.push(e), e = 3, s = a) : a === \"[\" ? r++ : a === \"]\" && (--r || (e = n.pop()));\n        break;\n      case 2:\n        if (a === \"'\" || a === '\"' || a === \"`\")\n          n.push(e), e = 3, s = a;\n        else if (a === \"(\")\n          i++;\n        else if (a === \")\") {\n          if (o === t.length - 1)\n            return !1;\n          --i || (e = n.pop());\n        }\n        break;\n      case 3:\n        a === s && (e = n.pop(), s = null);\n        break;\n    }\n  }\n  return !r && !i;\n}, LP = B4;\nfunction F0(t, e) {\n  if (!t)\n    throw new Error(e || \"unexpected compiler condition\");\n}\nfunction zn(t, e, n = !1) {\n  for (let r = 0; r < t.props.length; r++) {\n    const i = t.props[r];\n    if (i.type === 7 && (n || i.exp) && (we(e) ? i.name === e : e.test(i.name)))\n      return i;\n  }\n}\nfunction Ql(t, e, n = !1, r = !1) {\n  for (let i = 0; i < t.props.length; i++) {\n    const s = t.props[i];\n    if (s.type === 6) {\n      if (n)\n        continue;\n      if (s.name === e && (s.value || r))\n        return s;\n    } else if (s.name === \"bind\" && (s.exp || r) && Li(s.arg, e))\n      return s;\n  }\n}\nfunction Li(t, e) {\n  return !!(t && xn(t) && t.content === e);\n}\nfunction L4(t) {\n  return t.props.some(\n    (e) => e.type === 7 && e.name === \"bind\" && (!e.arg || // v-bind=\"obj\"\n    e.arg.type !== 4 || // v-bind:[_ctx.foo]\n    !e.arg.isStatic)\n    // v-bind:[foo]\n  );\n}\nfunction eh(t) {\n  return t.type === 5 || t.type === 2;\n}\nfunction U4(t) {\n  return t.type === 7 && t.name === \"slot\";\n}\nfunction od(t) {\n  return t.type === 1 && t.tagType === 3;\n}\nfunction ad(t) {\n  return t.type === 1 && t.tagType === 2;\n}\nconst q4 = /* @__PURE__ */ new Set([El, ic]);\nfunction UP(t, e = []) {\n  if (t && !we(t) && t.type === 14) {\n    const n = t.callee;\n    if (!we(n) && q4.has(n))\n      return UP(\n        t.arguments[0],\n        e.concat(t)\n      );\n  }\n  return [t, e];\n}\nfunction ld(t, e, n) {\n  let r, i = t.type === 13 ? t.props : t.arguments[2], s = [], o;\n  if (i && !we(i) && i.type === 14) {\n    const a = UP(i);\n    i = a[0], s = a[1], o = s[s.length - 1];\n  }\n  if (i == null || we(i))\n    r = Gn([e]);\n  else if (i.type === 14) {\n    const a = i.arguments[0];\n    !we(a) && a.type === 15 ? G0(e, a) || a.properties.unshift(e) : i.callee === Bg ? r = Dt(n.helper(nd), [\n      Gn([e]),\n      i\n    ]) : i.arguments.unshift(Gn([e])), !r && (r = i);\n  } else\n    i.type === 15 ? (G0(e, i) || i.properties.unshift(e), r = i) : (r = Dt(n.helper(nd), [\n      Gn([e]),\n      i\n    ]), o && o.callee === ic && (o = s[s.length - 2]));\n  t.type === 13 ? o ? o.arguments[0] = r : t.props = r : o ? o.arguments[0] = r : t.arguments[2] = r;\n}\nfunction G0(t, e) {\n  let n = !1;\n  if (t.key.type === 4) {\n    const r = t.key.content;\n    n = e.properties.some(\n      (i) => i.key.type === 4 && i.key.content === r\n    );\n  }\n  return n;\n}\nfunction Cl(t, e) {\n  return `_${e}_${t.replace(/[^\\w]/g, (n, r) => n === \"-\" ? \"_\" : t.charCodeAt(r).toString())}`;\n}\nfunction Y4(t) {\n  return t.type === 14 && t.callee === Ug ? t.arguments[1].returns : t;\n}\nconst z4 = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/, qP = {\n  parseMode: \"base\",\n  ns: 0,\n  delimiters: [\"{{\", \"}}\"],\n  getNamespace: () => 0,\n  isVoidTag: zc,\n  isPreTag: zc,\n  isCustomElement: zc,\n  onError: Yg,\n  onWarn: jP,\n  comments: \"development\" !== \"production\",\n  prefixIdentifiers: !1\n};\nlet Ie = qP, Al = null, Ws = \"\", en = null, Me = null, bn = \"\", Jr = -1, bs = -1, cd = 0, Vi = !1, Up = null;\nconst vt = [], at = new Z4(vt, {\n  onerr: mn,\n  ontext(t, e) {\n    Uc(qt(t, e), t, e);\n  },\n  ontextentity(t, e, n) {\n    Uc(t, e, n);\n  },\n  oninterpolation(t, e) {\n    if (Vi)\n      return Uc(qt(t, e), t, e);\n    let n = t + at.delimiterOpen.length, r = e - at.delimiterClose.length;\n    for (; Nn(Ws.charCodeAt(n)); )\n      n++;\n    for (; Nn(Ws.charCodeAt(r - 1)); )\n      r--;\n    let i = qt(n, r);\n    i.includes(\"&\") && (i = Ie.decodeEntities(i, !1)), qp({\n      type: 5,\n      content: pu(i, !1, Rt(n, r)),\n      loc: Rt(t, e)\n    });\n  },\n  onopentagname(t, e) {\n    const n = qt(t, e);\n    en = {\n      type: 1,\n      tag: n,\n      ns: Ie.getNamespace(n, vt[0], Ie.ns),\n      tagType: 0,\n      // will be refined on tag close\n      props: [],\n      children: [],\n      loc: Rt(t - 1, e),\n      codegenNode: void 0\n    };\n  },\n  onopentagend(t) {\n    J0(t);\n  },\n  onclosetag(t, e) {\n    const n = qt(t, e);\n    if (!Ie.isVoidTag(n)) {\n      let r = !1;\n      for (let i = 0; i < vt.length; i++)\n        if (vt[i].tag.toLowerCase() === n.toLowerCase()) {\n          r = !0, i > 0 && mn(24, vt[0].loc.start.offset);\n          for (let o = 0; o <= i; o++) {\n            const a = vt.shift();\n            hu(a, e, o < i);\n          }\n          break;\n        }\n      r || mn(23, YP(t, 60));\n    }\n  },\n  onselfclosingtag(t) {\n    var e;\n    const n = en.tag;\n    en.isSelfClosing = !0, J0(t), ((e = vt[0]) == null ? void 0 : e.tag) === n && hu(vt.shift(), t);\n  },\n  onattribname(t, e) {\n    Me = {\n      type: 6,\n      name: qt(t, e),\n      nameLoc: Rt(t, e),\n      value: void 0,\n      loc: Rt(t)\n    };\n  },\n  ondirname(t, e) {\n    const n = qt(t, e), r = n === \".\" || n === \":\" ? \"bind\" : n === \"@\" ? \"on\" : n === \"#\" ? \"slot\" : n.slice(2);\n    if (!Vi && r === \"\" && mn(26, t), Vi || r === \"\")\n      Me = {\n        type: 6,\n        name: n,\n        nameLoc: Rt(t, e),\n        value: void 0,\n        loc: Rt(t)\n      };\n    else if (Me = {\n      type: 7,\n      name: r,\n      rawName: n,\n      exp: void 0,\n      arg: void 0,\n      modifiers: n === \".\" ? [\"prop\"] : [],\n      loc: Rt(t)\n    }, r === \"pre\") {\n      Vi = at.inVPre = !0, Up = en;\n      const i = en.props;\n      for (let s = 0; s < i.length; s++)\n        i[s].type === 7 && (i[s] = r7(i[s]));\n    }\n  },\n  ondirarg(t, e) {\n    if (t === e)\n      return;\n    const n = qt(t, e);\n    if (Vi)\n      Me.name += n, $s(Me.nameLoc, e);\n    else {\n      const r = n[0] !== \"[\";\n      Me.arg = pu(\n        r ? n : n.slice(1, -1),\n        r,\n        Rt(t, e),\n        r ? 3 : 0\n      );\n    }\n  },\n  ondirmodifier(t, e) {\n    const n = qt(t, e);\n    if (Vi)\n      Me.name += \".\" + n, $s(Me.nameLoc, e);\n    else if (Me.name === \"slot\") {\n      const r = Me.arg;\n      r && (r.content += \".\" + n, $s(r.loc, e));\n    } else\n      Me.modifiers.push(n);\n  },\n  onattribdata(t, e) {\n    bn += qt(t, e), Jr < 0 && (Jr = t), bs = e;\n  },\n  onattribentity(t, e, n) {\n    bn += t, Jr < 0 && (Jr = e), bs = n;\n  },\n  onattribnameend(t) {\n    const e = Me.loc.start.offset, n = qt(e, t);\n    Me.type === 7 && (Me.rawName = n), en.props.some(\n      (r) => (r.type === 7 ? r.rawName : r.name) === n\n    ) && mn(2, e);\n  },\n  onattribend(t, e) {\n    if (en && Me) {\n      if ($s(Me.loc, e), t !== 0)\n        if (bn.includes(\"&\") && (bn = Ie.decodeEntities(\n          bn,\n          !0\n        )), Me.type === 6)\n          Me.name === \"class\" && (bn = HP(bn).trim()), t === 1 && !bn && mn(13, e), Me.value = {\n            type: 2,\n            content: bn,\n            loc: t === 1 ? Rt(Jr, bs) : Rt(Jr - 1, bs + 1)\n          }, at.inSFCRoot && en.tag === \"template\" && Me.name === \"lang\" && bn && bn !== \"html\" && at.enterRCDATA(id(\"</template\"), 0);\n        else {\n          let n = 0;\n          Me.exp = pu(\n            bn,\n            !1,\n            Rt(Jr, bs),\n            0,\n            n\n          ), Me.name === \"for\" && (Me.forParseResult = F4(Me.exp));\n          let r = -1;\n          Me.name === \"bind\" && (r = Me.modifiers.indexOf(\"sync\")) > -1 && Jo(\n            \"COMPILER_V_BIND_SYNC\",\n            Ie,\n            Me.loc,\n            Me.rawName\n          ) && (Me.name = \"model\", Me.modifiers.splice(r, 1));\n        }\n      (Me.type !== 7 || Me.name !== \"pre\") && en.props.push(Me);\n    }\n    bn = \"\", Jr = bs = -1;\n  },\n  oncomment(t, e) {\n    Ie.comments && qp({\n      type: 3,\n      content: qt(t, e),\n      loc: Rt(t - 4, e + 3)\n    });\n  },\n  onend() {\n    const t = Ws.length;\n    if ( true && at.state !== 1)\n      switch (at.state) {\n        case 5:\n        case 8:\n          mn(5, t);\n          break;\n        case 3:\n        case 4:\n          mn(\n            25,\n            at.sectionStart\n          );\n          break;\n        case 28:\n          at.currentSequence === Ut.CdataEnd ? mn(6, t) : mn(7, t);\n          break;\n        case 6:\n        case 7:\n        case 9:\n        case 11:\n        case 12:\n        case 13:\n        case 14:\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n        case 19:\n        case 20:\n        case 21:\n          mn(9, t);\n          break;\n      }\n    for (let e = 0; e < vt.length; e++)\n      hu(vt[e], t - 1), mn(24, vt[e].loc.start.offset);\n  },\n  oncdata(t, e) {\n    vt[0].ns !== 0 ? Uc(qt(t, e), t, e) : mn(1, t - 9);\n  },\n  onprocessinginstruction(t) {\n    (vt[0] ? vt[0].ns : Ie.ns) === 0 && mn(\n      21,\n      t - 1\n    );\n  }\n}), K0 = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/, H4 = /^\\(|\\)$/g;\nfunction F4(t) {\n  const e = t.loc, n = t.content, r = n.match(z4);\n  if (!r)\n    return;\n  const [, i, s] = r, o = (d, f, h = !1) => {\n    const p = e.start.offset + f, O = p + d.length;\n    return pu(\n      d,\n      !1,\n      Rt(p, O),\n      0,\n      h ? 1 : 0\n      /* Normal */\n    );\n  }, a = {\n    source: o(s.trim(), n.indexOf(s, i.length)),\n    value: void 0,\n    key: void 0,\n    index: void 0,\n    finalized: !1\n  };\n  let l = i.trim().replace(H4, \"\").trim();\n  const c = i.indexOf(l), u = l.match(K0);\n  if (u) {\n    l = l.replace(K0, \"\").trim();\n    const d = u[1].trim();\n    let f;\n    if (d && (f = n.indexOf(d, c + l.length), a.key = o(d, f, !0)), u[2]) {\n      const h = u[2].trim();\n      h && (a.index = o(\n        h,\n        n.indexOf(\n          h,\n          a.key ? f + d.length : c + l.length\n        ),\n        !0\n      ));\n    }\n  }\n  return l && (a.value = o(l, c, !0)), a;\n}\nfunction qt(t, e) {\n  return Ws.slice(t, e);\n}\nfunction J0(t) {\n  at.inSFCRoot && (en.innerLoc = Rt(t + 1, t + 1)), qp(en);\n  const { tag: e, ns: n } = en;\n  n === 0 && Ie.isPreTag(e) && cd++, Ie.isVoidTag(e) ? hu(en, t) : (vt.unshift(en), (n === 1 || n === 2) && (at.inXML = !0)), en = null;\n}\nfunction Uc(t, e, n) {\n  var r;\n  {\n    const o = (r = vt[0]) == null ? void 0 : r.tag;\n    o !== \"script\" && o !== \"style\" && t.includes(\"&\") && (t = Ie.decodeEntities(t, !1));\n  }\n  const i = vt[0] || Al, s = i.children[i.children.length - 1];\n  (s == null ? void 0 : s.type) === 2 ? (s.content += t, $s(s.loc, n)) : i.children.push({\n    type: 2,\n    content: t,\n    loc: Rt(e, n)\n  });\n}\nfunction hu(t, e, n = !1) {\n  n ? $s(t.loc, YP(e, 60)) : $s(t.loc, e + 1), at.inSFCRoot && (t.children.length ? t.innerLoc.end = $e({}, t.children[t.children.length - 1].loc.end) : t.innerLoc.end = $e({}, t.innerLoc.start), t.innerLoc.source = qt(\n    t.innerLoc.start.offset,\n    t.innerLoc.end.offset\n  ));\n  const { tag: r, ns: i } = t;\n  Vi || (r === \"slot\" ? t.tagType = 2 : ey(t) ? t.tagType = 3 : K4(t) && (t.tagType = 1)), at.inRCDATA || (t.children = zP(t.children, t.tag)), i === 0 && Ie.isPreTag(r) && cd--, Up === t && (Vi = at.inVPre = !1, Up = null), at.inXML && (vt[0] ? vt[0].ns : Ie.ns) === 0 && (at.inXML = !1);\n  {\n    const s = t.props;\n    if ( true && es(\n      \"COMPILER_V_IF_V_FOR_PRECEDENCE\",\n      Ie\n    )) {\n      let a = !1, l = !1;\n      for (let c = 0; c < s.length; c++) {\n        const u = s[c];\n        if (u.type === 7 && (u.name === \"if\" ? a = !0 : u.name === \"for\" && (l = !0)), a && l) {\n          sd(\n            \"COMPILER_V_IF_V_FOR_PRECEDENCE\",\n            Ie,\n            t.loc\n          );\n          break;\n        }\n      }\n    }\n    if (!at.inSFCRoot && es(\n      \"COMPILER_NATIVE_TEMPLATE\",\n      Ie\n    ) && t.tag === \"template\" && !ey(t)) {\n       true && sd(\n        \"COMPILER_NATIVE_TEMPLATE\",\n        Ie,\n        t.loc\n      );\n      const a = vt[0] || Al, l = a.children.indexOf(t);\n      a.children.splice(l, 1, ...t.children);\n    }\n    const o = s.find(\n      (a) => a.type === 6 && a.name === \"inline-template\"\n    );\n    o && Jo(\n      \"COMPILER_INLINE_TEMPLATE\",\n      Ie,\n      o.loc\n    ) && t.children.length && (o.value = {\n      type: 2,\n      content: qt(\n        t.children[0].loc.start.offset,\n        t.children[t.children.length - 1].loc.end.offset\n      ),\n      loc: o.loc\n    });\n  }\n}\nfunction YP(t, e) {\n  let n = t;\n  for (; Ws.charCodeAt(n) !== e && n >= 0; )\n    n--;\n  return n;\n}\nconst G4 = /* @__PURE__ */ new Set([\"if\", \"else\", \"else-if\", \"for\", \"slot\"]);\nfunction ey({ tag: t, props: e }) {\n  if (t === \"template\") {\n    for (let n = 0; n < e.length; n++)\n      if (e[n].type === 7 && G4.has(e[n].name))\n        return !0;\n  }\n  return !1;\n}\nfunction K4({ tag: t, props: e }) {\n  var n;\n  if (Ie.isCustomElement(t))\n    return !1;\n  if (t === \"component\" || J4(t.charCodeAt(0)) || BP(t) || (n = Ie.isBuiltInComponent) != null && n.call(Ie, t) || Ie.isNativeTag && !Ie.isNativeTag(t))\n    return !0;\n  for (let r = 0; r < e.length; r++) {\n    const i = e[r];\n    if (i.type === 6) {\n      if (i.name === \"is\" && i.value) {\n        if (i.value.content.startsWith(\"vue:\"))\n          return !0;\n        if (Jo(\n          \"COMPILER_IS_ON_ELEMENT\",\n          Ie,\n          i.loc\n        ))\n          return !0;\n      }\n    } else if (\n      // :is on plain element - only treat as component in compat mode\n      i.name === \"bind\" && Li(i.arg, \"is\") && Jo(\n        \"COMPILER_IS_ON_ELEMENT\",\n        Ie,\n        i.loc\n      )\n    )\n      return !0;\n  }\n  return !1;\n}\nfunction J4(t) {\n  return t > 64 && t < 91;\n}\nconst e7 = /\\r\\n/g;\nfunction zP(t, e) {\n  var n, r;\n  const i = Ie.whitespace !== \"preserve\";\n  let s = !1;\n  for (let o = 0; o < t.length; o++) {\n    const a = t[o];\n    if (a.type === 2)\n      if (cd)\n        a.content = a.content.replace(e7, `\n`);\n      else if (t7(a.content)) {\n        const l = (n = t[o - 1]) == null ? void 0 : n.type, c = (r = t[o + 1]) == null ? void 0 : r.type;\n        !l || !c || i && (l === 3 && (c === 3 || c === 1) || l === 1 && (c === 3 || c === 1 && n7(a.content))) ? (s = !0, t[o] = null) : a.content = \" \";\n      } else\n        i && (a.content = HP(a.content));\n  }\n  if (cd && e && Ie.isPreTag(e)) {\n    const o = t[0];\n    o && o.type === 2 && (o.content = o.content.replace(/^\\r?\\n/, \"\"));\n  }\n  return s ? t.filter(Boolean) : t;\n}\nfunction t7(t) {\n  for (let e = 0; e < t.length; e++)\n    if (!Nn(t.charCodeAt(e)))\n      return !1;\n  return !0;\n}\nfunction n7(t) {\n  for (let e = 0; e < t.length; e++) {\n    const n = t.charCodeAt(e);\n    if (n === 10 || n === 13)\n      return !0;\n  }\n  return !1;\n}\nfunction HP(t) {\n  let e = \"\", n = !1;\n  for (let r = 0; r < t.length; r++)\n    Nn(t.charCodeAt(r)) ? n || (e += \" \", n = !0) : (e += t[r], n = !1);\n  return e;\n}\nfunction qp(t) {\n  (vt[0] || Al).children.push(t);\n}\nfunction Rt(t, e) {\n  return {\n    start: at.getPos(t),\n    // @ts-expect-error allow late attachment\n    end: e == null ? e : at.getPos(e),\n    // @ts-expect-error allow late attachment\n    source: e == null ? e : qt(t, e)\n  };\n}\nfunction $s(t, e) {\n  t.end = at.getPos(e), t.source = qt(t.start.offset, e);\n}\nfunction r7(t) {\n  const e = {\n    type: 6,\n    name: t.rawName,\n    nameLoc: Rt(\n      t.loc.start.offset,\n      t.loc.start.offset + t.rawName.length\n    ),\n    value: void 0,\n    loc: t.loc\n  };\n  if (t.exp) {\n    const n = t.exp.loc;\n    n.end.offset < t.loc.end.offset && (n.start.offset--, n.start.column--, n.end.offset++, n.end.column++), e.value = {\n      type: 2,\n      content: t.exp.content,\n      loc: n\n    };\n  }\n  return e;\n}\nfunction pu(t, e = !1, n, r = 0, i = 0) {\n  return Ee(t, e, n, r);\n}\nfunction mn(t, e, n) {\n  Ie.onError(\n    Ge(t, Rt(e, e), void 0, n)\n  );\n}\nfunction i7() {\n  at.reset(), en = null, Me = null, bn = \"\", Jr = -1, bs = -1, vt.length = 0;\n}\nfunction s7(t, e) {\n  if (i7(), Ws = t, Ie = $e({}, qP), e) {\n    let i;\n    for (i in e)\n      e[i] != null && (Ie[i] = e[i]);\n  }\n  if ( true && !Ie.decodeEntities)\n    throw new Error(\n      \"[@vue/compiler-core] decodeEntities option is required in browser builds.\"\n    );\n  at.mode = Ie.parseMode === \"html\" ? 1 : Ie.parseMode === \"sfc\" ? 2 : 0, at.inXML = Ie.ns === 1 || Ie.ns === 2;\n  const n = e == null ? void 0 : e.delimiters;\n  n && (at.delimiterOpen = id(n[0]), at.delimiterClose = id(n[1]));\n  const r = Al = R4([], t);\n  return at.parse(Ws), r.loc = Rt(0, t.length), r.children = zP(r.children), Al = null, r;\n}\nfunction o7(t, e) {\n  Ou(\n    t,\n    e,\n    // Root node is unfortunately non-hoistable due to potential parent\n    // fallthrough attributes.\n    FP(t, t.children[0])\n  );\n}\nfunction FP(t, e) {\n  const { children: n } = t;\n  return n.length === 1 && e.type === 1 && !ad(e);\n}\nfunction Ou(t, e, n = !1) {\n  const { children: r } = t, i = r.length;\n  let s = 0;\n  for (let o = 0; o < r.length; o++) {\n    const a = r[o];\n    if (a.type === 1 && a.tagType === 0) {\n      const l = n ? 0 : Kn(a, e);\n      if (l > 0) {\n        if (l >= 2) {\n          a.codegenNode.patchFlag = -1 + ( true ? \" /* HOISTED */\" : 0), a.codegenNode = e.hoist(a.codegenNode), s++;\n          continue;\n        }\n      } else {\n        const c = a.codegenNode;\n        if (c.type === 13) {\n          const u = e_(c);\n          if ((!u || u === 512 || u === 1) && KP(a, e) >= 2) {\n            const d = JP(a);\n            d && (c.props = e.hoist(d));\n          }\n          c.dynamicProps && (c.dynamicProps = e.hoist(c.dynamicProps));\n        }\n      }\n    }\n    if (a.type === 1) {\n      const l = a.tagType === 1;\n      l && e.scopes.vSlot++, Ou(a, e), l && e.scopes.vSlot--;\n    } else if (a.type === 11)\n      Ou(a, e, a.children.length === 1);\n    else if (a.type === 9)\n      for (let l = 0; l < a.branches.length; l++)\n        Ou(\n          a.branches[l],\n          e,\n          a.branches[l].children.length === 1\n        );\n  }\n  if (s && e.transformHoist && e.transformHoist(r, e, t), s && s === i && t.type === 1 && t.tagType === 0 && t.codegenNode && t.codegenNode.type === 13 && ie(t.codegenNode.children)) {\n    const o = e.hoist(\n      sc(t.codegenNode.children)\n    );\n    e.hmr && (o.content = `[...${o.content}]`), t.codegenNode.children = o;\n  }\n}\nfunction Kn(t, e) {\n  const { constantCache: n } = e;\n  switch (t.type) {\n    case 1:\n      if (t.tagType !== 0)\n        return 0;\n      const r = n.get(t);\n      if (r !== void 0)\n        return r;\n      const i = t.codegenNode;\n      if (i.type !== 13 || i.isBlock && t.tag !== \"svg\" && t.tag !== \"foreignObject\")\n        return 0;\n      if (e_(i))\n        return n.set(t, 0), 0;\n      {\n        let a = 3;\n        const l = KP(t, e);\n        if (l === 0)\n          return n.set(t, 0), 0;\n        l < a && (a = l);\n        for (let c = 0; c < t.children.length; c++) {\n          const u = Kn(t.children[c], e);\n          if (u === 0)\n            return n.set(t, 0), 0;\n          u < a && (a = u);\n        }\n        if (a > 1)\n          for (let c = 0; c < t.props.length; c++) {\n            const u = t.props[c];\n            if (u.type === 7 && u.name === \"bind\" && u.exp) {\n              const d = Kn(u.exp, e);\n              if (d === 0)\n                return n.set(t, 0), 0;\n              d < a && (a = d);\n            }\n          }\n        if (i.isBlock) {\n          for (let c = 0; c < t.props.length; c++)\n            if (t.props[c].type === 7)\n              return n.set(t, 0), 0;\n          e.removeHelper(Fs), e.removeHelper(\n            Ko(e.inSSR, i.isComponent)\n          ), i.isBlock = !1, e.helper(Go(e.inSSR, i.isComponent));\n        }\n        return n.set(t, a), a;\n      }\n    case 2:\n    case 3:\n      return 3;\n    case 9:\n    case 11:\n    case 10:\n      return 0;\n    case 5:\n    case 12:\n      return Kn(t.content, e);\n    case 4:\n      return t.constType;\n    case 8:\n      let o = 3;\n      for (let a = 0; a < t.children.length; a++) {\n        const l = t.children[a];\n        if (we(l) || Or(l))\n          continue;\n        const c = Kn(l, e);\n        if (c === 0)\n          return 0;\n        c < o && (o = c);\n      }\n      return o;\n    default:\n      return \"development\", 0;\n  }\n}\nconst a7 = /* @__PURE__ */ new Set([\n  Xg,\n  jg,\n  El,\n  ic\n]);\nfunction GP(t, e) {\n  if (t.type === 14 && !we(t.callee) && a7.has(t.callee)) {\n    const n = t.arguments[0];\n    if (n.type === 4)\n      return Kn(n, e);\n    if (n.type === 14)\n      return GP(n, e);\n  }\n  return 0;\n}\nfunction KP(t, e) {\n  let n = 3;\n  const r = JP(t);\n  if (r && r.type === 15) {\n    const { properties: i } = r;\n    for (let s = 0; s < i.length; s++) {\n      const { key: o, value: a } = i[s], l = Kn(o, e);\n      if (l === 0)\n        return l;\n      l < n && (n = l);\n      let c;\n      if (a.type === 4 ? c = Kn(a, e) : a.type === 14 ? c = GP(a, e) : c = 0, c === 0)\n        return c;\n      c < n && (n = c);\n    }\n  }\n  return n;\n}\nfunction JP(t) {\n  const e = t.codegenNode;\n  if (e.type === 13)\n    return e.props;\n}\nfunction e_(t) {\n  const e = t.patchFlag;\n  return e ? parseInt(e, 10) : void 0;\n}\nfunction l7(t, {\n  filename: e = \"\",\n  prefixIdentifiers: n = !1,\n  hoistStatic: r = !1,\n  hmr: i = !1,\n  cacheHandlers: s = !1,\n  nodeTransforms: o = [],\n  directiveTransforms: a = {},\n  transformHoist: l = null,\n  isBuiltInComponent: c = it,\n  isCustomElement: u = it,\n  expressionPlugins: d = [],\n  scopeId: f = null,\n  slotted: h = !0,\n  ssr: p = !1,\n  inSSR: O = !1,\n  ssrCssVars: m = \"\",\n  bindingMetadata: y = Ve,\n  inline: b = !1,\n  isTS: g = !1,\n  onError: v = Yg,\n  onWarn: S = jP,\n  compatConfig: w\n}) {\n  const k = e.replace(/\\?.*$/, \"\").match(/([^/\\\\]+)\\.\\w+$/), _ = {\n    // options\n    filename: e,\n    selfName: k && Wr(mt(k[1])),\n    prefixIdentifiers: n,\n    hoistStatic: r,\n    hmr: i,\n    cacheHandlers: s,\n    nodeTransforms: o,\n    directiveTransforms: a,\n    transformHoist: l,\n    isBuiltInComponent: c,\n    isCustomElement: u,\n    expressionPlugins: d,\n    scopeId: f,\n    slotted: h,\n    ssr: p,\n    inSSR: O,\n    ssrCssVars: m,\n    bindingMetadata: y,\n    inline: b,\n    isTS: g,\n    onError: v,\n    onWarn: S,\n    compatConfig: w,\n    // state\n    root: t,\n    helpers: /* @__PURE__ */ new Map(),\n    components: /* @__PURE__ */ new Set(),\n    directives: /* @__PURE__ */ new Set(),\n    hoists: [],\n    imports: [],\n    constantCache: /* @__PURE__ */ new WeakMap(),\n    temps: 0,\n    cached: 0,\n    identifiers: /* @__PURE__ */ Object.create(null),\n    scopes: {\n      vFor: 0,\n      vSlot: 0,\n      vPre: 0,\n      vOnce: 0\n    },\n    parent: null,\n    currentNode: t,\n    childIndex: 0,\n    inVOnce: !1,\n    // methods\n    helper(T) {\n      const C = _.helpers.get(T) || 0;\n      return _.helpers.set(T, C + 1), T;\n    },\n    removeHelper(T) {\n      const C = _.helpers.get(T);\n      if (C) {\n        const A = C - 1;\n        A ? _.helpers.set(T, A) : _.helpers.delete(T);\n      }\n    },\n    helperString(T) {\n      return `_${Ho[_.helper(T)]}`;\n    },\n    replaceNode(T) {\n      if (true) {\n        if (!_.currentNode)\n          throw new Error(\"Node being replaced is already removed.\");\n        if (!_.parent)\n          throw new Error(\"Cannot replace root node.\");\n      }\n      _.parent.children[_.childIndex] = _.currentNode = T;\n    },\n    removeNode(T) {\n      if ( true && !_.parent)\n        throw new Error(\"Cannot remove root node.\");\n      const C = _.parent.children, A = T ? C.indexOf(T) : _.currentNode ? _.childIndex : -1;\n      if ( true && A < 0)\n        throw new Error(\"node being removed is not a child of current parent\");\n      !T || T === _.currentNode ? (_.currentNode = null, _.onNodeRemoved()) : _.childIndex > A && (_.childIndex--, _.onNodeRemoved()), _.parent.children.splice(A, 1);\n    },\n    onNodeRemoved: it,\n    addIdentifiers(T) {\n    },\n    removeIdentifiers(T) {\n    },\n    hoist(T) {\n      we(T) && (T = Ee(T)), _.hoists.push(T);\n      const C = Ee(\n        `_hoisted_${_.hoists.length}`,\n        !1,\n        T.loc,\n        2\n      );\n      return C.hoisted = T, C;\n    },\n    cache(T, C = !1) {\n      return N4(_.cached++, T, C);\n    }\n  };\n  return _.filters = /* @__PURE__ */ new Set(), _;\n}\nfunction c7(t, e) {\n  const n = l7(t, e);\n  ef(t, n), e.hoistStatic && o7(t, n), e.ssr || u7(t, n), t.helpers = /* @__PURE__ */ new Set([...n.helpers.keys()]), t.components = [...n.components], t.directives = [...n.directives], t.imports = n.imports, t.hoists = n.hoists, t.temps = n.temps, t.cached = n.cached, t.transformed = !0, t.filters = [...n.filters];\n}\nfunction u7(t, e) {\n  const { helper: n } = e, { children: r } = t;\n  if (r.length === 1) {\n    const i = r[0];\n    if (FP(t, i) && i.codegenNode) {\n      const s = i.codegenNode;\n      s.type === 13 && qg(s, e), t.codegenNode = s;\n    } else\n      t.codegenNode = i;\n  } else if (r.length > 1) {\n    let i = 64, s = Dr[64];\n     true && r.filter((o) => o.type !== 3).length === 1 && (i |= 2048, s += `, ${Dr[2048]}`), t.codegenNode = $l(\n      e,\n      n(Tl),\n      void 0,\n      t.children,\n      i + ( true ? ` /* ${s} */` : 0),\n      void 0,\n      void 0,\n      !0,\n      void 0,\n      !1\n    );\n  }\n}\nfunction d7(t, e) {\n  let n = 0;\n  const r = () => {\n    n--;\n  };\n  for (; n < t.children.length; n++) {\n    const i = t.children[n];\n    we(i) || (e.parent = t, e.childIndex = n, e.onNodeRemoved = r, ef(i, e));\n  }\n}\nfunction ef(t, e) {\n  e.currentNode = t;\n  const { nodeTransforms: n } = e, r = [];\n  for (let s = 0; s < n.length; s++) {\n    const o = n[s](t, e);\n    if (o && (ie(o) ? r.push(...o) : r.push(o)), e.currentNode)\n      t = e.currentNode;\n    else\n      return;\n  }\n  switch (t.type) {\n    case 3:\n      e.ssr || e.helper(rc);\n      break;\n    case 5:\n      e.ssr || e.helper(Jd);\n      break;\n    case 9:\n      for (let s = 0; s < t.branches.length; s++)\n        ef(t.branches[s], e);\n      break;\n    case 10:\n    case 11:\n    case 1:\n    case 0:\n      d7(t, e);\n      break;\n  }\n  e.currentNode = t;\n  let i = r.length;\n  for (; i--; )\n    r[i]();\n}\nfunction t_(t, e) {\n  const n = we(t) ? (r) => r === t : (r) => t.test(r);\n  return (r, i) => {\n    if (r.type === 1) {\n      const { props: s } = r;\n      if (r.tagType === 3 && s.some(U4))\n        return;\n      const o = [];\n      for (let a = 0; a < s.length; a++) {\n        const l = s[a];\n        if (l.type === 7 && n(l.name)) {\n          s.splice(a, 1), a--;\n          const c = e(r, l, i);\n          c && o.push(c);\n        }\n      }\n      return o;\n    }\n  };\n}\nconst tf = \"/*#__PURE__*/\", n_ = (t) => `${Ho[t]}: _${Ho[t]}`;\nfunction f7(t, {\n  mode: e = \"function\",\n  prefixIdentifiers: n = e === \"module\",\n  sourceMap: r = !1,\n  filename: i = \"template.vue.html\",\n  scopeId: s = null,\n  optimizeImports: o = !1,\n  runtimeGlobalName: a = \"Vue\",\n  runtimeModuleName: l = \"vue\",\n  ssrRuntimeModuleName: c = \"vue/server-renderer\",\n  ssr: u = !1,\n  isTS: d = !1,\n  inSSR: f = !1\n}) {\n  const h = {\n    mode: e,\n    prefixIdentifiers: n,\n    sourceMap: r,\n    filename: i,\n    scopeId: s,\n    optimizeImports: o,\n    runtimeGlobalName: a,\n    runtimeModuleName: l,\n    ssrRuntimeModuleName: c,\n    ssr: u,\n    isTS: d,\n    inSSR: f,\n    source: t.source,\n    code: \"\",\n    column: 1,\n    line: 1,\n    offset: 0,\n    indentLevel: 0,\n    pure: !1,\n    map: void 0,\n    helper(O) {\n      return `_${Ho[O]}`;\n    },\n    push(O, m = -2, y) {\n      h.code += O;\n    },\n    indent() {\n      p(++h.indentLevel);\n    },\n    deindent(O = !1) {\n      O ? --h.indentLevel : p(--h.indentLevel);\n    },\n    newline() {\n      p(h.indentLevel);\n    }\n  };\n  function p(O) {\n    h.push(\n      `\n` + \"  \".repeat(O),\n      0\n      /* Start */\n    );\n  }\n  return h;\n}\nfunction h7(t, e = {}) {\n  const n = f7(t, e);\n  e.onContextCreated && e.onContextCreated(n);\n  const {\n    mode: r,\n    push: i,\n    prefixIdentifiers: s,\n    indent: o,\n    deindent: a,\n    newline: l,\n    scopeId: c,\n    ssr: u\n  } = n, d = Array.from(t.helpers), f = d.length > 0, h = !s && r !== \"module\";\n  p7(t, n);\n  const O = u ? \"ssrRender\" : \"render\", y = (u ? [\"_ctx\", \"_push\", \"_parent\", \"_attrs\"] : [\"_ctx\", \"_cache\"]).join(\", \");\n  if (i(`function ${O}(${y}) {`), o(), h && (i(\"with (_ctx) {\"), o(), f && (i(\n    `const { ${d.map(n_).join(\", \")} } = _Vue\n`,\n    -1\n    /* End */\n  ), l())), t.components.length && (th(t.components, \"component\", n), (t.directives.length || t.temps > 0) && l()), t.directives.length && (th(t.directives, \"directive\", n), t.temps > 0 && l()), t.filters && t.filters.length && (l(), th(t.filters, \"filter\", n), l()), t.temps > 0) {\n    i(\"let \");\n    for (let b = 0; b < t.temps; b++)\n      i(`${b > 0 ? \", \" : \"\"}_temp${b}`);\n  }\n  return (t.components.length || t.directives.length || t.temps) && (i(\n    `\n`,\n    0\n    /* Start */\n  ), l()), u || i(\"return \"), t.codegenNode ? cn(t.codegenNode, n) : i(\"null\"), h && (a(), i(\"}\")), a(), i(\"}\"), {\n    ast: t,\n    code: n.code,\n    preamble: \"\",\n    map: n.map ? n.map.toJSON() : void 0\n  };\n}\nfunction p7(t, e) {\n  const {\n    ssr: n,\n    prefixIdentifiers: r,\n    push: i,\n    newline: s,\n    runtimeModuleName: o,\n    runtimeGlobalName: a,\n    ssrRuntimeModuleName: l\n  } = e, c = a, u = Array.from(t.helpers);\n  if (u.length > 0 && (i(\n    `const _Vue = ${c}\n`,\n    -1\n    /* End */\n  ), t.hoists.length)) {\n    const d = [\n      Ag,\n      Rg,\n      rc,\n      Ng,\n      IP\n    ].filter((f) => u.includes(f)).map(n_).join(\", \");\n    i(\n      `const { ${d} } = _Vue\n`,\n      -1\n      /* End */\n    );\n  }\n  O7(t.hoists, e), s(), i(\"return \");\n}\nfunction th(t, e, { helper: n, push: r, newline: i, isTS: s }) {\n  const o = n(\n    e === \"filter\" ? Ig : e === \"component\" ? Dg : Vg\n  );\n  for (let a = 0; a < t.length; a++) {\n    let l = t[a];\n    const c = l.endsWith(\"__self\");\n    c && (l = l.slice(0, -6)), r(\n      `const ${Cl(l, e)} = ${o}(${JSON.stringify(l)}${c ? \", true\" : \"\"})${s ? \"!\" : \"\"}`\n    ), a < t.length - 1 && i();\n  }\n}\nfunction O7(t, e) {\n  if (!t.length)\n    return;\n  e.pure = !0;\n  const { push: n, newline: r, helper: i, scopeId: s, mode: o } = e;\n  r();\n  for (let a = 0; a < t.length; a++) {\n    const l = t[a];\n    l && (n(\n      `const _hoisted_${a + 1} = `\n    ), cn(l, e), r());\n  }\n  e.pure = !1;\n}\nfunction g7(t) {\n  return we(t) || t.type === 4 || t.type === 2 || t.type === 5 || t.type === 8;\n}\nfunction Hg(t, e) {\n  const n = t.length > 3 ||  true && t.some((r) => ie(r) || !g7(r));\n  e.push(\"[\"), n && e.indent(), oc(t, e, n), n && e.deindent(), e.push(\"]\");\n}\nfunction oc(t, e, n = !1, r = !0) {\n  const { push: i, newline: s } = e;\n  for (let o = 0; o < t.length; o++) {\n    const a = t[o];\n    we(a) ? i(\n      a,\n      -3\n      /* Unknown */\n    ) : ie(a) ? Hg(a, e) : cn(a, e), o < t.length - 1 && (n ? (r && i(\",\"), s()) : r && i(\", \"));\n  }\n}\nfunction cn(t, e) {\n  if (we(t)) {\n    e.push(\n      t,\n      -3\n      /* Unknown */\n    );\n    return;\n  }\n  if (Or(t)) {\n    e.push(e.helper(t));\n    return;\n  }\n  switch (t.type) {\n    case 1:\n    case 9:\n    case 11:\n       true && F0(\n        t.codegenNode != null,\n        \"Codegen node is missing for element/if/for node. Apply appropriate transforms first.\"\n      ), cn(t.codegenNode, e);\n      break;\n    case 2:\n      m7(t, e);\n      break;\n    case 4:\n      r_(t, e);\n      break;\n    case 5:\n      b7(t, e);\n      break;\n    case 12:\n      cn(t.codegenNode, e);\n      break;\n    case 8:\n      i_(t, e);\n      break;\n    case 3:\n      y7(t, e);\n      break;\n    case 13:\n      S7(t, e);\n      break;\n    case 14:\n      k7(t, e);\n      break;\n    case 15:\n      x7(t, e);\n      break;\n    case 17:\n      P7(t, e);\n      break;\n    case 18:\n      _7(t, e);\n      break;\n    case 19:\n      T7(t, e);\n      break;\n    case 20:\n      E7(t, e);\n      break;\n    case 21:\n      oc(t.body, e, !0, !1);\n      break;\n    case 22:\n      break;\n    case 23:\n      break;\n    case 24:\n      break;\n    case 25:\n      break;\n    case 26:\n      break;\n    case 10:\n      break;\n    default:\n      if (true)\n        return F0(!1, `unhandled codegen node type: ${t.type}`), t;\n  }\n}\nfunction m7(t, e) {\n  e.push(JSON.stringify(t.content), -3, t);\n}\nfunction r_(t, e) {\n  const { content: n, isStatic: r } = t;\n  e.push(\n    r ? JSON.stringify(n) : n,\n    -3,\n    t\n  );\n}\nfunction b7(t, e) {\n  const { push: n, helper: r, pure: i } = e;\n  i && n(tf), n(`${r(Jd)}(`), cn(t.content, e), n(\")\");\n}\nfunction i_(t, e) {\n  for (let n = 0; n < t.children.length; n++) {\n    const r = t.children[n];\n    we(r) ? e.push(\n      r,\n      -3\n      /* Unknown */\n    ) : cn(r, e);\n  }\n}\nfunction v7(t, e) {\n  const { push: n } = e;\n  if (t.type === 8)\n    n(\"[\"), i_(t, e), n(\"]\");\n  else if (t.isStatic) {\n    const r = zg(t.content) ? t.content : JSON.stringify(t.content);\n    n(r, -2, t);\n  } else\n    n(`[${t.content}]`, -3, t);\n}\nfunction y7(t, e) {\n  const { push: n, helper: r, pure: i } = e;\n  i && n(tf), n(\n    `${r(rc)}(${JSON.stringify(t.content)})`,\n    -3,\n    t\n  );\n}\nfunction S7(t, e) {\n  const { push: n, helper: r, pure: i } = e, {\n    tag: s,\n    props: o,\n    children: a,\n    patchFlag: l,\n    dynamicProps: c,\n    directives: u,\n    isBlock: d,\n    disableTracking: f,\n    isComponent: h\n  } = t;\n  u && n(r(Wg) + \"(\"), d && n(`(${r(Fs)}(${f ? \"true\" : \"\"}), `), i && n(tf);\n  const p = d ? Ko(e.inSSR, h) : Go(e.inSSR, h);\n  n(r(p) + \"(\", -2, t), oc(\n    w7([s, o, a, l, c]),\n    e\n  ), n(\")\"), d && n(\")\"), u && (n(\", \"), cn(u, e), n(\")\"));\n}\nfunction w7(t) {\n  let e = t.length;\n  for (; e-- && t[e] == null; )\n    ;\n  return t.slice(0, e + 1).map((n) => n || \"null\");\n}\nfunction k7(t, e) {\n  const { push: n, helper: r, pure: i } = e, s = we(t.callee) ? t.callee : r(t.callee);\n  i && n(tf), n(s + \"(\", -2, t), oc(t.arguments, e), n(\")\");\n}\nfunction x7(t, e) {\n  const { push: n, indent: r, deindent: i, newline: s } = e, { properties: o } = t;\n  if (!o.length) {\n    n(\"{}\", -2, t);\n    return;\n  }\n  const a = o.length > 1 ||  true && o.some((l) => l.value.type !== 4);\n  n(a ? \"{\" : \"{ \"), a && r();\n  for (let l = 0; l < o.length; l++) {\n    const { key: c, value: u } = o[l];\n    v7(c, e), n(\": \"), cn(u, e), l < o.length - 1 && (n(\",\"), s());\n  }\n  a && i(), n(a ? \"}\" : \" }\");\n}\nfunction P7(t, e) {\n  Hg(t.elements, e);\n}\nfunction _7(t, e) {\n  const { push: n, indent: r, deindent: i } = e, { params: s, returns: o, body: a, newline: l, isSlot: c } = t;\n  c && n(`_${Ho[Lg]}(`), n(\"(\", -2, t), ie(s) ? oc(s, e) : s && cn(s, e), n(\") => \"), (l || a) && (n(\"{\"), r()), o ? (l && n(\"return \"), ie(o) ? Hg(o, e) : cn(o, e)) : a && cn(a, e), (l || a) && (i(), n(\"}\")), c && (t.isNonScopedSlot && n(\", undefined, true\"), n(\")\"));\n}\nfunction T7(t, e) {\n  const { test: n, consequent: r, alternate: i, newline: s } = t, { push: o, indent: a, deindent: l, newline: c } = e;\n  if (n.type === 4) {\n    const d = !zg(n.content);\n    d && o(\"(\"), r_(n, e), d && o(\")\");\n  } else\n    o(\"(\"), cn(n, e), o(\")\");\n  s && a(), e.indentLevel++, s || o(\" \"), o(\"? \"), cn(r, e), e.indentLevel--, s && c(), s || o(\" \"), o(\": \");\n  const u = i.type === 19;\n  u || e.indentLevel++, cn(i, e), u || e.indentLevel--, s && l(\n    !0\n    /* without newline */\n  );\n}\nfunction E7(t, e) {\n  const { push: n, helper: r, indent: i, deindent: s, newline: o } = e;\n  n(`_cache[${t.index}] || (`), t.isVNode && (i(), n(`${r(rd)}(-1),`), o()), n(`_cache[${t.index}] = `), cn(t.value, e), t.isVNode && (n(\",\"), o(), n(`${r(rd)}(1),`), o(), n(`_cache[${t.index}]`), s()), n(\")\");\n}\nconst $7 = new RegExp(\n  \"\\\\b\" + \"arguments,await,break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,let,new,return,super,switch,throw,try,var,void,while,with,yield\".split(\",\").join(\"\\\\b|\\\\b\") + \"\\\\b\"\n), Q7 = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\nfunction Qs(t, e, n = !1, r = !1) {\n  const i = t.content;\n  if (i.trim())\n    try {\n      new Function(\n        r ? ` ${i} ` : `return ${n ? `(${i}) => {}` : `(${i})`}`\n      );\n    } catch (s) {\n      let o = s.message;\n      const a = i.replace(Q7, \"\").match($7);\n      a && (o = `avoid using JavaScript keyword as property name: \"${a[0]}\"`), e.onError(\n        Ge(\n          45,\n          t.loc,\n          void 0,\n          o\n        )\n      );\n    }\n}\nconst C7 = (t, e) => {\n  if (t.type === 5)\n    t.content = nh(\n      t.content,\n      e\n    );\n  else if (t.type === 1)\n    for (let n = 0; n < t.props.length; n++) {\n      const r = t.props[n];\n      if (r.type === 7 && r.name !== \"for\") {\n        const i = r.exp, s = r.arg;\n        i && i.type === 4 && !(r.name === \"on\" && s) && (r.exp = nh(\n          i,\n          e,\n          // slot args must be processed as function params\n          r.name === \"slot\"\n        )), s && s.type === 4 && !s.isStatic && (r.arg = nh(s, e));\n      }\n    }\n};\nfunction nh(t, e, n = !1, r = !1, i = Object.create(e.identifiers)) {\n  return  true && Qs(t, e, n, r), t;\n}\nconst A7 = t_(\n  /^(if|else|else-if)$/,\n  (t, e, n) => R7(t, e, n, (r, i, s) => {\n    const o = n.parent.children;\n    let a = o.indexOf(r), l = 0;\n    for (; a-- >= 0; ) {\n      const c = o[a];\n      c && c.type === 9 && (l += c.branches.length);\n    }\n    return () => {\n      if (s)\n        r.codegenNode = ny(\n          i,\n          l,\n          n\n        );\n      else {\n        const c = D7(r.codegenNode);\n        c.alternate = ny(\n          i,\n          l + r.branches.length - 1,\n          n\n        );\n      }\n    };\n  })\n);\nfunction R7(t, e, n, r) {\n  if (e.name !== \"else\" && (!e.exp || !e.exp.content.trim())) {\n    const i = e.exp ? e.exp.loc : t.loc;\n    n.onError(\n      Ge(28, e.loc)\n    ), e.exp = Ee(\"true\", !1, i);\n  }\n  if ( true && e.exp && Qs(e.exp, n), e.name === \"if\") {\n    const i = ty(t, e), s = {\n      type: 9,\n      loc: t.loc,\n      branches: [i]\n    };\n    if (n.replaceNode(s), r)\n      return r(s, i, !0);\n  } else {\n    const i = n.parent.children, s = [];\n    let o = i.indexOf(t);\n    for (; o-- >= -1; ) {\n      const a = i[o];\n      if (a && a.type === 3) {\n        n.removeNode(a),  true && s.unshift(a);\n        continue;\n      }\n      if (a && a.type === 2 && !a.content.trim().length) {\n        n.removeNode(a);\n        continue;\n      }\n      if (a && a.type === 9) {\n        e.name === \"else-if\" && a.branches[a.branches.length - 1].condition === void 0 && n.onError(\n          Ge(30, t.loc)\n        ), n.removeNode();\n        const l = ty(t, e);\n        if ( true && s.length && // #3619 ignore comments if the v-if is direct child of <transition>\n        !(n.parent && n.parent.type === 1 && (n.parent.tag === \"transition\" || n.parent.tag === \"Transition\")) && (l.children = [...s, ...l.children]), \"development\" !== \"production\") {\n          const u = l.userKey;\n          u && a.branches.forEach(({ userKey: d }) => {\n            N7(d, u) && n.onError(\n              Ge(\n                29,\n                l.userKey.loc\n              )\n            );\n          });\n        }\n        a.branches.push(l);\n        const c = r && r(a, l, !1);\n        ef(l, n), c && c(), n.currentNode = null;\n      } else\n        n.onError(\n          Ge(30, t.loc)\n        );\n      break;\n    }\n  }\n}\nfunction ty(t, e) {\n  const n = t.tagType === 3;\n  return {\n    type: 10,\n    loc: t.loc,\n    condition: e.name === \"else\" ? void 0 : e.exp,\n    children: n && !zn(t, \"for\") ? t.children : [t],\n    userKey: Ql(t, \"key\"),\n    isTemplateIf: n\n  };\n}\nfunction ny(t, e, n) {\n  return t.condition ? Bp(\n    t.condition,\n    ry(t, e, n),\n    // make sure to pass in asBlock: true so that the comment node call\n    // closes the current block.\n    Dt(n.helper(rc), [\n       true ? '\"v-if\"' : 0,\n      \"true\"\n    ])\n  ) : ry(t, e, n);\n}\nfunction ry(t, e, n) {\n  const { helper: r } = n, i = yt(\n    \"key\",\n    Ee(\n      `${e}`,\n      !1,\n      Ln,\n      2\n    )\n  ), { children: s } = t, o = s[0];\n  if (s.length !== 1 || o.type !== 1)\n    if (s.length === 1 && o.type === 11) {\n      const l = o.codegenNode;\n      return ld(l, i, n), l;\n    } else {\n      let l = 64, c = Dr[64];\n      return  true && !t.isTemplateIf && s.filter((u) => u.type !== 3).length === 1 && (l |= 2048, c += `, ${Dr[2048]}`), $l(\n        n,\n        r(Tl),\n        Gn([i]),\n        s,\n        l + ( true ? ` /* ${c} */` : 0),\n        void 0,\n        void 0,\n        !0,\n        !1,\n        !1,\n        t.loc\n      );\n    }\n  else {\n    const l = o.codegenNode, c = Y4(l);\n    return c.type === 13 && qg(c, n), ld(c, i, n), l;\n  }\n}\nfunction N7(t, e) {\n  if (!t || t.type !== e.type)\n    return !1;\n  if (t.type === 6) {\n    if (t.value.content !== e.value.content)\n      return !1;\n  } else {\n    const n = t.exp, r = e.exp;\n    if (n.type !== r.type || n.type !== 4 || n.isStatic !== r.isStatic || n.content !== r.content)\n      return !1;\n  }\n  return !0;\n}\nfunction D7(t) {\n  for (; ; )\n    if (t.type === 19)\n      if (t.alternate.type === 19)\n        t = t.alternate;\n      else\n        return t;\n    else\n      t.type === 20 && (t = t.value);\n}\nconst Z7 = t_(\n  \"for\",\n  (t, e, n) => {\n    const { helper: r, removeHelper: i } = n;\n    return V7(t, e, n, (s) => {\n      const o = Dt(r(Mg), [\n        s.source\n      ]), a = od(t), l = zn(t, \"memo\"), c = Ql(t, \"key\"), u = c && (c.type === 6 ? Ee(c.value.content, !0) : c.exp), d = c ? yt(\"key\", u) : null, f = s.source.type === 4 && s.source.constType > 0, h = f ? 64 : c ? 128 : 256;\n      return s.codegenNode = $l(\n        n,\n        r(Tl),\n        void 0,\n        o,\n        h + ( true ? ` /* ${Dr[h]} */` : 0),\n        void 0,\n        void 0,\n        !0,\n        !f,\n        !1,\n        t.loc\n      ), () => {\n        let p;\n        const { children: O } = s;\n         true && a && t.children.some((b) => {\n          if (b.type === 1) {\n            const g = Ql(b, \"key\");\n            if (g)\n              return n.onError(\n                Ge(\n                  33,\n                  g.loc\n                )\n              ), !0;\n          }\n        });\n        const m = O.length !== 1 || O[0].type !== 1, y = ad(t) ? t : a && t.children.length === 1 && ad(t.children[0]) ? t.children[0] : null;\n        if (y ? (p = y.codegenNode, a && d && ld(p, d, n)) : m ? p = $l(\n          n,\n          r(Tl),\n          d ? Gn([d]) : void 0,\n          t.children,\n          64 + ( true ? ` /* ${Dr[64]} */` : 0),\n          void 0,\n          void 0,\n          !0,\n          void 0,\n          !1\n        ) : (p = O[0].codegenNode, a && d && ld(p, d, n), p.isBlock !== !f && (p.isBlock ? (i(Fs), i(\n          Ko(n.inSSR, p.isComponent)\n        )) : i(\n          Go(n.inSSR, p.isComponent)\n        )), p.isBlock = !f, p.isBlock ? (r(Fs), r(Ko(n.inSSR, p.isComponent))) : r(Go(n.inSSR, p.isComponent))), l) {\n          const b = Fo(\n            Yp(s.parseResult, [\n              Ee(\"_cached\")\n            ])\n          );\n          b.body = D4([\n            pr([\"const _memo = (\", l.exp, \")\"]),\n            pr([\n              \"if (_cached\",\n              ...u ? [\" && _cached.key === \", u] : [],\n              ` && ${n.helperString(\n                XP\n              )}(_cached, _memo)) return _cached`\n            ]),\n            pr([\"const _item = \", p]),\n            Ee(\"_item.memo = _memo\"),\n            Ee(\"return _item\")\n          ]), o.arguments.push(\n            b,\n            Ee(\"_cache\"),\n            Ee(String(n.cached++))\n          );\n        } else\n          o.arguments.push(\n            Fo(\n              Yp(s.parseResult),\n              p,\n              !0\n            )\n          );\n      };\n    });\n  }\n);\nfunction V7(t, e, n, r) {\n  if (!e.exp) {\n    n.onError(\n      Ge(31, e.loc)\n    );\n    return;\n  }\n  const i = e.forParseResult;\n  if (!i) {\n    n.onError(\n      Ge(32, e.loc)\n    );\n    return;\n  }\n  s_(i, n);\n  const { addIdentifiers: s, removeIdentifiers: o, scopes: a } = n, { source: l, value: c, key: u, index: d } = i, f = {\n    type: 11,\n    loc: e.loc,\n    source: l,\n    valueAlias: c,\n    keyAlias: u,\n    objectIndexAlias: d,\n    parseResult: i,\n    children: od(t) ? t.children : [t]\n  };\n  n.replaceNode(f), a.vFor++;\n  const h = r && r(f);\n  return () => {\n    a.vFor--, h && h();\n  };\n}\nfunction s_(t, e) {\n  t.finalized || ( true && (Qs(t.source, e), t.key && Qs(\n    t.key,\n    e,\n    !0\n  ), t.index && Qs(\n    t.index,\n    e,\n    !0\n  ), t.value && Qs(\n    t.value,\n    e,\n    !0\n  )), t.finalized = !0);\n}\nfunction Yp({ value: t, key: e, index: n }, r = []) {\n  return I7([t, e, n, ...r]);\n}\nfunction I7(t) {\n  let e = t.length;\n  for (; e-- && !t[e]; )\n    ;\n  return t.slice(0, e + 1).map((n, r) => n || Ee(\"_\".repeat(r + 1), !1));\n}\nconst iy = Ee(\"undefined\", !1), W7 = (t, e) => {\n  if (t.type === 1 && (t.tagType === 1 || t.tagType === 3)) {\n    const n = zn(t, \"slot\");\n    if (n)\n      return n.exp, e.scopes.vSlot++, () => {\n        e.scopes.vSlot--;\n      };\n  }\n}, M7 = (t, e, n, r) => Fo(\n  t,\n  n,\n  !1,\n  !0,\n  n.length ? n[0].loc : r\n);\nfunction X7(t, e, n = M7) {\n  e.helper(Lg);\n  const { children: r, loc: i } = t, s = [], o = [];\n  let a = e.scopes.vSlot > 0 || e.scopes.vFor > 0;\n  const l = zn(t, \"slot\", !0);\n  if (l) {\n    const { arg: m, exp: y } = l;\n    m && !xn(m) && (a = !0), s.push(\n      yt(\n        m || Ee(\"default\", !0),\n        n(y, void 0, r, i)\n      )\n    );\n  }\n  let c = !1, u = !1;\n  const d = [], f = /* @__PURE__ */ new Set();\n  let h = 0;\n  for (let m = 0; m < r.length; m++) {\n    const y = r[m];\n    let b;\n    if (!od(y) || !(b = zn(y, \"slot\", !0))) {\n      y.type !== 3 && d.push(y);\n      continue;\n    }\n    if (l) {\n      e.onError(\n        Ge(37, b.loc)\n      );\n      break;\n    }\n    c = !0;\n    const { children: g, loc: v } = y, {\n      arg: S = Ee(\"default\", !0),\n      exp: w,\n      loc: k\n    } = b;\n    let _;\n    xn(S) ? _ = S ? S.content : \"default\" : a = !0;\n    const T = zn(y, \"for\"), C = n(w, T, g, v);\n    let A, Q;\n    if (A = zn(y, \"if\"))\n      a = !0, o.push(\n        Bp(\n          A.exp,\n          qc(S, C, h++),\n          iy\n        )\n      );\n    else if (Q = zn(\n      y,\n      /^else(-if)?$/,\n      !0\n      /* allowEmpty */\n    )) {\n      let W = m, L;\n      for (; W-- && (L = r[W], L.type === 3); )\n        ;\n      if (L && od(L) && zn(L, \"if\")) {\n        r.splice(m, 1), m--;\n        let re = o[o.length - 1];\n        for (; re.alternate.type === 19; )\n          re = re.alternate;\n        re.alternate = Q.exp ? Bp(\n          Q.exp,\n          qc(\n            S,\n            C,\n            h++\n          ),\n          iy\n        ) : qc(S, C, h++);\n      } else\n        e.onError(\n          Ge(30, Q.loc)\n        );\n    } else if (T) {\n      a = !0;\n      const W = T.forParseResult;\n      W ? (s_(W, e), o.push(\n        Dt(e.helper(Mg), [\n          W.source,\n          Fo(\n            Yp(W),\n            qc(S, C),\n            !0\n          )\n        ])\n      )) : e.onError(\n        Ge(\n          32,\n          T.loc\n        )\n      );\n    } else {\n      if (_) {\n        if (f.has(_)) {\n          e.onError(\n            Ge(\n              38,\n              k\n            )\n          );\n          continue;\n        }\n        f.add(_), _ === \"default\" && (u = !0);\n      }\n      s.push(yt(S, C));\n    }\n  }\n  if (!l) {\n    const m = (y, b) => {\n      const g = n(y, void 0, b, i);\n      return e.compatConfig && (g.isNonScopedSlot = !0), yt(\"default\", g);\n    };\n    c ? d.length && // #3766\n    // with whitespace: 'preserve', whitespaces between slots will end up in\n    // implicitDefaultChildren. Ignore if all implicit children are whitespaces.\n    d.some((y) => o_(y)) && (u ? e.onError(\n      Ge(\n        39,\n        d[0].loc\n      )\n    ) : s.push(\n      m(void 0, d)\n    )) : s.push(m(void 0, r));\n  }\n  const p = a ? 2 : gu(t.children) ? 3 : 1;\n  let O = Gn(\n    s.concat(\n      yt(\n        \"_\",\n        // 2 = compiled but dynamic = can skip normalization, but must run diff\n        // 1 = compiled and static = can skip normalization AND diff as optimized\n        Ee(\n          p + ( true ? ` /* ${V_[p]} */` : 0),\n          !1\n        )\n      )\n    ),\n    i\n  );\n  return o.length && (O = Dt(e.helper(MP), [\n    O,\n    sc(o)\n  ])), {\n    slots: O,\n    hasDynamicSlots: a\n  };\n}\nfunction qc(t, e, n) {\n  const r = [\n    yt(\"name\", t),\n    yt(\"fn\", e)\n  ];\n  return n != null && r.push(\n    yt(\"key\", Ee(String(n), !0))\n  ), Gn(r);\n}\nfunction gu(t) {\n  for (let e = 0; e < t.length; e++) {\n    const n = t[e];\n    switch (n.type) {\n      case 1:\n        if (n.tagType === 2 || gu(n.children))\n          return !0;\n        break;\n      case 9:\n        if (gu(n.branches))\n          return !0;\n        break;\n      case 10:\n      case 11:\n        if (gu(n.children))\n          return !0;\n        break;\n    }\n  }\n  return !1;\n}\nfunction o_(t) {\n  return t.type !== 2 && t.type !== 12 ? !0 : t.type === 2 ? !!t.content.trim() : o_(t.content);\n}\nconst a_ = /* @__PURE__ */ new WeakMap(), j7 = (t, e) => function() {\n  if (t = e.currentNode, !(t.type === 1 && (t.tagType === 0 || t.tagType === 1)))\n    return;\n  const { tag: r, props: i } = t, s = t.tagType === 1;\n  let o = s ? B7(t, e) : `\"${r}\"`;\n  const a = Ze(o) && o.callee === Zg;\n  let l, c, u, d = 0, f, h, p, O = (\n    // dynamic component may resolve to plain elements\n    a || o === Ga || o === Cg || !s && // <svg> and <foreignObject> must be forced into blocks so that block\n    // updates inside get proper isSVG flag at runtime. (#639, #643)\n    // This is technically web-specific, but splitting the logic out of core\n    // leads to too much unnecessary complexity.\n    (r === \"svg\" || r === \"foreignObject\")\n  );\n  if (i.length > 0) {\n    const m = l_(\n      t,\n      e,\n      void 0,\n      s,\n      a\n    );\n    l = m.props, d = m.patchFlag, h = m.dynamicPropNames;\n    const y = m.directives;\n    p = y && y.length ? sc(\n      y.map((b) => U7(b, e))\n    ) : void 0, m.shouldUseBlock && (O = !0);\n  }\n  if (t.children.length > 0)\n    if (o === td && (O = !0, d |= 1024,  true && t.children.length > 1 && e.onError(\n      Ge(46, {\n        start: t.children[0].loc.start,\n        end: t.children[t.children.length - 1].loc.end,\n        source: \"\"\n      })\n    )), s && // Teleport is not a real component and has dedicated runtime handling\n    o !== Ga && // explained above.\n    o !== td) {\n      const { slots: y, hasDynamicSlots: b } = X7(t, e);\n      c = y, b && (d |= 1024);\n    } else if (t.children.length === 1 && o !== Ga) {\n      const y = t.children[0], b = y.type, g = b === 5 || b === 8;\n      g && Kn(y, e) === 0 && (d |= 1), g || b === 2 ? c = y : c = t.children;\n    } else\n      c = t.children;\n  if (d !== 0) {\n    if (true)\n      if (d < 0)\n        u = d + ` /* ${Dr[d]} */`;\n      else {\n        const m = Object.keys(Dr).map(Number).filter((y) => y > 0 && d & y).map((y) => Dr[y]).join(\", \");\n        u = d + ` /* ${m} */`;\n      }\n    else\n      {}\n    h && h.length && (f = q7(h));\n  }\n  t.codegenNode = $l(\n    e,\n    o,\n    l,\n    c,\n    u,\n    f,\n    p,\n    !!O,\n    !1,\n    s,\n    t.loc\n  );\n};\nfunction B7(t, e, n = !1) {\n  let { tag: r } = t;\n  const i = zp(r), s = Ql(t, \"is\");\n  if (s)\n    if (i || es(\n      \"COMPILER_IS_ON_ELEMENT\",\n      e\n    )) {\n      const a = s.type === 6 ? s.value && Ee(s.value.content, !0) : s.exp;\n      if (a)\n        return Dt(e.helper(Zg), [\n          a\n        ]);\n    } else\n      s.type === 6 && s.value.content.startsWith(\"vue:\") && (r = s.value.content.slice(4));\n  const o = BP(r) || e.isBuiltInComponent(r);\n  return o ? (n || e.helper(o), o) : (e.helper(Dg), e.components.add(r), Cl(r, \"component\"));\n}\nfunction l_(t, e, n = t.props, r, i, s = !1) {\n  const { tag: o, loc: a, children: l } = t;\n  let c = [];\n  const u = [], d = [], f = l.length > 0;\n  let h = !1, p = 0, O = !1, m = !1, y = !1, b = !1, g = !1, v = !1;\n  const S = [], w = (T) => {\n    c.length && (u.push(\n      Gn(sy(c), a)\n    ), c = []), T && u.push(T);\n  }, k = ({ key: T, value: C }) => {\n    if (xn(T)) {\n      const A = T.content, Q = oi(A);\n      if (Q && (!r || i) && // omit the flag for click handlers because hydration gives click\n      // dedicated fast path.\n      A.toLowerCase() !== \"onclick\" && // omit v-model handlers\n      A !== \"onUpdate:modelValue\" && // omit onVnodeXXX hooks\n      !Ui(A) && (b = !0), Q && Ui(A) && (v = !0), Q && C.type === 14 && (C = C.arguments[0]), C.type === 20 || (C.type === 4 || C.type === 8) && Kn(C, e) > 0)\n        return;\n      A === \"ref\" ? O = !0 : A === \"class\" ? m = !0 : A === \"style\" ? y = !0 : A !== \"key\" && !S.includes(A) && S.push(A), r && (A === \"class\" || A === \"style\") && !S.includes(A) && S.push(A);\n    } else\n      g = !0;\n  };\n  for (let T = 0; T < n.length; T++) {\n    const C = n[T];\n    if (C.type === 6) {\n      const { loc: A, name: Q, nameLoc: W, value: L } = C;\n      let re = !0;\n      if (Q === \"ref\" && (O = !0, e.scopes.vFor > 0 && c.push(\n        yt(\n          Ee(\"ref_for\", !0),\n          Ee(\"true\")\n        )\n      )), Q === \"is\" && (zp(o) || L && L.content.startsWith(\"vue:\") || es(\n        \"COMPILER_IS_ON_ELEMENT\",\n        e\n      )))\n        continue;\n      c.push(\n        yt(\n          Ee(Q, !0, W),\n          Ee(\n            L ? L.content : \"\",\n            re,\n            L ? L.loc : A\n          )\n        )\n      );\n    } else {\n      const { name: A, arg: Q, exp: W, loc: L, modifiers: re } = C, Y = A === \"bind\", K = A === \"on\";\n      if (A === \"slot\") {\n        r || e.onError(\n          Ge(40, L)\n        );\n        continue;\n      }\n      if (A === \"once\" || A === \"memo\" || A === \"is\" || Y && Li(Q, \"is\") && (zp(o) || es(\n        \"COMPILER_IS_ON_ELEMENT\",\n        e\n      )) || K && s)\n        continue;\n      if (\n        // #938: elements with dynamic keys should be forced into blocks\n        (Y && Li(Q, \"key\") || // inline before-update hooks need to force block so that it is invoked\n        // before children\n        K && f && Li(Q, \"vue:before-update\")) && (h = !0), Y && Li(Q, \"ref\") && e.scopes.vFor > 0 && c.push(\n          yt(\n            Ee(\"ref_for\", !0),\n            Ee(\"true\")\n          )\n        ), !Q && (Y || K)\n      ) {\n        if (g = !0, W)\n          if (Y) {\n            if (w(),  true && u.some((Ce) => Ce.type === 15 ? Ce.properties.some(({ key: ue }) => ue.type !== 4 || !ue.isStatic ? !0 : ue.content !== \"class\" && ue.content !== \"style\" && !oi(ue.content)) : !0) && Jo(\n              \"COMPILER_V_BIND_OBJECT_ORDER\",\n              e,\n              L\n            ), es(\n              \"COMPILER_V_BIND_OBJECT_ORDER\",\n              e\n            )) {\n              u.unshift(W);\n              continue;\n            }\n            u.push(W);\n          } else\n            w({\n              type: 14,\n              loc: L,\n              callee: e.helper(Bg),\n              arguments: r ? [W] : [W, \"true\"]\n            });\n        else\n          e.onError(\n            Ge(\n              Y ? 34 : 35,\n              L\n            )\n          );\n        continue;\n      }\n      Y && re.includes(\"prop\") && (p |= 32);\n      const B = e.directiveTransforms[A];\n      if (B) {\n        const { props: _e, needRuntime: Ce } = B(C, t, e);\n        !s && _e.forEach(k), K && Q && !xn(Q) ? w(Gn(_e, a)) : c.push(..._e), Ce && (d.push(C), Or(Ce) && a_.set(C, Ce));\n      } else\n        Oy(A) || (d.push(C), f && (h = !0));\n    }\n  }\n  let _;\n  if (u.length ? (w(), u.length > 1 ? _ = Dt(\n    e.helper(nd),\n    u,\n    a\n  ) : _ = u[0]) : c.length && (_ = Gn(\n    sy(c),\n    a\n  )), g ? p |= 16 : (m && !r && (p |= 2), y && !r && (p |= 4), S.length && (p |= 8), b && (p |= 32)), !h && (p === 0 || p === 32) && (O || v || d.length > 0) && (p |= 512), !e.inSSR && _)\n    switch (_.type) {\n      case 15:\n        let T = -1, C = -1, A = !1;\n        for (let L = 0; L < _.properties.length; L++) {\n          const re = _.properties[L].key;\n          xn(re) ? re.content === \"class\" ? T = L : re.content === \"style\" && (C = L) : re.isHandlerKey || (A = !0);\n        }\n        const Q = _.properties[T], W = _.properties[C];\n        A ? _ = Dt(\n          e.helper(El),\n          [_]\n        ) : (Q && !xn(Q.value) && (Q.value = Dt(\n          e.helper(Xg),\n          [Q.value]\n        )), W && // the static style is compiled into an object,\n        // so use `hasStyleBinding` to ensure that it is a dynamic style binding\n        (y || W.value.type === 4 && W.value.content.trim()[0] === \"[\" || // v-bind:style and style both exist,\n        // v-bind:style with static literal object\n        W.value.type === 17) && (W.value = Dt(\n          e.helper(jg),\n          [W.value]\n        )));\n        break;\n      case 14:\n        break;\n      default:\n        _ = Dt(\n          e.helper(El),\n          [\n            Dt(e.helper(ic), [\n              _\n            ])\n          ]\n        );\n        break;\n    }\n  return {\n    props: _,\n    directives: d,\n    patchFlag: p,\n    dynamicPropNames: S,\n    shouldUseBlock: h\n  };\n}\nfunction sy(t) {\n  const e = /* @__PURE__ */ new Map(), n = [];\n  for (let r = 0; r < t.length; r++) {\n    const i = t[r];\n    if (i.key.type === 8 || !i.key.isStatic) {\n      n.push(i);\n      continue;\n    }\n    const s = i.key.content, o = e.get(s);\n    o ? (s === \"style\" || s === \"class\" || oi(s)) && L7(o, i) : (e.set(s, i), n.push(i));\n  }\n  return n;\n}\nfunction L7(t, e) {\n  t.value.type === 17 ? t.value.elements.push(e.value) : t.value = sc(\n    [t.value, e.value],\n    t.loc\n  );\n}\nfunction U7(t, e) {\n  const n = [], r = a_.get(t);\n  r ? n.push(e.helperString(r)) : (e.helper(Vg), e.directives.add(t.name), n.push(Cl(t.name, \"directive\")));\n  const { loc: i } = t;\n  if (t.exp && n.push(t.exp), t.arg && (t.exp || n.push(\"void 0\"), n.push(t.arg)), Object.keys(t.modifiers).length) {\n    t.arg || (t.exp || n.push(\"void 0\"), n.push(\"void 0\"));\n    const s = Ee(\"true\", !1, i);\n    n.push(\n      Gn(\n        t.modifiers.map(\n          (o) => yt(o, s)\n        ),\n        i\n      )\n    );\n  }\n  return sc(n, t.loc);\n}\nfunction q7(t) {\n  let e = \"[\";\n  for (let n = 0, r = t.length; n < r; n++)\n    e += JSON.stringify(t[n]), n < r - 1 && (e += \", \");\n  return e + \"]\";\n}\nfunction zp(t) {\n  return t === \"component\" || t === \"Component\";\n}\nconst Y7 = (t, e) => {\n  if (ad(t)) {\n    const { children: n, loc: r } = t, { slotName: i, slotProps: s } = z7(t, e), o = [\n      e.prefixIdentifiers ? \"_ctx.$slots\" : \"$slots\",\n      i,\n      \"{}\",\n      \"undefined\",\n      \"true\"\n    ];\n    let a = 2;\n    s && (o[2] = s, a = 3), n.length && (o[3] = Fo([], n, !1, !1, r), a = 4), e.scopeId && !e.slotted && (a = 5), o.splice(a), t.codegenNode = Dt(\n      e.helper(WP),\n      o,\n      r\n    );\n  }\n};\nfunction z7(t, e) {\n  let n = '\"default\"', r;\n  const i = [];\n  for (let s = 0; s < t.props.length; s++) {\n    const o = t.props[s];\n    if (o.type === 6)\n      o.value && (o.name === \"name\" ? n = JSON.stringify(o.value.content) : (o.name = mt(o.name), i.push(o)));\n    else if (o.name === \"bind\" && Li(o.arg, \"name\")) {\n      if (o.exp)\n        n = o.exp;\n      else if (o.arg && o.arg.type === 4) {\n        const a = mt(o.arg.content);\n        n = o.exp = Ee(a, !1, o.arg.loc);\n      }\n    } else\n      o.name === \"bind\" && o.arg && xn(o.arg) && (o.arg.content = mt(o.arg.content)), i.push(o);\n  }\n  if (i.length > 0) {\n    const { props: s, directives: o } = l_(\n      t,\n      e,\n      i,\n      !1,\n      !1\n    );\n    r = s, o.length && e.onError(\n      Ge(\n        36,\n        o[0].loc\n      )\n    );\n  }\n  return {\n    slotName: n,\n    slotProps: r\n  };\n}\nconst H7 = /^\\s*([\\w$_]+|(async\\s*)?\\([^)]*?\\))\\s*(:[^=]+)?=>|^\\s*(async\\s+)?function(?:\\s+[\\w$]+)?\\s*\\(/, c_ = (t, e, n, r) => {\n  const { loc: i, modifiers: s, arg: o } = t;\n  !t.exp && !s.length && n.onError(Ge(35, i));\n  let a;\n  if (o.type === 4)\n    if (o.isStatic) {\n      let d = o.content;\n       true && d.startsWith(\"vnode\") && n.onError(Ge(51, o.loc)), d.startsWith(\"vue:\") && (d = `vnode-${d.slice(4)}`);\n      const f = e.tagType !== 0 || d.startsWith(\"vnode\") || !/[A-Z]/.test(d) ? (\n        // for non-element and vnode lifecycle event listeners, auto convert\n        // it to camelCase. See issue #2249\n        Tr(mt(d))\n      ) : (\n        // preserve case for plain element listeners that have uppercase\n        // letters, as these may be custom elements' custom events\n        `on:${d}`\n      );\n      a = Ee(f, !0, o.loc);\n    } else\n      a = pr([\n        `${n.helperString(jp)}(`,\n        o,\n        \")\"\n      ]);\n  else\n    a = o, a.children.unshift(`${n.helperString(jp)}(`), a.children.push(\")\");\n  let l = t.exp;\n  l && !l.content.trim() && (l = void 0);\n  let c = n.cacheHandlers && !l && !n.inVOnce;\n  if (l) {\n    const d = LP(l.content), f = !(d || H7.test(l.content)), h = l.content.includes(\";\");\n     true && Qs(\n      l,\n      n,\n      !1,\n      h\n    ), (f || c && d) && (l = pr([\n      `${f ? \"$event\" : \"(...args)\"} => ${h ? \"{\" : \"(\"}`,\n      l,\n      h ? \"}\" : \")\"\n    ]));\n  }\n  let u = {\n    props: [\n      yt(\n        a,\n        l || Ee(\"() => {}\", !1, i)\n      )\n    ]\n  };\n  return r && (u = r(u)), c && (u.props[0].value = n.cache(u.props[0].value)), u.props.forEach((d) => d.key.isHandlerKey = !0), u;\n}, F7 = (t, e, n) => {\n  const { modifiers: r, loc: i } = t, s = t.arg;\n  let { exp: o } = t;\n  if (o && o.type === 4 && !o.content.trim() && (o = void 0), !o) {\n    if (s.type !== 4 || !s.isStatic)\n      return n.onError(\n        Ge(\n          52,\n          s.loc\n        )\n      ), {\n        props: [\n          yt(s, Ee(\"\", !0, i))\n        ]\n      };\n    const a = mt(s.content);\n    o = t.exp = Ee(a, !1, s.loc);\n  }\n  return s.type !== 4 ? (s.children.unshift(\"(\"), s.children.push(') || \"\"')) : s.isStatic || (s.content = `${s.content} || \"\"`), r.includes(\"camel\") && (s.type === 4 ? s.isStatic ? s.content = mt(s.content) : s.content = `${n.helperString(Xp)}(${s.content})` : (s.children.unshift(`${n.helperString(Xp)}(`), s.children.push(\")\"))), n.inSSR || (r.includes(\"prop\") && oy(s, \".\"), r.includes(\"attr\") && oy(s, \"^\")), {\n    props: [yt(s, o)]\n  };\n}, oy = (t, e) => {\n  t.type === 4 ? t.isStatic ? t.content = e + t.content : t.content = `\\`${e}\\${${t.content}}\\`` : (t.children.unshift(`'${e}' + (`), t.children.push(\")\"));\n}, G7 = (t, e) => {\n  if (t.type === 0 || t.type === 1 || t.type === 11 || t.type === 10)\n    return () => {\n      const n = t.children;\n      let r, i = !1;\n      for (let s = 0; s < n.length; s++) {\n        const o = n[s];\n        if (eh(o)) {\n          i = !0;\n          for (let a = s + 1; a < n.length; a++) {\n            const l = n[a];\n            if (eh(l))\n              r || (r = n[s] = pr(\n                [o],\n                o.loc\n              )), r.children.push(\" + \", l), n.splice(a, 1), a--;\n            else {\n              r = void 0;\n              break;\n            }\n          }\n        }\n      }\n      if (!(!i || // if this is a plain element with a single text child, leave it\n      // as-is since the runtime has dedicated fast path for this by directly\n      // setting textContent of the element.\n      // for component root it's always normalized anyway.\n      n.length === 1 && (t.type === 0 || t.type === 1 && t.tagType === 0 && // #3756\n      // custom directives can potentially add DOM elements arbitrarily,\n      // we need to avoid setting textContent of the element at runtime\n      // to avoid accidentally overwriting the DOM elements added\n      // by the user through custom directives.\n      !t.props.find(\n        (s) => s.type === 7 && !e.directiveTransforms[s.name]\n      ) && t.tag !== \"template\")))\n        for (let s = 0; s < n.length; s++) {\n          const o = n[s];\n          if (eh(o) || o.type === 8) {\n            const a = [];\n            (o.type !== 2 || o.content !== \" \") && a.push(o), !e.ssr && Kn(o, e) === 0 && a.push(\n              1 + ( true ? ` /* ${Dr[1]} */` : 0)\n            ), n[s] = {\n              type: 12,\n              content: o,\n              loc: o.loc,\n              codegenNode: Dt(\n                e.helper(Ng),\n                a\n              )\n            };\n          }\n        }\n    };\n}, ay = /* @__PURE__ */ new WeakSet(), K7 = (t, e) => {\n  if (t.type === 1 && zn(t, \"once\", !0))\n    return ay.has(t) || e.inVOnce || e.inSSR ? void 0 : (ay.add(t), e.inVOnce = !0, e.helper(rd), () => {\n      e.inVOnce = !1;\n      const n = e.currentNode;\n      n.codegenNode && (n.codegenNode = e.cache(\n        n.codegenNode,\n        !0\n        /* isVNode */\n      ));\n    });\n}, u_ = (t, e, n) => {\n  const { exp: r, arg: i } = t;\n  if (!r)\n    return n.onError(\n      Ge(41, t.loc)\n    ), Yc();\n  const s = r.loc.source, o = r.type === 4 ? r.content : s, a = n.bindingMetadata[s];\n  if (a === \"props\" || a === \"props-aliased\")\n    return n.onError(Ge(44, r.loc)), Yc();\n  if (!o.trim() || !LP(o) && !!1)\n    return n.onError(\n      Ge(42, r.loc)\n    ), Yc();\n  const c = i || Ee(\"modelValue\", !0), u = i ? xn(i) ? `onUpdate:${mt(i.content)}` : pr(['\"onUpdate:\" + ', i]) : \"onUpdate:modelValue\";\n  let d;\n  const f = n.isTS ? \"($event: any)\" : \"$event\";\n  d = pr([\n    `${f} => ((`,\n    r,\n    \") = $event)\"\n  ]);\n  const h = [\n    // modelValue: foo\n    yt(c, t.exp),\n    // \"onUpdate:modelValue\": $event => (foo = $event)\n    yt(u, d)\n  ];\n  if (t.modifiers.length && e.tagType === 1) {\n    const p = t.modifiers.map((m) => (zg(m) ? m : JSON.stringify(m)) + \": true\").join(\", \"), O = i ? xn(i) ? `${i.content}Modifiers` : pr([i, ' + \"Modifiers\"']) : \"modelModifiers\";\n    h.push(\n      yt(\n        O,\n        Ee(\n          `{ ${p} }`,\n          !1,\n          t.loc,\n          2\n        )\n      )\n    );\n  }\n  return Yc(h);\n};\nfunction Yc(t = []) {\n  return { props: t };\n}\nconst J7 = /[\\w).+\\-_$\\]]/, ej = (t, e) => {\n  es(\"COMPILER_FILTERS\", e) && (t.type === 5 && ud(t.content, e), t.type === 1 && t.props.forEach((n) => {\n    n.type === 7 && n.name !== \"for\" && n.exp && ud(n.exp, e);\n  }));\n};\nfunction ud(t, e) {\n  if (t.type === 4)\n    ly(t, e);\n  else\n    for (let n = 0; n < t.children.length; n++) {\n      const r = t.children[n];\n      typeof r == \"object\" && (r.type === 4 ? ly(r, e) : r.type === 8 ? ud(t, e) : r.type === 5 && ud(r.content, e));\n    }\n}\nfunction ly(t, e) {\n  const n = t.content;\n  let r = !1, i = !1, s = !1, o = !1, a = 0, l = 0, c = 0, u = 0, d, f, h, p, O = [];\n  for (h = 0; h < n.length; h++)\n    if (f = d, d = n.charCodeAt(h), r)\n      d === 39 && f !== 92 && (r = !1);\n    else if (i)\n      d === 34 && f !== 92 && (i = !1);\n    else if (s)\n      d === 96 && f !== 92 && (s = !1);\n    else if (o)\n      d === 47 && f !== 92 && (o = !1);\n    else if (d === 124 && // pipe\n    n.charCodeAt(h + 1) !== 124 && n.charCodeAt(h - 1) !== 124 && !a && !l && !c)\n      p === void 0 ? (u = h + 1, p = n.slice(0, h).trim()) : m();\n    else {\n      switch (d) {\n        case 34:\n          i = !0;\n          break;\n        case 39:\n          r = !0;\n          break;\n        case 96:\n          s = !0;\n          break;\n        case 40:\n          c++;\n          break;\n        case 41:\n          c--;\n          break;\n        case 91:\n          l++;\n          break;\n        case 93:\n          l--;\n          break;\n        case 123:\n          a++;\n          break;\n        case 125:\n          a--;\n          break;\n      }\n      if (d === 47) {\n        let y = h - 1, b;\n        for (; y >= 0 && (b = n.charAt(y), b === \" \"); y--)\n          ;\n        (!b || !J7.test(b)) && (o = !0);\n      }\n    }\n  p === void 0 ? p = n.slice(0, h).trim() : u !== 0 && m();\n  function m() {\n    O.push(n.slice(u, h).trim()), u = h + 1;\n  }\n  if (O.length) {\n    for ( true && sd(\n      \"COMPILER_FILTERS\",\n      e,\n      t.loc\n    ), h = 0; h < O.length; h++)\n      p = tj(p, O[h], e);\n    t.content = p;\n  }\n}\nfunction tj(t, e, n) {\n  n.helper(Ig);\n  const r = e.indexOf(\"(\");\n  if (r < 0)\n    return n.filters.add(e), `${Cl(e, \"filter\")}(${t})`;\n  {\n    const i = e.slice(0, r), s = e.slice(r + 1);\n    return n.filters.add(i), `${Cl(i, \"filter\")}(${t}${s !== \")\" ? \",\" + s : s}`;\n  }\n}\nconst cy = /* @__PURE__ */ new WeakSet(), nj = (t, e) => {\n  if (t.type === 1) {\n    const n = zn(t, \"memo\");\n    return !n || cy.has(t) ? void 0 : (cy.add(t), () => {\n      const r = t.codegenNode || e.currentNode.codegenNode;\n      r && r.type === 13 && (t.tagType !== 1 && qg(r, e), t.codegenNode = Dt(e.helper(Ug), [\n        n.exp,\n        Fo(void 0, r),\n        \"_cache\",\n        String(e.cached++)\n      ]));\n    });\n  }\n};\nfunction rj(t) {\n  return [\n    [\n      K7,\n      A7,\n      nj,\n      Z7,\n      ej,\n      ... true ? [C7] : 0,\n      Y7,\n      j7,\n      W7,\n      G7\n    ],\n    {\n      on: c_,\n      bind: F7,\n      model: u_\n    }\n  ];\n}\nfunction ij(t, e = {}) {\n  const n = e.onError || Yg, r = e.mode === \"module\";\n  e.prefixIdentifiers === !0 ? n(Ge(47)) : r && n(Ge(48));\n  const i = !1;\n  e.cacheHandlers && n(Ge(49)), e.scopeId && !r && n(Ge(50));\n  const s = $e({}, e, {\n    prefixIdentifiers: i\n  }), o = we(t) ? s7(t, s) : t, [a, l] = rj();\n  return c7(\n    o,\n    $e({}, s, {\n      nodeTransforms: [\n        ...a,\n        ...e.nodeTransforms || []\n        // user transforms\n      ],\n      directiveTransforms: $e(\n        {},\n        l,\n        e.directiveTransforms || {}\n        // user transforms\n      )\n    })\n  ), h7(o, s);\n}\nconst sj = () => ({ props: [] });\n/**\n* @vue/compiler-dom v3.4.21\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\nconst d_ = Symbol( true ? \"vModelRadio\" : 0), f_ = Symbol( true ? \"vModelCheckbox\" : 0), h_ = Symbol( true ? \"vModelText\" : 0), p_ = Symbol( true ? \"vModelSelect\" : 0), Hp = Symbol( true ? \"vModelDynamic\" : 0), O_ = Symbol( true ? \"vOnModifiersGuard\" : 0), g_ = Symbol( true ? \"vOnKeysGuard\" : 0), m_ = Symbol( true ? \"vShow\" : 0), Fg = Symbol( true ? \"Transition\" : 0), b_ = Symbol( true ? \"TransitionGroup\" : 0);\nA4({\n  [d_]: \"vModelRadio\",\n  [f_]: \"vModelCheckbox\",\n  [h_]: \"vModelText\",\n  [p_]: \"vModelSelect\",\n  [Hp]: \"vModelDynamic\",\n  [O_]: \"withModifiers\",\n  [g_]: \"withKeys\",\n  [m_]: \"vShow\",\n  [Fg]: \"Transition\",\n  [b_]: \"TransitionGroup\"\n});\nlet co;\nfunction oj(t, e = !1) {\n  return co || (co = document.createElement(\"div\")), e ? (co.innerHTML = `<div foo=\"${t.replace(/\"/g, \"&quot;\")}\">`, co.children[0].getAttribute(\"foo\")) : (co.innerHTML = t, co.textContent);\n}\nconst aj = {\n  parseMode: \"html\",\n  isVoidTag: H_,\n  isNativeTag: (t) => by(t) || vy(t) || yy(t),\n  isPreTag: (t) => t === \"pre\",\n  decodeEntities: oj,\n  isBuiltInComponent: (t) => {\n    if (t === \"Transition\" || t === \"transition\")\n      return Fg;\n    if (t === \"TransitionGroup\" || t === \"transition-group\")\n      return b_;\n  },\n  // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher\n  getNamespace(t, e, n) {\n    let r = e ? e.ns : n;\n    if (e && r === 2)\n      if (e.tag === \"annotation-xml\") {\n        if (t === \"svg\")\n          return 1;\n        e.props.some(\n          (i) => i.type === 6 && i.name === \"encoding\" && i.value != null && (i.value.content === \"text/html\" || i.value.content === \"application/xhtml+xml\")\n        ) && (r = 0);\n      } else\n        /^m(?:[ions]|text)$/.test(e.tag) && t !== \"mglyph\" && t !== \"malignmark\" && (r = 0);\n    else\n      e && r === 1 && (e.tag === \"foreignObject\" || e.tag === \"desc\" || e.tag === \"title\") && (r = 0);\n    if (r === 0) {\n      if (t === \"svg\")\n        return 1;\n      if (t === \"math\")\n        return 2;\n    }\n    return r;\n  }\n}, lj = (t) => {\n  t.type === 1 && t.props.forEach((e, n) => {\n    e.type === 6 && e.name === \"style\" && e.value && (t.props[n] = {\n      type: 7,\n      name: \"bind\",\n      arg: Ee(\"style\", !0, e.loc),\n      exp: cj(e.value.content, e.loc),\n      modifiers: [],\n      loc: e.loc\n    });\n  });\n}, cj = (t, e) => {\n  const n = gy(t);\n  return Ee(\n    JSON.stringify(n),\n    !1,\n    e,\n    3\n  );\n};\nfunction dr(t, e) {\n  return Ge(\n    t,\n    e,\n     true ? uj : 0\n  );\n}\nconst uj = {\n  53: \"v-html is missing expression.\",\n  54: \"v-html will override element children.\",\n  55: \"v-text is missing expression.\",\n  56: \"v-text will override element children.\",\n  57: \"v-model can only be used on <input>, <textarea> and <select> elements.\",\n  58: \"v-model argument is not supported on plain elements.\",\n  59: \"v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.\",\n  60: \"Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.\",\n  61: \"v-show is missing expression.\",\n  62: \"<Transition> expects exactly one child element or component.\",\n  63: \"Tags with side effect (<script> and <style>) are ignored in client component templates.\"\n}, dj = (t, e, n) => {\n  const { exp: r, loc: i } = t;\n  return r || n.onError(\n    dr(53, i)\n  ), e.children.length && (n.onError(\n    dr(54, i)\n  ), e.children.length = 0), {\n    props: [\n      yt(\n        Ee(\"innerHTML\", !0, i),\n        r || Ee(\"\", !0)\n      )\n    ]\n  };\n}, fj = (t, e, n) => {\n  const { exp: r, loc: i } = t;\n  return r || n.onError(\n    dr(55, i)\n  ), e.children.length && (n.onError(\n    dr(56, i)\n  ), e.children.length = 0), {\n    props: [\n      yt(\n        Ee(\"textContent\", !0),\n        r ? Kn(r, n) > 0 ? r : Dt(\n          n.helperString(Jd),\n          [r],\n          i\n        ) : Ee(\"\", !0)\n      )\n    ]\n  };\n}, hj = (t, e, n) => {\n  const r = u_(t, e, n);\n  if (!r.props.length || e.tagType === 1)\n    return r;\n  t.arg && n.onError(\n    dr(\n      58,\n      t.arg.loc\n    )\n  );\n  function i() {\n    const a = zn(e, \"bind\");\n    a && Li(a.arg, \"value\") && n.onError(\n      dr(\n        60,\n        a.loc\n      )\n    );\n  }\n  const { tag: s } = e, o = n.isCustomElement(s);\n  if (s === \"input\" || s === \"textarea\" || s === \"select\" || o) {\n    let a = h_, l = !1;\n    if (s === \"input\" || o) {\n      const c = Ql(e, \"type\");\n      if (c) {\n        if (c.type === 7)\n          a = Hp;\n        else if (c.value)\n          switch (c.value.content) {\n            case \"radio\":\n              a = d_;\n              break;\n            case \"checkbox\":\n              a = f_;\n              break;\n            case \"file\":\n              l = !0, n.onError(\n                dr(\n                  59,\n                  t.loc\n                )\n              );\n              break;\n            default:\n               true && i();\n              break;\n          }\n      } else\n        L4(e) ? a = Hp :  true && i();\n    } else\n      s === \"select\" ? a = p_ :  true && i();\n    l || (r.needRuntime = n.helper(a));\n  } else\n    n.onError(\n      dr(\n        57,\n        t.loc\n      )\n    );\n  return r.props = r.props.filter(\n    (a) => !(a.key.type === 4 && a.key.content === \"modelValue\")\n  ), r;\n}, pj = /* @__PURE__ */ Bt(\"passive,once,capture\"), Oj = /* @__PURE__ */ Bt(\n  // event propagation management\n  \"stop,prevent,self,ctrl,shift,alt,meta,exact,middle\"\n), gj = /* @__PURE__ */ Bt(\"left,right\"), v_ = /* @__PURE__ */ Bt(\n  \"onkeyup,onkeydown,onkeypress\",\n  !0\n), mj = (t, e, n, r) => {\n  const i = [], s = [], o = [];\n  for (let a = 0; a < e.length; a++) {\n    const l = e[a];\n    l === \"native\" && Jo(\n      \"COMPILER_V_ON_NATIVE\",\n      n,\n      r\n    ) || pj(l) ? o.push(l) : gj(l) ? xn(t) ? v_(t.content) ? i.push(l) : s.push(l) : (i.push(l), s.push(l)) : Oj(l) ? s.push(l) : i.push(l);\n  }\n  return {\n    keyModifiers: i,\n    nonKeyModifiers: s,\n    eventOptionModifiers: o\n  };\n}, uy = (t, e) => xn(t) && t.content.toLowerCase() === \"onclick\" ? Ee(e, !0) : t.type !== 4 ? pr([\n  \"(\",\n  t,\n  `) === \"onClick\" ? \"${e}\" : (`,\n  t,\n  \")\"\n]) : t, bj = (t, e, n) => c_(t, e, n, (r) => {\n  const { modifiers: i } = t;\n  if (!i.length)\n    return r;\n  let { key: s, value: o } = r.props[0];\n  const { keyModifiers: a, nonKeyModifiers: l, eventOptionModifiers: c } = mj(s, i, n, t.loc);\n  if (l.includes(\"right\") && (s = uy(s, \"onContextmenu\")), l.includes(\"middle\") && (s = uy(s, \"onMouseup\")), l.length && (o = Dt(n.helper(O_), [\n    o,\n    JSON.stringify(l)\n  ])), a.length && // if event name is dynamic, always wrap with keys guard\n  (!xn(s) || v_(s.content)) && (o = Dt(n.helper(g_), [\n    o,\n    JSON.stringify(a)\n  ])), c.length) {\n    const u = c.map(Wr).join(\"\");\n    s = xn(s) ? Ee(`${s.content}${u}`, !0) : pr([\"(\", s, `) + \"${u}\"`]);\n  }\n  return {\n    props: [yt(s, o)]\n  };\n}), vj = (t, e, n) => {\n  const { exp: r, loc: i } = t;\n  return r || n.onError(\n    dr(61, i)\n  ), {\n    props: [],\n    needRuntime: n.helper(m_)\n  };\n}, yj = (t, e) => {\n  if (t.type === 1 && t.tagType === 1 && e.isBuiltInComponent(t.tag) === Fg)\n    return () => {\n      if (!t.children.length)\n        return;\n      y_(t) && e.onError(\n        dr(\n          62,\n          {\n            start: t.children[0].loc.start,\n            end: t.children[t.children.length - 1].loc.end,\n            source: \"\"\n          }\n        )\n      );\n      const r = t.children[0];\n      if (r.type === 1)\n        for (const i of r.props)\n          i.type === 7 && i.name === \"show\" && t.props.push({\n            type: 6,\n            name: \"persisted\",\n            nameLoc: t.loc,\n            value: void 0,\n            loc: t.loc\n          });\n    };\n};\nfunction y_(t) {\n  const e = t.children = t.children.filter(\n    (r) => r.type !== 3 && !(r.type === 2 && !r.content.trim())\n  ), n = e[0];\n  return e.length !== 1 || n.type === 11 || n.type === 9 && n.branches.some(y_);\n}\nconst Sj = (t, e) => {\n  t.type === 1 && t.tagType === 0 && (t.tag === \"script\" || t.tag === \"style\") && ( true && e.onError(\n    dr(\n      63,\n      t.loc\n    )\n  ), e.removeNode());\n}, wj = [\n  lj,\n  ... true ? [yj] : 0\n], kj = {\n  cloak: sj,\n  html: dj,\n  text: fj,\n  model: hj,\n  // override compiler-core\n  on: bj,\n  // override compiler-core\n  show: vj\n};\nfunction xj(t, e = {}) {\n  return ij(\n    t,\n    $e({}, aj, e, {\n      nodeTransforms: [\n        // ignore <script> and <tag>\n        // this is not put inside DOMNodeTransforms because that list is used\n        // by compiler-ssr to generate vnode fallback branches\n        Sj,\n        ...wj,\n        ...e.nodeTransforms || []\n      ],\n      directiveTransforms: $e(\n        {},\n        kj,\n        e.directiveTransforms || {}\n      ),\n      transformHoist: null\n    })\n  );\n}\n/**\n* vue v3.4.21\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\nfunction Pj() {\n  CO();\n}\n true && Pj();\nconst dy = /* @__PURE__ */ new WeakMap();\nfunction _j(t) {\n  let e = dy.get(t ?? Ve);\n  return e || (e = /* @__PURE__ */ Object.create(null), dy.set(t ?? Ve, e)), e;\n}\nfunction Tj(t, e) {\n  if (!we(t))\n    if (t.nodeType)\n      t = t.innerHTML;\n    else\n      return  true && Xt(\"invalid template option: \", t), it;\n  const n = t, r = _j(e), i = r[n];\n  if (i)\n    return i;\n  if (t[0] === \"#\") {\n    const c = document.querySelector(t);\n     true && !c && Xt(`Template element not found or is empty: ${t}`), t = c ? c.innerHTML : \"\";\n  }\n  const s = $e(\n    {\n      hoistStatic: !0,\n      onError:  true ? a : 0,\n      onWarn:  true ? (c) => a(c, !0) : 0\n    },\n    e\n  );\n  !s.isCustomElement && typeof customElements < \"u\" && (s.isCustomElement = (c) => !!customElements.get(c));\n  const { code: o } = xj(t, s);\n  function a(c, u = !1) {\n    const d = u ? c.message : `Template compilation error: ${c.message}`, f = c.loc && M_(\n      t,\n      c.loc.start.offset,\n      c.loc.end.offset\n    );\n    Xt(f ? `${d}\n${f}` : d);\n  }\n  const l = new Function(\"Vue\", o)(yQ);\n  return l._rc = !0, r[n] = l;\n}\nM1(Tj);\nglobalThis.__VUE_OPTIONS_API__ = !0;\nglobalThis.__VUE_PROD_HYDRATION_MISMATCH_DETAILS__ = !0;\nglobalThis.__VUE_PROD_DEVTOOLS__ = !1;\nconst Ej = (t) => {\n  const e = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (!e.current)\n      return;\n    const n = hS(_4, {\n      proxyUrl: t.proxy\n    });\n    return n.mount(e.current), () => n.unmount();\n  }, [e]), /* @__PURE__ */ Hr.jsx(\"div\", { ref: e });\n}, { resetActiveResponse: $j, setActiveRequest: Qj } = sr(), Ij = ({\n  proxy: t = \"\",\n  close: e,\n  isOpen: n = !1,\n  request: r\n}) => {\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    $j(), r && Qj(r);\n  }, [n, r]);\n  const [i, s] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => s(window.location.host), []), /* @__PURE__ */ Hr.jsx(\n    \"div\",\n    {\n      className: \"scalar\",\n      style: { display: n ? \"block\" : \"none\" },\n      children: /* @__PURE__ */ Hr.jsxs(\"div\", { className: \"scalar-container\", children: [\n        /* @__PURE__ */ Hr.jsxs(\"div\", { className: \"scalar-app\", children: [\n          /* @__PURE__ */ Hr.jsxs(\"div\", { className: \"scalar-app-header\", children: [\n            /* @__PURE__ */ Hr.jsx(\"span\", { children: \"API Client\" }),\n            /* @__PURE__ */ Hr.jsx(\n              \"a\",\n              {\n                href: `https://www.scalar.com?utm_campaign=${i}`,\n                target: \"_blank\",\n                children: \"Powered by scalar.com\"\n              }\n            )\n          ] }),\n          /* @__PURE__ */ Hr.jsx(Ej, { proxy: t })\n        ] }),\n        /* @__PURE__ */ Hr.jsx(\n          \"div\",\n          {\n            onClick: e,\n            className: \"scalar-app-exit\"\n          }\n        )\n      ] })\n    }\n  );\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/index-DG086FZT.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@scalar/api-client-react/dist/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiClientReact: function() { return /* reexport safe */ _index_DG086FZT_js__WEBPACK_IMPORTED_MODULE_0__.A; },\n/* harmony export */   ApiClientReactBase: function() { return /* reexport safe */ _index_DG086FZT_js__WEBPACK_IMPORTED_MODULE_0__.d; }\n/* harmony export */ });\n/* harmony import */ var _index_DG086FZT_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-DG086FZT.js */ \"(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/index-DG086FZT.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2NhbGFyL2FwaS1jbGllbnQtcmVhY3QvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7QUFJbkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzY2FsYXIvYXBpLWNsaWVudC1yZWFjdC9kaXN0L2luZGV4LmpzP2JjNTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQSBhcyB0LCBkIGFzIGkgfSBmcm9tIFwiLi9pbmRleC1ERzA4NkZaVC5qc1wiO1xuZXhwb3J0IHtcbiAgdCBhcyBBcGlDbGllbnRSZWFjdCxcbiAgaSBhcyBBcGlDbGllbnRSZWFjdEJhc2Vcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@scalar/api-client-react/dist/index.js\n"));

/***/ })

}]);