/*!*********************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[11].oneOf[12].use[2]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[11].oneOf[12].use[3]!./packages/react-math/src/default.css ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************/
/** Hide the KaTeX HTML output, while it's loading */
body:not(.katex-loaded) .katex-html {
    display: none;
}

/** Align the MathJax output with the font-size used by KaTeX */
mjx-container[jax='CHTML'] {
    font-size: 1.21em;
}

/*!*********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[11].oneOf[12].use[2]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[11].oneOf[12].use[3]!./src/components/DocumentView/CodeBlock/theme.css ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************/
:root {
    --shiki-color-text: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * .88));
    --shiki-token-constant: #0a6355;
    --shiki-token-string: #8b6d32;
    --shiki-token-comment: rgb(38 82 97 / .64);
    --shiki-token-keyword: rgb(194 73 46 / 1);
    --shiki-token-parameter: #0a3069;
    --shiki-token-function: #8250df;
    --shiki-token-string-expression: #6a4906;
    --shiki-token-punctuation: rgb(145 55 35 / .92);
    --shiki-token-link: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 1));
}

html.dark {
    --shiki-color-text: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.88));
    --shiki-token-constant: #d19a66;
    --shiki-token-string: rgb(247 157 137 / 1);
    --shiki-token-comment: rgb(140 184 199 / .64);
    --shiki-token-keyword: rgb(245 124 97 / 1);
    --shiki-token-parameter: rgb(244 226 141 / 1);
    --shiki-token-function: #56b6c2;
    --shiki-token-string-expression: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * 1));
    --shiki-token-punctuation: #acc6ee;
    --shiki-token-link: rgb(245 124 97 / 1);
}

/*!****************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[11].oneOf[12].use[2]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[11].oneOf[12].use[3]!./src/components/DocumentView/Integration/contentkit.css ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************/
/** Stacks */
.contentkit-stack {
    display: flex;
    gap: 1rem;
}

.contentkit-hstack {
    flex-direction: row;
    align-items: center;
    gap: 1rem;
}
.contentkit-hstack.contentkit-stack-align-center {
    justify-content: center;
}
.contentkit-hstack.contentkit-stack-align-end {
    justify-content: flex-end;
}

.contentkit-vstack {
    flex-direction: column;
    gap: 1rem;
}
.contentkit-vstack.contentkit-stack-align-center {
    align-items: center;
}
.contentkit-vstack.contentkit-stack-align-end {
    align-items: flex-end;
}

/** Text */
.contentkit-text.contentkit-text-bold {
    font-weight: 700;
}

.contentkit-text.contentkit-text-italic {
    font-style: italic;
}

.contentkit-text.contentkit-text-code {
    font-family: var(--font-mono);
}

.contentkit-text.contentkit-text-strikethrough {
    text-decoration-line: line-through;
}

/** Webframe */
.contentkit-webframe {
    position: relative;
}

/** Card */
.contentkit-card {
    display: flex;
    flex-direction: column;
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.08));
}
:is(:where(.dark) .contentkit-card) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.08));
}
.contentkit-card.contentkit-card-pressable {
    cursor: pointer;
}
.contentkit-card.contentkit-card-pressable:hover {
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.12));
}
:is(:where(.dark) .contentkit-card.contentkit-card-pressable):hover {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.12));
}

.contentkit-card-header {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 1rem;
    padding-left: 1rem;
    padding-right: 1rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

.contentkit-card-header-content {
    flex: 1 1 0%;
}

.contentkit-card-title {
    font-size: 1rem;
    line-height: 1.5rem;
    font-weight: 500;
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

:is(:where(.dark) .contentkit-card-title) {
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

.contentkit-card-icon {
}

.contentkit-card-buttons {
    display: flex;
    flex-direction: row;
    gap: 0.5rem;
}

.contentkit-card-body {
    margin: 1rem;
}

.contentkit-card-header + .contentkit-card-body {
    margin-top: 0.5rem;
}

/** Image */
.contentkit-image {
    height: 1rem;
    width: 1rem;
    -o-object-fit: cover;
       object-fit: cover;
}

/** Buttons */
.contentkit-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.08));
    padding-left: 0.5rem;
    padding-right: 0.5rem;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-text-opacity)));
}
.contentkit-button:hover {
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.12));
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--dark-3), transparent calc(100% - 100% * var(--tw-text-opacity)));
}
:is(:where(.dark) .contentkit-button) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.08));
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * var(--tw-text-opacity)));
}
:is(:where(.dark) .contentkit-button):hover {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.12));
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-3), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

.contentkit-button .contentkit-icon {
    height: 1rem;
    width: 1rem;
}

.contentkit-button .contentkit-button-label {
    font-size: 0.875rem;
    line-height: 1.25rem;
    font-weight: 500;
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

:is(:where(.dark) .contentkit-button .contentkit-button-label) {
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

/** Modals */
.contentkit-modal-backdrop {
    position: fixed;
    inset: 0px;
    z-index: 40;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    background-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.16));
    padding-left: 1.75rem;
    padding-right: 1.75rem;
    padding-bottom: 2.75rem;
    padding-top: 1rem;
    --tw-backdrop-blur: blur(40px);
    -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
            backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
}
@media (min-width: 768px) {
    .contentkit-modal-backdrop {
        padding-top: min(8vw, 6rem);
    }
}
:is(:where(.dark) .contentkit-modal-backdrop) {
    background-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.72));
}
.contentkit-modal {
    position: relative;
    z-index: 50;
    display: flex;
    max-height: 90vh;
    width: 100%;
    max-width: 768px;
    flex-direction: column;
    gap: 1.5rem;
    overflow-y: auto;
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.08));
    --tw-bg-opacity: 1;
    background-color: rgb(255 255 255 / var(--tw-bg-opacity));
    opacity: 0;
    --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    transition-property: opacity;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
}
:is(:where(.dark) .contentkit-modal) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.08));
    --tw-bg-opacity: 1;
    background-color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-bg-opacity)));
}
.contentkit-modal.contentkit-modal-opened {
    opacity: 1;
}

.contentkit-modal-header {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    padding-left: 1rem;
    padding-right: 1rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

.contentkit-modal-title {
    font-size: 1.5rem;
    line-height: 2rem;
    font-weight: 500;
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

:is(:where(.dark) .contentkit-modal-title) {
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

.contentkit-modal-body {
    padding-left: 1rem;
    padding-right: 1rem;
    padding-top: 1rem;
    padding-bottom: 1rem;
}

.contentkit-modal-header + .contentkit-modal-body {
    padding-top: 0px;
}

/** Markdown */
.contentkit-markdown {
    color: var(--tw-prose-body);
    max-width: 65ch;
}
.contentkit-markdown :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
}
.contentkit-markdown :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-lead);
    font-size: 1.25em;
    line-height: 1.6;
    margin-top: 1.2em;
    margin-bottom: 1.2em;
}
.contentkit-markdown :where(a):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-links);
    text-decoration: underline;
    font-weight: 500;
}
.contentkit-markdown :where(strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-bold);
    font-weight: 600;
}
.contentkit-markdown :where(a strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.contentkit-markdown :where(blockquote strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.contentkit-markdown :where(thead th strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.contentkit-markdown :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: decimal;
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    padding-left: 1.625em;
}
.contentkit-markdown :where(ol[type="A"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: upper-alpha;
}
.contentkit-markdown :where(ol[type="a"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: lower-alpha;
}
.contentkit-markdown :where(ol[type="A" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: upper-alpha;
}
.contentkit-markdown :where(ol[type="a" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: lower-alpha;
}
.contentkit-markdown :where(ol[type="I"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: upper-roman;
}
.contentkit-markdown :where(ol[type="i"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: lower-roman;
}
.contentkit-markdown :where(ol[type="I" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: upper-roman;
}
.contentkit-markdown :where(ol[type="i" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: lower-roman;
}
.contentkit-markdown :where(ol[type="1"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: decimal;
}
.contentkit-markdown :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: disc;
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    padding-left: 1.625em;
}
.contentkit-markdown :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
    font-weight: 400;
    color: var(--tw-prose-counters);
}
.contentkit-markdown :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
    color: var(--tw-prose-bullets);
}
.contentkit-markdown :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    margin-top: 1.25em;
}
.contentkit-markdown :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    border-color: var(--tw-prose-hr);
    border-top-width: 1px;
    margin-top: 3em;
    margin-bottom: 3em;
}
.contentkit-markdown :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-weight: 500;
    font-style: italic;
    color: var(--tw-prose-quotes);
    border-left-width: 0.25rem;
    border-left-color: var(--tw-prose-quote-borders);
    quotes: "\201C""\201D""\2018""\2019";
    margin-top: 1.6em;
    margin-bottom: 1.6em;
    padding-left: 1em;
}
.contentkit-markdown :where(blockquote p:first-of-type):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
    content: open-quote;
}
.contentkit-markdown :where(blockquote p:last-of-type):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
    content: close-quote;
}
.contentkit-markdown :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 800;
    font-size: 2.25em;
    margin-top: 0;
    margin-bottom: 0.8888889em;
    line-height: 1.1111111;
}
.contentkit-markdown :where(h1 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-weight: 900;
    color: inherit;
}
.contentkit-markdown :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 700;
    font-size: 1.5em;
    margin-top: 2em;
    margin-bottom: 1em;
    line-height: 1.3333333;
}
.contentkit-markdown :where(h2 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-weight: 800;
    color: inherit;
}
.contentkit-markdown :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    font-size: 1.25em;
    margin-top: 1.6em;
    margin-bottom: 0.6em;
    line-height: 1.6;
}
.contentkit-markdown :where(h3 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-weight: 700;
    color: inherit;
}
.contentkit-markdown :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    margin-top: 1.5em;
    margin-bottom: 0.5em;
    line-height: 1.5;
}
.contentkit-markdown :where(h4 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-weight: 700;
    color: inherit;
}
.contentkit-markdown :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
}
.contentkit-markdown :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    display: block;
    margin-top: 2em;
    margin-bottom: 2em;
}
.contentkit-markdown :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-weight: 500;
    font-family: inherit;
    color: var(--tw-prose-kbd);
    box-shadow: 0 0 0 1px rgb(var(--tw-prose-kbd-shadows) / 10%), 0 3px 0 rgb(var(--tw-prose-kbd-shadows) / 10%);
    font-size: 0.875em;
    border-radius: 0.3125rem;
    padding-top: 0.1875em;
    padding-right: 0.375em;
    padding-bottom: 0.1875em;
    padding-left: 0.375em;
}
.contentkit-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-code);
    font-weight: 600;
    font-size: 0.875em;
}
.contentkit-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
    content: "`";
}
.contentkit-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
    content: "`";
}
.contentkit-markdown :where(a code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.contentkit-markdown :where(h1 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.contentkit-markdown :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
    font-size: 0.875em;
}
.contentkit-markdown :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
    font-size: 0.9em;
}
.contentkit-markdown :where(h4 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.contentkit-markdown :where(blockquote code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.contentkit-markdown :where(thead th code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.contentkit-markdown :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-pre-code);
    background-color: var(--tw-prose-pre-bg);
    overflow-x: auto;
    font-weight: 400;
    font-size: 0.875em;
    line-height: 1.7142857;
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
    border-radius: 0.375rem;
    padding-top: 0.8571429em;
    padding-right: 1.1428571em;
    padding-bottom: 0.8571429em;
    padding-left: 1.1428571em;
}
.contentkit-markdown :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    background-color: transparent;
    border-width: 0;
    border-radius: 0;
    padding: 0;
    font-weight: inherit;
    color: inherit;
    font-size: inherit;
    font-family: inherit;
    line-height: inherit;
}
.contentkit-markdown :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
    content: none;
}
.contentkit-markdown :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
    content: none;
}
.contentkit-markdown :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    width: 100%;
    table-layout: auto;
    text-align: left;
    margin-top: 2em;
    margin-bottom: 2em;
    font-size: 0.875em;
    line-height: 1.7142857;
}
.contentkit-markdown :where(thead):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    border-bottom-width: 1px;
    border-bottom-color: var(--tw-prose-th-borders);
}
.contentkit-markdown :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    vertical-align: bottom;
    padding-right: 0.5714286em;
    padding-bottom: 0.5714286em;
    padding-left: 0.5714286em;
}
.contentkit-markdown :where(tbody tr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    border-bottom-width: 1px;
    border-bottom-color: var(--tw-prose-td-borders);
}
.contentkit-markdown :where(tbody tr:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    border-bottom-width: 0;
}
.contentkit-markdown :where(tbody td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    vertical-align: baseline;
}
.contentkit-markdown :where(tfoot):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    border-top-width: 1px;
    border-top-color: var(--tw-prose-th-borders);
}
.contentkit-markdown :where(tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    vertical-align: top;
}
.contentkit-markdown :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}
.contentkit-markdown :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-captions);
    font-size: 0.875em;
    line-height: 1.4285714;
    margin-top: 0.8571429em;
}
.contentkit-markdown {
    --tw-prose-body: #374151;
    --tw-prose-headings: #111827;
    --tw-prose-lead: #4b5563;
    --tw-prose-links: #111827;
    --tw-prose-bold: #111827;
    --tw-prose-counters: #6b7280;
    --tw-prose-bullets: #d1d5db;
    --tw-prose-hr: #e5e7eb;
    --tw-prose-quotes: #111827;
    --tw-prose-quote-borders: #e5e7eb;
    --tw-prose-captions: #6b7280;
    --tw-prose-kbd: #111827;
    --tw-prose-kbd-shadows: 17 24 39;
    --tw-prose-code: #111827;
    --tw-prose-pre-code: #e5e7eb;
    --tw-prose-pre-bg: #1f2937;
    --tw-prose-th-borders: #d1d5db;
    --tw-prose-td-borders: #e5e7eb;
    --tw-prose-invert-body: #d1d5db;
    --tw-prose-invert-headings: #fff;
    --tw-prose-invert-lead: #9ca3af;
    --tw-prose-invert-links: #fff;
    --tw-prose-invert-bold: #fff;
    --tw-prose-invert-counters: #9ca3af;
    --tw-prose-invert-bullets: #4b5563;
    --tw-prose-invert-hr: #374151;
    --tw-prose-invert-quotes: #f3f4f6;
    --tw-prose-invert-quote-borders: #374151;
    --tw-prose-invert-captions: #9ca3af;
    --tw-prose-invert-kbd: #fff;
    --tw-prose-invert-kbd-shadows: 255 255 255;
    --tw-prose-invert-code: #fff;
    --tw-prose-invert-pre-code: #d1d5db;
    --tw-prose-invert-pre-bg: rgb(0 0 0 / 50%);
    --tw-prose-invert-th-borders: #4b5563;
    --tw-prose-invert-td-borders: #374151;
    font-size: 1rem;
    line-height: 1.75;
}
.contentkit-markdown :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}
.contentkit-markdown :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
}
.contentkit-markdown :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5em;
    margin-bottom: 0.5em;
}
.contentkit-markdown :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.375em;
}
.contentkit-markdown :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.375em;
}
.contentkit-markdown :where(.prose > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.75em;
    margin-bottom: 0.75em;
}
.contentkit-markdown :where(.prose > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
}
.contentkit-markdown :where(.prose > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.25em;
}
.contentkit-markdown :where(.prose > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
}
.contentkit-markdown :where(.prose > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.25em;
}
.contentkit-markdown :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.75em;
    margin-bottom: 0.75em;
}
.contentkit-markdown :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
}
.contentkit-markdown :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5em;
    padding-left: 1.625em;
}
.contentkit-markdown :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.contentkit-markdown :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.contentkit-markdown :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.contentkit-markdown :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.contentkit-markdown :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}
.contentkit-markdown :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}
.contentkit-markdown :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-top: 0.5714286em;
    padding-right: 0.5714286em;
    padding-bottom: 0.5714286em;
    padding-left: 0.5714286em;
}
.contentkit-markdown :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}
.contentkit-markdown :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}
.contentkit-markdown :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
}
.contentkit-markdown :where(.prose > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.contentkit-markdown :where(.prose > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 0;
}
.contentkit-markdown {
    font-size: 0.875rem;
    line-height: 1.7142857;
}
.contentkit-markdown :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}
.contentkit-markdown :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    line-height: 1.5555556;
    margin-top: 0.8888889em;
    margin-bottom: 0.8888889em;
}
.contentkit-markdown :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.3333333em;
    margin-bottom: 1.3333333em;
    padding-left: 1.1111111em;
}
.contentkit-markdown :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 2.1428571em;
    margin-top: 0;
    margin-bottom: 0.8em;
    line-height: 1.2;
}
.contentkit-markdown :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.4285714em;
    margin-top: 1.6em;
    margin-bottom: 0.8em;
    line-height: 1.4;
}
.contentkit-markdown :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    margin-top: 1.5555556em;
    margin-bottom: 0.4444444em;
    line-height: 1.5555556;
}
.contentkit-markdown :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.4285714em;
    margin-bottom: 0.5714286em;
    line-height: 1.4285714;
}
.contentkit-markdown :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}
.contentkit-markdown :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}
.contentkit-markdown :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}
.contentkit-markdown :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}
.contentkit-markdown :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    border-radius: 0.3125rem;
    padding-top: 0.1428571em;
    padding-right: 0.3571429em;
    padding-bottom: 0.1428571em;
    padding-left: 0.3571429em;
}
.contentkit-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
}
.contentkit-markdown :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.9em;
}
.contentkit-markdown :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8888889em;
}
.contentkit-markdown :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.6666667;
    margin-top: 1.6666667em;
    margin-bottom: 1.6666667em;
    border-radius: 0.25rem;
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}
.contentkit-markdown :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}
.contentkit-markdown :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}
.contentkit-markdown :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    margin-bottom: 0.2857143em;
}
.contentkit-markdown :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}
.contentkit-markdown :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}
.contentkit-markdown :where(.prose-sm > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}
.contentkit-markdown :where(.prose-sm > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}
.contentkit-markdown :where(.prose-sm > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}
.contentkit-markdown :where(.prose-sm > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}
.contentkit-markdown :where(.prose-sm > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}
.contentkit-markdown :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}
.contentkit-markdown :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}
.contentkit-markdown :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}
.contentkit-markdown :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    padding-left: 1.5714286em;
}
.contentkit-markdown :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2.8571429em;
    margin-bottom: 2.8571429em;
}
.contentkit-markdown :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.contentkit-markdown :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.contentkit-markdown :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.contentkit-markdown :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.contentkit-markdown :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.5;
}
.contentkit-markdown :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}
.contentkit-markdown :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}
.contentkit-markdown :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}
.contentkit-markdown :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}
.contentkit-markdown :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}
.contentkit-markdown :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}
.contentkit-markdown :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}
.contentkit-markdown :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}
.contentkit-markdown :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.3333333;
    margin-top: 0.6666667em;
}
.contentkit-markdown :where(.prose-sm > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.contentkit-markdown :where(.prose-sm > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 0;
}
:is(:where(.dark) .contentkit-markdown) {
    --tw-prose-body: var(--tw-prose-invert-body);
    --tw-prose-headings: var(--tw-prose-invert-headings);
    --tw-prose-lead: var(--tw-prose-invert-lead);
    --tw-prose-links: var(--tw-prose-invert-links);
    --tw-prose-bold: var(--tw-prose-invert-bold);
    --tw-prose-counters: var(--tw-prose-invert-counters);
    --tw-prose-bullets: var(--tw-prose-invert-bullets);
    --tw-prose-hr: var(--tw-prose-invert-hr);
    --tw-prose-quotes: var(--tw-prose-invert-quotes);
    --tw-prose-quote-borders: var(--tw-prose-invert-quote-borders);
    --tw-prose-captions: var(--tw-prose-invert-captions);
    --tw-prose-kbd: var(--tw-prose-invert-kbd);
    --tw-prose-kbd-shadows: var(--tw-prose-invert-kbd-shadows);
    --tw-prose-code: var(--tw-prose-invert-code);
    --tw-prose-pre-code: var(--tw-prose-invert-pre-code);
    --tw-prose-pre-bg: var(--tw-prose-invert-pre-bg);
    --tw-prose-th-borders: var(--tw-prose-invert-th-borders);
    --tw-prose-td-borders: var(--tw-prose-invert-td-borders);
}
.contentkit-markdown > *:first-child {
    margin-top: 0px;
}
.contentkit-markdown > *:last-child {
    margin-bottom: 0px;
}

/** Text input */
.contentkit-textinput {
    width: 100%;
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.08));
    padding-left: 0.5rem;
    padding-right: 0.5rem;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-text-opacity)));
}
:is(:where(.dark) .contentkit-textinput) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.08));
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

/** Dividers */
.contentkit-divider {
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.08));
}
:is(:where(.dark) .contentkit-divider) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.08));
}

.contentkit-vstack > .contentkit-divider {
    height: 0px;
    width: 100%;
    border-top-width: 1px;
}
.contentkit-vstack > .contentkit-divider-small {
    margin-top: 0px;
    margin-bottom: 0px;
}
.contentkit-vstack > .contentkit-divider-large {
    margin-top: 1rem;
    margin-bottom: 1rem;
}

.contentkit-hstack > .contentkit-divider {
    height: 100%;
    width: 0px;
    border-left-width: 1px;
}
.contentkit-hstack > .contentkit-divider-small {
    margin-left: 0px;
    margin-right: 0px;
}
.contentkit-hstack > .contentkit-divider-large {
    margin-left: 1rem;
    margin-right: 1rem;
}

/*!*******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[11].oneOf[7].use[2]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[11].oneOf[7].use[3]!./src/components/DocumentView/ListItem.module.css ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************/
.ListItem_olListItemBullet__9X19L {
    /* Align the bullet container with the first line of text */
    line-height: inherit;
    height: 1lh;
    /* Align the bullet content with the middle of the text */
    display: flex;
    align-items: center;
}
.ListItem_olListItemBullet__9X19L::before {
    font-size: 1rem;
    line-height: 1.5rem;
    --tw-content: attr(data-value) '. ';
    content: var(--tw-content);
}

/*!*******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[11].oneOf[12].use[2]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[11].oneOf[12].use[3]!./src/components/DocumentView/OpenAPI/style.css ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************/
.openapi-operation {
    display: flex;
    flex: 1 1 0%;
    flex-direction: column;
    gap: 1.5rem;
}

.openapi-columns {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

body:has(.print-mode) .openapi-columns {
    flex-direction: column;
}

@media (min-width: 768px) {

    .openapi-columns {
        flex-direction: row;
    }
}

/** Intro */

.openapi-intro {
    display: flex;
    max-width: 48rem;
    flex-direction: column;
    gap: 0.75rem;
}

.openapi-summary {
    font-size: 1.25rem;
    line-height: 1.75rem;
    font-weight: 600;
}

.openapi-description.openapi-markdown {
    font-size: 1rem;
    line-height: 1.75;
}

.openapi-description.openapi-markdown :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
}

.openapi-description.openapi-markdown :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.25em;
    line-height: 1.6;
    margin-top: 1.2em;
    margin-bottom: 1.2em;
}

.openapi-description.openapi-markdown :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.6em;
    margin-bottom: 1.6em;
    padding-left: 1em;
}

.openapi-description.openapi-markdown :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 2.25em;
    margin-top: 0;
    margin-bottom: 0.8888889em;
    line-height: 1.1111111;
}

.openapi-description.openapi-markdown :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.5em;
    margin-top: 2em;
    margin-bottom: 1em;
    line-height: 1.3333333;
}

.openapi-description.openapi-markdown :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.25em;
    margin-top: 1.6em;
    margin-bottom: 0.6em;
    line-height: 1.6;
}

.openapi-description.openapi-markdown :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.5em;
    margin-bottom: 0.5em;
    line-height: 1.5;
}

.openapi-description.openapi-markdown :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
}

.openapi-description.openapi-markdown :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
}

.openapi-description.openapi-markdown :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-description.openapi-markdown :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
}

.openapi-description.openapi-markdown :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.875em;
    border-radius: 0.3125rem;
    padding-top: 0.1875em;
    padding-right: 0.375em;
    padding-bottom: 0.1875em;
    padding-left: 0.375em;
}

.openapi-description.openapi-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.875em;
}

.openapi-description.openapi-markdown :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.875em;
}

.openapi-description.openapi-markdown :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.9em;
}

.openapi-description.openapi-markdown :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.875em;
    line-height: 1.7142857;
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
    border-radius: 0.375rem;
    padding-top: 0.8571429em;
    padding-right: 1.1428571em;
    padding-bottom: 0.8571429em;
    padding-left: 1.1428571em;
}

.openapi-description.openapi-markdown :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    padding-left: 1.625em;
}

.openapi-description.openapi-markdown :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    padding-left: 1.625em;
}

.openapi-description.openapi-markdown :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5em;
    margin-bottom: 0.5em;
}

.openapi-description.openapi-markdown :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.375em;
}

.openapi-description.openapi-markdown :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.375em;
}

.openapi-description.openapi-markdown :where(.prose-base > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.75em;
    margin-bottom: 0.75em;
}

.openapi-description.openapi-markdown :where(.prose-base > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
}

.openapi-description.openapi-markdown :where(.prose-base > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.25em;
}

.openapi-description.openapi-markdown :where(.prose-base > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
}

.openapi-description.openapi-markdown :where(.prose-base > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.25em;
}

.openapi-description.openapi-markdown :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.75em;
    margin-bottom: 0.75em;
}

.openapi-description.openapi-markdown :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
}

.openapi-description.openapi-markdown :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
}

.openapi-description.openapi-markdown :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5em;
    padding-left: 1.625em;
}

.openapi-description.openapi-markdown :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 3em;
    margin-bottom: 3em;
}

.openapi-description.openapi-markdown :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-description.openapi-markdown :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-description.openapi-markdown :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-description.openapi-markdown :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-description.openapi-markdown :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.875em;
    line-height: 1.7142857;
}

.openapi-description.openapi-markdown :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0.5714286em;
    padding-bottom: 0.5714286em;
    padding-left: 0.5714286em;
}

.openapi-description.openapi-markdown :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-description.openapi-markdown :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-description.openapi-markdown :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-top: 0.5714286em;
    padding-right: 0.5714286em;
    padding-bottom: 0.5714286em;
    padding-left: 0.5714286em;
}

.openapi-description.openapi-markdown :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-description.openapi-markdown :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-description.openapi-markdown :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
}

.openapi-description.openapi-markdown :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-description.openapi-markdown :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.875em;
    line-height: 1.4285714;
    margin-top: 0.8571429em;
}

.openapi-description.openapi-markdown :where(.prose-base > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-description.openapi-markdown :where(.prose-base > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 0;
}

/** Method tag */

.openapi-method {
    margin-right: 0.5rem;
    display: inline-flex;
    white-space: nowrap;
    border-radius: 0.25rem;
    padding-left: 0.25rem;
    padding-right: 0.25rem;
    padding-top: 0.125rem;
    padding-bottom: 0.125rem;
    vertical-align: middle;
    font-family: var(--font-mono);
    font-size: 11.5px;
    font-weight: 700;
    line-height: 1.25;
    color: color-mix(in srgb, var(--dark-1), transparent calc(100% - 100% * 0.72));
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
    --tw-ring-inset: inset;
    --tw-ring-color: color-mix(in srgb, var(--dark-1), transparent calc(100% - 100% * 0.04));
}

:is(:where(.dark) .openapi-method) {
    --tw-ring-color: color-mix(in srgb, var(--light-1), transparent calc(100% - 100% * 0.04));
}

.openapi-method-get {
    --tw-bg-opacity: 1;
    background-color: hsl(215 54% 86% / var(--tw-bg-opacity));
}

:is(:where(.dark) .openapi-method-get) {
    background-color: hsla(215,54%,45%,0.24);
    --tw-text-opacity: 1;
    color: hsl(215 54% 86% / var(--tw-text-opacity));
}

.openapi-method-post {
    --tw-bg-opacity: 1;
    background-color: hsl(120 25% 80% / var(--tw-bg-opacity));
}

:is(:where(.dark) .openapi-method-post) {
    background-color: hsla(120,54%,32%,0.24);
    --tw-text-opacity: 1;
    color: hsl(120 25% 80% / var(--tw-text-opacity));
}

.openapi-method-put {
    --tw-bg-opacity: 1;
    background-color: rgb(244 226 141 / var(--tw-bg-opacity));
}

:is(:where(.dark) .openapi-method-put) {
    background-color: rgb(195 181 113 / 0.24);
    --tw-text-opacity: 1;
    color: rgb(244 226 141 / var(--tw-text-opacity));
}

.openapi-method-patch {
    --tw-bg-opacity: 1;
    background-color: rgb(140 184 199 / var(--tw-bg-opacity));
}

:is(:where(.dark) .openapi-method-patch) {
    background-color: rgb(50 110 129 / 0.24);
    --tw-text-opacity: 1;
    color: rgb(140 184 199 / var(--tw-text-opacity));
}

.openapi-method-delete {
    --tw-bg-opacity: 1;
    background-color: rgb(250 189 176 / var(--tw-bg-opacity));
}

:is(:where(.dark) .openapi-method-delete) {
    background-color: rgb(242 91 58 / 0.24);
    --tw-text-opacity: 1;
    color: rgb(250 189 176 / var(--tw-text-opacity));
}

.openapi-method-head,
.openapi-method-options,
.openapi-method-trace {
    background-color: color-mix(in srgb, var(--dark-3), transparent calc(100% - 100% * 0.16));
}

:is(:where(.dark) .openapi-method-head),:is(:where(.dark) 
.openapi-method-options),:is(:where(.dark) 
.openapi-method-trace) {
    background-color: color-mix(in srgb, var(--light-3), transparent calc(100% - 100% * 0.24));
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-3), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

/** URL */

.openapi-url {
    font-family: var(--font-mono);
    font-size: 0.875rem;
    line-height: 1.25rem;
    color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.72));
}

:is(:where(.dark) .openapi-url) {
    color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.72));
}

.openapi-url-var {
    color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.64));
    text-decoration-line: underline;
    text-decoration-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.24));
    text-underline-offset: 2px;
}

:is(:where(.dark) .openapi-url-var) {
    color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.4));
    text-decoration-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.24));
}

/** Columns */

.openapi-column-spec {
    display: flex;
    max-width: 48rem;
    flex: 1 1 0%;
    flex-direction: column;
    gap: 1rem;
}

.openapi-column-preview {
    display: flex;
    max-width: 48rem;
    flex: 1 1 0%;
    flex-direction: column;
}

.openapi-column-preview-body {
    position: sticky;
    top: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

body:has(header) .openapi-column-preview-body {
    top: 5rem;
}

body:has(.print-mode) .openapi-column-preview-body {
    position: static;
}

@media (min-width: 1280px) {

    @media not all and (min-width: 1536px) {

        body:has(.openapi-block) .openapi-column-preview-body {
            top: 8rem;
        }
    }
}

.openapi-column-preview pre {
    max-height: 15rem;
}

body:has(.print-mode) .openapi-column-preview pre {
    max-height: none;
}

/** Schemas */

.openapi-schema-root {
    margin-left: 0.75rem;
    margin-right: 0.75rem;
    margin-bottom: 0.75rem;
    margin-top: 0.5rem;
}

.openapi-schema .openapi-schema-properties {
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.08));
}

:is(:where(.dark) .openapi-schema .openapi-schema-properties) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.08));
}

.openapi-schema-properties .openapi-schema {
    border-bottom-width: 1px;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.04));
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

:is(:where(.dark) .openapi-schema-properties .openapi-schema) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.04));
}

.openapi-schema-properties .openapi-schema:last-child {
    border-bottom-width: 0px;
}

.openapi-schema-properties .openapi-schema-opened {
    padding-bottom: 0.75rem;
}

.openapi-schema > .openapi-schema-properties {
    margin-top: 0.75rem;
}

.openapi-schema-name {
    /* To make double click on the property name select only the name,
    we disable selection on the parent and re-enable it on the children. */
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
}

.openapi-schema-propertyname {
    -webkit-user-select: all;
       -moz-user-select: all;
            user-select: all;
    font-size: 1rem;
    line-height: 1.5rem;
    font-weight: 500;
    color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.96));
}

:is(:where(.dark) .openapi-schema-propertyname) {
    color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.96));
}

.openapi-schema-required {
    font-weight: 400;
    --tw-text-opacity: 1;
    color: rgb(195 181 113 / var(--tw-text-opacity));
}

.openapi-schema-type {
    margin-left: 0.75rem;
    -webkit-user-select: text;
       -moz-user-select: text;
            user-select: text;
    font-family: var(--font-mono);
    font-size: 1rem;
    line-height: 1.5rem;
    color: color-mix(in srgb, var(--dark-4), transparent calc(100% - 100% * 0.72));
}

:is(:where(.dark) .openapi-schema-type) {
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

.openapi-schema-type:only-child {
    margin-left: 0px;
}

.openapi-schema-header {
    display: flex;
    flex-direction: row;
    align-items: center;
}

.openapi-schema-intro {
    flex: 1 1 0%;
}

.openapi-schema-body {
    margin-top: 0.5rem;
}

.openapi-schema-circular {
    font-size: 0.75rem;
    line-height: 1rem;
    color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.4));
}

:is(:where(.dark) .openapi-schema-circular) {
    color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.4));
}

.openapi-schema-circular a {
    text-decoration-line: underline;
}

.openapi-schema-circular-glyph {
    font-size: 1rem;
    line-height: 1.5rem;
}

.openapi-schema-enum {
    margin-top: 0.25rem;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
}

.openapi-schema-enum-value {
    margin-left: -1px;
    margin-top: -1px;
    border-width: 1px;
    --tw-border-opacity: 1;
    border-color: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * var(--tw-border-opacity)));
    padding-left: 0.375rem;
    padding-right: 0.375rem;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
    font-family: var(--font-mono);
    font-size: 0.75rem;
    line-height: 1rem;
    color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.72));
}

:is(:where(.dark) .openapi-schema-enum-value) {
    --tw-border-opacity: 1;
    border-color: color-mix(in srgb, var(--dark-4), transparent calc(100% - 100% * var(--tw-border-opacity)));
    color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.72));
}

.openapi-schema-enum-value:first-child {
    margin-left: 0px;
    border-top-left-radius: 0.25rem;
    border-bottom-left-radius: 0.25rem;
}

.openapi-schema-enum-value:last-child {
    border-top-right-radius: 0.25rem;
    border-bottom-right-radius: 0.25rem;
}

.openapi-schema-description.openapi-markdown {
    font-size: 0.875rem;
    line-height: 1.7142857;
}

.openapi-schema-description.openapi-markdown :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}

.openapi-schema-description.openapi-markdown :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    line-height: 1.5555556;
    margin-top: 0.8888889em;
    margin-bottom: 0.8888889em;
}

.openapi-schema-description.openapi-markdown :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.3333333em;
    margin-bottom: 1.3333333em;
    padding-left: 1.1111111em;
}

.openapi-schema-description.openapi-markdown :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 2.1428571em;
    margin-top: 0;
    margin-bottom: 0.8em;
    line-height: 1.2;
}

.openapi-schema-description.openapi-markdown :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.4285714em;
    margin-top: 1.6em;
    margin-bottom: 0.8em;
    line-height: 1.4;
}

.openapi-schema-description.openapi-markdown :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    margin-top: 1.5555556em;
    margin-bottom: 0.4444444em;
    line-height: 1.5555556;
}

.openapi-schema-description.openapi-markdown :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.4285714em;
    margin-bottom: 0.5714286em;
    line-height: 1.4285714;
}

.openapi-schema-description.openapi-markdown :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-schema-description.openapi-markdown :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-schema-description.openapi-markdown :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-schema-description.openapi-markdown :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-schema-description.openapi-markdown :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    border-radius: 0.3125rem;
    padding-top: 0.1428571em;
    padding-right: 0.3571429em;
    padding-bottom: 0.1428571em;
    padding-left: 0.3571429em;
}

.openapi-schema-description.openapi-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
}

.openapi-schema-description.openapi-markdown :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.9em;
}

.openapi-schema-description.openapi-markdown :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8888889em;
}

.openapi-schema-description.openapi-markdown :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.6666667;
    margin-top: 1.6666667em;
    margin-bottom: 1.6666667em;
    border-radius: 0.25rem;
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-schema-description.openapi-markdown :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}

.openapi-schema-description.openapi-markdown :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}

.openapi-schema-description.openapi-markdown :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    margin-bottom: 0.2857143em;
}

.openapi-schema-description.openapi-markdown :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}

.openapi-schema-description.openapi-markdown :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}

.openapi-schema-description.openapi-markdown :where(.prose-sm > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}

.openapi-schema-description.openapi-markdown :where(.prose-sm > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-schema-description.openapi-markdown :where(.prose-sm > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}

.openapi-schema-description.openapi-markdown :where(.prose-sm > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-schema-description.openapi-markdown :where(.prose-sm > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}

.openapi-schema-description.openapi-markdown :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}

.openapi-schema-description.openapi-markdown :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}

.openapi-schema-description.openapi-markdown :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-schema-description.openapi-markdown :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    padding-left: 1.5714286em;
}

.openapi-schema-description.openapi-markdown :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2.8571429em;
    margin-bottom: 2.8571429em;
}

.openapi-schema-description.openapi-markdown :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-schema-description.openapi-markdown :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-schema-description.openapi-markdown :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-schema-description.openapi-markdown :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-schema-description.openapi-markdown :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.5;
}

.openapi-schema-description.openapi-markdown :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-schema-description.openapi-markdown :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-schema-description.openapi-markdown :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-schema-description.openapi-markdown :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-schema-description.openapi-markdown :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-schema-description.openapi-markdown :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-schema-description.openapi-markdown :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-schema-description.openapi-markdown :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-schema-description.openapi-markdown :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.3333333;
    margin-top: 0.6666667em;
}

.openapi-schema-description.openapi-markdown :where(.prose-sm > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-schema-description.openapi-markdown :where(.prose-sm > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 0;
}

.openapi-schema-example {
    font-size: 0.875rem;
    line-height: 1.7142857;
}

.openapi-schema-example :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}

.openapi-schema-example :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    line-height: 1.5555556;
    margin-top: 0.8888889em;
    margin-bottom: 0.8888889em;
}

.openapi-schema-example :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.3333333em;
    margin-bottom: 1.3333333em;
    padding-left: 1.1111111em;
}

.openapi-schema-example :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 2.1428571em;
    margin-top: 0;
    margin-bottom: 0.8em;
    line-height: 1.2;
}

.openapi-schema-example :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.4285714em;
    margin-top: 1.6em;
    margin-bottom: 0.8em;
    line-height: 1.4;
}

.openapi-schema-example :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    margin-top: 1.5555556em;
    margin-bottom: 0.4444444em;
    line-height: 1.5555556;
}

.openapi-schema-example :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.4285714em;
    margin-bottom: 0.5714286em;
    line-height: 1.4285714;
}

.openapi-schema-example :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-schema-example :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-schema-example :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-schema-example :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-schema-example :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    border-radius: 0.3125rem;
    padding-top: 0.1428571em;
    padding-right: 0.3571429em;
    padding-bottom: 0.1428571em;
    padding-left: 0.3571429em;
}

.openapi-schema-example :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
}

.openapi-schema-example :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.9em;
}

.openapi-schema-example :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8888889em;
}

.openapi-schema-example :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.6666667;
    margin-top: 1.6666667em;
    margin-bottom: 1.6666667em;
    border-radius: 0.25rem;
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-schema-example :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}

.openapi-schema-example :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}

.openapi-schema-example :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    margin-bottom: 0.2857143em;
}

.openapi-schema-example :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}

.openapi-schema-example :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}

.openapi-schema-example :where(.prose-sm > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}

.openapi-schema-example :where(.prose-sm > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-schema-example :where(.prose-sm > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}

.openapi-schema-example :where(.prose-sm > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-schema-example :where(.prose-sm > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}

.openapi-schema-example :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}

.openapi-schema-example :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}

.openapi-schema-example :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-schema-example :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    padding-left: 1.5714286em;
}

.openapi-schema-example :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2.8571429em;
    margin-bottom: 2.8571429em;
}

.openapi-schema-example :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-schema-example :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-schema-example :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-schema-example :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-schema-example :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.5;
}

.openapi-schema-example :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-schema-example :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-schema-example :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-schema-example :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-schema-example :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-schema-example :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-schema-example :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-schema-example :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-schema-example :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.3333333;
    margin-top: 0.6666667em;
}

.openapi-schema-example :where(.prose-sm > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-schema-example :where(.prose-sm > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 0;
}

.openapi-schema-example {
    margin-top: 0.5rem;
    color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.96));
}

:is(:where(.dark) .openapi-schema-example) {
    color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.96));
}

/** Authentication */

.openapi-securities {
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.08));
}

:is(:where(.dark) .openapi-securities) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.08));
}

.openapi-securities-header {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

.openapi-securities.openapi-securities-closed:hover {
    cursor: pointer;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.12));
}

:is(:where(.dark) .openapi-securities.openapi-securities-closed:hover) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.12));
}

.openapi-securities-header-content {
    font-size: 1rem;
    line-height: 1.5rem;
    font-weight: 600;
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

:is(:where(.dark) .openapi-securities-header-content) {
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

.openapi-securities-body {
    margin-left: 0.75rem;
    margin-right: 0.75rem;
    margin-bottom: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.openapi-securities-description.openapi-markdown {
    font-size: 0.875rem;
    line-height: 1.7142857;
}

.openapi-securities-description.openapi-markdown :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}

.openapi-securities-description.openapi-markdown :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    line-height: 1.5555556;
    margin-top: 0.8888889em;
    margin-bottom: 0.8888889em;
}

.openapi-securities-description.openapi-markdown :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.3333333em;
    margin-bottom: 1.3333333em;
    padding-left: 1.1111111em;
}

.openapi-securities-description.openapi-markdown :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 2.1428571em;
    margin-top: 0;
    margin-bottom: 0.8em;
    line-height: 1.2;
}

.openapi-securities-description.openapi-markdown :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.4285714em;
    margin-top: 1.6em;
    margin-bottom: 0.8em;
    line-height: 1.4;
}

.openapi-securities-description.openapi-markdown :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    margin-top: 1.5555556em;
    margin-bottom: 0.4444444em;
    line-height: 1.5555556;
}

.openapi-securities-description.openapi-markdown :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.4285714em;
    margin-bottom: 0.5714286em;
    line-height: 1.4285714;
}

.openapi-securities-description.openapi-markdown :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-securities-description.openapi-markdown :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-securities-description.openapi-markdown :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-securities-description.openapi-markdown :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-securities-description.openapi-markdown :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    border-radius: 0.3125rem;
    padding-top: 0.1428571em;
    padding-right: 0.3571429em;
    padding-bottom: 0.1428571em;
    padding-left: 0.3571429em;
}

.openapi-securities-description.openapi-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
}

.openapi-securities-description.openapi-markdown :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.9em;
}

.openapi-securities-description.openapi-markdown :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8888889em;
}

.openapi-securities-description.openapi-markdown :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.6666667;
    margin-top: 1.6666667em;
    margin-bottom: 1.6666667em;
    border-radius: 0.25rem;
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-securities-description.openapi-markdown :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}

.openapi-securities-description.openapi-markdown :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}

.openapi-securities-description.openapi-markdown :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    margin-bottom: 0.2857143em;
}

.openapi-securities-description.openapi-markdown :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}

.openapi-securities-description.openapi-markdown :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}

.openapi-securities-description.openapi-markdown :where(.prose-sm > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}

.openapi-securities-description.openapi-markdown :where(.prose-sm > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-securities-description.openapi-markdown :where(.prose-sm > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}

.openapi-securities-description.openapi-markdown :where(.prose-sm > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-securities-description.openapi-markdown :where(.prose-sm > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}

.openapi-securities-description.openapi-markdown :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}

.openapi-securities-description.openapi-markdown :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}

.openapi-securities-description.openapi-markdown :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-securities-description.openapi-markdown :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    padding-left: 1.5714286em;
}

.openapi-securities-description.openapi-markdown :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2.8571429em;
    margin-bottom: 2.8571429em;
}

.openapi-securities-description.openapi-markdown :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-securities-description.openapi-markdown :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-securities-description.openapi-markdown :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-securities-description.openapi-markdown :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-securities-description.openapi-markdown :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.5;
}

.openapi-securities-description.openapi-markdown :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-securities-description.openapi-markdown :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-securities-description.openapi-markdown :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-securities-description.openapi-markdown :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-securities-description.openapi-markdown :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-securities-description.openapi-markdown :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-securities-description.openapi-markdown :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-securities-description.openapi-markdown :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-securities-description.openapi-markdown :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.3333333;
    margin-top: 0.6666667em;
}

.openapi-securities-description.openapi-markdown :where(.prose-sm > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-securities-description.openapi-markdown :where(.prose-sm > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 0;
}

.openapi-securities-label {
    font-size: 0.875rem;
    line-height: 1.25rem;
    font-weight: 500;
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

:is(:where(.dark) .openapi-securities-label) {
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

/** Parameters */

.openapi-parameters {
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.08));
}

:is(:where(.dark) .openapi-parameters) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.08));
}

.openapi-parameters.openapi-parameters-closed:hover {
    cursor: pointer;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.12));
}

:is(:where(.dark) .openapi-parameters.openapi-parameters-closed:hover) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.12));
}

.openapi-parameters-header {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

.openapi-parameters-header-content {
    font-size: 1rem;
    line-height: 1.5rem;
    font-weight: 600;
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

:is(:where(.dark) .openapi-parameters-header-content) {
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

/** Request body */
.openapi-requestbody {
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.08));
}
:is(:where(.dark) .openapi-requestbody) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.08));
}

.openapi-requestbody-header {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

.openapi-requestbody-header-content {
    font-size: 1rem;
    line-height: 1.5rem;
    font-weight: 600;
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

:is(:where(.dark) .openapi-requestbody-header-content) {
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

.openapi-requestbody-description.openapi-markdown {
    font-size: 0.875rem;
    line-height: 1.7142857;
}

.openapi-requestbody-description.openapi-markdown :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    line-height: 1.5555556;
    margin-top: 0.8888889em;
    margin-bottom: 0.8888889em;
}

.openapi-requestbody-description.openapi-markdown :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.3333333em;
    margin-bottom: 1.3333333em;
    padding-left: 1.1111111em;
}

.openapi-requestbody-description.openapi-markdown :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 2.1428571em;
    margin-top: 0;
    margin-bottom: 0.8em;
    line-height: 1.2;
}

.openapi-requestbody-description.openapi-markdown :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.4285714em;
    margin-top: 1.6em;
    margin-bottom: 0.8em;
    line-height: 1.4;
}

.openapi-requestbody-description.openapi-markdown :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    margin-top: 1.5555556em;
    margin-bottom: 0.4444444em;
    line-height: 1.5555556;
}

.openapi-requestbody-description.openapi-markdown :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.4285714em;
    margin-bottom: 0.5714286em;
    line-height: 1.4285714;
}

.openapi-requestbody-description.openapi-markdown :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-requestbody-description.openapi-markdown :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-requestbody-description.openapi-markdown :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-requestbody-description.openapi-markdown :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-requestbody-description.openapi-markdown :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    border-radius: 0.3125rem;
    padding-top: 0.1428571em;
    padding-right: 0.3571429em;
    padding-bottom: 0.1428571em;
    padding-left: 0.3571429em;
}

.openapi-requestbody-description.openapi-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
}

.openapi-requestbody-description.openapi-markdown :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.9em;
}

.openapi-requestbody-description.openapi-markdown :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8888889em;
}

.openapi-requestbody-description.openapi-markdown :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.6666667;
    margin-top: 1.6666667em;
    margin-bottom: 1.6666667em;
    border-radius: 0.25rem;
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-requestbody-description.openapi-markdown :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    margin-bottom: 0.2857143em;
}

.openapi-requestbody-description.openapi-markdown :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}

.openapi-requestbody-description.openapi-markdown :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    padding-left: 1.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2.8571429em;
    margin-bottom: 2.8571429em;
}

.openapi-requestbody-description.openapi-markdown :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.5;
}

.openapi-requestbody-description.openapi-markdown :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-requestbody-description.openapi-markdown :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-requestbody-description.openapi-markdown :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-requestbody-description.openapi-markdown :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-requestbody-description.openapi-markdown :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-requestbody-description.openapi-markdown :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-requestbody-description.openapi-markdown :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-requestbody-description.openapi-markdown :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-requestbody-description.openapi-markdown :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.3333333;
    margin-top: 0.6666667em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 0;
}

.openapi-requestbody-description.openapi-markdown {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    font-size: 0.875rem;
    line-height: 1.7142857;
}

.openapi-requestbody-description.openapi-markdown :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    line-height: 1.5555556;
    margin-top: 0.8888889em;
    margin-bottom: 0.8888889em;
}

.openapi-requestbody-description.openapi-markdown :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.3333333em;
    margin-bottom: 1.3333333em;
    padding-left: 1.1111111em;
}

.openapi-requestbody-description.openapi-markdown :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 2.1428571em;
    margin-top: 0;
    margin-bottom: 0.8em;
    line-height: 1.2;
}

.openapi-requestbody-description.openapi-markdown :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.4285714em;
    margin-top: 1.6em;
    margin-bottom: 0.8em;
    line-height: 1.4;
}

.openapi-requestbody-description.openapi-markdown :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    margin-top: 1.5555556em;
    margin-bottom: 0.4444444em;
    line-height: 1.5555556;
}

.openapi-requestbody-description.openapi-markdown :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.4285714em;
    margin-bottom: 0.5714286em;
    line-height: 1.4285714;
}

.openapi-requestbody-description.openapi-markdown :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-requestbody-description.openapi-markdown :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-requestbody-description.openapi-markdown :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-requestbody-description.openapi-markdown :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-requestbody-description.openapi-markdown :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    border-radius: 0.3125rem;
    padding-top: 0.1428571em;
    padding-right: 0.3571429em;
    padding-bottom: 0.1428571em;
    padding-left: 0.3571429em;
}

.openapi-requestbody-description.openapi-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
}

.openapi-requestbody-description.openapi-markdown :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.9em;
}

.openapi-requestbody-description.openapi-markdown :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8888889em;
}

.openapi-requestbody-description.openapi-markdown :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.6666667;
    margin-top: 1.6666667em;
    margin-bottom: 1.6666667em;
    border-radius: 0.25rem;
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-requestbody-description.openapi-markdown :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    margin-bottom: 0.2857143em;
}

.openapi-requestbody-description.openapi-markdown :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}

.openapi-requestbody-description.openapi-markdown :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    padding-left: 1.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2.8571429em;
    margin-bottom: 2.8571429em;
}

.openapi-requestbody-description.openapi-markdown :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.5;
}

.openapi-requestbody-description.openapi-markdown :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-requestbody-description.openapi-markdown :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-requestbody-description.openapi-markdown :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-requestbody-description.openapi-markdown :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-requestbody-description.openapi-markdown :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-requestbody-description.openapi-markdown :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-requestbody-description.openapi-markdown :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-requestbody-description.openapi-markdown :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-requestbody-description.openapi-markdown :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.3333333;
    margin-top: 0.6666667em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 0;
}

.openapi-requestbody-description.openapi-markdown {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    font-size: 0.875rem;
    line-height: 1.7142857;
}

.openapi-requestbody-description.openapi-markdown :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    line-height: 1.5555556;
    margin-top: 0.8888889em;
    margin-bottom: 0.8888889em;
}

.openapi-requestbody-description.openapi-markdown :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.3333333em;
    margin-bottom: 1.3333333em;
    padding-left: 1.1111111em;
}

.openapi-requestbody-description.openapi-markdown :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 2.1428571em;
    margin-top: 0;
    margin-bottom: 0.8em;
    line-height: 1.2;
}

.openapi-requestbody-description.openapi-markdown :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.4285714em;
    margin-top: 1.6em;
    margin-bottom: 0.8em;
    line-height: 1.4;
}

.openapi-requestbody-description.openapi-markdown :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    margin-top: 1.5555556em;
    margin-bottom: 0.4444444em;
    line-height: 1.5555556;
}

.openapi-requestbody-description.openapi-markdown :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.4285714em;
    margin-bottom: 0.5714286em;
    line-height: 1.4285714;
}

.openapi-requestbody-description.openapi-markdown :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-requestbody-description.openapi-markdown :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-requestbody-description.openapi-markdown :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-requestbody-description.openapi-markdown :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-requestbody-description.openapi-markdown :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    border-radius: 0.3125rem;
    padding-top: 0.1428571em;
    padding-right: 0.3571429em;
    padding-bottom: 0.1428571em;
    padding-left: 0.3571429em;
}

.openapi-requestbody-description.openapi-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
}

.openapi-requestbody-description.openapi-markdown :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.9em;
}

.openapi-requestbody-description.openapi-markdown :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8888889em;
}

.openapi-requestbody-description.openapi-markdown :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.6666667;
    margin-top: 1.6666667em;
    margin-bottom: 1.6666667em;
    border-radius: 0.25rem;
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-requestbody-description.openapi-markdown :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    margin-bottom: 0.2857143em;
}

.openapi-requestbody-description.openapi-markdown :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}

.openapi-requestbody-description.openapi-markdown :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}

.openapi-requestbody-description.openapi-markdown :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    padding-left: 1.5714286em;
}

.openapi-requestbody-description.openapi-markdown :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2.8571429em;
    margin-bottom: 2.8571429em;
}

.openapi-requestbody-description.openapi-markdown :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.5;
}

.openapi-requestbody-description.openapi-markdown :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-requestbody-description.openapi-markdown :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-requestbody-description.openapi-markdown :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-requestbody-description.openapi-markdown :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}

.openapi-requestbody-description.openapi-markdown :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}

.openapi-requestbody-description.openapi-markdown :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}

.openapi-requestbody-description.openapi-markdown :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}

.openapi-requestbody-description.openapi-markdown :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}

.openapi-requestbody-description.openapi-markdown :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.3333333;
    margin-top: 0.6666667em;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}

.openapi-requestbody-description.openapi-markdown :where(.prose-sm > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 0;
}

.openapi-requestbody-description.openapi-markdown {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
}

/** Responses */
.openapi-responses {
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.08));
}
:is(:where(.dark) .openapi-responses) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.08));
}

.openapi-responses-header {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

.openapi-responses-body {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.openapi-responses-header-content {
    font-weight: 600;
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

:is(:where(.dark) .openapi-responses-header-content) {
    --tw-text-opacity: 1;
    color: color-mix(in srgb, var(--light-4), transparent calc(100% - 100% * var(--tw-text-opacity)));
}

/** Response */
.openapi-response-description.openapi-markdown {
    font-size: 0.875rem;
    line-height: 1.7142857;
}
.openapi-response-description.openapi-markdown :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}
.openapi-response-description.openapi-markdown :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    line-height: 1.5555556;
    margin-top: 0.8888889em;
    margin-bottom: 0.8888889em;
}
.openapi-response-description.openapi-markdown :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.3333333em;
    margin-bottom: 1.3333333em;
    padding-left: 1.1111111em;
}
.openapi-response-description.openapi-markdown :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 2.1428571em;
    margin-top: 0;
    margin-bottom: 0.8em;
    line-height: 1.2;
}
.openapi-response-description.openapi-markdown :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.4285714em;
    margin-top: 1.6em;
    margin-bottom: 0.8em;
    line-height: 1.4;
}
.openapi-response-description.openapi-markdown :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 1.2857143em;
    margin-top: 1.5555556em;
    margin-bottom: 0.4444444em;
    line-height: 1.5555556;
}
.openapi-response-description.openapi-markdown :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.4285714em;
    margin-bottom: 0.5714286em;
    line-height: 1.4285714;
}
.openapi-response-description.openapi-markdown :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}
.openapi-response-description.openapi-markdown :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}
.openapi-response-description.openapi-markdown :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}
.openapi-response-description.openapi-markdown :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}
.openapi-response-description.openapi-markdown :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    border-radius: 0.3125rem;
    padding-top: 0.1428571em;
    padding-right: 0.3571429em;
    padding-bottom: 0.1428571em;
    padding-left: 0.3571429em;
}
.openapi-response-description.openapi-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
}
.openapi-response-description.openapi-markdown :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.9em;
}
.openapi-response-description.openapi-markdown :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8888889em;
}
.openapi-response-description.openapi-markdown :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.6666667;
    margin-top: 1.6666667em;
    margin-bottom: 1.6666667em;
    border-radius: 0.25rem;
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}
.openapi-response-description.openapi-markdown :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}
.openapi-response-description.openapi-markdown :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
    padding-left: 1.5714286em;
}
.openapi-response-description.openapi-markdown :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    margin-bottom: 0.2857143em;
}
.openapi-response-description.openapi-markdown :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}
.openapi-response-description.openapi-markdown :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.4285714em;
}
.openapi-response-description.openapi-markdown :where(.prose-sm > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}
.openapi-response-description.openapi-markdown :where(.prose-sm > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}
.openapi-response-description.openapi-markdown :where(.prose-sm > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}
.openapi-response-description.openapi-markdown :where(.prose-sm > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}
.openapi-response-description.openapi-markdown :where(.prose-sm > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.1428571em;
}
.openapi-response-description.openapi-markdown :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5714286em;
    margin-bottom: 0.5714286em;
}
.openapi-response-description.openapi-markdown :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
    margin-bottom: 1.1428571em;
}
.openapi-response-description.openapi-markdown :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.1428571em;
}
.openapi-response-description.openapi-markdown :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.2857143em;
    padding-left: 1.5714286em;
}
.openapi-response-description.openapi-markdown :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2.8571429em;
    margin-bottom: 2.8571429em;
}
.openapi-response-description.openapi-markdown :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.openapi-response-description.openapi-markdown :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.openapi-response-description.openapi-markdown :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.openapi-response-description.openapi-markdown :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.openapi-response-description.openapi-markdown :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.5;
}
.openapi-response-description.openapi-markdown :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}
.openapi-response-description.openapi-markdown :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}
.openapi-response-description.openapi-markdown :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}
.openapi-response-description.openapi-markdown :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-top: 0.6666667em;
    padding-right: 1em;
    padding-bottom: 0.6666667em;
    padding-left: 1em;
}
.openapi-response-description.openapi-markdown :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}
.openapi-response-description.openapi-markdown :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}
.openapi-response-description.openapi-markdown :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
}
.openapi-response-description.openapi-markdown :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}
.openapi-response-description.openapi-markdown :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-size: 0.8571429em;
    line-height: 1.3333333;
    margin-top: 0.6666667em;
}
.openapi-response-description.openapi-markdown :where(.prose-sm > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.openapi-response-description.openapi-markdown :where(.prose-sm > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 0;
}
.openapi-response-description.openapi-markdown {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
}

.openapi-response-description:last-child {
    margin-bottom: 0.75rem;
}

.openapi-responsebody-header,
.openapi-responseheaders-header {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
}

.openapi-responsebody-header-content,
.openapi-responseheaders-header-content {
    font-size: 1rem;
    line-height: 1.5rem;
    color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.72));
}

:is(:where(.dark) .openapi-responsebody-header-content),:is(:where(.dark) 
.openapi-responseheaders-header-content) {
    color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.72));
}

/** Code sample */

.openapi-codesample {
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.04));
    --tw-bg-opacity: 1;
    background-color: color-mix(in srgb, var(--light-2), transparent calc(100% - 100% * var(--tw-bg-opacity)));
}

:is(:where(.dark) .openapi-codesample) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.08));
    --tw-bg-opacity: 1;
    background-color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-bg-opacity)));
}

.openapi-codesample-header {
    display: flex;
    flex-direction: row;
    align-items: center;
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

.openapi-codesample-title {
    flex: 1 1 0%;
    font-size: 1rem;
    line-height: 1.5rem;
    font-weight: 600;
}

/** Response example */

.openapi-response-example {
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.04));
    --tw-bg-opacity: 1;
    background-color: color-mix(in srgb, var(--light-2), transparent calc(100% - 100% * var(--tw-bg-opacity)));
}

:is(:where(.dark) .openapi-response-example) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.08));
    --tw-bg-opacity: 1;
    background-color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-bg-opacity)));
}

.openapi-response-example-header {
    display: flex;
    flex-direction: row;
    align-items: center;
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

.openapi-response-example-title {
    flex: 1 1 0%;
    font-size: 1rem;
    line-height: 1.5rem;
    font-weight: 600;
}

/** Common */

.openapi-select {
    max-width: 12rem;
    border-radius: 0.25rem;
    border-width: 1px;
    border-color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * 0.08));
    --tw-bg-opacity: 1;
    background-color: color-mix(in srgb, var(--light-2), transparent calc(100% - 100% * var(--tw-bg-opacity)));
    padding-left: 0.25rem;
    padding-right: 0.25rem;
    padding-top: 0.125rem;
    padding-bottom: 0.125rem;
    font-family: var(--font-mono);
    font-size: 0.75rem;
    line-height: 1.5rem;
}

:is(:where(.dark) .openapi-select) {
    border-color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.04));
    --tw-bg-opacity: 1;
    background-color: color-mix(in srgb, var(--dark-2), transparent calc(100% - 100% * var(--tw-bg-opacity)));
}

/** Section */

.openapi-section {
}

.openapi-section-header {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
}

.openapi-section-header-content {
    flex: 1 1 0%;
}

.openapi-section-header-controls {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5rem;
}

.openapi-section-toggle {
    display: flex;
    width: 1.5rem;
    height: 1.5rem;
    align-items: center;
    justify-content: flex-end;
    color: color-mix(in srgb, var(--dark-DEFAULT), transparent calc(100% - 100% * 0.4));
}

:is(:where(.dark) .openapi-section-toggle) {
    color: color-mix(in srgb, var(--light-DEFAULT), transparent calc(100% - 100% * 0.4));
}

.openapi-section-toggle:focus-visible,
.openapi-section-toggle:focus-visible {
    --tw-text-opacity: 1;
    color: rgb(var(--primary-color-500) / var(--tw-text-opacity));
}

.openapi-section-toggle svg {
    width: 1rem;
    height: 1rem;
}

/** Markdown */
.openapi-markdown {
    color: var(--tw-prose-body);
    max-width: 65ch;
}
.openapi-markdown :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
}
.openapi-markdown :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-lead);
    font-size: 1.25em;
    line-height: 1.6;
    margin-top: 1.2em;
    margin-bottom: 1.2em;
}
.openapi-markdown :where(a):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-links);
    text-decoration: underline;
    font-weight: 500;
}
.openapi-markdown :where(strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-bold);
    font-weight: 600;
}
.openapi-markdown :where(a strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.openapi-markdown :where(blockquote strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.openapi-markdown :where(thead th strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.openapi-markdown :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: decimal;
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    padding-left: 1.625em;
}
.openapi-markdown :where(ol[type="A"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: upper-alpha;
}
.openapi-markdown :where(ol[type="a"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: lower-alpha;
}
.openapi-markdown :where(ol[type="A" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: upper-alpha;
}
.openapi-markdown :where(ol[type="a" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: lower-alpha;
}
.openapi-markdown :where(ol[type="I"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: upper-roman;
}
.openapi-markdown :where(ol[type="i"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: lower-roman;
}
.openapi-markdown :where(ol[type="I" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: upper-roman;
}
.openapi-markdown :where(ol[type="i" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: lower-roman;
}
.openapi-markdown :where(ol[type="1"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: decimal;
}
.openapi-markdown :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    list-style-type: disc;
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    padding-left: 1.625em;
}
.openapi-markdown :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
    font-weight: 400;
    color: var(--tw-prose-counters);
}
.openapi-markdown :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
    color: var(--tw-prose-bullets);
}
.openapi-markdown :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    margin-top: 1.25em;
}
.openapi-markdown :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    border-color: var(--tw-prose-hr);
    border-top-width: 1px;
    margin-top: 3em;
    margin-bottom: 3em;
}
.openapi-markdown :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-weight: 500;
    font-style: italic;
    color: var(--tw-prose-quotes);
    border-left-width: 0.25rem;
    border-left-color: var(--tw-prose-quote-borders);
    quotes: "\201C""\201D""\2018""\2019";
    margin-top: 1.6em;
    margin-bottom: 1.6em;
    padding-left: 1em;
}
.openapi-markdown :where(blockquote p:first-of-type):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
    content: open-quote;
}
.openapi-markdown :where(blockquote p:last-of-type):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
    content: close-quote;
}
.openapi-markdown :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 800;
    font-size: 2.25em;
    margin-top: 0;
    margin-bottom: 0.8888889em;
    line-height: 1.1111111;
}
.openapi-markdown :where(h1 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-weight: 900;
    color: inherit;
}
.openapi-markdown :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 700;
    font-size: 1.5em;
    margin-top: 2em;
    margin-bottom: 1em;
    line-height: 1.3333333;
}
.openapi-markdown :where(h2 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-weight: 800;
    color: inherit;
}
.openapi-markdown :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    font-size: 1.25em;
    margin-top: 1.6em;
    margin-bottom: 0.6em;
    line-height: 1.6;
}
.openapi-markdown :where(h3 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-weight: 700;
    color: inherit;
}
.openapi-markdown :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    margin-top: 1.5em;
    margin-bottom: 0.5em;
    line-height: 1.5;
}
.openapi-markdown :where(h4 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-weight: 700;
    color: inherit;
}
.openapi-markdown :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
}
.openapi-markdown :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    display: block;
    margin-top: 2em;
    margin-bottom: 2em;
}
.openapi-markdown :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    font-weight: 500;
    font-family: inherit;
    color: var(--tw-prose-kbd);
    box-shadow: 0 0 0 1px rgb(var(--tw-prose-kbd-shadows) / 10%), 0 3px 0 rgb(var(--tw-prose-kbd-shadows) / 10%);
    font-size: 0.875em;
    border-radius: 0.3125rem;
    padding-top: 0.1875em;
    padding-right: 0.375em;
    padding-bottom: 0.1875em;
    padding-left: 0.375em;
}
.openapi-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-code);
    font-weight: 600;
    font-size: 0.875em;
}
.openapi-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
    content: "`";
}
.openapi-markdown :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
    content: "`";
}
.openapi-markdown :where(a code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.openapi-markdown :where(h1 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.openapi-markdown :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
    font-size: 0.875em;
}
.openapi-markdown :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
    font-size: 0.9em;
}
.openapi-markdown :where(h4 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.openapi-markdown :where(blockquote code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.openapi-markdown :where(thead th code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: inherit;
}
.openapi-markdown :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-pre-code);
    background-color: var(--tw-prose-pre-bg);
    overflow-x: auto;
    font-weight: 400;
    font-size: 0.875em;
    line-height: 1.7142857;
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
    border-radius: 0.375rem;
    padding-top: 0.8571429em;
    padding-right: 1.1428571em;
    padding-bottom: 0.8571429em;
    padding-left: 1.1428571em;
}
.openapi-markdown :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    background-color: transparent;
    border-width: 0;
    border-radius: 0;
    padding: 0;
    font-weight: inherit;
    color: inherit;
    font-size: inherit;
    font-family: inherit;
    line-height: inherit;
}
.openapi-markdown :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
    content: none;
}
.openapi-markdown :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
    content: none;
}
.openapi-markdown :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    width: 100%;
    table-layout: auto;
    text-align: left;
    margin-top: 2em;
    margin-bottom: 2em;
    font-size: 0.875em;
    line-height: 1.7142857;
}
.openapi-markdown :where(thead):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    border-bottom-width: 1px;
    border-bottom-color: var(--tw-prose-th-borders);
}
.openapi-markdown :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    vertical-align: bottom;
    padding-right: 0.5714286em;
    padding-bottom: 0.5714286em;
    padding-left: 0.5714286em;
}
.openapi-markdown :where(tbody tr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    border-bottom-width: 1px;
    border-bottom-color: var(--tw-prose-td-borders);
}
.openapi-markdown :where(tbody tr:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    border-bottom-width: 0;
}
.openapi-markdown :where(tbody td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    vertical-align: baseline;
}
.openapi-markdown :where(tfoot):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    border-top-width: 1px;
    border-top-color: var(--tw-prose-th-borders);
}
.openapi-markdown :where(tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    vertical-align: top;
}
.openapi-markdown :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}
.openapi-markdown :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: var(--tw-prose-captions);
    font-size: 0.875em;
    line-height: 1.4285714;
    margin-top: 0.8571429em;
}
.openapi-markdown {
    --tw-prose-body: #374151;
    --tw-prose-headings: #111827;
    --tw-prose-lead: #4b5563;
    --tw-prose-links: #111827;
    --tw-prose-bold: #111827;
    --tw-prose-counters: #6b7280;
    --tw-prose-bullets: #d1d5db;
    --tw-prose-hr: #e5e7eb;
    --tw-prose-quotes: #111827;
    --tw-prose-quote-borders: #e5e7eb;
    --tw-prose-captions: #6b7280;
    --tw-prose-kbd: #111827;
    --tw-prose-kbd-shadows: 17 24 39;
    --tw-prose-code: #111827;
    --tw-prose-pre-code: #e5e7eb;
    --tw-prose-pre-bg: #1f2937;
    --tw-prose-th-borders: #d1d5db;
    --tw-prose-td-borders: #e5e7eb;
    --tw-prose-invert-body: #d1d5db;
    --tw-prose-invert-headings: #fff;
    --tw-prose-invert-lead: #9ca3af;
    --tw-prose-invert-links: #fff;
    --tw-prose-invert-bold: #fff;
    --tw-prose-invert-counters: #9ca3af;
    --tw-prose-invert-bullets: #4b5563;
    --tw-prose-invert-hr: #374151;
    --tw-prose-invert-quotes: #f3f4f6;
    --tw-prose-invert-quote-borders: #374151;
    --tw-prose-invert-captions: #9ca3af;
    --tw-prose-invert-kbd: #fff;
    --tw-prose-invert-kbd-shadows: 255 255 255;
    --tw-prose-invert-code: #fff;
    --tw-prose-invert-pre-code: #d1d5db;
    --tw-prose-invert-pre-bg: rgb(0 0 0 / 50%);
    --tw-prose-invert-th-borders: #4b5563;
    --tw-prose-invert-td-borders: #374151;
    font-size: 1rem;
    line-height: 1.75;
}
.openapi-markdown :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
    margin-bottom: 0;
}
.openapi-markdown :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
}
.openapi-markdown :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5em;
    margin-bottom: 0.5em;
}
.openapi-markdown :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.375em;
}
.openapi-markdown :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0.375em;
}
.openapi-markdown :where(.prose > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.75em;
    margin-bottom: 0.75em;
}
.openapi-markdown :where(.prose > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
}
.openapi-markdown :where(.prose > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.25em;
}
.openapi-markdown :where(.prose > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
}
.openapi-markdown :where(.prose > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 1.25em;
}
.openapi-markdown :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.75em;
    margin-bottom: 0.75em;
}
.openapi-markdown :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
}
.openapi-markdown :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0.5em;
    padding-left: 1.625em;
}
.openapi-markdown :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.openapi-markdown :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.openapi-markdown :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.openapi-markdown :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.openapi-markdown :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}
.openapi-markdown :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}
.openapi-markdown :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-top: 0.5714286em;
    padding-right: 0.5714286em;
    padding-bottom: 0.5714286em;
    padding-left: 0.5714286em;
}
.openapi-markdown :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-left: 0;
}
.openapi-markdown :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    padding-right: 0;
}
.openapi-markdown :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
}
.openapi-markdown :where(.prose > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-top: 0;
}
.openapi-markdown :where(.prose > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-bottom: 0;
}
.openapi-markdown {
    max-width: none;
    white-space: normal;
}
:is(:where(.dark) .openapi-markdown) {
    --tw-prose-body: var(--tw-prose-invert-body);
    --tw-prose-headings: var(--tw-prose-invert-headings);
    --tw-prose-lead: var(--tw-prose-invert-lead);
    --tw-prose-links: var(--tw-prose-invert-links);
    --tw-prose-bold: var(--tw-prose-invert-bold);
    --tw-prose-counters: var(--tw-prose-invert-counters);
    --tw-prose-bullets: var(--tw-prose-invert-bullets);
    --tw-prose-hr: var(--tw-prose-invert-hr);
    --tw-prose-quotes: var(--tw-prose-invert-quotes);
    --tw-prose-quote-borders: var(--tw-prose-invert-quote-borders);
    --tw-prose-captions: var(--tw-prose-invert-captions);
    --tw-prose-kbd: var(--tw-prose-invert-kbd);
    --tw-prose-kbd-shadows: var(--tw-prose-invert-kbd-shadows);
    --tw-prose-code: var(--tw-prose-invert-code);
    --tw-prose-pre-code: var(--tw-prose-invert-pre-code);
    --tw-prose-pre-bg: var(--tw-prose-invert-pre-bg);
    --tw-prose-th-borders: var(--tw-prose-invert-th-borders);
    --tw-prose-td-borders: var(--tw-prose-invert-td-borders);
}

.openapi-markdown > *:first-child {
    margin-top: 0px;
}

.openapi-markdown > *:last-child {
    margin-bottom: 0px;
}

/*!********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[11].oneOf[12].use[2]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[11].oneOf[12].use[3]!./src/components/DocumentView/OpenAPI/scalar.css ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************/
.light .scalar-modal-layout,
.light .scalar {
    --scalar-color-1: color-mix(
        in srgb,
        rgb(var(--primary-base-300, 180 180 180)),
        rgb(var(--dark-base, 23 23 23)) 96%
    );
    --scalar-color-2: color-mix(in srgb, var(--scalar-color-1), transparent calc(100% - 100% * 0.72));
    --scalar-color-3: color-mix(in srgb, var(--scalar-color-1), transparent calc(100% - 100% * 0.4));
    --scalar-color-accent: #007d9c;

    --scalar-background-1: rgb(var(--light-base, 255 255 255));
    --scalar-background-2: color-mix(
        in srgb,
        rgb(var(--primary-base-800, 30 30 30)),
        var(--scalar-background-1) 96%
    );
    --scalar-background-3: color-mix(
        in srgb,
        rgb(var(--primary-base-800, 30 30 30)),
        var(--scalar-background-1) 90%
    );
    --scalar-background-accent: #007d9c1f;
    --scalar-code-language-color-supersede: var(--scalar-color-1);
    --scalar-code-languages-background-supersede: var(--scalar-background-1);
    --scalar-border-color: color-mix(
        in srgb,
        var(--scalar-color-1),
        transparent calc(100% - 100% * 0.08)
    );

    --scalar-color-green: #0a6355;
    --scalar-color-red: #dc1b19;
    --scalar-color-yellow: #ffc90d;
    --scalar-color-blue: rgb(var(--primary-color-500, 52 109 219));
    --scalar-color-orange: #ff8d4d;
    --scalar-color-purple: #8250df;

    --scalar-scrollbar-color: rgba(255, 255, 255, 0.24);
    --scalar-scrollbar-color-active: rgba(255, 255, 255, 0.48);

    --scalar-button-1: rgb(49 53 56);
    --scalar-button-1-color: #fff;
    --scalar-button-1-hover: rgb(28 31 33);
}
.dark .scalar-modal-layout,
.dark .scalar {
    --scalar-color-1: color-mix(
        in srgb,
        rgb(var(--primary-base-700, 70 70 70)),
        rgb(var(--light-base, 255 255 255)) 100%
    );
    --scalar-color-2: color-mix(in srgb, var(--scalar-color-1), transparent calc(100% - 100% * 0.64));
    --scalar-color-3: color-mix(in srgb, var(--scalar-color-1), transparent calc(100% - 100% * 0.4));
    --scalar-color-accent: #50b7e0;

    --scalar-background-1: rgb(var(--dark-base, 22 22 22));
    --scalar-background-2: color-mix(
        in srgb,
        rgb(var(--primary-base-200, 200 200 200)),
        var(--scalar-background-1) 92%
    );
    --scalar-background-3: color-mix(
        in srgb,
        rgb(var(--primary-base-200, 200 200 200)),
        var(--scalar-background-1) 88%
    );
    --scalar-background-accent: #8ab4f81f;
    --scalar-code-languages-background-supersede: var(--scalar-background-1);
    --scalar-border-color: color-mix(
        in srgb,
        var(--scalar-color-1),
        transparent calc(100% - 100% * 0.08)
    );

    --scalar-color-green: #56b6c2;
    --scalar-color-red: rgb(245 124 97);
    --scalar-color-yellow: #edbe20;
    --scalar-color-blue: rgb(var(--primary-color-400, 93 138 226));
    --scalar-color-orange: #d19a66;
    --scalar-color-purple: #5203d1;

    --scalar-scrollbar-color: rgba(0, 0, 0, 0.18);
    --scalar-scrollbar-color-active: rgba(0, 0, 0, 0.36);

    --scalar-button-1: #f6f6f6;
    --scalar-button-1-color: #000;
    --scalar-button-1-hover: #e7e7e7;
}
.scalar-modal-layout,
.scalar {
    --scalar-font: initial;
    --scalar-font-code: var(--font-mono);

    --scalar-paragraph: 16px;
    --scalar-small: 14px;
    --scalar-mini: 13px;
    --scalar-micro: 12px;

    --scalar-bold: 600;
    --scalar-semibold: 500;
    --scalar-regular: 400;

    /* Font sizes for interactive applications (not rendered text content) */
    --scalar-font-size-1: 24px;
    --scalar-font-size-2: 16px;
    --scalar-font-size-3: 14px;
    --scalar-font-size-4: 13px;
    --scalar-font-size-5: 12px;

    --scalar-line-height-1: 32px;
    --scalar-line-height-2: 24px;
    --scalar-line-height-3: 20px;
    --scalar-line-height-4: 18px;
    --scalar-line-height-5: 16px;

    --scalar-app-header-height: 35px;
}
.scalar input::-moz-placeholder {
    color: var(--scalar-color-3);
}
.scalar input::placeholder {
    color: var(--scalar-color-3);
}
.scalar .scalar-app-header {
    width: 100%;
    z-index: 1000;
    padding: 6px 12px 6px 12px;
    border-radius: 0.25rem 0.25rem 0 0;
    font-size: 14px;
    height: var(--scalar-app-header-height);
    display: flex;
    align-items: center;
    flex-shrink: 0;
    gap: 6px;
}
.scalar .scalar-api-client {
    max-height: calc(100dvh - (100px + var(--scalar-app-header-height))) !important;
    border-radius: 8px;
}
.scalar-api-client__close {
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    border: none;
    outline: none;
    display: flex;
    align-items: center;
    background: transparent;
    color: var(--scalar-color-1);
    font-size: var(--scalar-small);
    font-weight: var(--scalar-semibold);
}
.scalar-api-client__close:hover {
    cursor: pointer;
}
.scalar .scalar-app {
    background: var(--scalar-background-3);
    height: calc(100dvh - 100px);
    max-width: 1280px;
    width: 100%;
    margin: auto;
    opacity: 0;
    animation: scalarapiclientfadein 0.35s forwards;
    z-index: 1002;
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
}
@keyframes scalarapiclientfadein {
    from {
        transform: translate3d(0, 20px, 0) scale(0.985);
        opacity: 0;
    }
    to {
        transform: translate3d(0, 0, 0) scale(1);
        opacity: 1;
    }
}
.scalar .scalar-app-exit {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.62);
    transition: all 0.3s ease-in-out;
    z-index: 1000;
    cursor: pointer;
    animation: scalardrawerexitfadein 0.35s forwards;
}
.scalar .scalar-app-exit:before {
    content: '\00d7';
    font-family: sans-serif;
    position: absolute;
    top: 0;
    right: 0;
    font-size: 30px;
    font-weight: 100;
    line-height: 50px;
    right: 12px;
    text-align: center;
    color: white;
    opacity: 0.6;
}
.scalar .scalar-app-exit:hover:before {
    opacity: 1;
}
@keyframes scalardrawerexitfadein {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}
.scalar-container {
    overflow: hidden;
    visibility: visible;
    position: fixed;
    bottom: 0;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1001;
    display: flex;
    align-items: center;
    justify-content: center;
}

.scalar .url-form-input {
    min-height: auto !important;
}

.scalar .scalar-container {
    line-height: normal;
}
.scalar .scalar-app-header span {
    color: var(--scalar-color-3);
}
.scalar .scalar-app-header a {
    color: var(--scalar-color-1);
}
.scalar .scalar-app-header a:hover {
    text-decoration: underline;
}
.scalar-activate {
    width: -moz-fit-content;
    width: fit-content;
    margin: 0px 0.75rem 0.75rem auto;
    line-height: 24px;
    cursor: pointer;
    font-size: 0.875rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 6px;
}
.scalar-activate-button {
    display: flex;
    gap: 6px;
    align-items: center;
    color: var(--scalar-color-blue);
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    outline: none;
    border: none;
    background: transparent;
    padding: 0 0.5rem;
}
.scalar-activate:hover .scalar-activate-button {
    background: var(--scalar-background-3);
    border-radius: 3px;
}

.scalar-app-loading {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
}
.scalar .request-method {
    white-space: nowrap;
}
/* Use :where to lower specificity to 0 */
.scalar .custom-scroll {
    overflow-y: auto;
    scrollbar-color: transparent transparent;
    scrollbar-width: thin;
    -webkit-overflow-scrolling: touch;
}
@supports (-moz-appearance: none) {
    .scalar .custom-scroll {
        padding-right: 12px;
    }
}
.scalar .custom-scroll:hover {
    scrollbar-color: rgba(0, 0, 0, 0.24) transparent;
}
.dark .scalar .custom-scroll:hover {
    scrollbar-color: rgba(255, 255, 255, 0.24) transparent;
}
.scalar .custom-scroll:hover::-webkit-scrollbar-thumb {
    background: var(--scalar-scrollbar-color, var(--default-theme-scrollbar-color));
    background-clip: content-box;
    border: 3px solid transparent;
}
.scalar .custom-scroll::-webkit-scrollbar-thumb:active {
    background: var(--scalar-scrollbar-color-active, var(--default-theme-scrollbar-color-active));
    background-clip: content-box;
    border: 3px solid transparent;
}
.scalar .custom-scroll::-webkit-scrollbar-corner {
    background: transparent;
}
.scalar .custom-scroll::-webkit-scrollbar {
    height: 12px;
    width: 12px;
}
.scalar .custom-scroll::-webkit-scrollbar-track {
    background: transparent;
}
.scalar .custom-scroll::-webkit-scrollbar-thumb {
    border-radius: 20px;
    background: transparent;
    background-clip: content-box;
    border: 3px solid transparent;
}
@media (pointer: coarse) {
    .scalar .custom-scroll {
        padding-right: 12px;
    }
}
/*!**********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[11].oneOf[7].use[2]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[11].oneOf[7].use[3]!./src/components/DocumentView/Table/table.module.css ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************/
/* Hide it on browsers (firefox / safari) that do not support it */
.table_progressOpacitySharp__gzaM5 {
    display: none;
}

@supports (animation-timeline: scroll()) {
    .table_progressContainer__A4v1T {
        scroll-timeline-name: --squareTimeline;
        scroll-timeline-axis: x;
    }

    .table_progressOpacity__vIKGt {
        animation-name: table_opacityProgress__S08Gs;
        animation-duration: 1ms;
        animation-direction: alternate;
        animation-timeline: --squareTimeline;
        animation-timing-function: linear;
    }

    .table_progressOpacitySharp__gzaM5 {
        display: grid;
        opacity: 0;
        animation-name: table_opacityProgressSharp__2hfJ1;
        animation-duration: 1ms;
        animation-direction: alternate;
        animation-timeline: --squareTimeline;
        animation-timing-function: linear;
    }

    .table_strokeOpacityProgressInverted__H5kWC {
        animation-name: table_strokeOpacityProgressInverted__H5kWC;
        animation-duration: 1ms;
        animation-direction: alternate;
        animation-timeline: --squareTimeline;
        animation-timing-function: linear;
    }

    .table_progressSvg__pg3ZZ {
        animation-name: table_svgProgress__Dqehn;
        animation-duration: 1ms;
        animation-direction: alternate;
        animation-timeline: --squareTimeline;
        animation-timing-function: linear;
    }

    @keyframes table_opacityProgress__S08Gs {
        0%,
        50% {
            opacity: 1;
        }
        100% {
            opacity: 0;
        }
    }

    @keyframes table_opacityProgressSharp__2hfJ1 {
        0%,
        98% {
            opacity: 1;
        }
        100% {
            opacity: 0;
        }
    }

    @keyframes table_strokeOpacityProgressInverted__H5kWC {
        0%,
        10% {
            stroke-opacity: 0;
        }
        30% {
            stroke-opacity: 0.88;
        }
        100% {
            stroke-opacity: 0.88;
        }
    }

    @keyframes table_svgProgress__Dqehn {
        from {
            stroke-dasharray: 0 100;
        }
        to {
            stroke-dasharray: 100 100;
        }
    }
}

/*!*************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[11].oneOf[7].use[2]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[11].oneOf[7].use[3]!./src/components/utils/ZoomImage.module.css ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************/
html:has(.ZoomImage_zoomModal__VzJS3) {
    overflow: hidden;
}

.ZoomImage_zoomImg__teSyL {
    cursor: zoom-in;
}

.ZoomImage_zoomImageActive__C33dt {
    view-transition-name: zoom-image;
}

.ZoomImage_zoomModal__VzJS3 {
}

.ZoomImage_zoomModal__VzJS3 img {
    view-transition-name: zoom-image;
    cursor: zoom-out;
}

